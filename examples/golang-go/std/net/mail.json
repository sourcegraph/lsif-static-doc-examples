{
  "pathID": "/std/net/mail",
  "documentation": {
    "identifier": "mail",
    "newPage": true,
    "searchKey": "std/net/mail",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package mail"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package mail implements parsing of mail messages. \n\nFor the most part, this package follows the syntax as specified by RFC 5322 and extended by RFC 6532. Notable divergences: \n\n```\n* Obsolete address formats are not parsed, including addresses with\n  embedded route information.\n* The full range of spacing (the CFWS syntax element) is not supported,\n  such as breaking addresses across lines.\n* No unicode normalization is performed.\n* The special characters ()[]:;@\\, are allowed to appear unquoted in names.\n\n```\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/net/mail#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/net/mail#debug",
              "documentation": {
                "identifier": "debug",
                "newPage": false,
                "searchKey": "mail.debug",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var debug"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar debug = debugT(false)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#dateLayoutsBuildOnce",
              "documentation": {
                "identifier": "dateLayoutsBuildOnce",
                "newPage": false,
                "searchKey": "mail.dateLayoutsBuildOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var dateLayoutsBuildOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dateLayoutsBuildOnce sync.Once\n```\n\nLayouts suitable for passing to time.Parse. These are tried in order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#dateLayouts",
              "documentation": {
                "identifier": "dateLayouts",
                "newPage": false,
                "searchKey": "mail.dateLayouts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var dateLayouts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dateLayouts []string\n```\n\nLayouts suitable for passing to time.Parse. These are tried in order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#ErrHeaderNotPresent",
              "documentation": {
                "identifier": "ErrHeaderNotPresent",
                "newPage": false,
                "searchKey": "mail.ErrHeaderNotPresent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrHeaderNotPresent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrHeaderNotPresent = errors.New(\"mail: header not in message\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#rfc2047Decoder",
              "documentation": {
                "identifier": "rfc2047Decoder",
                "newPage": false,
                "searchKey": "mail.rfc2047Decoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rfc2047Decoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rfc2047Decoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#parseTests",
              "documentation": {
                "identifier": "parseTests",
                "newPage": false,
                "searchKey": "mail.parseTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/net/mail#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/net/mail#debugT",
              "documentation": {
                "identifier": "debugT",
                "newPage": false,
                "searchKey": "mail.debugT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type debugT bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype debugT bool\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#debugT.Printf",
                    "documentation": {
                      "identifier": "debugT.Printf",
                      "newPage": false,
                      "searchKey": "mail.debugT.Printf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d debugT) Printf(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d debugT) Printf(format string, args ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#Message",
              "documentation": {
                "identifier": "Message",
                "newPage": false,
                "searchKey": "mail.Message",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Message struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Message struct {\n\tHeader Header\n\tBody   io.Reader\n}\n```\n\nA Message represents a parsed mail message. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#ReadMessage",
                    "documentation": {
                      "identifier": "ReadMessage",
                      "newPage": false,
                      "searchKey": "mail.ReadMessage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ReadMessage(r io.Reader) (msg *Message, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ReadMessage(r io.Reader) (msg *Message, err error)\n```\n\nReadMessage reads a message from r. The headers are parsed, and the body of the message will be available for reading from msg.Body. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#Header",
              "documentation": {
                "identifier": "Header",
                "newPage": false,
                "searchKey": "mail.Header",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Header map[string][]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Header map[string][]string\n```\n\nA Header represents the key-value pairs in a mail message header. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#Header.Get",
                    "documentation": {
                      "identifier": "Header.Get",
                      "newPage": false,
                      "searchKey": "mail.Header.Get",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h Header) Get(key string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h Header) Get(key string) string\n```\n\nGet gets the first value associated with the given key. It is case insensitive; CanonicalMIMEHeaderKey is used to canonicalize the provided key. If there are no values associated with the key, Get returns \"\". To access multiple values of a key, or to use non-canonical keys, access the map directly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#Header.Date",
                    "documentation": {
                      "identifier": "Header.Date",
                      "newPage": false,
                      "searchKey": "mail.Header.Date",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h Header) Date() (time.Time, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h Header) Date() (time.Time, error)\n```\n\nDate parses the Date header field. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#Header.AddressList",
                    "documentation": {
                      "identifier": "Header.AddressList",
                      "newPage": false,
                      "searchKey": "mail.Header.AddressList",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h Header) AddressList(key string) ([]*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h Header) AddressList(key string) ([]*Address, error)\n```\n\nAddressList parses the named header field as a list of addresses. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#Address",
              "documentation": {
                "identifier": "Address",
                "newPage": false,
                "searchKey": "mail.Address",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Address struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Address struct {\n\tName    string // Proper name; may be empty.\n\tAddress string // user@domain\n}\n```\n\nAddress represents a single mail address. An address such as \"Barry Gibbs <bg@example.com>\" is represented as Address{Name: \"Barry Gibbs\", Address: \"bg@example.com\"}. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#ParseAddress",
                    "documentation": {
                      "identifier": "ParseAddress",
                      "newPage": false,
                      "searchKey": "mail.ParseAddress",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseAddress(address string) (*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseAddress(address string) (*Address, error)\n```\n\nParseAddress parses a single RFC 5322 address, e.g. \"Barry Gibbs <bg@example.com>\" \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#Address.String",
                    "documentation": {
                      "identifier": "Address.String",
                      "newPage": false,
                      "searchKey": "mail.Address.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *Address) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *Address) String() string\n```\n\nString formats the address as a valid RFC 5322 address. If the address's name contains non-ASCII characters the name will be rendered according to RFC 2047. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#AddressParser",
              "documentation": {
                "identifier": "AddressParser",
                "newPage": false,
                "searchKey": "mail.AddressParser",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AddressParser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AddressParser struct {\n\t// WordDecoder optionally specifies a decoder for RFC 2047 encoded-words.\n\tWordDecoder *mime.WordDecoder\n}\n```\n\nAn AddressParser is an RFC 5322 address parser. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#AddressParser.Parse",
                    "documentation": {
                      "identifier": "AddressParser.Parse",
                      "newPage": false,
                      "searchKey": "mail.AddressParser.Parse",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *AddressParser) Parse(address string) (*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *AddressParser) Parse(address string) (*Address, error)\n```\n\nParse parses a single RFC 5322 address of the form \"Gogh Fir <gf@example.com>\" or \"foo@example.com\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#AddressParser.ParseList",
                    "documentation": {
                      "identifier": "AddressParser.ParseList",
                      "newPage": false,
                      "searchKey": "mail.AddressParser.ParseList",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *AddressParser) ParseList(list string) ([]*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *AddressParser) ParseList(list string) ([]*Address, error)\n```\n\nParseList parses the given string as a list of comma-separated addresses of the form \"Gogh Fir <gf@example.com>\" or \"foo@example.com\". \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#addrParser",
              "documentation": {
                "identifier": "addrParser",
                "newPage": false,
                "searchKey": "mail.addrParser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type addrParser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype addrParser struct {\n\ts   string\n\tdec *mime.WordDecoder // may be nil\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.parseAddressList",
                    "documentation": {
                      "identifier": "addrParser.parseAddressList",
                      "newPage": false,
                      "searchKey": "mail.addrParser.parseAddressList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) parseAddressList() ([]*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) parseAddressList() ([]*Address, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.parseSingleAddress",
                    "documentation": {
                      "identifier": "addrParser.parseSingleAddress",
                      "newPage": false,
                      "searchKey": "mail.addrParser.parseSingleAddress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) parseSingleAddress() (*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) parseSingleAddress() (*Address, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.parseAddress",
                    "documentation": {
                      "identifier": "addrParser.parseAddress",
                      "newPage": false,
                      "searchKey": "mail.addrParser.parseAddress",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) parseAddress(handleGroup bool) ([]*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) parseAddress(handleGroup bool) ([]*Address, error)\n```\n\nparseAddress parses a single RFC 5322 address at the start of p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumeGroupList",
                    "documentation": {
                      "identifier": "addrParser.consumeGroupList",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumeGroupList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumeGroupList() ([]*Address, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumeGroupList() ([]*Address, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumeAddrSpec",
                    "documentation": {
                      "identifier": "addrParser.consumeAddrSpec",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumeAddrSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumeAddrSpec() (spec string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumeAddrSpec() (spec string, err error)\n```\n\nconsumeAddrSpec parses a single RFC 5322 addr-spec at the start of p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumePhrase",
                    "documentation": {
                      "identifier": "addrParser.consumePhrase",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumePhrase",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumePhrase() (phrase string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumePhrase() (phrase string, err error)\n```\n\nconsumePhrase parses the RFC 5322 phrase at the start of p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumeQuotedString",
                    "documentation": {
                      "identifier": "addrParser.consumeQuotedString",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumeQuotedString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumeQuotedString() (qs string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumeQuotedString() (qs string, err error)\n```\n\nconsumeQuotedString parses the quoted string at the start of p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumeAtom",
                    "documentation": {
                      "identifier": "addrParser.consumeAtom",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumeAtom",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumeAtom(dot bool, permissive bool) (atom string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumeAtom(dot bool, permissive bool) (atom string, err error)\n```\n\nconsumeAtom parses an RFC 5322 atom at the start of p. If dot is true, consumeAtom parses an RFC 5322 dot-atom instead. If permissive is true, consumeAtom will not fail on: - leading/trailing/double dots in the atom (see golang.org/issue/4938) - special characters (RFC 5322 3.2.3) except '<', '>', ':' and '\"' (see golang.org/issue/21018) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumeDisplayNameComment",
                    "documentation": {
                      "identifier": "addrParser.consumeDisplayNameComment",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumeDisplayNameComment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumeDisplayNameComment() (string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumeDisplayNameComment() (string, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consume",
                    "documentation": {
                      "identifier": "addrParser.consume",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consume",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consume(c byte) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consume(c byte) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.skipSpace",
                    "documentation": {
                      "identifier": "addrParser.skipSpace",
                      "newPage": false,
                      "searchKey": "mail.addrParser.skipSpace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) skipSpace()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) skipSpace()\n```\n\nskipSpace skips the leading space and tab characters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.peek",
                    "documentation": {
                      "identifier": "addrParser.peek",
                      "newPage": false,
                      "searchKey": "mail.addrParser.peek",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) peek() byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) peek() byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.empty",
                    "documentation": {
                      "identifier": "addrParser.empty",
                      "newPage": false,
                      "searchKey": "mail.addrParser.empty",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) empty() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) empty() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.len",
                    "documentation": {
                      "identifier": "addrParser.len",
                      "newPage": false,
                      "searchKey": "mail.addrParser.len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.skipCFWS",
                    "documentation": {
                      "identifier": "addrParser.skipCFWS",
                      "newPage": false,
                      "searchKey": "mail.addrParser.skipCFWS",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) skipCFWS() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) skipCFWS() bool\n```\n\nskipCFWS skips CFWS as defined in RFC5322. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.consumeComment",
                    "documentation": {
                      "identifier": "addrParser.consumeComment",
                      "newPage": false,
                      "searchKey": "mail.addrParser.consumeComment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) consumeComment() (string, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) consumeComment() (string, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/net/mail#addrParser.decodeRFC2047Word",
                    "documentation": {
                      "identifier": "addrParser.decodeRFC2047Word",
                      "newPage": false,
                      "searchKey": "mail.addrParser.decodeRFC2047Word",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *addrParser) decodeRFC2047Word(s string) (word string, isEncoded bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *addrParser) decodeRFC2047Word(s string) (word string, isEncoded bool, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#charsetError",
              "documentation": {
                "identifier": "charsetError",
                "newPage": false,
                "searchKey": "mail.charsetError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type charsetError string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype charsetError string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/net/mail#charsetError.Error",
                    "documentation": {
                      "identifier": "charsetError.Error",
                      "newPage": false,
                      "searchKey": "mail.charsetError.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e charsetError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e charsetError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/net/mail#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/net/mail#buildDateLayouts",
              "documentation": {
                "identifier": "buildDateLayouts",
                "newPage": false,
                "searchKey": "mail.buildDateLayouts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func buildDateLayouts()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc buildDateLayouts()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#ParseDate",
              "documentation": {
                "identifier": "ParseDate",
                "newPage": false,
                "searchKey": "mail.ParseDate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseDate(date string) (time.Time, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseDate(date string) (time.Time, error)\n```\n\nParseDate parses an RFC 5322 date string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#ParseAddressList",
              "documentation": {
                "identifier": "ParseAddressList",
                "newPage": false,
                "searchKey": "mail.ParseAddressList",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseAddressList(list string) ([]*Address, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseAddressList(list string) ([]*Address, error)\n```\n\nParseAddressList parses the given string as a list of addresses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#isAtext",
              "documentation": {
                "identifier": "isAtext",
                "newPage": false,
                "searchKey": "mail.isAtext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isAtext(r rune, dot, permissive bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isAtext(r rune, dot, permissive bool) bool\n```\n\nisAtext reports whether r is an RFC 5322 atext character. If dot is true, period is included. If permissive is true, RFC 5322 3.2.3 specials is included, except '<', '>', ':' and '\"'. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#isQtext",
              "documentation": {
                "identifier": "isQtext",
                "newPage": false,
                "searchKey": "mail.isQtext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isQtext(r rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isQtext(r rune) bool\n```\n\nisQtext reports whether r is an RFC 5322 qtext character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#quoteString",
              "documentation": {
                "identifier": "quoteString",
                "newPage": false,
                "searchKey": "mail.quoteString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func quoteString(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc quoteString(s string) string\n```\n\nquoteString renders a string as an RFC 5322 quoted-string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#isVchar",
              "documentation": {
                "identifier": "isVchar",
                "newPage": false,
                "searchKey": "mail.isVchar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isVchar(r rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isVchar(r rune) bool\n```\n\nisVchar reports whether r is an RFC 5322 VCHAR character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#isMultibyte",
              "documentation": {
                "identifier": "isMultibyte",
                "newPage": false,
                "searchKey": "mail.isMultibyte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isMultibyte(r rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isMultibyte(r rune) bool\n```\n\nisMultibyte reports whether r is a multi-byte UTF-8 character as supported by RFC 6532 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#isWSP",
              "documentation": {
                "identifier": "isWSP",
                "newPage": false,
                "searchKey": "mail.isWSP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isWSP(r rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isWSP(r rune) bool\n```\n\nisWSP reports whether r is a WSP (white space). WSP is a space or horizontal tab (RFC 5234 Appendix B). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestParsing",
              "documentation": {
                "identifier": "TestParsing",
                "newPage": false,
                "searchKey": "mail.TestParsing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParsing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#headerEq",
              "documentation": {
                "identifier": "headerEq",
                "newPage": false,
                "searchKey": "mail.headerEq",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func headerEq(a, b Header) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc headerEq(a, b Header) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestDateParsing",
              "documentation": {
                "identifier": "TestDateParsing",
                "newPage": false,
                "searchKey": "mail.TestDateParsing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDateParsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDateParsing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestDateParsingCFWS",
              "documentation": {
                "identifier": "TestDateParsingCFWS",
                "newPage": false,
                "searchKey": "mail.TestDateParsingCFWS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDateParsingCFWS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDateParsingCFWS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestAddressParsingError",
              "documentation": {
                "identifier": "TestAddressParsingError",
                "newPage": false,
                "searchKey": "mail.TestAddressParsingError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddressParsingError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddressParsingError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestAddressParsing",
              "documentation": {
                "identifier": "TestAddressParsing",
                "newPage": false,
                "searchKey": "mail.TestAddressParsing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddressParsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddressParsing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestAddressParser",
              "documentation": {
                "identifier": "TestAddressParser",
                "newPage": false,
                "searchKey": "mail.TestAddressParser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddressParser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddressParser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestAddressString",
              "documentation": {
                "identifier": "TestAddressString",
                "newPage": false,
                "searchKey": "mail.TestAddressString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddressString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddressString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestAddressParsingAndFormatting",
              "documentation": {
                "identifier": "TestAddressParsingAndFormatting",
                "newPage": false,
                "searchKey": "mail.TestAddressParsingAndFormatting",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddressParsingAndFormatting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddressParsingAndFormatting(t *testing.T)\n```\n\nCheck if all valid addresses can be parsed, formatted and parsed again \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestAddressFormattingAndParsing",
              "documentation": {
                "identifier": "TestAddressFormattingAndParsing",
                "newPage": false,
                "searchKey": "mail.TestAddressFormattingAndParsing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddressFormattingAndParsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddressFormattingAndParsing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/net/mail#TestEmptyAddress",
              "documentation": {
                "identifier": "TestEmptyAddress",
                "newPage": false,
                "searchKey": "mail.TestEmptyAddress",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyAddress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyAddress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
