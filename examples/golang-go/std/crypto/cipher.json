{
  "pathID": "/std/crypto/cipher",
  "documentation": {
    "identifier": "cipher",
    "newPage": true,
    "searchKey": "std/crypto/cipher",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package cipher"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package cipher implements standard block cipher modes that can be wrapped around low-level block cipher implementations. See [https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html](https://csrc.nist.gov/groups/ST/toolkit/BCM/current_modes.html) and NIST Special Publication 800-38A. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/crypto/cipher#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/crypto/cipher#streamBufferSize",
              "documentation": {
                "identifier": "streamBufferSize",
                "newPage": false,
                "searchKey": "cipher.streamBufferSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const streamBufferSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst streamBufferSize = 512\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmBlockSize",
              "documentation": {
                "identifier": "gcmBlockSize",
                "newPage": false,
                "searchKey": "cipher.gcmBlockSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gcmBlockSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gcmBlockSize = 16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmTagSize",
              "documentation": {
                "identifier": "gcmTagSize",
                "newPage": false,
                "searchKey": "cipher.gcmTagSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gcmTagSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gcmTagSize = 16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmMinimumTagSize",
              "documentation": {
                "identifier": "gcmMinimumTagSize",
                "newPage": false,
                "searchKey": "cipher.gcmMinimumTagSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gcmMinimumTagSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gcmMinimumTagSize = 12 // NIST SP 800-38D recommends tags with 12 or more bytes.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmStandardNonceSize",
              "documentation": {
                "identifier": "gcmStandardNonceSize",
                "newPage": false,
                "searchKey": "cipher.gcmStandardNonceSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gcmStandardNonceSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gcmStandardNonceSize = 12\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/crypto/cipher#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/crypto/cipher#errOpen",
              "documentation": {
                "identifier": "errOpen",
                "newPage": false,
                "searchKey": "cipher.errOpen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errOpen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errOpen = errors.New(\"cipher: message authentication failed\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmReductionTable",
              "documentation": {
                "identifier": "gcmReductionTable",
                "newPage": false,
                "searchKey": "cipher.gcmReductionTable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var gcmReductionTable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gcmReductionTable = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#XorBytes",
              "documentation": {
                "identifier": "XorBytes",
                "newPage": false,
                "searchKey": "cipher.XorBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var XorBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar XorBytes = xorBytes\n```\n\nExport internal functions for testing. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/crypto/cipher#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/crypto/cipher#cbc",
              "documentation": {
                "identifier": "cbc",
                "newPage": false,
                "searchKey": "cipher.cbc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cbc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cbc struct {\n\tb         Block\n\tblockSize int\n\tiv        []byte\n\ttmp       []byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#newCBC",
                    "documentation": {
                      "identifier": "newCBC",
                      "newPage": false,
                      "searchKey": "cipher.newCBC",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newCBC(b Block, iv []byte) *cbc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newCBC(b Block, iv []byte) *cbc\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#cbcEncrypter",
              "documentation": {
                "identifier": "cbcEncrypter",
                "newPage": false,
                "searchKey": "cipher.cbcEncrypter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cbcEncrypter cipher.cbc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cbcEncrypter cbc\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cbcEncrypter.BlockSize",
                    "documentation": {
                      "identifier": "cbcEncrypter.BlockSize",
                      "newPage": false,
                      "searchKey": "cipher.cbcEncrypter.BlockSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cbcEncrypter) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cbcEncrypter) BlockSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cbcEncrypter.CryptBlocks",
                    "documentation": {
                      "identifier": "cbcEncrypter.CryptBlocks",
                      "newPage": false,
                      "searchKey": "cipher.cbcEncrypter.CryptBlocks",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cbcEncrypter) CryptBlocks(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cbcEncrypter) CryptBlocks(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cbcEncrypter.SetIV",
                    "documentation": {
                      "identifier": "cbcEncrypter.SetIV",
                      "newPage": false,
                      "searchKey": "cipher.cbcEncrypter.SetIV",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cbcEncrypter) SetIV(iv []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cbcEncrypter) SetIV(iv []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#cbcEncAble",
              "documentation": {
                "identifier": "cbcEncAble",
                "newPage": false,
                "searchKey": "cipher.cbcEncAble",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cbcEncAble interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cbcEncAble interface {\n\tNewCBCEncrypter(iv []byte) BlockMode\n}\n```\n\ncbcEncAble is an interface implemented by ciphers that have a specific optimized implementation of CBC encryption, like crypto/aes. NewCBCEncrypter will check for this interface and return the specific BlockMode if found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#cbcDecrypter",
              "documentation": {
                "identifier": "cbcDecrypter",
                "newPage": false,
                "searchKey": "cipher.cbcDecrypter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cbcDecrypter cipher.cbc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cbcDecrypter cbc\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cbcDecrypter.BlockSize",
                    "documentation": {
                      "identifier": "cbcDecrypter.BlockSize",
                      "newPage": false,
                      "searchKey": "cipher.cbcDecrypter.BlockSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cbcDecrypter) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cbcDecrypter) BlockSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cbcDecrypter.CryptBlocks",
                    "documentation": {
                      "identifier": "cbcDecrypter.CryptBlocks",
                      "newPage": false,
                      "searchKey": "cipher.cbcDecrypter.CryptBlocks",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cbcDecrypter) CryptBlocks(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cbcDecrypter) CryptBlocks(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cbcDecrypter.SetIV",
                    "documentation": {
                      "identifier": "cbcDecrypter.SetIV",
                      "newPage": false,
                      "searchKey": "cipher.cbcDecrypter.SetIV",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cbcDecrypter) SetIV(iv []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cbcDecrypter) SetIV(iv []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#cbcDecAble",
              "documentation": {
                "identifier": "cbcDecAble",
                "newPage": false,
                "searchKey": "cipher.cbcDecAble",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cbcDecAble interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cbcDecAble interface {\n\tNewCBCDecrypter(iv []byte) BlockMode\n}\n```\n\ncbcDecAble is an interface implemented by ciphers that have a specific optimized implementation of CBC decryption, like crypto/aes. NewCBCDecrypter will check for this interface and return the specific BlockMode if found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#cfb",
              "documentation": {
                "identifier": "cfb",
                "newPage": false,
                "searchKey": "cipher.cfb",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cfb struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cfb struct {\n\tb       Block\n\tnext    []byte\n\tout     []byte\n\toutUsed int\n\n\tdecrypt bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#cfb.XORKeyStream",
                    "documentation": {
                      "identifier": "cfb.XORKeyStream",
                      "newPage": false,
                      "searchKey": "cipher.cfb.XORKeyStream",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *cfb) XORKeyStream(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *cfb) XORKeyStream(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#Block",
              "documentation": {
                "identifier": "Block",
                "newPage": false,
                "searchKey": "cipher.Block",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Block interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Block interface {\n\t// BlockSize returns the cipher's block size.\n\tBlockSize() int\n\n\t// Encrypt encrypts the first block in src into dst.\n\t// Dst and src must overlap entirely or not at all.\n\tEncrypt(dst, src []byte)\n\n\t// Decrypt decrypts the first block in src into dst.\n\t// Dst and src must overlap entirely or not at all.\n\tDecrypt(dst, src []byte)\n}\n```\n\nA Block represents an implementation of block cipher using a given key. It provides the capability to encrypt or decrypt individual blocks. The mode implementations extend that capability to streams of blocks. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#Stream",
              "documentation": {
                "identifier": "Stream",
                "newPage": false,
                "searchKey": "cipher.Stream",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Stream interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Stream interface {\n\t// XORKeyStream XORs each byte in the given slice with a byte from the\n\t// cipher's key stream. Dst and src must overlap entirely or not at all.\n\t//\n\t// If len(dst) < len(src), XORKeyStream should panic. It is acceptable\n\t// to pass a dst bigger than src, and in that case, XORKeyStream will\n\t// only update dst[:len(src)] and will not touch the rest of dst.\n\t//\n\t// Multiple calls to XORKeyStream behave as if the concatenation of\n\t// the src buffers was passed in a single run. That is, Stream\n\t// maintains state and does not reset at each XORKeyStream call.\n\tXORKeyStream(dst, src []byte)\n}\n```\n\nA Stream represents a stream cipher. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewCFBEncrypter",
                    "documentation": {
                      "identifier": "NewCFBEncrypter",
                      "newPage": false,
                      "searchKey": "cipher.NewCFBEncrypter",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCFBEncrypter(block Block, iv []byte) Stream"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCFBEncrypter(block Block, iv []byte) Stream\n```\n\nNewCFBEncrypter returns a Stream which encrypts with cipher feedback mode, using the given Block. The iv must be the same length as the Block's block size. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewCFBDecrypter",
                    "documentation": {
                      "identifier": "NewCFBDecrypter",
                      "newPage": false,
                      "searchKey": "cipher.NewCFBDecrypter",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCFBDecrypter(block Block, iv []byte) Stream"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCFBDecrypter(block Block, iv []byte) Stream\n```\n\nNewCFBDecrypter returns a Stream which decrypts with cipher feedback mode, using the given Block. The iv must be the same length as the Block's block size. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#newCFB",
                    "documentation": {
                      "identifier": "newCFB",
                      "newPage": false,
                      "searchKey": "cipher.newCFB",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newCFB(block Block, iv []byte, decrypt bool) Stream"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newCFB(block Block, iv []byte, decrypt bool) Stream\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewCTR",
                    "documentation": {
                      "identifier": "NewCTR",
                      "newPage": false,
                      "searchKey": "cipher.NewCTR",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCTR(block Block, iv []byte) Stream"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCTR(block Block, iv []byte) Stream\n```\n\nNewCTR returns a Stream which encrypts/decrypts using the given Block in counter mode. The length of iv must be the same as the Block's block size. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewOFB",
                    "documentation": {
                      "identifier": "NewOFB",
                      "newPage": false,
                      "searchKey": "cipher.NewOFB",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewOFB(b Block, iv []byte) Stream"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewOFB(b Block, iv []byte) Stream\n```\n\nNewOFB returns a Stream that encrypts or decrypts using the block cipher b in output feedback mode. The initialization vector iv's length must be equal to b's block size. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#BlockMode",
              "documentation": {
                "identifier": "BlockMode",
                "newPage": false,
                "searchKey": "cipher.BlockMode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BlockMode interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BlockMode interface {\n\t// BlockSize returns the mode's block size.\n\tBlockSize() int\n\n\t// CryptBlocks encrypts or decrypts a number of blocks. The length of\n\t// src must be a multiple of the block size. Dst and src must overlap\n\t// entirely or not at all.\n\t//\n\t// If len(dst) < len(src), CryptBlocks should panic. It is acceptable\n\t// to pass a dst bigger than src, and in that case, CryptBlocks will\n\t// only update dst[:len(src)] and will not touch the rest of dst.\n\t//\n\t// Multiple calls to CryptBlocks behave as if the concatenation of\n\t// the src buffers was passed in a single run. That is, BlockMode\n\t// maintains state and does not reset at each CryptBlocks call.\n\tCryptBlocks(dst, src []byte)\n}\n```\n\nA BlockMode represents a block cipher running in a block-based mode (CBC, ECB etc). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewCBCEncrypter",
                    "documentation": {
                      "identifier": "NewCBCEncrypter",
                      "newPage": false,
                      "searchKey": "cipher.NewCBCEncrypter",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCBCEncrypter(b Block, iv []byte) BlockMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCBCEncrypter(b Block, iv []byte) BlockMode\n```\n\nNewCBCEncrypter returns a BlockMode which encrypts in cipher block chaining mode, using the given Block. The length of iv must be the same as the Block's block size. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewCBCDecrypter",
                    "documentation": {
                      "identifier": "NewCBCDecrypter",
                      "newPage": false,
                      "searchKey": "cipher.NewCBCDecrypter",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCBCDecrypter(b Block, iv []byte) BlockMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCBCDecrypter(b Block, iv []byte) BlockMode\n```\n\nNewCBCDecrypter returns a BlockMode which decrypts in cipher block chaining mode, using the given Block. The length of iv must be the same as the Block's block size and must match the iv used to encrypt the data. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#ctr",
              "documentation": {
                "identifier": "ctr",
                "newPage": false,
                "searchKey": "cipher.ctr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ctr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ctr struct {\n\tb       Block\n\tctr     []byte\n\tout     []byte\n\toutUsed int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#ctr.refill",
                    "documentation": {
                      "identifier": "ctr.refill",
                      "newPage": false,
                      "searchKey": "cipher.ctr.refill",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ctr) refill()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ctr) refill()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#ctr.XORKeyStream",
                    "documentation": {
                      "identifier": "ctr.XORKeyStream",
                      "newPage": false,
                      "searchKey": "cipher.ctr.XORKeyStream",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ctr) XORKeyStream(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ctr) XORKeyStream(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#ctrAble",
              "documentation": {
                "identifier": "ctrAble",
                "newPage": false,
                "searchKey": "cipher.ctrAble",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ctrAble interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ctrAble interface {\n\tNewCTR(iv []byte) Stream\n}\n```\n\nctrAble is an interface implemented by ciphers that have a specific optimized implementation of CTR, like crypto/aes. NewCTR will check for this interface and return the specific Stream if found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#AEAD",
              "documentation": {
                "identifier": "AEAD",
                "newPage": false,
                "searchKey": "cipher.AEAD",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AEAD interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AEAD interface {\n\t// NonceSize returns the size of the nonce that must be passed to Seal\n\t// and Open.\n\tNonceSize() int\n\n\t// Overhead returns the maximum difference between the lengths of a\n\t// plaintext and its ciphertext.\n\tOverhead() int\n\n\t// Seal encrypts and authenticates plaintext, authenticates the\n\t// additional data and appends the result to dst, returning the updated\n\t// slice. The nonce must be NonceSize() bytes long and unique for all\n\t// time, for a given key.\n\t//\n\t// To reuse plaintext's storage for the encrypted output, use plaintext[:0]\n\t// as dst. Otherwise, the remaining capacity of dst must not overlap plaintext.\n\tSeal(dst, nonce, plaintext, additionalData []byte) []byte\n\n\t// Open decrypts and authenticates ciphertext, authenticates the\n\t// additional data and, if successful, appends the resulting plaintext\n\t// to dst, returning the updated slice. The nonce must be NonceSize()\n\t// bytes long and both it and the additional data must match the\n\t// value passed to Seal.\n\t//\n\t// To reuse ciphertext's storage for the decrypted output, use ciphertext[:0]\n\t// as dst. Otherwise, the remaining capacity of dst must not overlap plaintext.\n\t//\n\t// Even if the function fails, the contents of dst, up to its capacity,\n\t// may be overwritten.\n\tOpen(dst, nonce, ciphertext, additionalData []byte) ([]byte, error)\n}\n```\n\nAEAD is a cipher mode providing authenticated encryption with associated data. For a description of the methodology, see \n\n```\n[https://en.wikipedia.org/wiki/Authenticated_encryption](https://en.wikipedia.org/wiki/Authenticated_encryption)\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewGCM",
                    "documentation": {
                      "identifier": "NewGCM",
                      "newPage": false,
                      "searchKey": "cipher.NewGCM",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGCM(cipher Block) (AEAD, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGCM(cipher Block) (AEAD, error)\n```\n\nNewGCM returns the given 128-bit, block cipher wrapped in Galois Counter Mode with the standard nonce length. \n\nIn general, the GHASH operation performed by this implementation of GCM is not constant-time. An exception is when the underlying Block was created by aes.NewCipher on systems with hardware support for AES. See the crypto/aes package documentation for details. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewGCMWithNonceSize",
                    "documentation": {
                      "identifier": "NewGCMWithNonceSize",
                      "newPage": false,
                      "searchKey": "cipher.NewGCMWithNonceSize",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGCMWithNonceSize(cipher Block, size int) (AEAD, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGCMWithNonceSize(cipher Block, size int) (AEAD, error)\n```\n\nNewGCMWithNonceSize returns the given 128-bit, block cipher wrapped in Galois Counter Mode, which accepts nonces of the given length. The length must not be zero. \n\nOnly use this function if you require compatibility with an existing cryptosystem that uses non-standard nonce lengths. All other users should use NewGCM, which is faster and more resistant to misuse. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#NewGCMWithTagSize",
                    "documentation": {
                      "identifier": "NewGCMWithTagSize",
                      "newPage": false,
                      "searchKey": "cipher.NewGCMWithTagSize",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewGCMWithTagSize(cipher Block, tagSize int) (AEAD, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewGCMWithTagSize(cipher Block, tagSize int) (AEAD, error)\n```\n\nNewGCMWithTagSize returns the given 128-bit, block cipher wrapped in Galois Counter Mode, which generates tags with the given length. \n\nTag sizes between 12 and 16 bytes are allowed. \n\nOnly use this function if you require compatibility with an existing cryptosystem that uses non-standard tag lengths. All other users should use NewGCM, which is more resistant to misuse. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#newGCMWithNonceAndTagSize",
                    "documentation": {
                      "identifier": "newGCMWithNonceAndTagSize",
                      "newPage": false,
                      "searchKey": "cipher.newGCMWithNonceAndTagSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGCMWithNonceAndTagSize(cipher Block, nonceSize, tagSize int) (AEAD, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGCMWithNonceAndTagSize(cipher Block, nonceSize, tagSize int) (AEAD, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmAble",
              "documentation": {
                "identifier": "gcmAble",
                "newPage": false,
                "searchKey": "cipher.gcmAble",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcmAble interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcmAble interface {\n\tNewGCM(nonceSize, tagSize int) (AEAD, error)\n}\n```\n\ngcmAble is an interface implemented by ciphers that have a specific optimized implementation of GCM, like crypto/aes. NewGCM will check for this interface and return the specific AEAD if found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmFieldElement",
              "documentation": {
                "identifier": "gcmFieldElement",
                "newPage": false,
                "searchKey": "cipher.gcmFieldElement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcmFieldElement struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcmFieldElement struct {\n\tlow, high uint64\n}\n```\n\ngcmFieldElement represents a value in GF(2¹²⁸). In order to reflect the GCM standard and make binary.BigEndian suitable for marshaling these values, the bits are stored in big endian order. For example: \n\n```\nthe coefficient of x⁰ can be obtained by v.low >> 63.\nthe coefficient of x⁶³ can be obtained by v.low & 1.\nthe coefficient of x⁶⁴ can be obtained by v.high >> 63.\nthe coefficient of x¹²⁷ can be obtained by v.high & 1.\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcmAdd",
                    "documentation": {
                      "identifier": "gcmAdd",
                      "newPage": false,
                      "searchKey": "cipher.gcmAdd",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func gcmAdd(x, y *gcmFieldElement) gcmFieldElement"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc gcmAdd(x, y *gcmFieldElement) gcmFieldElement\n```\n\ngcmAdd adds two elements of GF(2¹²⁸) and returns the sum. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcmDouble",
                    "documentation": {
                      "identifier": "gcmDouble",
                      "newPage": false,
                      "searchKey": "cipher.gcmDouble",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func gcmDouble(x *gcmFieldElement) (double gcmFieldElement)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc gcmDouble(x *gcmFieldElement) (double gcmFieldElement)\n```\n\ngcmDouble returns the result of doubling an element of GF(2¹²⁸). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcm",
              "documentation": {
                "identifier": "gcm",
                "newPage": false,
                "searchKey": "cipher.gcm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gcm struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gcm struct {\n\tcipher    Block\n\tnonceSize int\n\ttagSize   int\n\t// productTable contains the first sixteen powers of the key, H.\n\t// However, they are in bit reversed order. See NewGCMWithNonceSize.\n\tproductTable [16]gcmFieldElement\n}\n```\n\ngcm represents a Galois Counter Mode with a specific key. See [https://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf](https://csrc.nist.gov/groups/ST/toolkit/BCM/documents/proposedmodes/gcm/gcm-revised-spec.pdf) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.NonceSize",
                    "documentation": {
                      "identifier": "gcm.NonceSize",
                      "newPage": false,
                      "searchKey": "cipher.gcm.NonceSize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) NonceSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) NonceSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.Overhead",
                    "documentation": {
                      "identifier": "gcm.Overhead",
                      "newPage": false,
                      "searchKey": "cipher.gcm.Overhead",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) Overhead() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) Overhead() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.Seal",
                    "documentation": {
                      "identifier": "gcm.Seal",
                      "newPage": false,
                      "searchKey": "cipher.gcm.Seal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) Seal(dst, nonce, plaintext, data []byte) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) Seal(dst, nonce, plaintext, data []byte) []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.Open",
                    "documentation": {
                      "identifier": "gcm.Open",
                      "newPage": false,
                      "searchKey": "cipher.gcm.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) Open(dst, nonce, ciphertext, data []byte) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) Open(dst, nonce, ciphertext, data []byte) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.mul",
                    "documentation": {
                      "identifier": "gcm.mul",
                      "newPage": false,
                      "searchKey": "cipher.gcm.mul",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) mul(y *gcmFieldElement)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) mul(y *gcmFieldElement)\n```\n\nmul sets y to y*H, where H is the GCM key, fixed during NewGCMWithNonceSize. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.updateBlocks",
                    "documentation": {
                      "identifier": "gcm.updateBlocks",
                      "newPage": false,
                      "searchKey": "cipher.gcm.updateBlocks",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) updateBlocks(y *gcmFieldElement, blocks []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) updateBlocks(y *gcmFieldElement, blocks []byte)\n```\n\nupdateBlocks extends y with more polynomial terms from blocks, based on Horner's rule. There must be a multiple of gcmBlockSize bytes in blocks. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.update",
                    "documentation": {
                      "identifier": "gcm.update",
                      "newPage": false,
                      "searchKey": "cipher.gcm.update",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) update(y *gcmFieldElement, data []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) update(y *gcmFieldElement, data []byte)\n```\n\nupdate extends y with more polynomial terms from data. If data is not a multiple of gcmBlockSize bytes long then the remainder is zero padded. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.counterCrypt",
                    "documentation": {
                      "identifier": "gcm.counterCrypt",
                      "newPage": false,
                      "searchKey": "cipher.gcm.counterCrypt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) counterCrypt(out, in []byte, counter *[gcmBlockSize]byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) counterCrypt(out, in []byte, counter *[gcmBlockSize]byte)\n```\n\ncounterCrypt crypts in to out using g.cipher in counter mode. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.deriveCounter",
                    "documentation": {
                      "identifier": "gcm.deriveCounter",
                      "newPage": false,
                      "searchKey": "cipher.gcm.deriveCounter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) deriveCounter(counter *[gcmBlockSize]byte, nonce []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) deriveCounter(counter *[gcmBlockSize]byte, nonce []byte)\n```\n\nderiveCounter computes the initial GCM counter state from the given nonce. See NIST SP 800-38D, section 7.1. This assumes that counter is filled with zeros on entry. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#gcm.auth",
                    "documentation": {
                      "identifier": "gcm.auth",
                      "newPage": false,
                      "searchKey": "cipher.gcm.auth",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gcm) auth(out, ciphertext, additionalData []byte, tagMask *[gcmTagSize]byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gcm) auth(out, ciphertext, additionalData []byte, tagMask *[gcmTagSize]byte)\n```\n\nauth calculates GHASH(ciphertext, additionalData), masks the result with tagMask and writes the result to out. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#StreamReader",
              "documentation": {
                "identifier": "StreamReader",
                "newPage": false,
                "searchKey": "cipher.StreamReader",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StreamReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StreamReader struct {\n\tS Stream\n\tR io.Reader\n}\n```\n\nStreamReader wraps a Stream into an io.Reader. It calls XORKeyStream to process each slice of data which passes through. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#StreamReader.Read",
                    "documentation": {
                      "identifier": "StreamReader.Read",
                      "newPage": false,
                      "searchKey": "cipher.StreamReader.Read",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r StreamReader) Read(dst []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r StreamReader) Read(dst []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#StreamWriter",
              "documentation": {
                "identifier": "StreamWriter",
                "newPage": false,
                "searchKey": "cipher.StreamWriter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StreamWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StreamWriter struct {\n\tS   Stream\n\tW   io.Writer\n\tErr error // unused\n}\n```\n\nStreamWriter wraps a Stream into an io.Writer. It calls XORKeyStream to process each slice of data which passes through. If any Write call returns short then the StreamWriter is out of sync and must be discarded. A StreamWriter has no internal buffering; Close does not need to be called to flush write data. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#StreamWriter.Write",
                    "documentation": {
                      "identifier": "StreamWriter.Write",
                      "newPage": false,
                      "searchKey": "cipher.StreamWriter.Write",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w StreamWriter) Write(src []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w StreamWriter) Write(src []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#StreamWriter.Close",
                    "documentation": {
                      "identifier": "StreamWriter.Close",
                      "newPage": false,
                      "searchKey": "cipher.StreamWriter.Close",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w StreamWriter) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w StreamWriter) Close() error\n```\n\nClose closes the underlying Writer and returns its Close return value, if the Writer is also an io.Closer. Otherwise it returns nil. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#ofb",
              "documentation": {
                "identifier": "ofb",
                "newPage": false,
                "searchKey": "cipher.ofb",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ofb struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ofb struct {\n\tb       Block\n\tcipher  []byte\n\tout     []byte\n\toutUsed int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#ofb.refill",
                    "documentation": {
                      "identifier": "ofb.refill",
                      "newPage": false,
                      "searchKey": "cipher.ofb.refill",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ofb) refill()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ofb) refill()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/crypto/cipher#ofb.XORKeyStream",
                    "documentation": {
                      "identifier": "ofb.XORKeyStream",
                      "newPage": false,
                      "searchKey": "cipher.ofb.XORKeyStream",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ofb) XORKeyStream(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ofb) XORKeyStream(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/crypto/cipher#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/crypto/cipher#dup",
              "documentation": {
                "identifier": "dup",
                "newPage": false,
                "searchKey": "cipher.dup",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func dup(p []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dup(p []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#reverseBits",
              "documentation": {
                "identifier": "reverseBits",
                "newPage": false,
                "searchKey": "cipher.reverseBits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func reverseBits(i int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reverseBits(i int) int\n```\n\nreverseBits reverses the order of the bits of 4-bit number in i. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#gcmInc32",
              "documentation": {
                "identifier": "gcmInc32",
                "newPage": false,
                "searchKey": "cipher.gcmInc32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func gcmInc32(counterBlock *[16]byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gcmInc32(counterBlock *[16]byte)\n```\n\ngcmInc32 treats the final four bytes of counterBlock as a big-endian value and increments it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#sliceForAppend",
              "documentation": {
                "identifier": "sliceForAppend",
                "newPage": false,
                "searchKey": "cipher.sliceForAppend",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sliceForAppend(in []byte, n int) (head, tail []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sliceForAppend(in []byte, n int) (head, tail []byte)\n```\n\nsliceForAppend takes a slice and a requested number of bytes. It returns a slice with the contents of the given slice followed by that many bytes and a second slice that aliases into it and contains only the extra bytes. If the original slice has sufficient capacity then no allocation is performed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#xorBytes",
              "documentation": {
                "identifier": "xorBytes",
                "newPage": false,
                "searchKey": "cipher.xorBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func xorBytes(dst, a, b []byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc xorBytes(dst, a, b []byte) int\n```\n\nxorBytes xors the bytes in a and b. The destination should have enough space, otherwise xorBytes will panic. Returns the number of bytes xor'd. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#xorWords",
              "documentation": {
                "identifier": "xorWords",
                "newPage": false,
                "searchKey": "cipher.xorWords",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func xorWords(dst, a, b []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc xorWords(dst, a, b []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/crypto/cipher#xorBytesSSE2",
              "documentation": {
                "identifier": "xorBytesSSE2",
                "newPage": false,
                "searchKey": "cipher.xorBytesSSE2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func xorBytesSSE2(dst, a, b *byte, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc xorBytesSSE2(dst, a, b *byte, n int)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
