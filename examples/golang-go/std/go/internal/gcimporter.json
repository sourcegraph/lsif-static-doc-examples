{
  "pathID": "/std/go/internal/gcimporter",
  "documentation": {
    "identifier": "gcimporter",
    "newPage": true,
    "searchKey": "std/go/internal/gcimporter",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package gcimporter"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package gcimporter implements Import for gc-generated object files. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/go/internal/gcimporter#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#debug",
              "documentation": {
                "identifier": "debug",
                "newPage": false,
                "searchKey": "gcimporter.debug",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const debug"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst debug = false\n```\n\ndebugging/development support \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#predeclReserved",
              "documentation": {
                "identifier": "predeclReserved",
                "newPage": false,
                "searchKey": "gcimporter.predeclReserved",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const predeclReserved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst predeclReserved = 32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#definedType",
              "documentation": {
                "identifier": "definedType",
                "newPage": false,
                "searchKey": "gcimporter.definedType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const definedType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst definedType itag = iota\n```\n\nTypes \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#pointerType",
              "documentation": {
                "identifier": "pointerType",
                "newPage": false,
                "searchKey": "gcimporter.pointerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pointerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pointerType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#sliceType",
              "documentation": {
                "identifier": "sliceType",
                "newPage": false,
                "searchKey": "gcimporter.sliceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sliceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sliceType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#arrayType",
              "documentation": {
                "identifier": "arrayType",
                "newPage": false,
                "searchKey": "gcimporter.arrayType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const arrayType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arrayType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#chanType",
              "documentation": {
                "identifier": "chanType",
                "newPage": false,
                "searchKey": "gcimporter.chanType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const chanType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst chanType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#mapType",
              "documentation": {
                "identifier": "mapType",
                "newPage": false,
                "searchKey": "gcimporter.mapType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const mapType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mapType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#signatureType",
              "documentation": {
                "identifier": "signatureType",
                "newPage": false,
                "searchKey": "gcimporter.signatureType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const signatureType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst signatureType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#structType",
              "documentation": {
                "identifier": "structType",
                "newPage": false,
                "searchKey": "gcimporter.structType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const structType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst structType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#interfaceType",
              "documentation": {
                "identifier": "interfaceType",
                "newPage": false,
                "searchKey": "gcimporter.interfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const interfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst interfaceType\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#deltaNewFile",
              "documentation": {
                "identifier": "deltaNewFile",
                "newPage": false,
                "searchKey": "gcimporter.deltaNewFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const deltaNewFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deltaNewFile = -64\n```\n\ndeltaNewFile is a magic line delta offset indicating a new file. We use -64 because it is rare; see issue 20080 and CL 41619. -64 is the smallest int that fits in a single byte as a varint. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#maxTime",
              "documentation": {
                "identifier": "maxTime",
                "newPage": false,
                "searchKey": "gcimporter.maxTime",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxTime = 30 * time.Second\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/internal/gcimporter#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#pkgExts",
              "documentation": {
                "identifier": "pkgExts",
                "newPage": false,
                "searchKey": "gcimporter.pkgExts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkgExts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkgExts = [...]string{\".a\", \".o\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#fakeLines",
              "documentation": {
                "identifier": "fakeLines",
                "newPage": false,
                "searchKey": "gcimporter.fakeLines",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fakeLines"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fakeLines []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#fakeLinesOnce",
              "documentation": {
                "identifier": "fakeLinesOnce",
                "newPage": false,
                "searchKey": "gcimporter.fakeLinesOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fakeLinesOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fakeLinesOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#predeclared",
              "documentation": {
                "identifier": "predeclared",
                "newPage": false,
                "searchKey": "gcimporter.predeclared",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var predeclared"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar predeclared = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#importedObjectTests",
              "documentation": {
                "identifier": "importedObjectTests",
                "newPage": false,
                "searchKey": "gcimporter.importedObjectTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var importedObjectTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar importedObjectTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/internal/gcimporter#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#byPath",
              "documentation": {
                "identifier": "byPath",
                "newPage": false,
                "searchKey": "gcimporter.byPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byPath []*types.Package"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byPath []*types.Package\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#byPath.Len",
                    "documentation": {
                      "identifier": "byPath.Len",
                      "newPage": false,
                      "searchKey": "gcimporter.byPath.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byPath) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byPath) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#byPath.Swap",
                    "documentation": {
                      "identifier": "byPath.Swap",
                      "newPage": false,
                      "searchKey": "gcimporter.byPath.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byPath) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byPath) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#byPath.Less",
                    "documentation": {
                      "identifier": "byPath.Less",
                      "newPage": false,
                      "searchKey": "gcimporter.byPath.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byPath) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byPath) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#intReader",
              "documentation": {
                "identifier": "intReader",
                "newPage": false,
                "searchKey": "gcimporter.intReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type intReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intReader struct {\n\t*bufio.Reader\n\tpath string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#intReader.int64",
                    "documentation": {
                      "identifier": "intReader.int64",
                      "newPage": false,
                      "searchKey": "gcimporter.intReader.int64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *intReader) int64() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *intReader) int64() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#intReader.uint64",
                    "documentation": {
                      "identifier": "intReader.uint64",
                      "newPage": false,
                      "searchKey": "gcimporter.intReader.uint64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *intReader) uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *intReader) uint64() uint64\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#itag",
              "documentation": {
                "identifier": "itag",
                "newPage": false,
                "searchKey": "gcimporter.itag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type itag uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype itag uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#iimporter",
              "documentation": {
                "identifier": "iimporter",
                "newPage": false,
                "searchKey": "gcimporter.iimporter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type iimporter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype iimporter struct {\n\tipath   string\n\tversion int\n\n\tstringData  []byte\n\tstringCache map[uint64]string\n\tpkgCache    map[uint64]*types.Package\n\n\tdeclData []byte\n\tpkgIndex map[*types.Package]map[string]uint64\n\ttypCache map[uint64]types.Type\n\n\tfake          fakeFileSet\n\tinterfaceList []*types.Interface\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#iimporter.doDecl",
                    "documentation": {
                      "identifier": "iimporter.doDecl",
                      "newPage": false,
                      "searchKey": "gcimporter.iimporter.doDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *iimporter) doDecl(pkg *types.Package, name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *iimporter) doDecl(pkg *types.Package, name string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#iimporter.stringAt",
                    "documentation": {
                      "identifier": "iimporter.stringAt",
                      "newPage": false,
                      "searchKey": "gcimporter.iimporter.stringAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *iimporter) stringAt(off uint64) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *iimporter) stringAt(off uint64) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#iimporter.pkgAt",
                    "documentation": {
                      "identifier": "iimporter.pkgAt",
                      "newPage": false,
                      "searchKey": "gcimporter.iimporter.pkgAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *iimporter) pkgAt(off uint64) *types.Package"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *iimporter) pkgAt(off uint64) *types.Package\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#iimporter.typAt",
                    "documentation": {
                      "identifier": "iimporter.typAt",
                      "newPage": false,
                      "searchKey": "gcimporter.iimporter.typAt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *iimporter) typAt(off uint64, base *types.Named) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *iimporter) typAt(off uint64, base *types.Named) types.Type\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#importReader",
              "documentation": {
                "identifier": "importReader",
                "newPage": false,
                "searchKey": "gcimporter.importReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type importReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype importReader struct {\n\tp          *iimporter\n\tdeclReader bytes.Reader\n\tcurrPkg    *types.Package\n\tprevFile   string\n\tprevLine   int64\n\tprevColumn int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.obj",
                    "documentation": {
                      "identifier": "importReader.obj",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.obj",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) obj(name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) obj(name string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.declare",
                    "documentation": {
                      "identifier": "importReader.declare",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.declare",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) declare(obj types.Object)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) declare(obj types.Object)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.value",
                    "documentation": {
                      "identifier": "importReader.value",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) value() (typ types.Type, val constant.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) value() (typ types.Type, val constant.Value)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.mpint",
                    "documentation": {
                      "identifier": "importReader.mpint",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.mpint",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) mpint(x *big.Int, typ *types.Basic)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) mpint(x *big.Int, typ *types.Basic)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.mpfloat",
                    "documentation": {
                      "identifier": "importReader.mpfloat",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.mpfloat",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) mpfloat(typ *types.Basic) constant.Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) mpfloat(typ *types.Basic) constant.Value\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.ident",
                    "documentation": {
                      "identifier": "importReader.ident",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.ident",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) ident() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) ident() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.qualifiedIdent",
                    "documentation": {
                      "identifier": "importReader.qualifiedIdent",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.qualifiedIdent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) qualifiedIdent() (*types.Package, string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) qualifiedIdent() (*types.Package, string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.pos",
                    "documentation": {
                      "identifier": "importReader.pos",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.pos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.posv0",
                    "documentation": {
                      "identifier": "importReader.posv0",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.posv0",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) posv0()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) posv0()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.posv1",
                    "documentation": {
                      "identifier": "importReader.posv1",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.posv1",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) posv1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) posv1()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.typ",
                    "documentation": {
                      "identifier": "importReader.typ",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.typ",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) typ() types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) typ() types.Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.pkg",
                    "documentation": {
                      "identifier": "importReader.pkg",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.pkg",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) pkg() *types.Package"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) pkg() *types.Package\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.string",
                    "documentation": {
                      "identifier": "importReader.string",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) string() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.doType",
                    "documentation": {
                      "identifier": "importReader.doType",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.doType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) doType(base *types.Named) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) doType(base *types.Named) types.Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.kind",
                    "documentation": {
                      "identifier": "importReader.kind",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.kind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) kind() itag"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) kind() itag\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.signature",
                    "documentation": {
                      "identifier": "importReader.signature",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.signature",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) signature(recv *types.Var) *types.Signature"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) signature(recv *types.Var) *types.Signature\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.paramList",
                    "documentation": {
                      "identifier": "importReader.paramList",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.paramList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) paramList() *types.Tuple"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) paramList() *types.Tuple\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.param",
                    "documentation": {
                      "identifier": "importReader.param",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.param",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) param() *types.Var"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) param() *types.Var\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.bool",
                    "documentation": {
                      "identifier": "importReader.bool",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.bool",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) bool() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) bool() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.int64",
                    "documentation": {
                      "identifier": "importReader.int64",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.int64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) int64() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) int64() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.uint64",
                    "documentation": {
                      "identifier": "importReader.uint64",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.uint64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) uint64() uint64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#importReader.byte",
                    "documentation": {
                      "identifier": "importReader.byte",
                      "newPage": false,
                      "searchKey": "gcimporter.importReader.byte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *importReader) byte() byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *importReader) byte() byte\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#fakeFileSet",
              "documentation": {
                "identifier": "fakeFileSet",
                "newPage": false,
                "searchKey": "gcimporter.fakeFileSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeFileSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeFileSet struct {\n\tfset  *token.FileSet\n\tfiles map[string]*token.File\n}\n```\n\nSynthesize a token.Pos \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#fakeFileSet.pos",
                    "documentation": {
                      "identifier": "fakeFileSet.pos",
                      "newPage": false,
                      "searchKey": "gcimporter.fakeFileSet.pos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *fakeFileSet) pos(file string, line, column int) token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *fakeFileSet) pos(file string, line, column int) token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#anyType",
              "documentation": {
                "identifier": "anyType",
                "newPage": false,
                "searchKey": "gcimporter.anyType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type anyType struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype anyType struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#anyType.Underlying",
                    "documentation": {
                      "identifier": "anyType.Underlying",
                      "newPage": false,
                      "searchKey": "gcimporter.anyType.Underlying",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t anyType) Underlying() types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t anyType) Underlying() types.Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/internal/gcimporter#anyType.String",
                    "documentation": {
                      "identifier": "anyType.String",
                      "newPage": false,
                      "searchKey": "gcimporter.anyType.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t anyType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t anyType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/internal/gcimporter#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#readGopackHeader",
              "documentation": {
                "identifier": "readGopackHeader",
                "newPage": false,
                "searchKey": "gcimporter.readGopackHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readGopackHeader(r *bufio.Reader) (name string, size int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readGopackHeader(r *bufio.Reader) (name string, size int, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#FindExportData",
              "documentation": {
                "identifier": "FindExportData",
                "newPage": false,
                "searchKey": "gcimporter.FindExportData",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FindExportData(r *bufio.Reader) (hdr string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FindExportData(r *bufio.Reader) (hdr string, err error)\n```\n\nFindExportData positions the reader r at the beginning of the export data section of an underlying GC-created object/archive file by reading from it. The reader must be positioned at the start of the file before calling this function. The hdr result is the string before the export data, either \"$$\" or \"$$B\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#FindPkg",
              "documentation": {
                "identifier": "FindPkg",
                "newPage": false,
                "searchKey": "gcimporter.FindPkg",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FindPkg(path, srcDir string) (filename, id string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FindPkg(path, srcDir string) (filename, id string)\n```\n\nFindPkg returns the filename and unique package id for an import path based on package information provided by build.Import (using the build.Default build.Context). A relative srcDir is interpreted relative to the current working directory. If no file was found, an empty filename is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#Import",
              "documentation": {
                "identifier": "Import",
                "newPage": false,
                "searchKey": "gcimporter.Import",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Import(fset *token.FileSet, packages map[string]*types.Package, path, srcDir string, lookup func(path string) (io.ReadCloser, error)) (pkg *types.Package, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Import(fset *token.FileSet, packages map[string]*types.Package, path, srcDir string, lookup func(path string) (io.ReadCloser, error)) (pkg *types.Package, err error)\n```\n\nImport imports a gc-generated package given its import path and srcDir, adds the corresponding package object to the packages map, and returns the object. The packages map must contain all packages already imported. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#iImportData",
              "documentation": {
                "identifier": "iImportData",
                "newPage": false,
                "searchKey": "gcimporter.iImportData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func iImportData(fset *token.FileSet, imports map[string]*types.Package, dataReader *bufio.Reader, path string) (pkg *types.Package, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc iImportData(fset *token.FileSet, imports map[string]*types.Package, dataReader *bufio.Reader, path string) (pkg *types.Package, err error)\n```\n\niImportData imports a package from the serialized package data and returns the number of bytes consumed and a reference to the package. If the export data version is not recognized or the format is otherwise compromised, an error is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#intSize",
              "documentation": {
                "identifier": "intSize",
                "newPage": false,
                "searchKey": "gcimporter.intSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func intSize(b *types.Basic) (signed bool, maxBytes uint)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intSize(b *types.Basic) (signed bool, maxBytes uint)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#isInterface",
              "documentation": {
                "identifier": "isInterface",
                "newPage": false,
                "searchKey": "gcimporter.isInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isInterface(t types.Type) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isInterface(t types.Type) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#errorf",
              "documentation": {
                "identifier": "errorf",
                "newPage": false,
                "searchKey": "gcimporter.errorf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func errorf(format string, args ...interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc errorf(format string, args ...interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#chanDir",
              "documentation": {
                "identifier": "chanDir",
                "newPage": false,
                "searchKey": "gcimporter.chanDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func chanDir(d int) types.ChanDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc chanDir(d int) types.ChanDir\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#skipSpecialPlatforms",
              "documentation": {
                "identifier": "skipSpecialPlatforms",
                "newPage": false,
                "searchKey": "gcimporter.skipSpecialPlatforms",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func skipSpecialPlatforms(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skipSpecialPlatforms(t *testing.T)\n```\n\nskipSpecialPlatforms causes the test to be skipped for platforms where builders (build.golang.org) don't have access to compiled packages for import. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#compile",
              "documentation": {
                "identifier": "compile",
                "newPage": false,
                "searchKey": "gcimporter.compile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compile(t *testing.T, dirname, filename, outdirname string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compile(t *testing.T, dirname, filename, outdirname string) string\n```\n\ncompile runs the compiler on filename, with dirname as the working directory, and writes the output file to outdirname. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#testPath",
              "documentation": {
                "identifier": "testPath",
                "newPage": false,
                "searchKey": "gcimporter.testPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPath(t *testing.T, path, srcDir string) *types.Package"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPath(t *testing.T, path, srcDir string) *types.Package\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#testDir",
              "documentation": {
                "identifier": "testDir",
                "newPage": false,
                "searchKey": "gcimporter.testDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testDir(t *testing.T, dir string, endTime time.Time) (nimports int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testDir(t *testing.T, dir string, endTime time.Time) (nimports int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#mktmpdir",
              "documentation": {
                "identifier": "mktmpdir",
                "newPage": false,
                "searchKey": "gcimporter.mktmpdir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mktmpdir(t *testing.T) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mktmpdir(t *testing.T) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestImportTestdata",
              "documentation": {
                "identifier": "TestImportTestdata",
                "newPage": false,
                "searchKey": "gcimporter.TestImportTestdata",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImportTestdata(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImportTestdata(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestVersionHandling",
              "documentation": {
                "identifier": "TestVersionHandling",
                "newPage": false,
                "searchKey": "gcimporter.TestVersionHandling",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVersionHandling(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVersionHandling(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestImportStdLib",
              "documentation": {
                "identifier": "TestImportStdLib",
                "newPage": false,
                "searchKey": "gcimporter.TestImportStdLib",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImportStdLib(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImportStdLib(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestImportedTypes",
              "documentation": {
                "identifier": "TestImportedTypes",
                "newPage": false,
                "searchKey": "gcimporter.TestImportedTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImportedTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImportedTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#verifyInterfaceMethodRecvs",
              "documentation": {
                "identifier": "verifyInterfaceMethodRecvs",
                "newPage": false,
                "searchKey": "gcimporter.verifyInterfaceMethodRecvs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyInterfaceMethodRecvs(t *testing.T, named *types.Named, level int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyInterfaceMethodRecvs(t *testing.T, named *types.Named, level int)\n```\n\nverifyInterfaceMethodRecvs verifies that method receiver types are named if the methods belong to a named interface type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue5815",
              "documentation": {
                "identifier": "TestIssue5815",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue5815",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue5815(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue5815(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestCorrectMethodPackage",
              "documentation": {
                "identifier": "TestCorrectMethodPackage",
                "newPage": false,
                "searchKey": "gcimporter.TestCorrectMethodPackage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCorrectMethodPackage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCorrectMethodPackage(t *testing.T)\n```\n\nSmoke test to ensure that imported methods get the correct package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue13566",
              "documentation": {
                "identifier": "TestIssue13566",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue13566",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue13566(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue13566(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue13898",
              "documentation": {
                "identifier": "TestIssue13898",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue13898",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue13898(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue13898(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue15517",
              "documentation": {
                "identifier": "TestIssue15517",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue15517",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue15517(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue15517(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue15920",
              "documentation": {
                "identifier": "TestIssue15920",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue15920",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue15920(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue15920(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue20046",
              "documentation": {
                "identifier": "TestIssue20046",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue20046",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue20046(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue20046(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue25301",
              "documentation": {
                "identifier": "TestIssue25301",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue25301",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue25301(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue25301(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#TestIssue25596",
              "documentation": {
                "identifier": "TestIssue25596",
                "newPage": false,
                "searchKey": "gcimporter.TestIssue25596",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue25596(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue25596(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#importPkg",
              "documentation": {
                "identifier": "importPkg",
                "newPage": false,
                "searchKey": "gcimporter.importPkg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func importPkg(t *testing.T, path, srcDir string) *types.Package"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc importPkg(t *testing.T, path, srcDir string) *types.Package\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#compileAndImportPkg",
              "documentation": {
                "identifier": "compileAndImportPkg",
                "newPage": false,
                "searchKey": "gcimporter.compileAndImportPkg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compileAndImportPkg(t *testing.T, name string) *types.Package"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compileAndImportPkg(t *testing.T, name string) *types.Package\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/gcimporter#lookupObj",
              "documentation": {
                "identifier": "lookupObj",
                "newPage": false,
                "searchKey": "gcimporter.lookupObj",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func lookupObj(t *testing.T, scope *types.Scope, name string) types.Object"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lookupObj(t *testing.T, scope *types.Scope, name string) types.Object\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
