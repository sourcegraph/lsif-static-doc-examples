{
  "pathID": "/std/go/internal/typeparams",
  "documentation": {
    "identifier": "typeparams",
    "newPage": true,
    "searchKey": "std/go/internal/typeparams",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package typeparams"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package typeparams provides functions to work with type parameter data stored in the AST, while these AST changes are guarded by a build constraint. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/go/internal/typeparams#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#DisallowParsing",
              "documentation": {
                "identifier": "DisallowParsing",
                "newPage": false,
                "searchKey": "typeparams.DisallowParsing",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DisallowParsing"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DisallowParsing = 1 << 30\n```\n\nDisallowParsing is the numeric value of a parsing mode that disallows type parameters. This only matters if the typeparams experiment is active, and may be used for running tests that disallow generics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#Enabled",
              "documentation": {
                "identifier": "Enabled",
                "newPage": false,
                "searchKey": "typeparams.Enabled",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Enabled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Enabled = false\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/internal/typeparams#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#PackExpr",
              "documentation": {
                "identifier": "PackExpr",
                "newPage": false,
                "searchKey": "typeparams.PackExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PackExpr(list []ast.Expr) ast.Expr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PackExpr(list []ast.Expr) ast.Expr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#UnpackExpr",
              "documentation": {
                "identifier": "UnpackExpr",
                "newPage": false,
                "searchKey": "typeparams.UnpackExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnpackExpr(expr ast.Expr) []ast.Expr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnpackExpr(expr ast.Expr) []ast.Expr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#IsListExpr",
              "documentation": {
                "identifier": "IsListExpr",
                "newPage": false,
                "searchKey": "typeparams.IsListExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsListExpr(n ast.Node) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsListExpr(n ast.Node) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#Get",
              "documentation": {
                "identifier": "Get",
                "newPage": false,
                "searchKey": "typeparams.Get",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Get(ast.Node) *ast.FieldList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Get(ast.Node) *ast.FieldList\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/internal/typeparams#Set",
              "documentation": {
                "identifier": "Set",
                "newPage": false,
                "searchKey": "typeparams.Set",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Set(node ast.Node, params *ast.FieldList)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Set(node ast.Node, params *ast.FieldList)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
