{
  "pathID": "/std/go/parser",
  "documentation": {
    "identifier": "parser",
    "newPage": true,
    "searchKey": "std/go/parser",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package parser"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package parser implements a parser for Go source files. Input may be provided in a variety of forms (see the various Parse* functions); the output is an abstract syntax tree (AST) representing the Go source. The parser is invoked through one of the Parse* functions. \n\nThe parser accepts a larger language than is syntactically permitted by the Go spec, for simplicity, and for improved robustness in the presence of syntax errors. For instance, in method declarations, the receiver is treated like an ordinary parameter list and thus may contain multiple entries where the spec permits exactly one. Consequently, the corresponding field in the AST (ast.FuncDecl.Recv) field is not restricted to one entry. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/go/parser#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/parser#PackageClauseOnly",
              "documentation": {
                "identifier": "PackageClauseOnly",
                "newPage": false,
                "searchKey": "parser.PackageClauseOnly",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PackageClauseOnly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PackageClauseOnly Mode = 1 << iota // stop parsing after package clause\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#ImportsOnly",
              "documentation": {
                "identifier": "ImportsOnly",
                "newPage": false,
                "searchKey": "parser.ImportsOnly",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ImportsOnly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ImportsOnly // stop parsing after import declarations\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#ParseComments",
              "documentation": {
                "identifier": "ParseComments",
                "newPage": false,
                "searchKey": "parser.ParseComments",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ParseComments"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ParseComments // parse comments and add them to AST\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#Trace",
              "documentation": {
                "identifier": "Trace",
                "newPage": false,
                "searchKey": "parser.Trace",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Trace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Trace // print a trace of parsed productions\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#DeclarationErrors",
              "documentation": {
                "identifier": "DeclarationErrors",
                "newPage": false,
                "searchKey": "parser.DeclarationErrors",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DeclarationErrors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DeclarationErrors // report declaration errors\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#SpuriousErrors",
              "documentation": {
                "identifier": "SpuriousErrors",
                "newPage": false,
                "searchKey": "parser.SpuriousErrors",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SpuriousErrors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SpuriousErrors // same as AllErrors, for backward-compatibility\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#SkipObjectResolution",
              "documentation": {
                "identifier": "SkipObjectResolution",
                "newPage": false,
                "searchKey": "parser.SkipObjectResolution",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SkipObjectResolution"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SkipObjectResolution // don't resolve identifiers to objects - see ParseFile\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#AllErrors",
              "documentation": {
                "identifier": "AllErrors",
                "newPage": false,
                "searchKey": "parser.AllErrors",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AllErrors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AllErrors = SpuriousErrors // report all errors (not just the first 10 on different lines)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#basic",
              "documentation": {
                "identifier": "basic",
                "newPage": false,
                "searchKey": "parser.basic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const basic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst basic = iota\n```\n\nParsing modes for parseSimpleStmt. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#labelOk",
              "documentation": {
                "identifier": "labelOk",
                "newPage": false,
                "searchKey": "parser.labelOk",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const labelOk"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst labelOk\n```\n\nParsing modes for parseSimpleStmt. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#rangeOk",
              "documentation": {
                "identifier": "rangeOk",
                "newPage": false,
                "searchKey": "parser.rangeOk",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rangeOk"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rangeOk\n```\n\nParsing modes for parseSimpleStmt. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#debugResolve",
              "documentation": {
                "identifier": "debugResolve",
                "newPage": false,
                "searchKey": "parser.debugResolve",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const debugResolve"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst debugResolve = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#testdata",
              "documentation": {
                "identifier": "testdata",
                "newPage": false,
                "searchKey": "parser.testdata",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testdata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testdata = \"testdata\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/parser#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/parser#stmtStart",
              "documentation": {
                "identifier": "stmtStart",
                "newPage": false,
                "searchKey": "parser.stmtStart",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var stmtStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stmtStart = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#declStart",
              "documentation": {
                "identifier": "declStart",
                "newPage": false,
                "searchKey": "parser.declStart",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var declStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar declStart = map[token.Token]bool{\n\ttoken.CONST: true,\n\ttoken.TYPE:  true,\n\ttoken.VAR:   true,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#exprEnd",
              "documentation": {
                "identifier": "exprEnd",
                "newPage": false,
                "searchKey": "parser.exprEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var exprEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar exprEnd = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#unresolved",
              "documentation": {
                "identifier": "unresolved",
                "newPage": false,
                "searchKey": "parser.unresolved",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unresolved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unresolved = new(ast.Object)\n```\n\nThe unresolved object is a sentinel to mark identifiers that have been added to the list of unresolved identifiers. The sentinel is only used for verifying internal consistency. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#errRx",
              "documentation": {
                "identifier": "errRx",
                "newPage": false,
                "searchKey": "parser.errRx",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errRx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errRx = regexp.MustCompile(`^/\\* *ERROR *(HERE)? *\"([^\"]*)\" *\\*/$`)\n```\n\nERROR comments must be of the form /* ERROR \"rx\" */ and rx is a regular expression that matches the expected error message. The special form /* ERROR HERE \"rx\" */ must be used for error messages that appear immediately after a token, rather than at a token's position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#validFiles",
              "documentation": {
                "identifier": "validFiles",
                "newPage": false,
                "searchKey": "parser.validFiles",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var validFiles"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar validFiles = []string{\n\t\"parser.go\",\n\t\"parser_test.go\",\n\t\"error_test.go\",\n\t\"short_test.go\",\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#imports",
              "documentation": {
                "identifier": "imports",
                "newPage": false,
                "searchKey": "parser.imports",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var imports"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar imports = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#src",
              "documentation": {
                "identifier": "src",
                "newPage": false,
                "searchKey": "parser.src",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var src"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar src = readFile(\"parser.go\")\n```\n\nTODO(rFindley): use a testdata file or file from another package here, to \n\n```\navoid a moving target.\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#valids",
              "documentation": {
                "identifier": "valids",
                "newPage": false,
                "searchKey": "parser.valids",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var valids"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar valids = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#validWithTParamsOnly",
              "documentation": {
                "identifier": "validWithTParamsOnly",
                "newPage": false,
                "searchKey": "parser.validWithTParamsOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var validWithTParamsOnly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar validWithTParamsOnly = ...\n```\n\nvalidWithTParamsOnly holds source code examples that are valid if parseTypeParams is set, but invalid if not. When checking with the parseTypeParams set, errors are ignored. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#invalids",
              "documentation": {
                "identifier": "invalids",
                "newPage": false,
                "searchKey": "parser.invalids",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var invalids"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar invalids = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#invalidNoTParamErrs",
              "documentation": {
                "identifier": "invalidNoTParamErrs",
                "newPage": false,
                "searchKey": "parser.invalidNoTParamErrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var invalidNoTParamErrs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar invalidNoTParamErrs = ...\n```\n\ninvalidNoTParamErrs holds invalid source code examples annotated with the error messages produced when ParseTypeParams is not set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#invalidTParamErrs",
              "documentation": {
                "identifier": "invalidTParamErrs",
                "newPage": false,
                "searchKey": "parser.invalidTParamErrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var invalidTParamErrs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar invalidTParamErrs = ...\n```\n\ninvalidTParamErrs holds invalid source code examples annotated with the error messages produced when ParseTypeParams is set. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/parser#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/parser#Mode",
              "documentation": {
                "identifier": "Mode",
                "newPage": false,
                "searchKey": "parser.Mode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Mode uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Mode uint\n```\n\nA Mode value is a set of flags (or 0). They control the amount of source code parsed and other optional parser functionality. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#parser",
              "documentation": {
                "identifier": "parser",
                "newPage": false,
                "searchKey": "parser.parser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type parser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parser struct {\n\tfile    *token.File\n\terrors  scanner.ErrorList\n\tscanner scanner.Scanner\n\n\t// Tracing/debugging\n\tmode   Mode // parsing mode\n\ttrace  bool // == (mode&Trace != 0)\n\tindent int  // indentation used for tracing output\n\n\t// Comments\n\tcomments    []*ast.CommentGroup\n\tleadComment *ast.CommentGroup // last lead comment\n\tlineComment *ast.CommentGroup // last line comment\n\n\t// Next token\n\tpos token.Pos   // token position\n\ttok token.Token // one token look-ahead\n\tlit string      // token literal\n\n\t// Error recovery\n\t// (used to limit the number of calls to parser.advance\n\t// w/o making scanning progress - avoids potential endless\n\t// loops across multiple parser functions during error recovery)\n\tsyncPos token.Pos // last synchronization position\n\tsyncCnt int       // number of parser.advance calls without progress\n\n\t// Non-syntactic parser control\n\texprLev int  // < 0: in control clause, >= 0: in expression\n\tinRhs   bool // if set, the parser is parsing a rhs expression\n\n\timports []*ast.ImportSpec // list of imports\n}\n```\n\nThe parser structure holds the parser's internal state. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/parser#trace",
                    "documentation": {
                      "identifier": "trace",
                      "newPage": false,
                      "searchKey": "parser.trace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func trace(p *parser, msg string) *parser"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc trace(p *parser, msg string) *parser\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.init",
                    "documentation": {
                      "identifier": "parser.init",
                      "newPage": false,
                      "searchKey": "parser.parser.init",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) init(fset *token.FileSet, filename string, src []byte, mode Mode)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) init(fset *token.FileSet, filename string, src []byte, mode Mode)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseTypeParams",
                    "documentation": {
                      "identifier": "parser.parseTypeParams",
                      "newPage": false,
                      "searchKey": "parser.parser.parseTypeParams",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeParams() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeParams() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.printTrace",
                    "documentation": {
                      "identifier": "parser.printTrace",
                      "newPage": false,
                      "searchKey": "parser.parser.printTrace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) printTrace(a ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) printTrace(a ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.next0",
                    "documentation": {
                      "identifier": "parser.next0",
                      "newPage": false,
                      "searchKey": "parser.parser.next0",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) next0()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) next0()\n```\n\nAdvance to the next token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.consumeComment",
                    "documentation": {
                      "identifier": "parser.consumeComment",
                      "newPage": false,
                      "searchKey": "parser.parser.consumeComment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) consumeComment() (comment *ast.Comment, endline int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) consumeComment() (comment *ast.Comment, endline int)\n```\n\nConsume a comment and return it and the line on which it ends. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.consumeCommentGroup",
                    "documentation": {
                      "identifier": "parser.consumeCommentGroup",
                      "newPage": false,
                      "searchKey": "parser.parser.consumeCommentGroup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) consumeCommentGroup(n int) (comments *ast.CommentGroup, endline int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) consumeCommentGroup(n int) (comments *ast.CommentGroup, endline int)\n```\n\nConsume a group of adjacent comments, add it to the parser's comments list, and return it together with the line at which the last comment in the group ends. A non-comment token or n empty lines terminate a comment group. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.next",
                    "documentation": {
                      "identifier": "parser.next",
                      "newPage": false,
                      "searchKey": "parser.parser.next",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) next()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) next()\n```\n\nAdvance to the next non-comment token. In the process, collect any comment groups encountered, and remember the last lead and line comments. \n\nA lead comment is a comment group that starts and ends in a line without any other tokens and that is followed by a non-comment token on the line immediately after the comment group. \n\nA line comment is a comment group that follows a non-comment token on the same line, and that has no tokens after it on the line where it ends. \n\nLead and line comments may be considered documentation that is stored in the AST. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.error",
                    "documentation": {
                      "identifier": "parser.error",
                      "newPage": false,
                      "searchKey": "parser.parser.error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) error(pos token.Pos, msg string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) error(pos token.Pos, msg string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.errorExpected",
                    "documentation": {
                      "identifier": "parser.errorExpected",
                      "newPage": false,
                      "searchKey": "parser.parser.errorExpected",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) errorExpected(pos token.Pos, msg string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) errorExpected(pos token.Pos, msg string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.expect",
                    "documentation": {
                      "identifier": "parser.expect",
                      "newPage": false,
                      "searchKey": "parser.parser.expect",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expect(tok token.Token) token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expect(tok token.Token) token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.expect2",
                    "documentation": {
                      "identifier": "parser.expect2",
                      "newPage": false,
                      "searchKey": "parser.parser.expect2",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expect2(tok token.Token) (pos token.Pos)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expect2(tok token.Token) (pos token.Pos)\n```\n\nexpect2 is like expect, but it returns an invalid position if the expected token is not found. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.expectClosing",
                    "documentation": {
                      "identifier": "parser.expectClosing",
                      "newPage": false,
                      "searchKey": "parser.parser.expectClosing",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expectClosing(tok token.Token, context string) token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expectClosing(tok token.Token, context string) token.Pos\n```\n\nexpectClosing is like expect but provides a better error message for the common case of a missing comma before a newline. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.expectSemi",
                    "documentation": {
                      "identifier": "parser.expectSemi",
                      "newPage": false,
                      "searchKey": "parser.parser.expectSemi",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expectSemi()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expectSemi()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.atComma",
                    "documentation": {
                      "identifier": "parser.atComma",
                      "newPage": false,
                      "searchKey": "parser.parser.atComma",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) atComma(context string, follow token.Token) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) atComma(context string, follow token.Token) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.advance",
                    "documentation": {
                      "identifier": "parser.advance",
                      "newPage": false,
                      "searchKey": "parser.parser.advance",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) advance(to map[token.Token]bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) advance(to map[token.Token]bool)\n```\n\nadvance consumes tokens until the current token p.tok is in the 'to' set, or token.EOF. For error recovery. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.safePos",
                    "documentation": {
                      "identifier": "parser.safePos",
                      "newPage": false,
                      "searchKey": "parser.parser.safePos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) safePos(pos token.Pos) (res token.Pos)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) safePos(pos token.Pos) (res token.Pos)\n```\n\nsafePos returns a valid file position for a given position: If pos is valid to begin with, safePos returns pos. If pos is out-of-range, safePos returns the EOF position. \n\nThis is hack to work around \"artificial\" end positions in the AST which are computed by adding 1 to (presumably valid) token positions. If the token positions are invalid due to parse errors, the resulting end position may be past the file's EOF position, which would lead to panics if used later on. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseIdent",
                    "documentation": {
                      "identifier": "parser.parseIdent",
                      "newPage": false,
                      "searchKey": "parser.parser.parseIdent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseIdent() *ast.Ident"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseIdent() *ast.Ident\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseIdentList",
                    "documentation": {
                      "identifier": "parser.parseIdentList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseIdentList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseIdentList() (list []*ast.Ident)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseIdentList() (list []*ast.Ident)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseExprList",
                    "documentation": {
                      "identifier": "parser.parseExprList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseExprList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseExprList() (list []ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseExprList() (list []ast.Expr)\n```\n\nIf lhs is set, result list elements which are identifiers are not resolved. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseList",
                    "documentation": {
                      "identifier": "parser.parseList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseList(inRhs bool) []ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseList(inRhs bool) []ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseType",
                    "documentation": {
                      "identifier": "parser.parseType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseType() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseType() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseQualifiedIdent",
                    "documentation": {
                      "identifier": "parser.parseQualifiedIdent",
                      "newPage": false,
                      "searchKey": "parser.parser.parseQualifiedIdent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseQualifiedIdent(ident *ast.Ident) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseQualifiedIdent(ident *ast.Ident) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseTypeName",
                    "documentation": {
                      "identifier": "parser.parseTypeName",
                      "newPage": false,
                      "searchKey": "parser.parser.parseTypeName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeName(ident *ast.Ident) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeName(ident *ast.Ident) ast.Expr\n```\n\nIf the result is an identifier, it is not resolved. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseArrayLen",
                    "documentation": {
                      "identifier": "parser.parseArrayLen",
                      "newPage": false,
                      "searchKey": "parser.parser.parseArrayLen",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseArrayLen() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseArrayLen() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseArrayFieldOrTypeInstance",
                    "documentation": {
                      "identifier": "parser.parseArrayFieldOrTypeInstance",
                      "newPage": false,
                      "searchKey": "parser.parser.parseArrayFieldOrTypeInstance",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseArrayFieldOrTypeInstance(x *ast.Ident) (*ast.Ident, ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseArrayFieldOrTypeInstance(x *ast.Ident) (*ast.Ident, ast.Expr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseFieldDecl",
                    "documentation": {
                      "identifier": "parser.parseFieldDecl",
                      "newPage": false,
                      "searchKey": "parser.parser.parseFieldDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFieldDecl() *ast.Field"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFieldDecl() *ast.Field\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseStructType",
                    "documentation": {
                      "identifier": "parser.parseStructType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseStructType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseStructType() *ast.StructType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseStructType() *ast.StructType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parsePointerType",
                    "documentation": {
                      "identifier": "parser.parsePointerType",
                      "newPage": false,
                      "searchKey": "parser.parser.parsePointerType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parsePointerType() *ast.StarExpr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parsePointerType() *ast.StarExpr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseDotsType",
                    "documentation": {
                      "identifier": "parser.parseDotsType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseDotsType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseDotsType() *ast.Ellipsis"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseDotsType() *ast.Ellipsis\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseParamDecl",
                    "documentation": {
                      "identifier": "parser.parseParamDecl",
                      "newPage": false,
                      "searchKey": "parser.parser.parseParamDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseParamDecl(name *ast.Ident) (f field)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseParamDecl(name *ast.Ident) (f field)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseParameterList",
                    "documentation": {
                      "identifier": "parser.parseParameterList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseParameterList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseParameterList(name0 *ast.Ident, closing token.Token, parseParamDecl func(*ast.Ident) field, tparams bool) (params []*ast.Field)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseParameterList(name0 *ast.Ident, closing token.Token, parseParamDecl func(*ast.Ident) field, tparams bool) (params []*ast.Field)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseParameters",
                    "documentation": {
                      "identifier": "parser.parseParameters",
                      "newPage": false,
                      "searchKey": "parser.parser.parseParameters",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseParameters(acceptTParams bool) (tparams, params *ast.FieldList)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseParameters(acceptTParams bool) (tparams, params *ast.FieldList)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseResult",
                    "documentation": {
                      "identifier": "parser.parseResult",
                      "newPage": false,
                      "searchKey": "parser.parser.parseResult",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseResult() *ast.FieldList"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseResult() *ast.FieldList\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseFuncType",
                    "documentation": {
                      "identifier": "parser.parseFuncType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseFuncType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFuncType() *ast.FuncType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFuncType() *ast.FuncType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseMethodSpec",
                    "documentation": {
                      "identifier": "parser.parseMethodSpec",
                      "newPage": false,
                      "searchKey": "parser.parser.parseMethodSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseMethodSpec() *ast.Field"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseMethodSpec() *ast.Field\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseInterfaceType",
                    "documentation": {
                      "identifier": "parser.parseInterfaceType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseInterfaceType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseInterfaceType() *ast.InterfaceType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseInterfaceType() *ast.InterfaceType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseMapType",
                    "documentation": {
                      "identifier": "parser.parseMapType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseMapType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseMapType() *ast.MapType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseMapType() *ast.MapType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseChanType",
                    "documentation": {
                      "identifier": "parser.parseChanType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseChanType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseChanType() *ast.ChanType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseChanType() *ast.ChanType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseTypeInstance",
                    "documentation": {
                      "identifier": "parser.parseTypeInstance",
                      "newPage": false,
                      "searchKey": "parser.parser.parseTypeInstance",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeInstance(typ ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeInstance(typ ast.Expr) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.tryIdentOrType",
                    "documentation": {
                      "identifier": "parser.tryIdentOrType",
                      "newPage": false,
                      "searchKey": "parser.parser.tryIdentOrType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) tryIdentOrType() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) tryIdentOrType() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseStmtList",
                    "documentation": {
                      "identifier": "parser.parseStmtList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseStmtList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseStmtList() (list []ast.Stmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseStmtList() (list []ast.Stmt)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseBody",
                    "documentation": {
                      "identifier": "parser.parseBody",
                      "newPage": false,
                      "searchKey": "parser.parser.parseBody",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseBody() *ast.BlockStmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseBody() *ast.BlockStmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseBlockStmt",
                    "documentation": {
                      "identifier": "parser.parseBlockStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseBlockStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseBlockStmt() *ast.BlockStmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseBlockStmt() *ast.BlockStmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseFuncTypeOrLit",
                    "documentation": {
                      "identifier": "parser.parseFuncTypeOrLit",
                      "newPage": false,
                      "searchKey": "parser.parser.parseFuncTypeOrLit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFuncTypeOrLit() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFuncTypeOrLit() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseOperand",
                    "documentation": {
                      "identifier": "parser.parseOperand",
                      "newPage": false,
                      "searchKey": "parser.parser.parseOperand",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseOperand() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseOperand() ast.Expr\n```\n\nparseOperand may return an expression or a raw type (incl. array types of the form [...]T. Callers must verify the result. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseSelector",
                    "documentation": {
                      "identifier": "parser.parseSelector",
                      "newPage": false,
                      "searchKey": "parser.parser.parseSelector",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseSelector(x ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseSelector(x ast.Expr) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseTypeAssertion",
                    "documentation": {
                      "identifier": "parser.parseTypeAssertion",
                      "newPage": false,
                      "searchKey": "parser.parser.parseTypeAssertion",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeAssertion(x ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeAssertion(x ast.Expr) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseIndexOrSliceOrInstance",
                    "documentation": {
                      "identifier": "parser.parseIndexOrSliceOrInstance",
                      "newPage": false,
                      "searchKey": "parser.parser.parseIndexOrSliceOrInstance",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseIndexOrSliceOrInstance(x ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseIndexOrSliceOrInstance(x ast.Expr) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseCallOrConversion",
                    "documentation": {
                      "identifier": "parser.parseCallOrConversion",
                      "newPage": false,
                      "searchKey": "parser.parser.parseCallOrConversion",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseCallOrConversion(fun ast.Expr) *ast.CallExpr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseCallOrConversion(fun ast.Expr) *ast.CallExpr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseValue",
                    "documentation": {
                      "identifier": "parser.parseValue",
                      "newPage": false,
                      "searchKey": "parser.parser.parseValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseValue() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseValue() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseElement",
                    "documentation": {
                      "identifier": "parser.parseElement",
                      "newPage": false,
                      "searchKey": "parser.parser.parseElement",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseElement() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseElement() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseElementList",
                    "documentation": {
                      "identifier": "parser.parseElementList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseElementList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseElementList() (list []ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseElementList() (list []ast.Expr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseLiteralValue",
                    "documentation": {
                      "identifier": "parser.parseLiteralValue",
                      "newPage": false,
                      "searchKey": "parser.parser.parseLiteralValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseLiteralValue(typ ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseLiteralValue(typ ast.Expr) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.checkExpr",
                    "documentation": {
                      "identifier": "parser.checkExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.checkExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) checkExpr(x ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) checkExpr(x ast.Expr) ast.Expr\n```\n\ncheckExpr checks that x is an expression (and not a type). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.checkExprOrType",
                    "documentation": {
                      "identifier": "parser.checkExprOrType",
                      "newPage": false,
                      "searchKey": "parser.parser.checkExprOrType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) checkExprOrType(x ast.Expr) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) checkExprOrType(x ast.Expr) ast.Expr\n```\n\ncheckExprOrType checks that x is an expression or a type (and not a raw type such as [...]T). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parsePrimaryExpr",
                    "documentation": {
                      "identifier": "parser.parsePrimaryExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.parsePrimaryExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parsePrimaryExpr() (x ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parsePrimaryExpr() (x ast.Expr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseUnaryExpr",
                    "documentation": {
                      "identifier": "parser.parseUnaryExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.parseUnaryExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseUnaryExpr() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseUnaryExpr() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.tokPrec",
                    "documentation": {
                      "identifier": "parser.tokPrec",
                      "newPage": false,
                      "searchKey": "parser.parser.tokPrec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) tokPrec() (token.Token, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) tokPrec() (token.Token, int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseBinaryExpr",
                    "documentation": {
                      "identifier": "parser.parseBinaryExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.parseBinaryExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseBinaryExpr(prec1 int) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseBinaryExpr(prec1 int) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseExpr",
                    "documentation": {
                      "identifier": "parser.parseExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.parseExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseExpr() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseExpr() ast.Expr\n```\n\nThe result may be a type or even a raw type ([...]int). Callers must check the result (using checkExpr or checkExprOrType), depending on context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseRhs",
                    "documentation": {
                      "identifier": "parser.parseRhs",
                      "newPage": false,
                      "searchKey": "parser.parser.parseRhs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseRhs() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseRhs() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseRhsOrType",
                    "documentation": {
                      "identifier": "parser.parseRhsOrType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseRhsOrType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseRhsOrType() ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseRhsOrType() ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseSimpleStmt",
                    "documentation": {
                      "identifier": "parser.parseSimpleStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseSimpleStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseSimpleStmt(mode int) (ast.Stmt, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseSimpleStmt(mode int) (ast.Stmt, bool)\n```\n\nparseSimpleStmt returns true as 2nd result if it parsed the assignment of a range clause (with mode == rangeOk). The returned statement is an assignment with a right-hand side that is a single unary expression of the form \"range x\". No guarantees are given for the left-hand side. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.checkAssignStmt",
                    "documentation": {
                      "identifier": "parser.checkAssignStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.checkAssignStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) checkAssignStmt(as *ast.AssignStmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) checkAssignStmt(as *ast.AssignStmt)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseCallExpr",
                    "documentation": {
                      "identifier": "parser.parseCallExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.parseCallExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseCallExpr(callType string) *ast.CallExpr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseCallExpr(callType string) *ast.CallExpr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseGoStmt",
                    "documentation": {
                      "identifier": "parser.parseGoStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseGoStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseGoStmt() ast.Stmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseGoStmt() ast.Stmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseDeferStmt",
                    "documentation": {
                      "identifier": "parser.parseDeferStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseDeferStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseDeferStmt() ast.Stmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseDeferStmt() ast.Stmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseReturnStmt",
                    "documentation": {
                      "identifier": "parser.parseReturnStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseReturnStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseReturnStmt() *ast.ReturnStmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseReturnStmt() *ast.ReturnStmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseBranchStmt",
                    "documentation": {
                      "identifier": "parser.parseBranchStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseBranchStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseBranchStmt(tok token.Token) *ast.BranchStmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseBranchStmt(tok token.Token) *ast.BranchStmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.makeExpr",
                    "documentation": {
                      "identifier": "parser.makeExpr",
                      "newPage": false,
                      "searchKey": "parser.parser.makeExpr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) makeExpr(s ast.Stmt, want string) ast.Expr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) makeExpr(s ast.Stmt, want string) ast.Expr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseIfHeader",
                    "documentation": {
                      "identifier": "parser.parseIfHeader",
                      "newPage": false,
                      "searchKey": "parser.parser.parseIfHeader",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseIfHeader() (init ast.Stmt, cond ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseIfHeader() (init ast.Stmt, cond ast.Expr)\n```\n\nparseIfHeader is an adjusted version of parser.header in cmd/compile/internal/syntax/parser.go, which has been tuned for better error handling. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseIfStmt",
                    "documentation": {
                      "identifier": "parser.parseIfStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseIfStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseIfStmt() *ast.IfStmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseIfStmt() *ast.IfStmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseTypeList",
                    "documentation": {
                      "identifier": "parser.parseTypeList",
                      "newPage": false,
                      "searchKey": "parser.parser.parseTypeList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeList() (list []ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeList() (list []ast.Expr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseCaseClause",
                    "documentation": {
                      "identifier": "parser.parseCaseClause",
                      "newPage": false,
                      "searchKey": "parser.parser.parseCaseClause",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseCaseClause(typeSwitch bool) *ast.CaseClause"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseCaseClause(typeSwitch bool) *ast.CaseClause\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.isTypeSwitchGuard",
                    "documentation": {
                      "identifier": "parser.isTypeSwitchGuard",
                      "newPage": false,
                      "searchKey": "parser.parser.isTypeSwitchGuard",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) isTypeSwitchGuard(s ast.Stmt) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) isTypeSwitchGuard(s ast.Stmt) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseSwitchStmt",
                    "documentation": {
                      "identifier": "parser.parseSwitchStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseSwitchStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseSwitchStmt() ast.Stmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseSwitchStmt() ast.Stmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseCommClause",
                    "documentation": {
                      "identifier": "parser.parseCommClause",
                      "newPage": false,
                      "searchKey": "parser.parser.parseCommClause",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseCommClause() *ast.CommClause"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseCommClause() *ast.CommClause\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseSelectStmt",
                    "documentation": {
                      "identifier": "parser.parseSelectStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseSelectStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseSelectStmt() *ast.SelectStmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseSelectStmt() *ast.SelectStmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseForStmt",
                    "documentation": {
                      "identifier": "parser.parseForStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseForStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseForStmt() ast.Stmt"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseForStmt() ast.Stmt\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseStmt",
                    "documentation": {
                      "identifier": "parser.parseStmt",
                      "newPage": false,
                      "searchKey": "parser.parser.parseStmt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseStmt() (s ast.Stmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseStmt() (s ast.Stmt)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseImportSpec",
                    "documentation": {
                      "identifier": "parser.parseImportSpec",
                      "newPage": false,
                      "searchKey": "parser.parser.parseImportSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseImportSpec(doc *ast.CommentGroup, _ token.Pos, _ token.Token, _ int) ast.Spec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseImportSpec(doc *ast.CommentGroup, _ token.Pos, _ token.Token, _ int) ast.Spec\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseValueSpec",
                    "documentation": {
                      "identifier": "parser.parseValueSpec",
                      "newPage": false,
                      "searchKey": "parser.parser.parseValueSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseValueSpec(doc *ast.CommentGroup, _ token.Pos, keyword token.Token, iota int) ast.Spec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseValueSpec(doc *ast.CommentGroup, _ token.Pos, keyword token.Token, iota int) ast.Spec\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseGenericType",
                    "documentation": {
                      "identifier": "parser.parseGenericType",
                      "newPage": false,
                      "searchKey": "parser.parser.parseGenericType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseGenericType(spec *ast.TypeSpec, openPos token.Pos, name0 *ast.Ident, closeTok token.Token)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseGenericType(spec *ast.TypeSpec, openPos token.Pos, name0 *ast.Ident, closeTok token.Token)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseTypeSpec",
                    "documentation": {
                      "identifier": "parser.parseTypeSpec",
                      "newPage": false,
                      "searchKey": "parser.parser.parseTypeSpec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeSpec(doc *ast.CommentGroup, _ token.Pos, _ token.Token, _ int) ast.Spec"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeSpec(doc *ast.CommentGroup, _ token.Pos, _ token.Token, _ int) ast.Spec\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseGenDecl",
                    "documentation": {
                      "identifier": "parser.parseGenDecl",
                      "newPage": false,
                      "searchKey": "parser.parser.parseGenDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseGenDecl(keyword token.Token, f parseSpecFunction) *ast.GenDecl"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseGenDecl(keyword token.Token, f parseSpecFunction) *ast.GenDecl\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseFuncDecl",
                    "documentation": {
                      "identifier": "parser.parseFuncDecl",
                      "newPage": false,
                      "searchKey": "parser.parser.parseFuncDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFuncDecl() *ast.FuncDecl"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFuncDecl() *ast.FuncDecl\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseDecl",
                    "documentation": {
                      "identifier": "parser.parseDecl",
                      "newPage": false,
                      "searchKey": "parser.parser.parseDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseDecl(sync map[token.Token]bool) ast.Decl"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseDecl(sync map[token.Token]bool) ast.Decl\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#parser.parseFile",
                    "documentation": {
                      "identifier": "parser.parseFile",
                      "newPage": false,
                      "searchKey": "parser.parser.parseFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFile() *ast.File"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFile() *ast.File\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#bailout",
              "documentation": {
                "identifier": "bailout",
                "newPage": false,
                "searchKey": "parser.bailout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type bailout struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bailout struct{}\n```\n\nA bailout panic is raised to indicate early termination. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#field",
              "documentation": {
                "identifier": "field",
                "newPage": false,
                "searchKey": "parser.field",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type field struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype field struct {\n\tname *ast.Ident\n\ttyp  ast.Expr\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#parseSpecFunction",
              "documentation": {
                "identifier": "parseSpecFunction",
                "newPage": false,
                "searchKey": "parser.parseSpecFunction",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type parseSpecFunction func(doc *go/ast.CommentGroup, pos go/token.Pos, keyword go/token.Token, iota int) go/ast.Spec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parseSpecFunction func(doc *ast.CommentGroup, pos token.Pos, keyword token.Token, iota int) ast.Spec\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#resolver",
              "documentation": {
                "identifier": "resolver",
                "newPage": false,
                "searchKey": "parser.resolver",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type resolver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype resolver struct {\n\thandle  *token.File\n\tdeclErr func(token.Pos, string)\n\n\t// Ordinary identifier scopes\n\tpkgScope   *ast.Scope   // pkgScope.Outer == nil\n\ttopScope   *ast.Scope   // top-most scope; may be pkgScope\n\tunresolved []*ast.Ident // unresolved identifiers\n\n\t// Label scopes\n\t// (maintained by open/close LabelScope)\n\tlabelScope  *ast.Scope     // label scope for current function\n\ttargetStack [][]*ast.Ident // stack of unresolved labels\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.dump",
                    "documentation": {
                      "identifier": "resolver.dump",
                      "newPage": false,
                      "searchKey": "parser.resolver.dump",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) dump(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) dump(format string, args ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.sprintf",
                    "documentation": {
                      "identifier": "resolver.sprintf",
                      "newPage": false,
                      "searchKey": "parser.resolver.sprintf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) sprintf(format string, args ...interface{}) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) sprintf(format string, args ...interface{}) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.openScope",
                    "documentation": {
                      "identifier": "resolver.openScope",
                      "newPage": false,
                      "searchKey": "parser.resolver.openScope",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) openScope(pos token.Pos)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) openScope(pos token.Pos)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.closeScope",
                    "documentation": {
                      "identifier": "resolver.closeScope",
                      "newPage": false,
                      "searchKey": "parser.resolver.closeScope",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) closeScope()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) closeScope()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.openLabelScope",
                    "documentation": {
                      "identifier": "resolver.openLabelScope",
                      "newPage": false,
                      "searchKey": "parser.resolver.openLabelScope",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) openLabelScope()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) openLabelScope()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.closeLabelScope",
                    "documentation": {
                      "identifier": "resolver.closeLabelScope",
                      "newPage": false,
                      "searchKey": "parser.resolver.closeLabelScope",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) closeLabelScope()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) closeLabelScope()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.declare",
                    "documentation": {
                      "identifier": "resolver.declare",
                      "newPage": false,
                      "searchKey": "parser.resolver.declare",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) declare(decl, data interface{}, scope *ast.Scope, kind ast.ObjKind, idents ...*ast.Ident)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) declare(decl, data interface{}, scope *ast.Scope, kind ast.ObjKind, idents ...*ast.Ident)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.shortVarDecl",
                    "documentation": {
                      "identifier": "resolver.shortVarDecl",
                      "newPage": false,
                      "searchKey": "parser.resolver.shortVarDecl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) shortVarDecl(decl *ast.AssignStmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) shortVarDecl(decl *ast.AssignStmt)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.resolve",
                    "documentation": {
                      "identifier": "resolver.resolve",
                      "newPage": false,
                      "searchKey": "parser.resolver.resolve",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) resolve(ident *ast.Ident, collectUnresolved bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) resolve(ident *ast.Ident, collectUnresolved bool)\n```\n\nIf x is an identifier, resolve attempts to resolve x by looking up the object it denotes. If no object is found and collectUnresolved is set, x is marked as unresolved and collected in the list of unresolved identifiers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkExprs",
                    "documentation": {
                      "identifier": "resolver.walkExprs",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkExprs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkExprs(list []ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkExprs(list []ast.Expr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkLHS",
                    "documentation": {
                      "identifier": "resolver.walkLHS",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkLHS",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkLHS(list []ast.Expr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkLHS(list []ast.Expr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkStmts",
                    "documentation": {
                      "identifier": "resolver.walkStmts",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkStmts",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkStmts(list []ast.Stmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkStmts(list []ast.Stmt)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.Visit",
                    "documentation": {
                      "identifier": "resolver.Visit",
                      "newPage": false,
                      "searchKey": "parser.resolver.Visit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) Visit(node ast.Node) ast.Visitor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) Visit(node ast.Node) ast.Visitor\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkFuncType",
                    "documentation": {
                      "identifier": "resolver.walkFuncType",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkFuncType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkFuncType(typ *ast.FuncType)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkFuncType(typ *ast.FuncType)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.resolveList",
                    "documentation": {
                      "identifier": "resolver.resolveList",
                      "newPage": false,
                      "searchKey": "parser.resolver.resolveList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) resolveList(list *ast.FieldList)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) resolveList(list *ast.FieldList)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.declareList",
                    "documentation": {
                      "identifier": "resolver.declareList",
                      "newPage": false,
                      "searchKey": "parser.resolver.declareList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) declareList(list *ast.FieldList, kind ast.ObjKind)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) declareList(list *ast.FieldList, kind ast.ObjKind)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkFieldList",
                    "documentation": {
                      "identifier": "resolver.walkFieldList",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkFieldList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkFieldList(list *ast.FieldList, kind ast.ObjKind)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkFieldList(list *ast.FieldList, kind ast.ObjKind)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkTParams",
                    "documentation": {
                      "identifier": "resolver.walkTParams",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkTParams",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkTParams(list *ast.FieldList)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkTParams(list *ast.FieldList)\n```\n\nwalkTParams is like walkFieldList, but declares type parameters eagerly so that they may be resolved in the constraint expressions held in the field Type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/go/parser#resolver.walkBody",
                    "documentation": {
                      "identifier": "resolver.walkBody",
                      "newPage": false,
                      "searchKey": "parser.resolver.walkBody",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *resolver) walkBody(body *ast.BlockStmt)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *resolver) walkBody(body *ast.BlockStmt)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/go/parser#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/go/parser#readSource",
              "documentation": {
                "identifier": "readSource",
                "newPage": false,
                "searchKey": "parser.readSource",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readSource(filename string, src interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readSource(filename string, src interface{}) ([]byte, error)\n```\n\nIf src != nil, readSource converts src to a []byte if possible; otherwise it returns an error. If src == nil, readSource returns the result of reading the file specified by filename. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#ParseFile",
              "documentation": {
                "identifier": "ParseFile",
                "newPage": false,
                "searchKey": "parser.ParseFile",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseFile(fset *token.FileSet, filename string, src interface{}, mode Mode) (f *ast.File, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseFile(fset *token.FileSet, filename string, src interface{}, mode Mode) (f *ast.File, err error)\n```\n\nParseFile parses the source code of a single Go source file and returns the corresponding ast.File node. The source code may be provided via the filename of the source file, or via the src parameter. \n\nIf src != nil, ParseFile parses the source from src and the filename is only used when recording position information. The type of the argument for the src parameter must be string, []byte, or io.Reader. If src == nil, ParseFile parses the file specified by filename. \n\nThe mode parameter controls the amount of source text parsed and other optional parser functionality. If the SkipObjectResolution mode bit is set, the object resolution phase of parsing will be skipped, causing File.Scope, File.Unresolved, and all Ident.Obj fields to be nil. \n\nPosition information is recorded in the file set fset, which must not be nil. \n\nIf the source couldn't be read, the returned AST is nil and the error indicates the specific failure. If the source was read but syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by source position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#ParseDir",
              "documentation": {
                "identifier": "ParseDir",
                "newPage": false,
                "searchKey": "parser.ParseDir",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseDir(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseDir(fset *token.FileSet, path string, filter func(fs.FileInfo) bool, mode Mode) (pkgs map[string]*ast.Package, first error)\n```\n\nParseDir calls ParseFile for all files with names ending in \".go\" in the directory specified by path and returns a map of package name -> package AST with all the packages found. \n\nIf filter != nil, only the files with fs.FileInfo entries passing through the filter (and ending in \".go\") are considered. The mode bits are passed to ParseFile unchanged. Position information is recorded in fset, which must not be nil. \n\nIf the directory couldn't be read, a nil map and the respective error are returned. If a parse error occurred, a non-nil but incomplete map and the first error encountered are returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#ParseExprFrom",
              "documentation": {
                "identifier": "ParseExprFrom",
                "newPage": false,
                "searchKey": "parser.ParseExprFrom",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseExprFrom(fset *token.FileSet, filename string, src interface{}, mode Mode) (expr ast.Expr, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseExprFrom(fset *token.FileSet, filename string, src interface{}, mode Mode) (expr ast.Expr, err error)\n```\n\nParseExprFrom is a convenience function for parsing an expression. The arguments have the same meaning as for ParseFile, but the source must be a valid Go (type or value) expression. Specifically, fset must not be nil. \n\nIf the source couldn't be read, the returned AST is nil and the error indicates the specific failure. If the source was read but syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by source position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#ParseExpr",
              "documentation": {
                "identifier": "ParseExpr",
                "newPage": false,
                "searchKey": "parser.ParseExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseExpr(x string) (ast.Expr, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseExpr(x string) (ast.Expr, error)\n```\n\nParseExpr is a convenience function for obtaining the AST of an expression x. The position information recorded in the AST is undefined. The filename used in error messages is the empty string. \n\nIf syntax errors were found, the result is a partial AST (with ast.Bad* nodes representing the fragments of erroneous source code). Multiple errors are returned via a scanner.ErrorList which is sorted by source position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#un",
              "documentation": {
                "identifier": "un",
                "newPage": false,
                "searchKey": "parser.un",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func un(p *parser)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc un(p *parser)\n```\n\nUsage pattern: defer un(trace(p, \"...\")) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#assert",
              "documentation": {
                "identifier": "assert",
                "newPage": false,
                "searchKey": "parser.assert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func assert(cond bool, msg string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assert(cond bool, msg string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#unparen",
              "documentation": {
                "identifier": "unparen",
                "newPage": false,
                "searchKey": "parser.unparen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unparen(x ast.Expr) ast.Expr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unparen(x ast.Expr) ast.Expr\n```\n\nIf x is of the form (T), unparen returns unparen(T), otherwise it returns x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#isTypeSwitchAssert",
              "documentation": {
                "identifier": "isTypeSwitchAssert",
                "newPage": false,
                "searchKey": "parser.isTypeSwitchAssert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isTypeSwitchAssert(x ast.Expr) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isTypeSwitchAssert(x ast.Expr) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#isValidImport",
              "documentation": {
                "identifier": "isValidImport",
                "newPage": false,
                "searchKey": "parser.isValidImport",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValidImport(lit string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValidImport(lit string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#resolveFile",
              "documentation": {
                "identifier": "resolveFile",
                "newPage": false,
                "searchKey": "parser.resolveFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveFile(file *ast.File, handle *token.File, declErr func(token.Pos, string))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveFile(file *ast.File, handle *token.File, declErr func(token.Pos, string))\n```\n\nresolveFile walks the given file to resolve identifiers within the file scope, updating ast.Ident.Obj fields with declaration information. \n\nIf declErr is non-nil, it is used to report declaration errors during resolution. tok is used to format position in error messages. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#getFile",
              "documentation": {
                "identifier": "getFile",
                "newPage": false,
                "searchKey": "parser.getFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getFile(fset *token.FileSet, filename string) (file *token.File)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getFile(fset *token.FileSet, filename string) (file *token.File)\n```\n\ngetFile assumes that each filename occurs at most once \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#getPos",
              "documentation": {
                "identifier": "getPos",
                "newPage": false,
                "searchKey": "parser.getPos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getPos(fset *token.FileSet, filename string, offset int) token.Pos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getPos(fset *token.FileSet, filename string, offset int) token.Pos\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#expectedErrors",
              "documentation": {
                "identifier": "expectedErrors",
                "newPage": false,
                "searchKey": "parser.expectedErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectedErrors(fset *token.FileSet, filename string, src []byte) map[token.Pos]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectedErrors(fset *token.FileSet, filename string, src []byte) map[token.Pos]string\n```\n\nexpectedErrors collects the regular expressions of ERROR comments found in files and returns them as a map of error positions to error messages. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#compareErrors",
              "documentation": {
                "identifier": "compareErrors",
                "newPage": false,
                "searchKey": "parser.compareErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compareErrors(t *testing.T, fset *token.FileSet, expected map[token.Pos]string, found scanner.ErrorList)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compareErrors(t *testing.T, fset *token.FileSet, expected map[token.Pos]string, found scanner.ErrorList)\n```\n\ncompareErrors compares the map of expected error messages with the list of found errors and reports discrepancies. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#checkErrors",
              "documentation": {
                "identifier": "checkErrors",
                "newPage": false,
                "searchKey": "parser.checkErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkErrors(t *testing.T, filename string, input interface{}, mode Mode, expectErrors bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkErrors(t *testing.T, filename string, input interface{}, mode Mode, expectErrors bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestErrors",
              "documentation": {
                "identifier": "TestErrors",
                "newPage": false,
                "searchKey": "parser.TestErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestParse",
              "documentation": {
                "identifier": "TestParse",
                "newPage": false,
                "searchKey": "parser.TestParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#nameFilter",
              "documentation": {
                "identifier": "nameFilter",
                "newPage": false,
                "searchKey": "parser.nameFilter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nameFilter(filename string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nameFilter(filename string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#dirFilter",
              "documentation": {
                "identifier": "dirFilter",
                "newPage": false,
                "searchKey": "parser.dirFilter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func dirFilter(f fs.FileInfo) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dirFilter(f fs.FileInfo) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestParseFile",
              "documentation": {
                "identifier": "TestParseFile",
                "newPage": false,
                "searchKey": "parser.TestParseFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestParseExprFrom",
              "documentation": {
                "identifier": "TestParseExprFrom",
                "newPage": false,
                "searchKey": "parser.TestParseExprFrom",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseExprFrom(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseExprFrom(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestParseDir",
              "documentation": {
                "identifier": "TestParseDir",
                "newPage": false,
                "searchKey": "parser.TestParseDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseDir(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseDir(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestIssue42951",
              "documentation": {
                "identifier": "TestIssue42951",
                "newPage": false,
                "searchKey": "parser.TestIssue42951",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue42951(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue42951(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestParseExpr",
              "documentation": {
                "identifier": "TestParseExpr",
                "newPage": false,
                "searchKey": "parser.TestParseExpr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseExpr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseExpr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestColonEqualsScope",
              "documentation": {
                "identifier": "TestColonEqualsScope",
                "newPage": false,
                "searchKey": "parser.TestColonEqualsScope",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestColonEqualsScope(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestColonEqualsScope(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestVarScope",
              "documentation": {
                "identifier": "TestVarScope",
                "newPage": false,
                "searchKey": "parser.TestVarScope",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVarScope(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVarScope(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestObjects",
              "documentation": {
                "identifier": "TestObjects",
                "newPage": false,
                "searchKey": "parser.TestObjects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestObjects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestObjects(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestUnresolved",
              "documentation": {
                "identifier": "TestUnresolved",
                "newPage": false,
                "searchKey": "parser.TestUnresolved",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnresolved(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnresolved(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestImports",
              "documentation": {
                "identifier": "TestImports",
                "newPage": false,
                "searchKey": "parser.TestImports",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImports(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImports(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestCommentGroups",
              "documentation": {
                "identifier": "TestCommentGroups",
                "newPage": false,
                "searchKey": "parser.TestCommentGroups",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCommentGroups(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCommentGroups(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#getField",
              "documentation": {
                "identifier": "getField",
                "newPage": false,
                "searchKey": "parser.getField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getField(file *ast.File, fieldname string) *ast.Field"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getField(file *ast.File, fieldname string) *ast.Field\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#commentText",
              "documentation": {
                "identifier": "commentText",
                "newPage": false,
                "searchKey": "parser.commentText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func commentText(c *ast.CommentGroup) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc commentText(c *ast.CommentGroup) string\n```\n\nDon't use ast.CommentGroup.Text() - we want to see exact comment text. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#checkFieldComments",
              "documentation": {
                "identifier": "checkFieldComments",
                "newPage": false,
                "searchKey": "parser.checkFieldComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkFieldComments(t *testing.T, file *ast.File, fieldname, lead, line string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkFieldComments(t *testing.T, file *ast.File, fieldname, lead, line string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestLeadAndLineComments",
              "documentation": {
                "identifier": "TestLeadAndLineComments",
                "newPage": false,
                "searchKey": "parser.TestLeadAndLineComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLeadAndLineComments(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLeadAndLineComments(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestIssue9979",
              "documentation": {
                "identifier": "TestIssue9979",
                "newPage": false,
                "searchKey": "parser.TestIssue9979",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue9979(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue9979(t *testing.T)\n```\n\nTestIssue9979 verifies that empty statements are contained within their enclosing blocks. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestIncompleteSelection",
              "documentation": {
                "identifier": "TestIncompleteSelection",
                "newPage": false,
                "searchKey": "parser.TestIncompleteSelection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncompleteSelection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncompleteSelection(t *testing.T)\n```\n\nTestIncompleteSelection ensures that an incomplete selector expression is parsed as a (blank) *ast.SelectorExpr, not a *ast.BadExpr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestLastLineComment",
              "documentation": {
                "identifier": "TestLastLineComment",
                "newPage": false,
                "searchKey": "parser.TestLastLineComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLastLineComment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLastLineComment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#readFile",
              "documentation": {
                "identifier": "readFile",
                "newPage": false,
                "searchKey": "parser.readFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readFile(filename string) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readFile(filename string) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#BenchmarkParse",
              "documentation": {
                "identifier": "BenchmarkParse",
                "newPage": false,
                "searchKey": "parser.BenchmarkParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkParse(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkParse(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#BenchmarkParseOnly",
              "documentation": {
                "identifier": "BenchmarkParseOnly",
                "newPage": false,
                "searchKey": "parser.BenchmarkParseOnly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkParseOnly(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkParseOnly(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#BenchmarkResolve",
              "documentation": {
                "identifier": "BenchmarkResolve",
                "newPage": false,
                "searchKey": "parser.BenchmarkResolve",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkResolve(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkResolve(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestResolution",
              "documentation": {
                "identifier": "TestResolution",
                "newPage": false,
                "searchKey": "parser.TestResolution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolution(t *testing.T)\n```\n\nTestResolution checks that identifiers are resolved to the declarations annotated in the source, by comparing the positions of the resulting Ident.Obj.Decl to positions marked in the source via special comments. \n\nIn the test source, any comment prefixed with '=' or '@' (or both) marks the previous token position as the declaration ('=') or a use ('@') of an identifier. The text following '=' and '@' in the comment string is the label to use for the location.  Declaration labels must be unique within the file, and use labels must refer to an existing declaration label. It's OK for a comment to denote both the declaration and use of a label (e.g. '=@foo'). Leading and trailing whitespace is ignored. Any comment not beginning with '=' or '@' is ignored. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#declsFromParser",
              "documentation": {
                "identifier": "declsFromParser",
                "newPage": false,
                "searchKey": "parser.declsFromParser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func declsFromParser(file *ast.File) map[token.Pos]token.Pos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc declsFromParser(file *ast.File) map[token.Pos]token.Pos\n```\n\ndeclsFromParser walks the file and collects the map associating an identifier position with its declaration position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#declsFromComments",
              "documentation": {
                "identifier": "declsFromComments",
                "newPage": false,
                "searchKey": "parser.declsFromComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func declsFromComments(handle *token.File, src []byte) map[token.Pos]token.Pos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc declsFromComments(handle *token.File, src []byte) map[token.Pos]token.Pos\n```\n\ndeclsFromComments looks at comments annotating uses and declarations, and maps each identifier use to its corresponding declaration. See the description of these annotations in the documentation for TestResolution. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#positionMarkers",
              "documentation": {
                "identifier": "positionMarkers",
                "newPage": false,
                "searchKey": "parser.positionMarkers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func positionMarkers(handle *token.File, src []byte) (decls map[string]token.Pos, uses map[string][]token.Pos)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc positionMarkers(handle *token.File, src []byte) (decls map[string]token.Pos, uses map[string][]token.Pos)\n```\n\npositionMarkers extracts named positions from the source denoted by comments prefixed with '=' (declarations) and '@' (uses): for example '@foo' or '=@bar'. It returns a map of name->position for declarations, and name->position(s) for uses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#annotatedObj",
              "documentation": {
                "identifier": "annotatedObj",
                "newPage": false,
                "searchKey": "parser.annotatedObj",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func annotatedObj(lit string) (name string, decl, use bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc annotatedObj(lit string) (name string, decl, use bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestValid",
              "documentation": {
                "identifier": "TestValid",
                "newPage": false,
                "searchKey": "parser.TestValid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestSingle",
              "documentation": {
                "identifier": "TestSingle",
                "newPage": false,
                "searchKey": "parser.TestSingle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSingle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSingle(t *testing.T)\n```\n\nTestSingle is useful to track down a problem with a single short test program. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/go/parser#TestInvalid",
              "documentation": {
                "identifier": "TestInvalid",
                "newPage": false,
                "searchKey": "parser.TestInvalid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
