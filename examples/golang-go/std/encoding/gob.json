{
  "pathID": "/std/encoding/gob",
  "documentation": {
    "identifier": "gob",
    "newPage": true,
    "searchKey": "std/encoding/gob",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package gob"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package gob manages streams of gobs - binary values exchanged between an Encoder (transmitter) and a Decoder (receiver). A typical use is transporting arguments and results of remote procedure calls (RPCs) such as those provided by package \"net/rpc\". \n\nThe implementation compiles a custom codec for each data type in the stream and is most efficient when a single Encoder is used to transmit a stream of values, amortizing the cost of compilation. \n\n### hdr-BasicsBasics\nA stream of gobs is self-describing. Each data item in the stream is preceded by a specification of its type, expressed in terms of a small set of predefined types. Pointers are not transmitted, but the things they point to are transmitted; that is, the values are flattened. Nil pointers are not permitted, as they have no value. Recursive types work fine, but recursive values (data with cycles) are problematic. This may change. \n\nTo use gobs, create an Encoder and present it with a series of data items as values or addresses that can be dereferenced to values. The Encoder makes sure all type information is sent before it is needed. At the receive side, a Decoder retrieves values from the encoded stream and unpacks them into local variables. \n\n### hdr-Types_and_ValuesTypes and Values\nThe source and destination values/types need not correspond exactly. For structs, fields (identified by name) that are in the source but absent from the receiving variable will be ignored. Fields that are in the receiving variable but missing from the transmitted type or value will be ignored in the destination. If a field with the same name is present in both, their types must be compatible. Both the receiver and transmitter will do all necessary indirection and dereferencing to convert between gobs and actual Go values. For instance, a gob type that is schematically, \n\n```\nstruct { A, B int }\n\n```\ncan be sent from or received into any of these Go types: \n\n```\nstruct { A, B int }\t// the same\n*struct { A, B int }\t// extra indirection of the struct\nstruct { *A, **B int }\t// extra indirection of the fields\nstruct { A, B int64 }\t// different concrete value type; see below\n\n```\nIt may also be received into any of these: \n\n```\nstruct { A, B int }\t// the same\nstruct { B, A int }\t// ordering doesn't matter; matching is by name\nstruct { A, B, C int }\t// extra field (C) ignored\nstruct { B int }\t// missing field (A) ignored; data will be dropped\nstruct { B, C int }\t// missing field (A) ignored; extra field (C) ignored.\n\n```\nAttempting to receive into these types will draw a decode error: \n\n```\nstruct { A int; B uint }\t// change of signedness for B\nstruct { A int; B float }\t// change of type for B\nstruct { }\t\t\t// no field names in common\nstruct { C, D int }\t\t// no field names in common\n\n```\nIntegers are transmitted two ways: arbitrary precision signed integers or arbitrary precision unsigned integers. There is no int8, int16 etc. discrimination in the gob format; there are only signed and unsigned integers. As described below, the transmitter sends the value in a variable-length encoding; the receiver accepts the value and stores it in the destination variable. Floating-point numbers are always sent using IEEE-754 64-bit precision (see below). \n\nSigned integers may be received into any signed integer variable: int, int16, etc.; unsigned integers may be received into any unsigned integer variable; and floating point values may be received into any floating point variable. However, the destination variable must be able to represent the value or the decode operation will fail. \n\nStructs, arrays and slices are also supported. Structs encode and decode only exported fields. Strings and arrays of bytes are supported with a special, efficient representation (see below). When a slice is decoded, if the existing slice has capacity the slice will be extended in place; if not, a new array is allocated. Regardless, the length of the resulting slice reports the number of elements decoded. \n\nIn general, if allocation is required, the decoder will allocate memory. If not, it will update the destination variables with values read from the stream. It does not initialize them first, so if the destination is a compound value such as a map, struct, or slice, the decoded values will be merged elementwise into the existing variables. \n\nFunctions and channels will not be sent in a gob. Attempting to encode such a value at the top level will fail. A struct field of chan or func type is treated exactly like an unexported field and is ignored. \n\nGob can encode a value of any type implementing the GobEncoder or encoding.BinaryMarshaler interfaces by calling the corresponding method, in that order of preference. \n\nGob can decode a value of any type implementing the GobDecoder or encoding.BinaryUnmarshaler interfaces by calling the corresponding method, again in that order of preference. \n\n### hdr-Encoding_DetailsEncoding Details\nThis section documents the encoding, details that are not important for most users. Details are presented bottom-up. \n\nAn unsigned integer is sent one of two ways. If it is less than 128, it is sent as a byte with that value. Otherwise it is sent as a minimal-length big-endian (high byte first) byte stream holding the value, preceded by one byte holding the byte count, negated. Thus 0 is transmitted as (00), 7 is transmitted as (07) and 256 is transmitted as (FE 01 00). \n\nA boolean is encoded within an unsigned integer: 0 for false, 1 for true. \n\nA signed integer, i, is encoded within an unsigned integer, u. Within u, bits 1 upward contain the value; bit 0 says whether they should be complemented upon receipt. The encode algorithm looks like this: \n\n```\nvar u uint\nif i < 0 {\n\tu = (^uint(i) << 1) | 1 // complement i, bit 0 is 1\n} else {\n\tu = (uint(i) << 1) // do not complement i, bit 0 is 0\n}\nencodeUnsigned(u)\n\n```\nThe low bit is therefore analogous to a sign bit, but making it the complement bit instead guarantees that the largest negative integer is not a special case. For example, -129=^128=(^256>>1) encodes as (FE 01 01). \n\nFloating-point numbers are always sent as a representation of a float64 value. That value is converted to a uint64 using math.Float64bits. The uint64 is then byte-reversed and sent as a regular unsigned integer. The byte-reversal means the exponent and high-precision part of the mantissa go first. Since the low bits are often zero, this can save encoding bytes. For instance, 17.0 is encoded in only three bytes (FE 31 40). \n\nStrings and slices of bytes are sent as an unsigned count followed by that many uninterpreted bytes of the value. \n\nAll other slices and arrays are sent as an unsigned count followed by that many elements using the standard gob encoding for their type, recursively. \n\nMaps are sent as an unsigned count followed by that many key, element pairs. Empty but non-nil maps are sent, so if the receiver has not allocated one already, one will always be allocated on receipt unless the transmitted map is nil and not at the top level. \n\nIn slices and arrays, as well as maps, all elements, even zero-valued elements, are transmitted, even if all the elements are zero. \n\nStructs are sent as a sequence of (field number, field value) pairs. The field value is sent using the standard gob encoding for its type, recursively. If a field has the zero value for its type (except for arrays; see above), it is omitted from the transmission. The field number is defined by the type of the encoded struct: the first field of the encoded type is field 0, the second is field 1, etc. When encoding a value, the field numbers are delta encoded for efficiency and the fields are always sent in order of increasing field number; the deltas are therefore unsigned. The initialization for the delta encoding sets the field number to -1, so an unsigned integer field 0 with value 7 is transmitted as unsigned delta = 1, unsigned value = 7 or (01 07). Finally, after all the fields have been sent a terminating mark denotes the end of the struct. That mark is a delta=0 value, which has representation (00). \n\nInterface types are not checked for compatibility; all interface types are treated, for transmission, as members of a single \"interface\" type, analogous to int or []byte - in effect they're all treated as interface{}. Interface values are transmitted as a string identifying the concrete type being sent (a name that must be pre-defined by calling Register), followed by a byte count of the length of the following data (so the value can be skipped if it cannot be stored), followed by the usual encoding of concrete (dynamic) value stored in the interface value. (A nil interface value is identified by the empty string and transmits no value.) Upon receipt, the decoder verifies that the unpacked concrete item satisfies the interface of the receiving variable. \n\nIf a value is passed to Encode and the type is not a struct (or pointer to struct, etc.), for simplicity of processing it is represented as a struct of one field. The only visible effect of this is to encode a zero byte after the value, just as after the last field of an encoded struct, so that the decode algorithm knows when the top-level value is complete. \n\nThe representation of types is described below. When a type is defined on a given connection between an Encoder and Decoder, it is assigned a signed integer type id. When Encoder.Encode(v) is called, it makes sure there is an id assigned for the type of v and all its elements and then it sends the pair (typeid, encoded-v) where typeid is the type id of the encoded type of v and encoded-v is the gob encoding of the value v. \n\nTo define a type, the encoder chooses an unused, positive type id and sends the pair (-type id, encoded-type) where encoded-type is the gob encoding of a wireType description, constructed from these types: \n\n```\ntype wireType struct {\n\tArrayT           *ArrayType\n\tSliceT           *SliceType\n\tStructT          *StructType\n\tMapT             *MapType\n\tGobEncoderT      *gobEncoderType\n\tBinaryMarshalerT *gobEncoderType\n\tTextMarshalerT   *gobEncoderType\n\n}\ntype arrayType struct {\n\tCommonType\n\tElem typeId\n\tLen  int\n}\ntype CommonType struct {\n\tName string // the name of the struct type\n\tId  int    // the id of the type, repeated so it's inside the type\n}\ntype sliceType struct {\n\tCommonType\n\tElem typeId\n}\ntype structType struct {\n\tCommonType\n\tField []*fieldType // the fields of the struct.\n}\ntype fieldType struct {\n\tName string // the name of the field.\n\tId   int    // the type id of the field, which must be already defined\n}\ntype mapType struct {\n\tCommonType\n\tKey  typeId\n\tElem typeId\n}\ntype gobEncoderType struct {\n\tCommonType\n}\n\n```\nIf there are nested type ids, the types for all inner type ids must be defined before the top-level type id is used to describe an encoded-v. \n\nFor simplicity in setup, the connection is defined to understand these types a priori, as well as the basic gob types int, uint, etc. Their ids are: \n\n```\nbool        1\nint         2\nuint        3\nfloat       4\n[]byte      5\nstring      6\ncomplex     7\ninterface   8\n// gap for reserved ids.\nWireType    16\nArrayType   17\nCommonType  18\nSliceType   19\nStructType  20\nFieldType   21\n// 22 is slice of fieldType.\nMapType     23\n\n```\nFinally, each message created by a call to Encode is preceded by an encoded unsigned integer count of the number of bytes remaining in the message. After the initial type name, interface values are wrapped the same way; in effect, the interface value acts like a recursive invocation of Encode. \n\nIn summary, a gob stream looks like \n\n```\n(byteCount (-type id, encoding of a wireType)* (type id, encoding of a value))*\n\n```\nwhere * signifies zero or more repetitions and the type id of a value must be predefined or be defined before the value in the stream. \n\nCompatibility: Any future changes to the package will endeavor to maintain compatibility with streams encoded using previous versions. That is, any released version of this package should be able to decode data written with any previously released version, subject to issues such as security fixes. See the Go compatibility document for background: [https://golang.org/doc/go1compat](https://golang.org/doc/go1compat) \n\nSee \"Gobs of data\" for a design discussion of the gob wire format: [https://blog.golang.org/gobs-of-data](https://blog.golang.org/gobs-of-data) \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/encoding/gob#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/gob#tooBig",
              "documentation": {
                "identifier": "tooBig",
                "newPage": false,
                "searchKey": "gob.tooBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tooBig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tooBig = (1 << 30) << (^uint(0) >> 62)\n```\n\ntooBig provides a sanity check for sizes; used in several places. Upper limit of is 1GB on 32-bit systems, 8GB on 64-bit, allowing room to grow a little without overflow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#uint64Size",
              "documentation": {
                "identifier": "uint64Size",
                "newPage": false,
                "searchKey": "gob.uint64Size",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const uint64Size"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uint64Size = 8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#singletonField",
              "documentation": {
                "identifier": "singletonField",
                "newPage": false,
                "searchKey": "gob.singletonField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const singletonField"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst singletonField = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#maxLength",
              "documentation": {
                "identifier": "maxLength",
                "newPage": false,
                "searchKey": "gob.maxLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxLength = 9 // Maximum size of an encoded length.\n\n```\n\nBefore we encode a message, we reserve space at the head of the buffer in which to encode its length. This means we can use the buffer to assemble the message without another allocation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#xGob",
              "documentation": {
                "identifier": "xGob",
                "newPage": false,
                "searchKey": "gob.xGob",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xGob"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xGob = 1 + iota // GobEncoder or GobDecoder\n\n```\n\nexternalEncoding bits \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#xBinary",
              "documentation": {
                "identifier": "xBinary",
                "newPage": false,
                "searchKey": "gob.xBinary",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xBinary"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xBinary // encoding.BinaryMarshaler or encoding.BinaryUnmarshaler\n\n```\n\nexternalEncoding bits \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#xText",
              "documentation": {
                "identifier": "xText",
                "newPage": false,
                "searchKey": "gob.xText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xText"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xText // encoding.TextMarshaler or encoding.TextUnmarshaler\n\n```\n\nexternalEncoding bits \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#firstUserId",
              "documentation": {
                "identifier": "firstUserId",
                "newPage": false,
                "searchKey": "gob.firstUserId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const firstUserId"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst firstUserId = 64 // lowest id number granted to user\n\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/encoding/gob#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/gob#decArrayHelper",
              "documentation": {
                "identifier": "decArrayHelper",
                "newPage": false,
                "searchKey": "gob.decArrayHelper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var decArrayHelper"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar decArrayHelper = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decSliceHelper",
              "documentation": {
                "identifier": "decSliceHelper",
                "newPage": false,
                "searchKey": "gob.decSliceHelper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var decSliceHelper"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar decSliceHelper = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#errBadUint",
              "documentation": {
                "identifier": "errBadUint",
                "newPage": false,
                "searchKey": "gob.errBadUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errBadUint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errBadUint = errors.New(\"gob: encoded unsigned integer out of range\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#errBadType",
              "documentation": {
                "identifier": "errBadType",
                "newPage": false,
                "searchKey": "gob.errBadType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errBadType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errBadType = errors.New(\"gob: unknown type id or corrupted data\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#errRange",
              "documentation": {
                "identifier": "errRange",
                "newPage": false,
                "searchKey": "gob.errRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errRange"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errRange = errors.New(\"gob: bad data: field numbers out of bounds\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#noValue",
              "documentation": {
                "identifier": "noValue",
                "newPage": false,
                "searchKey": "gob.noValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var noValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar noValue reflect.Value\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decOpTable",
              "documentation": {
                "identifier": "decOpTable",
                "newPage": false,
                "searchKey": "gob.decOpTable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var decOpTable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar decOpTable = ...\n```\n\nIndex by Go types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decIgnoreOpMap",
              "documentation": {
                "identifier": "decIgnoreOpMap",
                "newPage": false,
                "searchKey": "gob.decIgnoreOpMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var decIgnoreOpMap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar decIgnoreOpMap = ...\n```\n\nIndexed by gob types.  tComplex will be added during type.init(). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#emptyStructType",
              "documentation": {
                "identifier": "emptyStructType",
                "newPage": false,
                "searchKey": "gob.emptyStructType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var emptyStructType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar emptyStructType = reflect.TypeOf(emptyStruct{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#errBadCount",
              "documentation": {
                "identifier": "errBadCount",
                "newPage": false,
                "searchKey": "gob.errBadCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errBadCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errBadCount = errors.New(\"invalid message length\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#debugFunc",
              "documentation": {
                "identifier": "debugFunc",
                "newPage": false,
                "searchKey": "gob.debugFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var debugFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar debugFunc func(io.Reader)\n```\n\nIf debug.go is compiled into the program, debugFunc prints a human-readable representation of the gob data read from r by calling that file's Debug function. Otherwise it is nil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encArrayHelper",
              "documentation": {
                "identifier": "encArrayHelper",
                "newPage": false,
                "searchKey": "gob.encArrayHelper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encArrayHelper"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encArrayHelper = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encSliceHelper",
              "documentation": {
                "identifier": "encSliceHelper",
                "newPage": false,
                "searchKey": "gob.encSliceHelper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encSliceHelper"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encSliceHelper = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encBufferPool",
              "documentation": {
                "identifier": "encBufferPool",
                "newPage": false,
                "searchKey": "gob.encBufferPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encBufferPool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encBufferPool = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encOpTable",
              "documentation": {
                "identifier": "encOpTable",
                "newPage": false,
                "searchKey": "gob.encOpTable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encOpTable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encOpTable = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#spaceForLength",
              "documentation": {
                "identifier": "spaceForLength",
                "newPage": false,
                "searchKey": "gob.spaceForLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var spaceForLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar spaceForLength = make([]byte, maxLength)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#userTypeCache",
              "documentation": {
                "identifier": "userTypeCache",
                "newPage": false,
                "searchKey": "gob.userTypeCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var userTypeCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar userTypeCache sync.Map // map[reflect.Type]*userTypeInfo\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#gobEncoderInterfaceType",
              "documentation": {
                "identifier": "gobEncoderInterfaceType",
                "newPage": false,
                "searchKey": "gob.gobEncoderInterfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var gobEncoderInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gobEncoderInterfaceType = reflect.TypeOf((*GobEncoder)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#gobDecoderInterfaceType",
              "documentation": {
                "identifier": "gobDecoderInterfaceType",
                "newPage": false,
                "searchKey": "gob.gobDecoderInterfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var gobDecoderInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gobDecoderInterfaceType = reflect.TypeOf((*GobDecoder)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#binaryMarshalerInterfaceType",
              "documentation": {
                "identifier": "binaryMarshalerInterfaceType",
                "newPage": false,
                "searchKey": "gob.binaryMarshalerInterfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var binaryMarshalerInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar binaryMarshalerInterfaceType = reflect.TypeOf((*encoding.BinaryMarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#binaryUnmarshalerInterfaceType",
              "documentation": {
                "identifier": "binaryUnmarshalerInterfaceType",
                "newPage": false,
                "searchKey": "gob.binaryUnmarshalerInterfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var binaryUnmarshalerInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar binaryUnmarshalerInterfaceType = reflect.TypeOf((*encoding.BinaryUnmarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#textMarshalerInterfaceType",
              "documentation": {
                "identifier": "textMarshalerInterfaceType",
                "newPage": false,
                "searchKey": "gob.textMarshalerInterfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textMarshalerInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textMarshalerInterfaceType = reflect.TypeOf((*encoding.TextMarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#textUnmarshalerInterfaceType",
              "documentation": {
                "identifier": "textUnmarshalerInterfaceType",
                "newPage": false,
                "searchKey": "gob.textUnmarshalerInterfaceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textUnmarshalerInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textUnmarshalerInterfaceType = reflect.TypeOf((*encoding.TextUnmarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#nextId",
              "documentation": {
                "identifier": "nextId",
                "newPage": false,
                "searchKey": "gob.nextId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nextId"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nextId typeId // incremented for each new type we build\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#typeLock",
              "documentation": {
                "identifier": "typeLock",
                "newPage": false,
                "searchKey": "gob.typeLock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var typeLock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar typeLock sync.Mutex // set while building a type\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#types",
              "documentation": {
                "identifier": "types",
                "newPage": false,
                "searchKey": "gob.types",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var types"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar types = make(map[reflect.Type]gobType)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#idToType",
              "documentation": {
                "identifier": "idToType",
                "newPage": false,
                "searchKey": "gob.idToType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var idToType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar idToType = make(map[typeId]gobType)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#builtinIdToType",
              "documentation": {
                "identifier": "builtinIdToType",
                "newPage": false,
                "searchKey": "gob.builtinIdToType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var builtinIdToType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar builtinIdToType map[typeId]gobType // set in init() after builtins are established\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tBool",
              "documentation": {
                "identifier": "tBool",
                "newPage": false,
                "searchKey": "gob.tBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tBool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tBool = bootstrapType(\"bool\", (*bool)(nil), 1)\n```\n\nPrimordial types, needed during initialization. Always passed as pointers so the interface{} type goes through without losing its interfaceness. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tInt",
              "documentation": {
                "identifier": "tInt",
                "newPage": false,
                "searchKey": "gob.tInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tInt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tInt = bootstrapType(\"int\", (*int)(nil), 2)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tUint",
              "documentation": {
                "identifier": "tUint",
                "newPage": false,
                "searchKey": "gob.tUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tUint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tUint = bootstrapType(\"uint\", (*uint)(nil), 3)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tFloat",
              "documentation": {
                "identifier": "tFloat",
                "newPage": false,
                "searchKey": "gob.tFloat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tFloat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tFloat = bootstrapType(\"float\", (*float64)(nil), 4)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tBytes",
              "documentation": {
                "identifier": "tBytes",
                "newPage": false,
                "searchKey": "gob.tBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tBytes = bootstrapType(\"bytes\", (*[]byte)(nil), 5)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tString",
              "documentation": {
                "identifier": "tString",
                "newPage": false,
                "searchKey": "gob.tString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tString = bootstrapType(\"string\", (*string)(nil), 6)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tComplex",
              "documentation": {
                "identifier": "tComplex",
                "newPage": false,
                "searchKey": "gob.tComplex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tComplex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tComplex = bootstrapType(\"complex\", (*complex128)(nil), 7)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tInterface",
              "documentation": {
                "identifier": "tInterface",
                "newPage": false,
                "searchKey": "gob.tInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tInterface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tInterface = bootstrapType(\"interface\", (*interface{})(nil), 8)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved7",
              "documentation": {
                "identifier": "tReserved7",
                "newPage": false,
                "searchKey": "gob.tReserved7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved7 = bootstrapType(\"_reserved1\", (*struct{ r7 int })(nil), 9)\n```\n\nReserve some Ids for compatible expansion \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved6",
              "documentation": {
                "identifier": "tReserved6",
                "newPage": false,
                "searchKey": "gob.tReserved6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved6 = bootstrapType(\"_reserved1\", (*struct{ r6 int })(nil), 10)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved5",
              "documentation": {
                "identifier": "tReserved5",
                "newPage": false,
                "searchKey": "gob.tReserved5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved5 = bootstrapType(\"_reserved1\", (*struct{ r5 int })(nil), 11)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved4",
              "documentation": {
                "identifier": "tReserved4",
                "newPage": false,
                "searchKey": "gob.tReserved4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved4 = bootstrapType(\"_reserved1\", (*struct{ r4 int })(nil), 12)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved3",
              "documentation": {
                "identifier": "tReserved3",
                "newPage": false,
                "searchKey": "gob.tReserved3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved3 = bootstrapType(\"_reserved1\", (*struct{ r3 int })(nil), 13)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved2",
              "documentation": {
                "identifier": "tReserved2",
                "newPage": false,
                "searchKey": "gob.tReserved2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved2 = bootstrapType(\"_reserved1\", (*struct{ r2 int })(nil), 14)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tReserved1",
              "documentation": {
                "identifier": "tReserved1",
                "newPage": false,
                "searchKey": "gob.tReserved1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tReserved1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tReserved1 = bootstrapType(\"_reserved1\", (*struct{ r1 int })(nil), 15)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#tWireType",
              "documentation": {
                "identifier": "tWireType",
                "newPage": false,
                "searchKey": "gob.tWireType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tWireType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tWireType = mustGetTypeInfo(reflect.TypeOf(wireType{})).id\n```\n\nPredefined because it's needed by the Decoder \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#wireTypeUserInfo",
              "documentation": {
                "identifier": "wireTypeUserInfo",
                "newPage": false,
                "searchKey": "gob.wireTypeUserInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var wireTypeUserInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar wireTypeUserInfo *userTypeInfo // userTypeInfo of (*wireType)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#typeInfoMap",
              "documentation": {
                "identifier": "typeInfoMap",
                "newPage": false,
                "searchKey": "gob.typeInfoMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var typeInfoMap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar typeInfoMap atomic.Value\n```\n\ntypeInfoMap is an atomic pointer to map[reflect.Type]*typeInfo. It's updated copy-on-write. Readers just do an atomic load to get the current version of the map. Writers make a full copy of the map and atomically update the pointer to point to the new map. Under heavy read contention, this is significantly faster than a map protected by a mutex. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#nameToConcreteType",
              "documentation": {
                "identifier": "nameToConcreteType",
                "newPage": false,
                "searchKey": "gob.nameToConcreteType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameToConcreteType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameToConcreteType sync.Map // map[string]reflect.Type\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#concreteTypeToName",
              "documentation": {
                "identifier": "concreteTypeToName",
                "newPage": false,
                "searchKey": "gob.concreteTypeToName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var concreteTypeToName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar concreteTypeToName sync.Map // map[reflect.Type]string\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#doFuzzTests",
              "documentation": {
                "identifier": "doFuzzTests",
                "newPage": false,
                "searchKey": "gob.doFuzzTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var doFuzzTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar doFuzzTests = flag.Bool(\"gob.fuzz\", false, \"run the fuzz tests, which are large and very slow\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encodeT",
              "documentation": {
                "identifier": "encodeT",
                "newPage": false,
                "searchKey": "gob.encodeT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encodeT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encodeT = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#boolResult",
              "documentation": {
                "identifier": "boolResult",
                "newPage": false,
                "searchKey": "gob.boolResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var boolResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar boolResult = []byte{0x07, 0x01}\n```\n\nThe result of encoding a true boolean with field number 7 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#signedResult",
              "documentation": {
                "identifier": "signedResult",
                "newPage": false,
                "searchKey": "gob.signedResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var signedResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar signedResult = []byte{0x07, 2 * 17}\n```\n\nThe result of encoding a number 17 with field number 7 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#unsignedResult",
              "documentation": {
                "identifier": "unsignedResult",
                "newPage": false,
                "searchKey": "gob.unsignedResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unsignedResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unsignedResult = []byte{0x07, 17}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#floatResult",
              "documentation": {
                "identifier": "floatResult",
                "newPage": false,
                "searchKey": "gob.floatResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var floatResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar floatResult = []byte{0x07, 0xFE, 0x31, 0x40}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#complexResult",
              "documentation": {
                "identifier": "complexResult",
                "newPage": false,
                "searchKey": "gob.complexResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var complexResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar complexResult = []byte{0x07, 0xFE, 0x31, 0x40, 0xFE, 0x33, 0x40}\n```\n\nThe result of encoding a number 17+19i with field number 7 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#bytesResult",
              "documentation": {
                "identifier": "bytesResult",
                "newPage": false,
                "searchKey": "gob.bytesResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var bytesResult"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bytesResult = []byte{0x07, 0x05, 'h', 'e', 'l', 'l', 'o'}\n```\n\nThe result of encoding \"hello\" with field number 7 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#singletons",
              "documentation": {
                "identifier": "singletons",
                "newPage": false,
                "searchKey": "gob.singletons",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var singletons"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar singletons = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#unsupportedValues",
              "documentation": {
                "identifier": "unsupportedValues",
                "newPage": false,
                "searchKey": "gob.unsupportedValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unsupportedValues"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unsupportedValues = []interface{}{\n\tmake(chan int),\n\tfunc(a int) bool { return true },\n}\n```\n\nTypes not supported at top level by the Encoder. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testInt",
              "documentation": {
                "identifier": "testInt",
                "newPage": false,
                "searchKey": "gob.testInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testInt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testInt int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testFloat32",
              "documentation": {
                "identifier": "testFloat32",
                "newPage": false,
                "searchKey": "gob.testFloat32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testFloat32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testFloat32 float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testString",
              "documentation": {
                "identifier": "testString",
                "newPage": false,
                "searchKey": "gob.testString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testString string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testSlice",
              "documentation": {
                "identifier": "testSlice",
                "newPage": false,
                "searchKey": "gob.testSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testSlice []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testMap",
              "documentation": {
                "identifier": "testMap",
                "newPage": false,
                "searchKey": "gob.testMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testMap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testMap map[string]int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testArray",
              "documentation": {
                "identifier": "testArray",
                "newPage": false,
                "searchKey": "gob.testArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testArray"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testArray [7]int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#singleTests",
              "documentation": {
                "identifier": "singleTests",
                "newPage": false,
                "searchKey": "gob.singleTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var singleTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar singleTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ignoreTests",
              "documentation": {
                "identifier": "ignoreTests",
                "newPage": false,
                "searchKey": "gob.ignoreTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ignoreTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ignoreTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#badDataTests",
              "documentation": {
                "identifier": "badDataTests",
                "newPage": false,
                "searchKey": "gob.badDataTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var badDataTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar badDataTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#basicTypes",
              "documentation": {
                "identifier": "basicTypes",
                "newPage": false,
                "searchKey": "gob.basicTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var basicTypes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar basicTypes = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/encoding/gob#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/gob#decHelper",
              "documentation": {
                "identifier": "decHelper",
                "newPage": false,
                "searchKey": "gob.decHelper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decHelper func(state *std/encoding/gob.decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decHelper func(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decoderState",
              "documentation": {
                "identifier": "decoderState",
                "newPage": false,
                "searchKey": "gob.decoderState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decoderState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decoderState struct {\n\tdec *Decoder\n\t// The buffer is stored with an extra indirection because it may be replaced\n\t// if we load a type during decode (when reading an interface value).\n\tb        *decBuffer\n\tfieldnum int           // the last field number read.\n\tnext     *decoderState // for free list\n}\n```\n\ndecoderState is the execution state of an instance of the decoder. A new state is created for nested objects. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newDecodeState",
                    "documentation": {
                      "identifier": "newDecodeState",
                      "newPage": false,
                      "searchKey": "gob.newDecodeState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newDecodeState(buf *decBuffer) *decoderState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newDecodeState(buf *decBuffer) *decoderState\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newDecodeStateFromData",
                    "documentation": {
                      "identifier": "newDecodeStateFromData",
                      "newPage": false,
                      "searchKey": "gob.newDecodeStateFromData",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newDecodeStateFromData(data []byte) *decoderState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newDecodeStateFromData(data []byte) *decoderState\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decoderState.decodeUint",
                    "documentation": {
                      "identifier": "decoderState.decodeUint",
                      "newPage": false,
                      "searchKey": "gob.decoderState.decodeUint",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *decoderState) decodeUint() (x uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *decoderState) decodeUint() (x uint64)\n```\n\ndecodeUint reads an encoded unsigned integer from state.r. Does not check for overflow. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decoderState.decodeInt",
                    "documentation": {
                      "identifier": "decoderState.decodeInt",
                      "newPage": false,
                      "searchKey": "gob.decoderState.decodeInt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *decoderState) decodeInt() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *decoderState) decodeInt() int64\n```\n\ndecodeInt reads an encoded signed integer from state.r. Does not check for overflow. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decoderState.getLength",
                    "documentation": {
                      "identifier": "decoderState.getLength",
                      "newPage": false,
                      "searchKey": "gob.decoderState.getLength",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *decoderState) getLength() (int, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *decoderState) getLength() (int, bool)\n```\n\ngetLength decodes the next uint and makes sure it is a possible size for a data item that follows, which means it must fit in a non-negative int and fit in the buffer. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decBuffer",
              "documentation": {
                "identifier": "decBuffer",
                "newPage": false,
                "searchKey": "gob.decBuffer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decBuffer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decBuffer struct {\n\tdata   []byte\n\toffset int // Read offset.\n}\n```\n\ndecBuffer is an extremely simple, fast implementation of a read-only byte buffer. It is initialized by calling Size and then copying the data into the slice returned by Bytes(). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newDecBuffer",
                    "documentation": {
                      "identifier": "newDecBuffer",
                      "newPage": false,
                      "searchKey": "gob.newDecBuffer",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newDecBuffer(data []byte) *decBuffer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newDecBuffer(data []byte) *decBuffer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.Read",
                    "documentation": {
                      "identifier": "decBuffer.Read",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.Drop",
                    "documentation": {
                      "identifier": "decBuffer.Drop",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.Drop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) Drop(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) Drop(n int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.Size",
                    "documentation": {
                      "identifier": "decBuffer.Size",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.Size",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) Size(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) Size(n int)\n```\n\nSize grows the buffer to exactly n bytes, so d.Bytes() will return a slice of length n. Existing data is first discarded. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.ReadByte",
                    "documentation": {
                      "identifier": "decBuffer.ReadByte",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.ReadByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) ReadByte() (byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) ReadByte() (byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.Len",
                    "documentation": {
                      "identifier": "decBuffer.Len",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.Bytes",
                    "documentation": {
                      "identifier": "decBuffer.Bytes",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.Bytes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) Bytes() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) Bytes() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#decBuffer.Reset",
                    "documentation": {
                      "identifier": "decBuffer.Reset",
                      "newPage": false,
                      "searchKey": "gob.decBuffer.Reset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decBuffer) Reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decBuffer) Reset()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decOp",
              "documentation": {
                "identifier": "decOp",
                "newPage": false,
                "searchKey": "gob.decOp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decOp func(i *std/encoding/gob.decInstr, state *std/encoding/gob.decoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decOp func(i *decInstr, state *decoderState, v reflect.Value)\n```\n\ndecOp is the signature of a decoding operator for a given type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInstr",
              "documentation": {
                "identifier": "decInstr",
                "newPage": false,
                "searchKey": "gob.decInstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decInstr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decInstr struct {\n\top    decOp\n\tfield int   // field number of the wire type\n\tindex []int // field access indices for destination type\n\tovfl  error // error message for overflow/underflow (for arrays, of the elements)\n}\n```\n\nThe 'instructions' of the decoding machine \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decEngine",
              "documentation": {
                "identifier": "decEngine",
                "newPage": false,
                "searchKey": "gob.decEngine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decEngine struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decEngine struct {\n\tinstr    []decInstr\n\tnumInstr int // the number of active instructions\n}\n```\n\nThe encoder engine is an array of instructions indexed by field number of the incoming decoder. It is executed with random access according to field number. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#emptyStruct",
              "documentation": {
                "identifier": "emptyStruct",
                "newPage": false,
                "searchKey": "gob.emptyStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type emptyStruct struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype emptyStruct struct{}\n```\n\nemptyStruct is the type we compile into when ignoring a struct value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Decoder",
              "documentation": {
                "identifier": "Decoder",
                "newPage": false,
                "searchKey": "gob.Decoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Decoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Decoder struct {\n\tmutex        sync.Mutex                              // each item must be received atomically\n\tr            io.Reader                               // source of the data\n\tbuf          decBuffer                               // buffer for more efficient i/o from r\n\twireType     map[typeId]*wireType                    // map from remote ID to local description\n\tdecoderCache map[reflect.Type]map[typeId]**decEngine // cache of compiled engines\n\tignorerCache map[typeId]**decEngine                  // ditto for ignored objects\n\tfreeList     *decoderState                           // list of free decoderStates; avoids reallocation\n\tcountBuf     []byte                                  // used for decoding integers while parsing messages\n\terr          error\n}\n```\n\nA Decoder manages the receipt of type and data information read from the remote side of a connection.  It is safe for concurrent use by multiple goroutines. \n\nThe Decoder does only basic sanity checking on decoded input sizes, and its limits are not configurable. Take caution when decoding gob data from untrusted sources. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#NewDecoder",
                    "documentation": {
                      "identifier": "NewDecoder",
                      "newPage": false,
                      "searchKey": "gob.NewDecoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDecoder(r io.Reader) *Decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDecoder(r io.Reader) *Decoder\n```\n\nNewDecoder returns a new decoder that reads from the io.Reader. If r does not also implement io.ByteReader, it will be wrapped in a bufio.Reader. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.newDecoderState",
                    "documentation": {
                      "identifier": "Decoder.newDecoderState",
                      "newPage": false,
                      "searchKey": "gob.Decoder.newDecoderState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) newDecoderState(buf *decBuffer) *decoderState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) newDecoderState(buf *decBuffer) *decoderState\n```\n\nWe pass the bytes.Buffer separately for easier testing of the infrastructure without requiring a full Decoder. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.freeDecoderState",
                    "documentation": {
                      "identifier": "Decoder.freeDecoderState",
                      "newPage": false,
                      "searchKey": "gob.Decoder.freeDecoderState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) freeDecoderState(d *decoderState)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) freeDecoderState(d *decoderState)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeSingle",
                    "documentation": {
                      "identifier": "Decoder.decodeSingle",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeSingle",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeSingle(engine *decEngine, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeSingle(engine *decEngine, value reflect.Value)\n```\n\ndecodeSingle decodes a top-level value that is not a struct and stores it in value. Such values are preceded by a zero, making them have the memory layout of a struct field (although with an illegal field number). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeStruct",
                    "documentation": {
                      "identifier": "Decoder.decodeStruct",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeStruct",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeStruct(engine *decEngine, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeStruct(engine *decEngine, value reflect.Value)\n```\n\ndecodeStruct decodes a top-level struct and stores it in value. Indir is for the value, not the type. At the time of the call it may differ from ut.indir, which was computed when the engine was built. This state cannot arise for decodeSingle, which is called directly from the user's value, not from the innards of an engine. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreStruct",
                    "documentation": {
                      "identifier": "Decoder.ignoreStruct",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreStruct",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreStruct(engine *decEngine)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreStruct(engine *decEngine)\n```\n\nignoreStruct discards the data for a struct with no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreSingle",
                    "documentation": {
                      "identifier": "Decoder.ignoreSingle",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreSingle",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreSingle(engine *decEngine)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreSingle(engine *decEngine)\n```\n\nignoreSingle discards the data for a top-level non-struct value with no destination. It's used when calling Decode with a nil value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeArrayHelper",
                    "documentation": {
                      "identifier": "Decoder.decodeArrayHelper",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeArrayHelper",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeArrayHelper(state *decoderState, value reflect.Value, elemOp decOp, length int, ovfl error, helper decHelper)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeArrayHelper(state *decoderState, value reflect.Value, elemOp decOp, length int, ovfl error, helper decHelper)\n```\n\ndecodeArrayHelper does the work for decoding arrays and slices. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeArray",
                    "documentation": {
                      "identifier": "Decoder.decodeArray",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeArray",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeArray(state *decoderState, value reflect.Value, elemOp decOp, length int, ovfl error, helper decHelper)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeArray(state *decoderState, value reflect.Value, elemOp decOp, length int, ovfl error, helper decHelper)\n```\n\ndecodeArray decodes an array and stores it in value. The length is an unsigned integer preceding the elements. Even though the length is redundant (it's part of the type), it's a useful check and is included in the encoding. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeMap",
                    "documentation": {
                      "identifier": "Decoder.decodeMap",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeMap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeMap(mtyp reflect.Type, state *decoderState, value reflect.Value, keyOp, elemOp decOp, ovfl error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeMap(mtyp reflect.Type, state *decoderState, value reflect.Value, keyOp, elemOp decOp, ovfl error)\n```\n\ndecodeMap decodes a map and stores it in value. Maps are encoded as a length followed by key:value pairs. Because the internals of maps are not visible to us, we must use reflection rather than pointer magic. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreArrayHelper",
                    "documentation": {
                      "identifier": "Decoder.ignoreArrayHelper",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreArrayHelper",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreArrayHelper(state *decoderState, elemOp decOp, length int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreArrayHelper(state *decoderState, elemOp decOp, length int)\n```\n\nignoreArrayHelper does the work for discarding arrays and slices. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreArray",
                    "documentation": {
                      "identifier": "Decoder.ignoreArray",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreArray",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreArray(state *decoderState, elemOp decOp, length int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreArray(state *decoderState, elemOp decOp, length int)\n```\n\nignoreArray discards the data for an array value with no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreMap",
                    "documentation": {
                      "identifier": "Decoder.ignoreMap",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreMap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreMap(state *decoderState, keyOp, elemOp decOp)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreMap(state *decoderState, keyOp, elemOp decOp)\n```\n\nignoreMap discards the data for a map value with no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeSlice",
                    "documentation": {
                      "identifier": "Decoder.decodeSlice",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeSlice",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeSlice(state *decoderState, value reflect.Value, elemOp decOp, ovfl error, helper decHelper)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeSlice(state *decoderState, value reflect.Value, elemOp decOp, ovfl error, helper decHelper)\n```\n\ndecodeSlice decodes a slice and stores it in value. Slices are encoded as an unsigned length followed by the elements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreSlice",
                    "documentation": {
                      "identifier": "Decoder.ignoreSlice",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreSlice",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreSlice(state *decoderState, elemOp decOp)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreSlice(state *decoderState, elemOp decOp)\n```\n\nignoreSlice skips over the data for a slice value with no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeInterface",
                    "documentation": {
                      "identifier": "Decoder.decodeInterface",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeInterface(ityp reflect.Type, state *decoderState, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeInterface(ityp reflect.Type, state *decoderState, value reflect.Value)\n```\n\ndecodeInterface decodes an interface value and stores it in value. Interfaces are encoded as the name of a concrete type followed by a value. If the name is empty, the value is nil and no value is sent. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreInterface",
                    "documentation": {
                      "identifier": "Decoder.ignoreInterface",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreInterface(state *decoderState)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreInterface(state *decoderState)\n```\n\nignoreInterface discards the data for an interface value with no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeGobDecoder",
                    "documentation": {
                      "identifier": "Decoder.decodeGobDecoder",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeGobDecoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeGobDecoder(ut *userTypeInfo, state *decoderState, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeGobDecoder(ut *userTypeInfo, state *decoderState, value reflect.Value)\n```\n\ndecodeGobDecoder decodes something implementing the GobDecoder interface. The data is encoded as a byte slice. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.ignoreGobDecoder",
                    "documentation": {
                      "identifier": "Decoder.ignoreGobDecoder",
                      "newPage": false,
                      "searchKey": "gob.Decoder.ignoreGobDecoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) ignoreGobDecoder(state *decoderState)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) ignoreGobDecoder(state *decoderState)\n```\n\nignoreGobDecoder discards the data for a GobDecoder value with no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decOpFor",
                    "documentation": {
                      "identifier": "Decoder.decOpFor",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decOpFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decOpFor(wireId typeId, rt reflect.Type, name string, inProgress map[reflect.Type]*decOp) *decOp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decOpFor(wireId typeId, rt reflect.Type, name string, inProgress map[reflect.Type]*decOp) *decOp\n```\n\ndecOpFor returns the decoding op for the base type under rt and the indirection count to reach it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decIgnoreOpFor",
                    "documentation": {
                      "identifier": "Decoder.decIgnoreOpFor",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decIgnoreOpFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decIgnoreOpFor(wireId typeId, inProgress map[typeId]*decOp) *decOp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decIgnoreOpFor(wireId typeId, inProgress map[typeId]*decOp) *decOp\n```\n\ndecIgnoreOpFor returns the decoding op for a field that has no destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.gobDecodeOpFor",
                    "documentation": {
                      "identifier": "Decoder.gobDecodeOpFor",
                      "newPage": false,
                      "searchKey": "gob.Decoder.gobDecodeOpFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) gobDecodeOpFor(ut *userTypeInfo) *decOp"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) gobDecodeOpFor(ut *userTypeInfo) *decOp\n```\n\ngobDecodeOpFor returns the op for a type that is known to implement GobDecoder. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.compatibleType",
                    "documentation": {
                      "identifier": "Decoder.compatibleType",
                      "newPage": false,
                      "searchKey": "gob.Decoder.compatibleType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) compatibleType(fr reflect.Type, fw typeId, inProgress map[reflect.Type]typeId) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) compatibleType(fr reflect.Type, fw typeId, inProgress map[reflect.Type]typeId) bool\n```\n\ncompatibleType asks: Are these two gob Types compatible? Answers the question for basic types, arrays, maps and slices, plus GobEncoder/Decoder pairs. Structs are considered ok; fields will be checked later. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.typeString",
                    "documentation": {
                      "identifier": "Decoder.typeString",
                      "newPage": false,
                      "searchKey": "gob.Decoder.typeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) typeString(remoteId typeId) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) typeString(remoteId typeId) string\n```\n\ntypeString returns a human-readable description of the type identified by remoteId. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.compileSingle",
                    "documentation": {
                      "identifier": "Decoder.compileSingle",
                      "newPage": false,
                      "searchKey": "gob.Decoder.compileSingle",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) compileSingle(remoteId typeId, ut *userTypeInfo) (engine *decEngine, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) compileSingle(remoteId typeId, ut *userTypeInfo) (engine *decEngine, err error)\n```\n\ncompileSingle compiles the decoder engine for a non-struct top-level value, including GobDecoders. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.compileIgnoreSingle",
                    "documentation": {
                      "identifier": "Decoder.compileIgnoreSingle",
                      "newPage": false,
                      "searchKey": "gob.Decoder.compileIgnoreSingle",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) compileIgnoreSingle(remoteId typeId) *decEngine"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) compileIgnoreSingle(remoteId typeId) *decEngine\n```\n\ncompileIgnoreSingle compiles the decoder engine for a non-struct top-level value that will be discarded. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.compileDec",
                    "documentation": {
                      "identifier": "Decoder.compileDec",
                      "newPage": false,
                      "searchKey": "gob.Decoder.compileDec",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) compileDec(remoteId typeId, ut *userTypeInfo) (engine *decEngine, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) compileDec(remoteId typeId, ut *userTypeInfo) (engine *decEngine, err error)\n```\n\ncompileDec compiles the decoder engine for a value. If the value is not a struct, it calls out to compileSingle. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.getDecEnginePtr",
                    "documentation": {
                      "identifier": "Decoder.getDecEnginePtr",
                      "newPage": false,
                      "searchKey": "gob.Decoder.getDecEnginePtr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) getDecEnginePtr(remoteId typeId, ut *userTypeInfo) (enginePtr **decEngine, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) getDecEnginePtr(remoteId typeId, ut *userTypeInfo) (enginePtr **decEngine, err error)\n```\n\ngetDecEnginePtr returns the engine for the specified type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.getIgnoreEnginePtr",
                    "documentation": {
                      "identifier": "Decoder.getIgnoreEnginePtr",
                      "newPage": false,
                      "searchKey": "gob.Decoder.getIgnoreEnginePtr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) getIgnoreEnginePtr(wireId typeId) (enginePtr **decEngine, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) getIgnoreEnginePtr(wireId typeId) (enginePtr **decEngine, err error)\n```\n\ngetIgnoreEnginePtr returns the engine for the specified type when the value is to be discarded. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeValue",
                    "documentation": {
                      "identifier": "Decoder.decodeValue",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeValue(wireId typeId, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeValue(wireId typeId, value reflect.Value)\n```\n\ndecodeValue decodes the data stream representing a value and stores it in value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeIgnoredValue",
                    "documentation": {
                      "identifier": "Decoder.decodeIgnoredValue",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeIgnoredValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeIgnoredValue(wireId typeId)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeIgnoredValue(wireId typeId)\n```\n\ndecodeIgnoredValue decodes the data stream representing a value of the specified type and discards it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.recvType",
                    "documentation": {
                      "identifier": "Decoder.recvType",
                      "newPage": false,
                      "searchKey": "gob.Decoder.recvType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) recvType(id typeId)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) recvType(id typeId)\n```\n\nrecvType loads the definition of a type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.recvMessage",
                    "documentation": {
                      "identifier": "Decoder.recvMessage",
                      "newPage": false,
                      "searchKey": "gob.Decoder.recvMessage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) recvMessage() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) recvMessage() bool\n```\n\nrecvMessage reads the next count-delimited item from the input. It is the converse of Encoder.writeMessage. It returns false on EOF or other error reading the message. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.readMessage",
                    "documentation": {
                      "identifier": "Decoder.readMessage",
                      "newPage": false,
                      "searchKey": "gob.Decoder.readMessage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) readMessage(nbytes int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) readMessage(nbytes int)\n```\n\nreadMessage reads the next nbytes bytes from the input. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.nextInt",
                    "documentation": {
                      "identifier": "Decoder.nextInt",
                      "newPage": false,
                      "searchKey": "gob.Decoder.nextInt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) nextInt() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) nextInt() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.nextUint",
                    "documentation": {
                      "identifier": "Decoder.nextUint",
                      "newPage": false,
                      "searchKey": "gob.Decoder.nextUint",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) nextUint() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) nextUint() uint64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.decodeTypeSequence",
                    "documentation": {
                      "identifier": "Decoder.decodeTypeSequence",
                      "newPage": false,
                      "searchKey": "gob.Decoder.decodeTypeSequence",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) decodeTypeSequence(isInterface bool) typeId"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) decodeTypeSequence(isInterface bool) typeId\n```\n\ndecodeTypeSequence parses: TypeSequence \n\n```\n(TypeDefinition DelimitedTypeDefinition*)?\n\n```\nand returns the type id of the next value. It returns -1 at EOF.  Upon return, the remainder of dec.buf is the value to be decoded. If this is an interface value, it can be ignored by resetting that buffer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.Decode",
                    "documentation": {
                      "identifier": "Decoder.Decode",
                      "newPage": false,
                      "searchKey": "gob.Decoder.Decode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) Decode(e interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) Decode(e interface{}) error\n```\n\nDecode reads the next value from the input stream and stores it in the data represented by the empty interface value. If e is nil, the value will be discarded. Otherwise, the value underlying e must be a pointer to the correct type for the next data item received. If the input is at EOF, Decode returns io.EOF and does not modify e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Decoder.DecodeValue",
                    "documentation": {
                      "identifier": "Decoder.DecodeValue",
                      "newPage": false,
                      "searchKey": "gob.Decoder.DecodeValue",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) DecodeValue(v reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) DecodeValue(v reflect.Value) error\n```\n\nDecodeValue reads the next value from the input stream. If v is the zero reflect.Value (v.Kind() == Invalid), DecodeValue discards the value. Otherwise, it stores the value into v. In that case, v must represent a non-nil pointer to data or be an assignable reflect.Value (v.CanSet()) If the input is at EOF, DecodeValue returns io.EOF and does not modify v. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encHelper",
              "documentation": {
                "identifier": "encHelper",
                "newPage": false,
                "searchKey": "gob.encHelper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encHelper func(state *std/encoding/gob.encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encHelper func(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encoderState",
              "documentation": {
                "identifier": "encoderState",
                "newPage": false,
                "searchKey": "gob.encoderState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encoderState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encoderState struct {\n\tenc      *Encoder\n\tb        *encBuffer\n\tsendZero bool                 // encoding an array element or map key/value pair; send zero values\n\tfieldnum int                  // the last field number written.\n\tbuf      [1 + uint64Size]byte // buffer used by the encoder; here to avoid allocation.\n\tnext     *encoderState        // for free list\n}\n```\n\nencoderState is the global execution state of an instance of the encoder. Field numbers are delta encoded and always increase. The field number is initialized to -1 so 0 comes out as delta(1). A delta of 0 terminates the structure. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newEncoderState",
                    "documentation": {
                      "identifier": "newEncoderState",
                      "newPage": false,
                      "searchKey": "gob.newEncoderState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newEncoderState(b *encBuffer) *encoderState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newEncoderState(b *encBuffer) *encoderState\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encoderState.encodeUint",
                    "documentation": {
                      "identifier": "encoderState.encodeUint",
                      "newPage": false,
                      "searchKey": "gob.encoderState.encodeUint",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *encoderState) encodeUint(x uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *encoderState) encodeUint(x uint64)\n```\n\nencodeUint writes an encoded unsigned integer to state.b. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encoderState.encodeInt",
                    "documentation": {
                      "identifier": "encoderState.encodeInt",
                      "newPage": false,
                      "searchKey": "gob.encoderState.encodeInt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *encoderState) encodeInt(i int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *encoderState) encodeInt(i int64)\n```\n\nencodeInt writes an encoded signed integer to state.w. The low bit of the encoding says whether to bit complement the (other bits of the) uint to recover the int. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encoderState.update",
                    "documentation": {
                      "identifier": "encoderState.update",
                      "newPage": false,
                      "searchKey": "gob.encoderState.update",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (state *encoderState) update(instr *encInstr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (state *encoderState) update(instr *encInstr)\n```\n\nupdate emits a field number and updates the state to record its value for delta encoding. If the instruction pointer is nil, it does nothing \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encBuffer",
              "documentation": {
                "identifier": "encBuffer",
                "newPage": false,
                "searchKey": "gob.encBuffer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encBuffer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encBuffer struct {\n\tdata    []byte\n\tscratch [64]byte\n}\n```\n\nencBuffer is an extremely simple, fast implementation of a write-only byte buffer. It never returns a non-nil error, but Write returns an error value so it matches io.Writer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encBuffer.writeByte",
                    "documentation": {
                      "identifier": "encBuffer.writeByte",
                      "newPage": false,
                      "searchKey": "gob.encBuffer.writeByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encBuffer) writeByte(c byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encBuffer) writeByte(c byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encBuffer.Write",
                    "documentation": {
                      "identifier": "encBuffer.Write",
                      "newPage": false,
                      "searchKey": "gob.encBuffer.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encBuffer) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encBuffer) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encBuffer.WriteString",
                    "documentation": {
                      "identifier": "encBuffer.WriteString",
                      "newPage": false,
                      "searchKey": "gob.encBuffer.WriteString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encBuffer) WriteString(s string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encBuffer) WriteString(s string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encBuffer.Len",
                    "documentation": {
                      "identifier": "encBuffer.Len",
                      "newPage": false,
                      "searchKey": "gob.encBuffer.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encBuffer) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encBuffer) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encBuffer.Bytes",
                    "documentation": {
                      "identifier": "encBuffer.Bytes",
                      "newPage": false,
                      "searchKey": "gob.encBuffer.Bytes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encBuffer) Bytes() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encBuffer) Bytes() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encBuffer.Reset",
                    "documentation": {
                      "identifier": "encBuffer.Reset",
                      "newPage": false,
                      "searchKey": "gob.encBuffer.Reset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encBuffer) Reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encBuffer) Reset()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encOp",
              "documentation": {
                "identifier": "encOp",
                "newPage": false,
                "searchKey": "gob.encOp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encOp func(i *std/encoding/gob.encInstr, state *std/encoding/gob.encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encOp func(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencOp is the signature of an encoding operator for a given type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#encOpFor",
                    "documentation": {
                      "identifier": "encOpFor",
                      "newPage": false,
                      "searchKey": "gob.encOpFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func encOpFor(rt reflect.Type, inProgress map[reflect.Type]*encOp, building map[*typeInfo]bool) (*encOp, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc encOpFor(rt reflect.Type, inProgress map[reflect.Type]*encOp, building map[*typeInfo]bool) (*encOp, int)\n```\n\nencOpFor returns (a pointer to) the encoding op for the base type under rt and the indirection count to reach it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#gobEncodeOpFor",
                    "documentation": {
                      "identifier": "gobEncodeOpFor",
                      "newPage": false,
                      "searchKey": "gob.gobEncodeOpFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func gobEncodeOpFor(ut *userTypeInfo) (*encOp, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc gobEncodeOpFor(ut *userTypeInfo) (*encOp, int)\n```\n\ngobEncodeOpFor returns the op for a type that is known to implement GobEncoder. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInstr",
              "documentation": {
                "identifier": "encInstr",
                "newPage": false,
                "searchKey": "gob.encInstr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encInstr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encInstr struct {\n\top    encOp\n\tfield int   // field number in input\n\tindex []int // struct index\n\tindir int   // how many pointer indirections to reach the value in the struct\n}\n```\n\nThe 'instructions' of the encoding machine \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encEngine",
              "documentation": {
                "identifier": "encEngine",
                "newPage": false,
                "searchKey": "gob.encEngine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encEngine struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encEngine struct {\n\tinstr []encInstr\n}\n```\n\nencEngine an array of instructions indexed by field number of the encoding data, typically a struct. It is executed top to bottom, walking the struct. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#compileEnc",
                    "documentation": {
                      "identifier": "compileEnc",
                      "newPage": false,
                      "searchKey": "gob.compileEnc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func compileEnc(ut *userTypeInfo, building map[*typeInfo]bool) *encEngine"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc compileEnc(ut *userTypeInfo, building map[*typeInfo]bool) *encEngine\n```\n\ncompileEnc returns the engine to compile the type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#getEncEngine",
                    "documentation": {
                      "identifier": "getEncEngine",
                      "newPage": false,
                      "searchKey": "gob.getEncEngine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getEncEngine(ut *userTypeInfo, building map[*typeInfo]bool) *encEngine"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getEncEngine(ut *userTypeInfo, building map[*typeInfo]bool) *encEngine\n```\n\ngetEncEngine returns the engine to compile the type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#buildEncEngine",
                    "documentation": {
                      "identifier": "buildEncEngine",
                      "newPage": false,
                      "searchKey": "gob.buildEncEngine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func buildEncEngine(info *typeInfo, ut *userTypeInfo, building map[*typeInfo]bool) *encEngine"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc buildEncEngine(info *typeInfo, ut *userTypeInfo, building map[*typeInfo]bool) *encEngine\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Encoder",
              "documentation": {
                "identifier": "Encoder",
                "newPage": false,
                "searchKey": "gob.Encoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Encoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Encoder struct {\n\tmutex      sync.Mutex              // each item must be sent atomically\n\tw          []io.Writer             // where to send the data\n\tsent       map[reflect.Type]typeId // which types we've already sent\n\tcountState *encoderState           // stage for writing counts\n\tfreeList   *encoderState           // list of free encoderStates; avoids reallocation\n\tbyteBuf    encBuffer               // buffer for top-level encoderState\n\terr        error\n}\n```\n\nAn Encoder manages the transmission of type and data information to the other side of a connection.  It is safe for concurrent use by multiple goroutines. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#NewEncoder",
                    "documentation": {
                      "identifier": "NewEncoder",
                      "newPage": false,
                      "searchKey": "gob.NewEncoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewEncoder(w io.Writer) *Encoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewEncoder(w io.Writer) *Encoder\n```\n\nNewEncoder returns a new encoder that will transmit on the io.Writer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.newEncoderState",
                    "documentation": {
                      "identifier": "Encoder.newEncoderState",
                      "newPage": false,
                      "searchKey": "gob.Encoder.newEncoderState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) newEncoderState(b *encBuffer) *encoderState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) newEncoderState(b *encBuffer) *encoderState\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.freeEncoderState",
                    "documentation": {
                      "identifier": "Encoder.freeEncoderState",
                      "newPage": false,
                      "searchKey": "gob.Encoder.freeEncoderState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) freeEncoderState(e *encoderState)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) freeEncoderState(e *encoderState)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encodeSingle",
                    "documentation": {
                      "identifier": "Encoder.encodeSingle",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encodeSingle",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encodeSingle(b *encBuffer, engine *encEngine, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encodeSingle(b *encBuffer, engine *encEngine, value reflect.Value)\n```\n\nencodeSingle encodes a single top-level non-struct value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encodeStruct",
                    "documentation": {
                      "identifier": "Encoder.encodeStruct",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encodeStruct",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encodeStruct(b *encBuffer, engine *encEngine, value reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encodeStruct(b *encBuffer, engine *encEngine, value reflect.Value)\n```\n\nencodeStruct encodes a single struct value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encodeArray",
                    "documentation": {
                      "identifier": "Encoder.encodeArray",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encodeArray",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encodeArray(b *encBuffer, value reflect.Value, op encOp, elemIndir int, length int, helper encHelper)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encodeArray(b *encBuffer, value reflect.Value, op encOp, elemIndir int, length int, helper encHelper)\n```\n\nencodeArray encodes an array. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encodeMap",
                    "documentation": {
                      "identifier": "Encoder.encodeMap",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encodeMap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encodeMap(b *encBuffer, mv reflect.Value, keyOp, elemOp encOp, keyIndir, elemIndir int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encodeMap(b *encBuffer, mv reflect.Value, keyOp, elemOp encOp, keyIndir, elemIndir int)\n```\n\nencodeMap encodes a map as unsigned count followed by key:value pairs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encodeInterface",
                    "documentation": {
                      "identifier": "Encoder.encodeInterface",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encodeInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encodeInterface(b *encBuffer, iv reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encodeInterface(b *encBuffer, iv reflect.Value)\n```\n\nencodeInterface encodes the interface value iv. To send an interface, we send a string identifying the concrete type, followed by the type identifier (which might require defining that type right now), followed by the concrete value. A nil value gets sent as the empty string for the name, followed by no value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encodeGobEncoder",
                    "documentation": {
                      "identifier": "Encoder.encodeGobEncoder",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encodeGobEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encodeGobEncoder(b *encBuffer, ut *userTypeInfo, v reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encodeGobEncoder(b *encBuffer, ut *userTypeInfo, v reflect.Value)\n```\n\nencGobEncoder encodes a value that implements the GobEncoder interface. The data is sent as a byte array. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.encode",
                    "documentation": {
                      "identifier": "Encoder.encode",
                      "newPage": false,
                      "searchKey": "gob.Encoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) encode(b *encBuffer, value reflect.Value, ut *userTypeInfo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) encode(b *encBuffer, value reflect.Value, ut *userTypeInfo)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.writer",
                    "documentation": {
                      "identifier": "Encoder.writer",
                      "newPage": false,
                      "searchKey": "gob.Encoder.writer",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) writer() io.Writer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) writer() io.Writer\n```\n\nwriter() returns the innermost writer the encoder is using \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.pushWriter",
                    "documentation": {
                      "identifier": "Encoder.pushWriter",
                      "newPage": false,
                      "searchKey": "gob.Encoder.pushWriter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) pushWriter(w io.Writer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) pushWriter(w io.Writer)\n```\n\npushWriter adds a writer to the encoder. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.popWriter",
                    "documentation": {
                      "identifier": "Encoder.popWriter",
                      "newPage": false,
                      "searchKey": "gob.Encoder.popWriter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) popWriter()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) popWriter()\n```\n\npopWriter pops the innermost writer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.setError",
                    "documentation": {
                      "identifier": "Encoder.setError",
                      "newPage": false,
                      "searchKey": "gob.Encoder.setError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) setError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) setError(err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.writeMessage",
                    "documentation": {
                      "identifier": "Encoder.writeMessage",
                      "newPage": false,
                      "searchKey": "gob.Encoder.writeMessage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) writeMessage(w io.Writer, b *encBuffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) writeMessage(w io.Writer, b *encBuffer)\n```\n\nwriteMessage sends the data item preceded by a unsigned count of its length. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.sendActualType",
                    "documentation": {
                      "identifier": "Encoder.sendActualType",
                      "newPage": false,
                      "searchKey": "gob.Encoder.sendActualType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) sendActualType(w io.Writer, state *encoderState, ut *userTypeInfo, actual reflect.Type) (sent bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) sendActualType(w io.Writer, state *encoderState, ut *userTypeInfo, actual reflect.Type) (sent bool)\n```\n\nsendActualType sends the requested type, without further investigation, unless it's been sent before. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.sendType",
                    "documentation": {
                      "identifier": "Encoder.sendType",
                      "newPage": false,
                      "searchKey": "gob.Encoder.sendType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) sendType(w io.Writer, state *encoderState, origt reflect.Type) (sent bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) sendType(w io.Writer, state *encoderState, origt reflect.Type) (sent bool)\n```\n\nsendType sends the type info to the other side, if necessary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.Encode",
                    "documentation": {
                      "identifier": "Encoder.Encode",
                      "newPage": false,
                      "searchKey": "gob.Encoder.Encode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) Encode(e interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) Encode(e interface{}) error\n```\n\nEncode transmits the data item represented by the empty interface value, guaranteeing that all necessary type information has been transmitted first. Passing a nil pointer to Encoder will panic, as they cannot be transmitted by gob. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.sendTypeDescriptor",
                    "documentation": {
                      "identifier": "Encoder.sendTypeDescriptor",
                      "newPage": false,
                      "searchKey": "gob.Encoder.sendTypeDescriptor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) sendTypeDescriptor(w io.Writer, state *encoderState, ut *userTypeInfo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) sendTypeDescriptor(w io.Writer, state *encoderState, ut *userTypeInfo)\n```\n\nsendTypeDescriptor makes sure the remote side knows about this type. It will send a descriptor if this is the first time the type has been sent. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.sendTypeId",
                    "documentation": {
                      "identifier": "Encoder.sendTypeId",
                      "newPage": false,
                      "searchKey": "gob.Encoder.sendTypeId",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) sendTypeId(state *encoderState, ut *userTypeInfo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) sendTypeId(state *encoderState, ut *userTypeInfo)\n```\n\nsendTypeId sends the id, which must have already been defined. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Encoder.EncodeValue",
                    "documentation": {
                      "identifier": "Encoder.EncodeValue",
                      "newPage": false,
                      "searchKey": "gob.Encoder.EncodeValue",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) EncodeValue(value reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) EncodeValue(value reflect.Value) error\n```\n\nEncodeValue transmits the data item represented by the reflection value, guaranteeing that all necessary type information has been transmitted first. Passing a nil pointer to EncodeValue will panic, as they cannot be transmitted by gob. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#gobError",
              "documentation": {
                "identifier": "gobError",
                "newPage": false,
                "searchKey": "gob.gobError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gobError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gobError struct {\n\terr error\n}\n```\n\nA gobError is used to distinguish errors (panics) generated in this package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#userTypeInfo",
              "documentation": {
                "identifier": "userTypeInfo",
                "newPage": false,
                "searchKey": "gob.userTypeInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type userTypeInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype userTypeInfo struct {\n\tuser        reflect.Type // the type the user handed us\n\tbase        reflect.Type // the base type after all indirections\n\tindir       int          // number of indirections to reach the base type\n\texternalEnc int          // xGob, xBinary, or xText\n\texternalDec int          // xGob, xBinary or xText\n\tencIndir    int8         // number of indirections to reach the receiver type; may be negative\n\tdecIndir    int8         // number of indirections to reach the receiver type; may be negative\n}\n```\n\nuserTypeInfo stores the information associated with a type the user has handed to the package. It's computed once and stored in a map keyed by reflection type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#validUserType",
                    "documentation": {
                      "identifier": "validUserType",
                      "newPage": false,
                      "searchKey": "gob.validUserType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func validUserType(rt reflect.Type) (*userTypeInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc validUserType(rt reflect.Type) (*userTypeInfo, error)\n```\n\nvalidType returns, and saves, the information associated with user-provided type rt. If the user type is not valid, err will be non-nil. To be used when the error handler is not set up. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#userType",
                    "documentation": {
                      "identifier": "userType",
                      "newPage": false,
                      "searchKey": "gob.userType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func userType(rt reflect.Type) *userTypeInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc userType(rt reflect.Type) *userTypeInfo\n```\n\nuserType returns, and saves, the information associated with user-provided type rt. If the user type is not valid, it calls error. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#typeId",
              "documentation": {
                "identifier": "typeId",
                "newPage": false,
                "searchKey": "gob.typeId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeId int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeId int32\n```\n\nA typeId represents a gob Type as an integer that can be passed on the wire. Internally, typeIds are used as keys to a map to recover the underlying type info. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#bootstrapType",
                    "documentation": {
                      "identifier": "bootstrapType",
                      "newPage": false,
                      "searchKey": "gob.bootstrapType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func bootstrapType(name string, e interface{}, expect typeId) typeId"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc bootstrapType(name string, e interface{}, expect typeId) typeId\n```\n\nused for building the basic types; called only from init().  the incoming interface always refers to a pointer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#typeId.gobType",
                    "documentation": {
                      "identifier": "typeId.gobType",
                      "newPage": false,
                      "searchKey": "gob.typeId.gobType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t typeId) gobType() gobType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t typeId) gobType() gobType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#typeId.string",
                    "documentation": {
                      "identifier": "typeId.string",
                      "newPage": false,
                      "searchKey": "gob.typeId.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t typeId) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t typeId) string() string\n```\n\nstring returns the string representation of the type associated with the typeId. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#typeId.name",
                    "documentation": {
                      "identifier": "typeId.name",
                      "newPage": false,
                      "searchKey": "gob.typeId.name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t typeId) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t typeId) name() string\n```\n\nName returns the name of the type associated with the typeId. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#gobType",
              "documentation": {
                "identifier": "gobType",
                "newPage": false,
                "searchKey": "gob.gobType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gobType interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gobType interface {\n\tid() typeId\n\tsetId(id typeId)\n\tname() string\n\tstring() string // not public; only for debugging\n\tsafeString(seen map[typeId]bool) string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newTypeObject",
                    "documentation": {
                      "identifier": "newTypeObject",
                      "newPage": false,
                      "searchKey": "gob.newTypeObject",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTypeObject(name string, ut *userTypeInfo, rt reflect.Type) (gobType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTypeObject(name string, ut *userTypeInfo, rt reflect.Type) (gobType, error)\n```\n\nnewTypeObject allocates a gobType for the reflection type rt. Unless ut represents a GobEncoder, rt should be the base type of ut. This is only called from the encoding side. The decoding side works through typeIds and userTypeInfos alone. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#getBaseType",
                    "documentation": {
                      "identifier": "getBaseType",
                      "newPage": false,
                      "searchKey": "gob.getBaseType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getBaseType(name string, rt reflect.Type) (gobType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getBaseType(name string, rt reflect.Type) (gobType, error)\n```\n\ngetBaseType returns the Gob type describing the given reflect.Type's base type. typeLock must be held. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#getType",
                    "documentation": {
                      "identifier": "getType",
                      "newPage": false,
                      "searchKey": "gob.getType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getType(name string, ut *userTypeInfo, rt reflect.Type) (gobType, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getType(name string, ut *userTypeInfo, rt reflect.Type) (gobType, error)\n```\n\ngetType returns the Gob type describing the given reflect.Type. Should be called only when handling GobEncoders/Decoders, which may be pointers. All other types are handled through the base type, never a pointer. typeLock must be held. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#getTypeUnlocked",
                    "documentation": {
                      "identifier": "getTypeUnlocked",
                      "newPage": false,
                      "searchKey": "gob.getTypeUnlocked",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getTypeUnlocked(name string, rt reflect.Type) gobType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getTypeUnlocked(name string, rt reflect.Type) gobType\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#CommonType",
              "documentation": {
                "identifier": "CommonType",
                "newPage": false,
                "searchKey": "gob.CommonType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommonType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommonType struct {\n\tName string\n\tId   typeId\n}\n```\n\nCommonType holds elements of all types. It is a historical artifact, kept for binary compatibility and exported only for the benefit of the package's encoding of type descriptors. It is not intended for direct use by clients. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#CommonType.id",
                    "documentation": {
                      "identifier": "CommonType.id",
                      "newPage": false,
                      "searchKey": "gob.CommonType.id",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *CommonType) id() typeId"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *CommonType) id() typeId\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#CommonType.setId",
                    "documentation": {
                      "identifier": "CommonType.setId",
                      "newPage": false,
                      "searchKey": "gob.CommonType.setId",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *CommonType) setId(id typeId)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *CommonType) setId(id typeId)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#CommonType.string",
                    "documentation": {
                      "identifier": "CommonType.string",
                      "newPage": false,
                      "searchKey": "gob.CommonType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *CommonType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *CommonType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#CommonType.safeString",
                    "documentation": {
                      "identifier": "CommonType.safeString",
                      "newPage": false,
                      "searchKey": "gob.CommonType.safeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *CommonType) safeString(seen map[typeId]bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *CommonType) safeString(seen map[typeId]bool) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#CommonType.name",
                    "documentation": {
                      "identifier": "CommonType.name",
                      "newPage": false,
                      "searchKey": "gob.CommonType.name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *CommonType) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *CommonType) name() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#arrayType",
              "documentation": {
                "identifier": "arrayType",
                "newPage": false,
                "searchKey": "gob.arrayType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type arrayType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype arrayType struct {\n\tCommonType\n\tElem typeId\n\tLen  int\n}\n```\n\nArray type \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newArrayType",
                    "documentation": {
                      "identifier": "newArrayType",
                      "newPage": false,
                      "searchKey": "gob.newArrayType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newArrayType(name string) *arrayType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newArrayType(name string) *arrayType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#arrayType.init",
                    "documentation": {
                      "identifier": "arrayType.init",
                      "newPage": false,
                      "searchKey": "gob.arrayType.init",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *arrayType) init(elem gobType, len int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *arrayType) init(elem gobType, len int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#arrayType.safeString",
                    "documentation": {
                      "identifier": "arrayType.safeString",
                      "newPage": false,
                      "searchKey": "gob.arrayType.safeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *arrayType) safeString(seen map[typeId]bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *arrayType) safeString(seen map[typeId]bool) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#arrayType.string",
                    "documentation": {
                      "identifier": "arrayType.string",
                      "newPage": false,
                      "searchKey": "gob.arrayType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *arrayType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *arrayType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#gobEncoderType",
              "documentation": {
                "identifier": "gobEncoderType",
                "newPage": false,
                "searchKey": "gob.gobEncoderType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gobEncoderType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gobEncoderType struct {\n\tCommonType\n}\n```\n\nGobEncoder type (something that implements the GobEncoder interface) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newGobEncoderType",
                    "documentation": {
                      "identifier": "newGobEncoderType",
                      "newPage": false,
                      "searchKey": "gob.newGobEncoderType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newGobEncoderType(name string) *gobEncoderType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newGobEncoderType(name string) *gobEncoderType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#gobEncoderType.safeString",
                    "documentation": {
                      "identifier": "gobEncoderType.safeString",
                      "newPage": false,
                      "searchKey": "gob.gobEncoderType.safeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gobEncoderType) safeString(seen map[typeId]bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gobEncoderType) safeString(seen map[typeId]bool) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#gobEncoderType.string",
                    "documentation": {
                      "identifier": "gobEncoderType.string",
                      "newPage": false,
                      "searchKey": "gob.gobEncoderType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *gobEncoderType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *gobEncoderType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#mapType",
              "documentation": {
                "identifier": "mapType",
                "newPage": false,
                "searchKey": "gob.mapType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapType struct {\n\tCommonType\n\tKey  typeId\n\tElem typeId\n}\n```\n\nMap type \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newMapType",
                    "documentation": {
                      "identifier": "newMapType",
                      "newPage": false,
                      "searchKey": "gob.newMapType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newMapType(name string) *mapType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newMapType(name string) *mapType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#mapType.init",
                    "documentation": {
                      "identifier": "mapType.init",
                      "newPage": false,
                      "searchKey": "gob.mapType.init",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mapType) init(key, elem gobType)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mapType) init(key, elem gobType)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#mapType.safeString",
                    "documentation": {
                      "identifier": "mapType.safeString",
                      "newPage": false,
                      "searchKey": "gob.mapType.safeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mapType) safeString(seen map[typeId]bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mapType) safeString(seen map[typeId]bool) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#mapType.string",
                    "documentation": {
                      "identifier": "mapType.string",
                      "newPage": false,
                      "searchKey": "gob.mapType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *mapType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *mapType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#sliceType",
              "documentation": {
                "identifier": "sliceType",
                "newPage": false,
                "searchKey": "gob.sliceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sliceType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sliceType struct {\n\tCommonType\n\tElem typeId\n}\n```\n\nSlice type \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newSliceType",
                    "documentation": {
                      "identifier": "newSliceType",
                      "newPage": false,
                      "searchKey": "gob.newSliceType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newSliceType(name string) *sliceType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newSliceType(name string) *sliceType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#sliceType.init",
                    "documentation": {
                      "identifier": "sliceType.init",
                      "newPage": false,
                      "searchKey": "gob.sliceType.init",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sliceType) init(elem gobType)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sliceType) init(elem gobType)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#sliceType.safeString",
                    "documentation": {
                      "identifier": "sliceType.safeString",
                      "newPage": false,
                      "searchKey": "gob.sliceType.safeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sliceType) safeString(seen map[typeId]bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sliceType) safeString(seen map[typeId]bool) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#sliceType.string",
                    "documentation": {
                      "identifier": "sliceType.string",
                      "newPage": false,
                      "searchKey": "gob.sliceType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sliceType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sliceType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#fieldType",
              "documentation": {
                "identifier": "fieldType",
                "newPage": false,
                "searchKey": "gob.fieldType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fieldType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fieldType struct {\n\tName string\n\tId   typeId\n}\n```\n\nStruct type \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#structType",
              "documentation": {
                "identifier": "structType",
                "newPage": false,
                "searchKey": "gob.structType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type structType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structType struct {\n\tCommonType\n\tField []*fieldType\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newStructType",
                    "documentation": {
                      "identifier": "newStructType",
                      "newPage": false,
                      "searchKey": "gob.newStructType",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newStructType(name string) *structType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newStructType(name string) *structType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#structType.safeString",
                    "documentation": {
                      "identifier": "structType.safeString",
                      "newPage": false,
                      "searchKey": "gob.structType.safeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *structType) safeString(seen map[typeId]bool) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *structType) safeString(seen map[typeId]bool) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#structType.string",
                    "documentation": {
                      "identifier": "structType.string",
                      "newPage": false,
                      "searchKey": "gob.structType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *structType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *structType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#wireType",
              "documentation": {
                "identifier": "wireType",
                "newPage": false,
                "searchKey": "gob.wireType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type wireType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype wireType struct {\n\tArrayT           *arrayType\n\tSliceT           *sliceType\n\tStructT          *structType\n\tMapT             *mapType\n\tGobEncoderT      *gobEncoderType\n\tBinaryMarshalerT *gobEncoderType\n\tTextMarshalerT   *gobEncoderType\n}\n```\n\nRepresentation of the information we send and receive about this type. Each value we send is preceded by its type definition: an encoded int. However, the very first time we send the value, we first send the pair (-id, wireType). For bootstrapping purposes, we assume that the recipient knows how to decode a wireType; it is exactly the wireType struct here, interpreted using the gob rules for sending a structure, except that we assume the ids for wireType and structType etc. are known. The relevant pieces are built in encode.go's init() function. To maintain binary compatibility, if you extend this type, always put the new fields last. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#wireType.string",
                    "documentation": {
                      "identifier": "wireType.string",
                      "newPage": false,
                      "searchKey": "gob.wireType.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *wireType) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *wireType) string() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#typeInfo",
              "documentation": {
                "identifier": "typeInfo",
                "newPage": false,
                "searchKey": "gob.typeInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeInfo struct {\n\tid      typeId\n\tencInit sync.Mutex   // protects creation of encoder\n\tencoder atomic.Value // *encEngine\n\twire    *wireType\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#lookupTypeInfo",
                    "documentation": {
                      "identifier": "lookupTypeInfo",
                      "newPage": false,
                      "searchKey": "gob.lookupTypeInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lookupTypeInfo(rt reflect.Type) *typeInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lookupTypeInfo(rt reflect.Type) *typeInfo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#getTypeInfo",
                    "documentation": {
                      "identifier": "getTypeInfo",
                      "newPage": false,
                      "searchKey": "gob.getTypeInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getTypeInfo(ut *userTypeInfo) (*typeInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getTypeInfo(ut *userTypeInfo) (*typeInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#buildTypeInfo",
                    "documentation": {
                      "identifier": "buildTypeInfo",
                      "newPage": false,
                      "searchKey": "gob.buildTypeInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func buildTypeInfo(ut *userTypeInfo, rt reflect.Type) (*typeInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc buildTypeInfo(ut *userTypeInfo, rt reflect.Type) (*typeInfo, error)\n```\n\nbuildTypeInfo constructs the type information for the type and stores it in the type info map. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#mustGetTypeInfo",
                    "documentation": {
                      "identifier": "mustGetTypeInfo",
                      "newPage": false,
                      "searchKey": "gob.mustGetTypeInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func mustGetTypeInfo(rt reflect.Type) *typeInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc mustGetTypeInfo(rt reflect.Type) *typeInfo\n```\n\nCalled only when a panic is acceptable and unexpected. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobEncoder",
              "documentation": {
                "identifier": "GobEncoder",
                "newPage": false,
                "searchKey": "gob.GobEncoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobEncoder interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobEncoder interface {\n\t// GobEncode returns a byte slice representing the encoding of the\n\t// receiver for transmission to a GobDecoder, usually of the same\n\t// concrete type.\n\tGobEncode() ([]byte, error)\n}\n```\n\nGobEncoder is the interface describing data that provides its own representation for encoding values for transmission to a GobDecoder. A type that implements GobEncoder and GobDecoder has complete control over the representation of its data and may therefore contain things such as private fields, channels, and functions, which are not usually transmissible in gob streams. \n\nNote: Since gobs can be stored permanently, it is good design to guarantee the encoding used by a GobEncoder is stable as the software evolves. For instance, it might make sense for GobEncode to include a version number in the encoding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobDecoder",
              "documentation": {
                "identifier": "GobDecoder",
                "newPage": false,
                "searchKey": "gob.GobDecoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobDecoder interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobDecoder interface {\n\t// GobDecode overwrites the receiver, which must be a pointer,\n\t// with the value represented by the byte slice, which was written\n\t// by GobEncode, usually for the same concrete type.\n\tGobDecode([]byte) error\n}\n```\n\nGobDecoder is the interface describing data that provides its own routine for decoding transmitted values sent by a GobEncoder. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#EncodeT",
              "documentation": {
                "identifier": "EncodeT",
                "newPage": false,
                "searchKey": "gob.EncodeT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type EncodeT struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EncodeT struct {\n\tx uint64\n\tb []byte\n}\n```\n\nGuarantee encoding format by comparing some encodings to hand-written values \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#T0",
              "documentation": {
                "identifier": "T0",
                "newPage": false,
                "searchKey": "gob.T0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T0 struct {\n\tA int\n\tB int\n\tC int\n\tD int\n}\n```\n\nThese three structures have the same data with different indirections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#T1",
              "documentation": {
                "identifier": "T1",
                "newPage": false,
                "searchKey": "gob.T1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T1 struct {\n\tA int\n\tB *int\n\tC **int\n\tD ***int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#T2",
              "documentation": {
                "identifier": "T2",
                "newPage": false,
                "searchKey": "gob.T2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T2 struct {\n\tA ***int\n\tB **int\n\tC *int\n\tD int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#RT0",
              "documentation": {
                "identifier": "RT0",
                "newPage": false,
                "searchKey": "gob.RT0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RT0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RT0 struct {\n\tA int\n\tB string\n\tC float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#RT1",
              "documentation": {
                "identifier": "RT1",
                "newPage": false,
                "searchKey": "gob.RT1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RT1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RT1 struct {\n\tC      float64\n\tB      string\n\tA      int\n\tNotSet string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#IT0",
              "documentation": {
                "identifier": "IT0",
                "newPage": false,
                "searchKey": "gob.IT0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IT0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IT0 struct {\n\tA        int64\n\tB        string\n\tIgnore_d []int\n\tIgnore_e [3]float64\n\tIgnore_f bool\n\tIgnore_g string\n\tIgnore_h []byte\n\tIgnore_i *RT1\n\tIgnore_m map[string]int\n\tC        float64\n}\n```\n\nLike an RT0 but with fields we'll ignore on the decode side. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Indirect",
              "documentation": {
                "identifier": "Indirect",
                "newPage": false,
                "searchKey": "gob.Indirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Indirect struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Indirect struct {\n\tA ***[3]int\n\tS ***[]int\n\tM ****map[string]int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Direct",
              "documentation": {
                "identifier": "Direct",
                "newPage": false,
                "searchKey": "gob.Direct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Direct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Direct struct {\n\tA [3]int\n\tS []int\n\tM map[string]int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Squarer",
              "documentation": {
                "identifier": "Squarer",
                "newPage": false,
                "searchKey": "gob.Squarer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Squarer interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Squarer interface {\n\tSquare() int\n}\n```\n\nAn interface with several implementations \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Int",
              "documentation": {
                "identifier": "Int",
                "newPage": false,
                "searchKey": "gob.Int",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Int int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Int int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Int.Square",
                    "documentation": {
                      "identifier": "Int.Square",
                      "newPage": false,
                      "searchKey": "gob.Int.Square",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i Int) Square() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i Int) Square() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Float",
              "documentation": {
                "identifier": "Float",
                "newPage": false,
                "searchKey": "gob.Float",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Float float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Float float64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Float.Square",
                    "documentation": {
                      "identifier": "Float.Square",
                      "newPage": false,
                      "searchKey": "gob.Float.Square",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f Float) Square() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f Float) Square() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Vector",
              "documentation": {
                "identifier": "Vector",
                "newPage": false,
                "searchKey": "gob.Vector",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Vector []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Vector []int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Vector.Square",
                    "documentation": {
                      "identifier": "Vector.Square",
                      "newPage": false,
                      "searchKey": "gob.Vector.Square",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Vector) Square() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Vector) Square() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Point",
              "documentation": {
                "identifier": "Point",
                "newPage": false,
                "searchKey": "gob.Point",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Point struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Point struct {\n\tX, Y int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Point.Square",
                    "documentation": {
                      "identifier": "Point.Square",
                      "newPage": false,
                      "searchKey": "gob.Point.Square",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Square() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Square() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#InterfaceItem",
              "documentation": {
                "identifier": "InterfaceItem",
                "newPage": false,
                "searchKey": "gob.InterfaceItem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type InterfaceItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InterfaceItem struct {\n\tI             int\n\tSq1, Sq2, Sq3 Squarer\n\tF             float64\n\tSq            []Squarer\n}\n```\n\nA struct with interfaces in it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#NoInterfaceItem",
              "documentation": {
                "identifier": "NoInterfaceItem",
                "newPage": false,
                "searchKey": "gob.NoInterfaceItem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NoInterfaceItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NoInterfaceItem struct {\n\tI int\n\tF float64\n}\n```\n\nThe same struct without interfaces \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BasicInterfaceItem",
              "documentation": {
                "identifier": "BasicInterfaceItem",
                "newPage": false,
                "searchKey": "gob.BasicInterfaceItem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BasicInterfaceItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BasicInterfaceItem struct {\n\tInt, Int8, Int16, Int32, Int64      interface{}\n\tUint, Uint8, Uint16, Uint32, Uint64 interface{}\n\tFloat32, Float64                    interface{}\n\tComplex64, Complex128               interface{}\n\tBool                                interface{}\n\tString                              interface{}\n\tBytes                               interface{}\n}\n```\n\nA struct with all basic types, stored in interfaces. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#String",
              "documentation": {
                "identifier": "String",
                "newPage": false,
                "searchKey": "gob.String",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type String string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype String string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#PtrInterfaceItem",
              "documentation": {
                "identifier": "PtrInterfaceItem",
                "newPage": false,
                "searchKey": "gob.PtrInterfaceItem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PtrInterfaceItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PtrInterfaceItem struct {\n\tStr1 interface{} // basic\n\tStr2 interface{} // derived\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#U",
              "documentation": {
                "identifier": "U",
                "newPage": false,
                "searchKey": "gob.U",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type U struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype U struct {\n\tA int\n\tB string\n\tc float64\n\tD uint\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#OnTheFly",
              "documentation": {
                "identifier": "OnTheFly",
                "newPage": false,
                "searchKey": "gob.OnTheFly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OnTheFly struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OnTheFly struct {\n\tA int\n}\n```\n\nA type that won't be defined in the gob until we send it in an interface value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#DT",
              "documentation": {
                "identifier": "DT",
                "newPage": false,
                "searchKey": "gob.DT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DT struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DT struct {\n\t//\tX OnTheFly\n\tA     int\n\tB     string\n\tC     float64\n\tI     interface{}\n\tJ     interface{}\n\tI_nil interface{}\n\tM     map[string]int\n\tT     [3]int\n\tS     []string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#newDT",
                    "documentation": {
                      "identifier": "newDT",
                      "newPage": false,
                      "searchKey": "gob.newDT",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newDT() DT"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newDT() DT\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ET0",
              "documentation": {
                "identifier": "ET0",
                "newPage": false,
                "searchKey": "gob.ET0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ET0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ET0 struct {\n\tA int\n\tB string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ET2",
              "documentation": {
                "identifier": "ET2",
                "newPage": false,
                "searchKey": "gob.ET2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ET2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ET2 struct {\n\tX string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ET1",
              "documentation": {
                "identifier": "ET1",
                "newPage": false,
                "searchKey": "gob.ET1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ET1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ET1 struct {\n\tA    int\n\tEt2  *ET2\n\tNext *ET1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ET3",
              "documentation": {
                "identifier": "ET3",
                "newPage": false,
                "searchKey": "gob.ET3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ET3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ET3 struct {\n\tA             int\n\tEt2           *ET2\n\tDifferentNext *ET1\n}\n```\n\nLike ET1 but with a different name for a field \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ET4",
              "documentation": {
                "identifier": "ET4",
                "newPage": false,
                "searchKey": "gob.ET4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ET4 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ET4 struct {\n\tA    int\n\tEt2  float64\n\tNext int\n}\n```\n\nLike ET1 but with a different type for a field \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#SingleTest",
              "documentation": {
                "identifier": "SingleTest",
                "newPage": false,
                "searchKey": "gob.SingleTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SingleTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SingleTest struct {\n\tin  interface{}\n\tout interface{}\n\terr string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#interfaceIndirectTestI",
              "documentation": {
                "identifier": "interfaceIndirectTestI",
                "newPage": false,
                "searchKey": "gob.interfaceIndirectTestI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type interfaceIndirectTestI interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype interfaceIndirectTestI interface {\n\tF() bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#interfaceIndirectTestT",
              "documentation": {
                "identifier": "interfaceIndirectTestT",
                "newPage": false,
                "searchKey": "gob.interfaceIndirectTestT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type interfaceIndirectTestT struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype interfaceIndirectTestT struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#interfaceIndirectTestT.F",
                    "documentation": {
                      "identifier": "interfaceIndirectTestT.F",
                      "newPage": false,
                      "searchKey": "gob.interfaceIndirectTestT.F",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (this *interfaceIndirectTestT) F() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (this *interfaceIndirectTestT) F() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Struct0",
              "documentation": {
                "identifier": "Struct0",
                "newPage": false,
                "searchKey": "gob.Struct0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Struct0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Struct0 struct {\n\tI interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#NewType0",
              "documentation": {
                "identifier": "NewType0",
                "newPage": false,
                "searchKey": "gob.NewType0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NewType0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NewType0 struct {\n\tS string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ignoreTest",
              "documentation": {
                "identifier": "ignoreTest",
                "newPage": false,
                "searchKey": "gob.ignoreTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ignoreTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ignoreTest struct {\n\tin, out interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug0Outer",
              "documentation": {
                "identifier": "Bug0Outer",
                "newPage": false,
                "searchKey": "gob.Bug0Outer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug0Outer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug0Outer struct {\n\tBug0Field interface{}\n}\n```\n\nAnother bug from golang-nuts, involving nested interfaces. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug0Inner",
              "documentation": {
                "identifier": "Bug0Inner",
                "newPage": false,
                "searchKey": "gob.Bug0Inner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug0Inner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug0Inner struct {\n\tA int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug1Elem",
              "documentation": {
                "identifier": "Bug1Elem",
                "newPage": false,
                "searchKey": "gob.Bug1Elem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug1Elem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug1Elem struct {\n\tName string\n\tId   int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug1StructMap",
              "documentation": {
                "identifier": "Bug1StructMap",
                "newPage": false,
                "searchKey": "gob.Bug1StructMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug1StructMap map[string]gob.Bug1Elem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug1StructMap map[string]Bug1Elem\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug2",
              "documentation": {
                "identifier": "Bug2",
                "newPage": false,
                "searchKey": "gob.Bug2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug2 struct {\n\tA   int\n\tC   chan int\n\tCP  *chan int\n\tF   func()\n\tFPP **func()\n}\n```\n\nShould be able to have unrepresentable fields (chan, func, *chan etc.); we just ignore them. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug3",
              "documentation": {
                "identifier": "Bug3",
                "newPage": false,
                "searchKey": "gob.Bug3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug3 struct {\n\tNum      int\n\tChildren []*Bug3\n}\n```\n\nMutually recursive slices of structs caused problems. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug4Public",
              "documentation": {
                "identifier": "Bug4Public",
                "newPage": false,
                "searchKey": "gob.Bug4Public",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug4Public struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug4Public struct {\n\tName   string\n\tSecret Bug4Secret\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bug4Secret",
              "documentation": {
                "identifier": "Bug4Secret",
                "newPage": false,
                "searchKey": "gob.Bug4Secret",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bug4Secret struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bug4Secret struct {\n\ta int // error: no exported fields.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Z",
              "documentation": {
                "identifier": "Z",
                "newPage": false,
                "searchKey": "gob.Z",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Z struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Z struct {\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#badDataTest",
              "documentation": {
                "identifier": "badDataTest",
                "newPage": false,
                "searchKey": "gob.badDataTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type badDataTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badDataTest struct {\n\tinput string      // The input encoded as a hex string.\n\terror string      // A substring of the error that should result.\n\tdata  interface{} // What to decode into.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ByteStruct",
              "documentation": {
                "identifier": "ByteStruct",
                "newPage": false,
                "searchKey": "gob.ByteStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ByteStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ByteStruct struct {\n\ta byte // not an exported field\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#ByteStruct.GobEncode",
                    "documentation": {
                      "identifier": "ByteStruct.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.ByteStruct.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *ByteStruct) GobEncode() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *ByteStruct) GobEncode() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#ByteStruct.GobDecode",
                    "documentation": {
                      "identifier": "ByteStruct.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.ByteStruct.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *ByteStruct) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *ByteStruct) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#StringStruct",
              "documentation": {
                "identifier": "StringStruct",
                "newPage": false,
                "searchKey": "gob.StringStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type StringStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StringStruct struct {\n\ts string // not an exported field\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#StringStruct.GobEncode",
                    "documentation": {
                      "identifier": "StringStruct.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.StringStruct.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *StringStruct) GobEncode() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *StringStruct) GobEncode() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#StringStruct.GobDecode",
                    "documentation": {
                      "identifier": "StringStruct.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.StringStruct.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *StringStruct) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *StringStruct) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ArrayStruct",
              "documentation": {
                "identifier": "ArrayStruct",
                "newPage": false,
                "searchKey": "gob.ArrayStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ArrayStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ArrayStruct struct {\n\ta [8192]byte // not an exported field\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#ArrayStruct.GobEncode",
                    "documentation": {
                      "identifier": "ArrayStruct.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.ArrayStruct.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *ArrayStruct) GobEncode() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *ArrayStruct) GobEncode() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#ArrayStruct.GobDecode",
                    "documentation": {
                      "identifier": "ArrayStruct.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.ArrayStruct.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *ArrayStruct) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *ArrayStruct) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Gobber",
              "documentation": {
                "identifier": "Gobber",
                "newPage": false,
                "searchKey": "gob.Gobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Gobber int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Gobber int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Gobber.GobEncode",
                    "documentation": {
                      "identifier": "Gobber.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.Gobber.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Gobber) GobEncode() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Gobber) GobEncode() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#Gobber.GobDecode",
                    "documentation": {
                      "identifier": "Gobber.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.Gobber.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Gobber) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Gobber) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ValueGobber",
              "documentation": {
                "identifier": "ValueGobber",
                "newPage": false,
                "searchKey": "gob.ValueGobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValueGobber string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValueGobber string // encodes with a value, decodes with a pointer.\n\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#ValueGobber.GobEncode",
                    "documentation": {
                      "identifier": "ValueGobber.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.ValueGobber.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v ValueGobber) GobEncode() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v ValueGobber) GobEncode() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#ValueGobber.GobDecode",
                    "documentation": {
                      "identifier": "ValueGobber.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.ValueGobber.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *ValueGobber) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *ValueGobber) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BinaryGobber",
              "documentation": {
                "identifier": "BinaryGobber",
                "newPage": false,
                "searchKey": "gob.BinaryGobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BinaryGobber int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BinaryGobber int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#BinaryGobber.MarshalBinary",
                    "documentation": {
                      "identifier": "BinaryGobber.MarshalBinary",
                      "newPage": false,
                      "searchKey": "gob.BinaryGobber.MarshalBinary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *BinaryGobber) MarshalBinary() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *BinaryGobber) MarshalBinary() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#BinaryGobber.UnmarshalBinary",
                    "documentation": {
                      "identifier": "BinaryGobber.UnmarshalBinary",
                      "newPage": false,
                      "searchKey": "gob.BinaryGobber.UnmarshalBinary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *BinaryGobber) UnmarshalBinary(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *BinaryGobber) UnmarshalBinary(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BinaryValueGobber",
              "documentation": {
                "identifier": "BinaryValueGobber",
                "newPage": false,
                "searchKey": "gob.BinaryValueGobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BinaryValueGobber string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BinaryValueGobber string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#BinaryValueGobber.MarshalBinary",
                    "documentation": {
                      "identifier": "BinaryValueGobber.MarshalBinary",
                      "newPage": false,
                      "searchKey": "gob.BinaryValueGobber.MarshalBinary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v BinaryValueGobber) MarshalBinary() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v BinaryValueGobber) MarshalBinary() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#BinaryValueGobber.UnmarshalBinary",
                    "documentation": {
                      "identifier": "BinaryValueGobber.UnmarshalBinary",
                      "newPage": false,
                      "searchKey": "gob.BinaryValueGobber.UnmarshalBinary",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *BinaryValueGobber) UnmarshalBinary(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *BinaryValueGobber) UnmarshalBinary(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TextGobber",
              "documentation": {
                "identifier": "TextGobber",
                "newPage": false,
                "searchKey": "gob.TextGobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TextGobber int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TextGobber int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#TextGobber.MarshalText",
                    "documentation": {
                      "identifier": "TextGobber.MarshalText",
                      "newPage": false,
                      "searchKey": "gob.TextGobber.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *TextGobber) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *TextGobber) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#TextGobber.UnmarshalText",
                    "documentation": {
                      "identifier": "TextGobber.UnmarshalText",
                      "newPage": false,
                      "searchKey": "gob.TextGobber.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *TextGobber) UnmarshalText(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *TextGobber) UnmarshalText(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TextValueGobber",
              "documentation": {
                "identifier": "TextValueGobber",
                "newPage": false,
                "searchKey": "gob.TextValueGobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TextValueGobber string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TextValueGobber string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#TextValueGobber.MarshalText",
                    "documentation": {
                      "identifier": "TextValueGobber.MarshalText",
                      "newPage": false,
                      "searchKey": "gob.TextValueGobber.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TextValueGobber) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TextValueGobber) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#TextValueGobber.UnmarshalText",
                    "documentation": {
                      "identifier": "TextValueGobber.UnmarshalText",
                      "newPage": false,
                      "searchKey": "gob.TextValueGobber.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *TextValueGobber) UnmarshalText(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *TextValueGobber) UnmarshalText(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest0",
              "documentation": {
                "identifier": "GobTest0",
                "newPage": false,
                "searchKey": "gob.GobTest0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest0 struct {\n\tX int // guarantee we have  something in common with GobTest*\n\tG *ByteStruct\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest1",
              "documentation": {
                "identifier": "GobTest1",
                "newPage": false,
                "searchKey": "gob.GobTest1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest1 struct {\n\tX int // guarantee we have  something in common with GobTest*\n\tG *StringStruct\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest2",
              "documentation": {
                "identifier": "GobTest2",
                "newPage": false,
                "searchKey": "gob.GobTest2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest2 struct {\n\tX int    // guarantee we have  something in common with GobTest*\n\tG string // not a GobEncoder - should give us errors\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest3",
              "documentation": {
                "identifier": "GobTest3",
                "newPage": false,
                "searchKey": "gob.GobTest3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest3 struct {\n\tX int // guarantee we have  something in common with GobTest*\n\tG *Gobber\n\tB *BinaryGobber\n\tT *TextGobber\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest4",
              "documentation": {
                "identifier": "GobTest4",
                "newPage": false,
                "searchKey": "gob.GobTest4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest4 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest4 struct {\n\tX  int // guarantee we have  something in common with GobTest*\n\tV  ValueGobber\n\tBV BinaryValueGobber\n\tTV TextValueGobber\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest5",
              "documentation": {
                "identifier": "GobTest5",
                "newPage": false,
                "searchKey": "gob.GobTest5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest5 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest5 struct {\n\tX  int // guarantee we have  something in common with GobTest*\n\tV  *ValueGobber\n\tBV *BinaryValueGobber\n\tTV *TextValueGobber\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest6",
              "documentation": {
                "identifier": "GobTest6",
                "newPage": false,
                "searchKey": "gob.GobTest6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest6 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest6 struct {\n\tX  int // guarantee we have  something in common with GobTest*\n\tV  ValueGobber\n\tW  *ValueGobber\n\tBV BinaryValueGobber\n\tBW *BinaryValueGobber\n\tTV TextValueGobber\n\tTW *TextValueGobber\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTest7",
              "documentation": {
                "identifier": "GobTest7",
                "newPage": false,
                "searchKey": "gob.GobTest7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTest7 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTest7 struct {\n\tX  int // guarantee we have  something in common with GobTest*\n\tV  *ValueGobber\n\tW  ValueGobber\n\tBV *BinaryValueGobber\n\tBW BinaryValueGobber\n\tTV *TextValueGobber\n\tTW TextValueGobber\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTestIgnoreEncoder",
              "documentation": {
                "identifier": "GobTestIgnoreEncoder",
                "newPage": false,
                "searchKey": "gob.GobTestIgnoreEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTestIgnoreEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTestIgnoreEncoder struct {\n\tX int // guarantee we have  something in common with GobTest*\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTestValueEncDec",
              "documentation": {
                "identifier": "GobTestValueEncDec",
                "newPage": false,
                "searchKey": "gob.GobTestValueEncDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTestValueEncDec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTestValueEncDec struct {\n\tX int          // guarantee we have  something in common with GobTest*\n\tG StringStruct // not a pointer.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTestIndirectEncDec",
              "documentation": {
                "identifier": "GobTestIndirectEncDec",
                "newPage": false,
                "searchKey": "gob.GobTestIndirectEncDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTestIndirectEncDec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTestIndirectEncDec struct {\n\tX int             // guarantee we have  something in common with GobTest*\n\tG ***StringStruct // indirections to the receiver.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTestArrayEncDec",
              "documentation": {
                "identifier": "GobTestArrayEncDec",
                "newPage": false,
                "searchKey": "gob.GobTestArrayEncDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTestArrayEncDec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTestArrayEncDec struct {\n\tX int         // guarantee we have  something in common with GobTest*\n\tA ArrayStruct // not a pointer.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#GobTestIndirectArrayEncDec",
              "documentation": {
                "identifier": "GobTestIndirectArrayEncDec",
                "newPage": false,
                "searchKey": "gob.GobTestIndirectArrayEncDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GobTestIndirectArrayEncDec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GobTestIndirectArrayEncDec struct {\n\tX int            // guarantee we have  something in common with GobTest*\n\tA ***ArrayStruct // indirections to a large receiver.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#gobDecoderBug0",
              "documentation": {
                "identifier": "gobDecoderBug0",
                "newPage": false,
                "searchKey": "gob.gobDecoderBug0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gobDecoderBug0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gobDecoderBug0 struct {\n\tfoo, bar string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#gobDecoderBug0.String",
                    "documentation": {
                      "identifier": "gobDecoderBug0.String",
                      "newPage": false,
                      "searchKey": "gob.gobDecoderBug0.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (br *gobDecoderBug0) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (br *gobDecoderBug0) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#gobDecoderBug0.GobEncode",
                    "documentation": {
                      "identifier": "gobDecoderBug0.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.gobDecoderBug0.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (br *gobDecoderBug0) GobEncode() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (br *gobDecoderBug0) GobEncode() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#gobDecoderBug0.GobDecode",
                    "documentation": {
                      "identifier": "gobDecoderBug0.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.gobDecoderBug0.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (br *gobDecoderBug0) GobDecode(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (br *gobDecoderBug0) GobDecode(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#isZeroBug",
              "documentation": {
                "identifier": "isZeroBug",
                "newPage": false,
                "searchKey": "gob.isZeroBug",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type isZeroBug struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype isZeroBug struct {\n\tT time.Time\n\tS string\n\tI int\n\tA isZeroBugArray\n\tF isZeroBugInterface\n}\n```\n\nAnother bug: this caused a crash with the new Go1 Time type. We throw in a gob-encoding array, to test another case of isZero, and a struct containing a nil interface, to test a third. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#isZeroBugArray",
              "documentation": {
                "identifier": "isZeroBugArray",
                "newPage": false,
                "searchKey": "gob.isZeroBugArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type isZeroBugArray [2]uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype isZeroBugArray [2]uint8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#isZeroBugArray.GobEncode",
                    "documentation": {
                      "identifier": "isZeroBugArray.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.isZeroBugArray.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a isZeroBugArray) GobEncode() (b []byte, e error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a isZeroBugArray) GobEncode() (b []byte, e error)\n```\n\nReceiver is value, not pointer, to test isZero of array. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#isZeroBugArray.GobDecode",
                    "documentation": {
                      "identifier": "isZeroBugArray.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.isZeroBugArray.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *isZeroBugArray) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *isZeroBugArray) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#isZeroBugInterface",
              "documentation": {
                "identifier": "isZeroBugInterface",
                "newPage": false,
                "searchKey": "gob.isZeroBugInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type isZeroBugInterface struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype isZeroBugInterface struct {\n\tI interface{}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#isZeroBugInterface.GobEncode",
                    "documentation": {
                      "identifier": "isZeroBugInterface.GobEncode",
                      "newPage": false,
                      "searchKey": "gob.isZeroBugInterface.GobEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i isZeroBugInterface) GobEncode() (b []byte, e error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i isZeroBugInterface) GobEncode() (b []byte, e error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#isZeroBugInterface.GobDecode",
                    "documentation": {
                      "identifier": "isZeroBugInterface.GobDecode",
                      "newPage": false,
                      "searchKey": "gob.isZeroBugInterface.GobDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *isZeroBugInterface) GobDecode(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *isZeroBugInterface) GobDecode(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bench",
              "documentation": {
                "identifier": "Bench",
                "newPage": false,
                "searchKey": "gob.Bench",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bench struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bench struct {\n\tA int\n\tB float64\n\tC string\n\tD []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#benchmarkBuf",
              "documentation": {
                "identifier": "benchmarkBuf",
                "newPage": false,
                "searchKey": "gob.benchmarkBuf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type benchmarkBuf struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype benchmarkBuf struct {\n\toffset int\n\tdata   []byte\n}\n```\n\nbenchmarkBuf is a read buffer we can reset \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/gob#benchmarkBuf.Read",
                    "documentation": {
                      "identifier": "benchmarkBuf.Read",
                      "newPage": false,
                      "searchKey": "gob.benchmarkBuf.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *benchmarkBuf) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *benchmarkBuf) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#benchmarkBuf.ReadByte",
                    "documentation": {
                      "identifier": "benchmarkBuf.ReadByte",
                      "newPage": false,
                      "searchKey": "gob.benchmarkBuf.ReadByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *benchmarkBuf) ReadByte() (c byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *benchmarkBuf) ReadByte() (c byte, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/gob#benchmarkBuf.reset",
                    "documentation": {
                      "identifier": "benchmarkBuf.reset",
                      "newPage": false,
                      "searchKey": "gob.benchmarkBuf.reset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *benchmarkBuf) reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *benchmarkBuf) reset()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#typeT",
              "documentation": {
                "identifier": "typeT",
                "newPage": false,
                "searchKey": "gob.typeT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeT struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeT struct {\n\tid  typeId\n\tstr string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Bar",
              "documentation": {
                "identifier": "Bar",
                "newPage": false,
                "searchKey": "gob.Bar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Bar struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Bar struct {\n\tX string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Foo",
              "documentation": {
                "identifier": "Foo",
                "newPage": false,
                "searchKey": "gob.Foo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Foo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Foo struct {\n\tA int\n\tB int32 // will become int\n\tC string\n\tD []byte\n\tE *float64    // will become float64\n\tF ****float64 // will become float64\n\tG *Bar\n\tH *Bar // should not interpolate the definition of Bar again\n\tI *Foo // will not explode\n}\n```\n\nThis structure has pointers and refers to itself, making it a good test case. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#N1",
              "documentation": {
                "identifier": "N1",
                "newPage": false,
                "searchKey": "gob.N1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type N1 struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype N1 struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#N2",
              "documentation": {
                "identifier": "N2",
                "newPage": false,
                "searchKey": "gob.N2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type N2 struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype N2 struct{}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/encoding/gob#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/gob#decBoolArray",
              "documentation": {
                "identifier": "decBoolArray",
                "newPage": false,
                "searchKey": "gob.decBoolArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decBoolArray(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decBoolArray(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decBoolSlice",
              "documentation": {
                "identifier": "decBoolSlice",
                "newPage": false,
                "searchKey": "gob.decBoolSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decBoolSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decBoolSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decComplex64Array",
              "documentation": {
                "identifier": "decComplex64Array",
                "newPage": false,
                "searchKey": "gob.decComplex64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decComplex64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decComplex64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decComplex64Slice",
              "documentation": {
                "identifier": "decComplex64Slice",
                "newPage": false,
                "searchKey": "gob.decComplex64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decComplex64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decComplex64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decComplex128Array",
              "documentation": {
                "identifier": "decComplex128Array",
                "newPage": false,
                "searchKey": "gob.decComplex128Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decComplex128Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decComplex128Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decComplex128Slice",
              "documentation": {
                "identifier": "decComplex128Slice",
                "newPage": false,
                "searchKey": "gob.decComplex128Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decComplex128Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decComplex128Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decFloat32Array",
              "documentation": {
                "identifier": "decFloat32Array",
                "newPage": false,
                "searchKey": "gob.decFloat32Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decFloat32Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decFloat32Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decFloat32Slice",
              "documentation": {
                "identifier": "decFloat32Slice",
                "newPage": false,
                "searchKey": "gob.decFloat32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decFloat32Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decFloat32Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decFloat64Array",
              "documentation": {
                "identifier": "decFloat64Array",
                "newPage": false,
                "searchKey": "gob.decFloat64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decFloat64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decFloat64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decFloat64Slice",
              "documentation": {
                "identifier": "decFloat64Slice",
                "newPage": false,
                "searchKey": "gob.decFloat64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decFloat64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decFloat64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decIntArray",
              "documentation": {
                "identifier": "decIntArray",
                "newPage": false,
                "searchKey": "gob.decIntArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decIntArray(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decIntArray(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decIntSlice",
              "documentation": {
                "identifier": "decIntSlice",
                "newPage": false,
                "searchKey": "gob.decIntSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decIntSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decIntSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt16Array",
              "documentation": {
                "identifier": "decInt16Array",
                "newPage": false,
                "searchKey": "gob.decInt16Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt16Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt16Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt16Slice",
              "documentation": {
                "identifier": "decInt16Slice",
                "newPage": false,
                "searchKey": "gob.decInt16Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt16Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt16Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt32Array",
              "documentation": {
                "identifier": "decInt32Array",
                "newPage": false,
                "searchKey": "gob.decInt32Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt32Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt32Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt32Slice",
              "documentation": {
                "identifier": "decInt32Slice",
                "newPage": false,
                "searchKey": "gob.decInt32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt32Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt32Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt64Array",
              "documentation": {
                "identifier": "decInt64Array",
                "newPage": false,
                "searchKey": "gob.decInt64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt64Slice",
              "documentation": {
                "identifier": "decInt64Slice",
                "newPage": false,
                "searchKey": "gob.decInt64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt8Array",
              "documentation": {
                "identifier": "decInt8Array",
                "newPage": false,
                "searchKey": "gob.decInt8Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt8Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt8Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt8Slice",
              "documentation": {
                "identifier": "decInt8Slice",
                "newPage": false,
                "searchKey": "gob.decInt8Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt8Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt8Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decStringArray",
              "documentation": {
                "identifier": "decStringArray",
                "newPage": false,
                "searchKey": "gob.decStringArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decStringArray(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decStringArray(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decStringSlice",
              "documentation": {
                "identifier": "decStringSlice",
                "newPage": false,
                "searchKey": "gob.decStringSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decStringSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decStringSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUintArray",
              "documentation": {
                "identifier": "decUintArray",
                "newPage": false,
                "searchKey": "gob.decUintArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUintArray(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUintArray(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUintSlice",
              "documentation": {
                "identifier": "decUintSlice",
                "newPage": false,
                "searchKey": "gob.decUintSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUintSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUintSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint16Array",
              "documentation": {
                "identifier": "decUint16Array",
                "newPage": false,
                "searchKey": "gob.decUint16Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint16Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint16Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint16Slice",
              "documentation": {
                "identifier": "decUint16Slice",
                "newPage": false,
                "searchKey": "gob.decUint16Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint16Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint16Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint32Array",
              "documentation": {
                "identifier": "decUint32Array",
                "newPage": false,
                "searchKey": "gob.decUint32Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint32Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint32Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint32Slice",
              "documentation": {
                "identifier": "decUint32Slice",
                "newPage": false,
                "searchKey": "gob.decUint32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint32Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint32Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint64Array",
              "documentation": {
                "identifier": "decUint64Array",
                "newPage": false,
                "searchKey": "gob.decUint64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint64Array(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint64Slice",
              "documentation": {
                "identifier": "decUint64Slice",
                "newPage": false,
                "searchKey": "gob.decUint64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint64Slice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUintptrArray",
              "documentation": {
                "identifier": "decUintptrArray",
                "newPage": false,
                "searchKey": "gob.decUintptrArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUintptrArray(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUintptrArray(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUintptrSlice",
              "documentation": {
                "identifier": "decUintptrSlice",
                "newPage": false,
                "searchKey": "gob.decUintptrSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUintptrSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUintptrSlice(state *decoderState, v reflect.Value, length int, ovfl error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#overflow",
              "documentation": {
                "identifier": "overflow",
                "newPage": false,
                "searchKey": "gob.overflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func overflow(name string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc overflow(name string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decodeUintReader",
              "documentation": {
                "identifier": "decodeUintReader",
                "newPage": false,
                "searchKey": "gob.decodeUintReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeUintReader(r io.Reader, buf []byte) (x uint64, width int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeUintReader(r io.Reader, buf []byte) (x uint64, width int, err error)\n```\n\ndecodeUintReader reads an encoded unsigned integer from an io.Reader. Used only by the Decoder to read the message length. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ignoreUint",
              "documentation": {
                "identifier": "ignoreUint",
                "newPage": false,
                "searchKey": "gob.ignoreUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ignoreUint(i *decInstr, state *decoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ignoreUint(i *decInstr, state *decoderState, v reflect.Value)\n```\n\nignoreUint discards a uint value with no destination. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ignoreTwoUints",
              "documentation": {
                "identifier": "ignoreTwoUints",
                "newPage": false,
                "searchKey": "gob.ignoreTwoUints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ignoreTwoUints(i *decInstr, state *decoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ignoreTwoUints(i *decInstr, state *decoderState, v reflect.Value)\n```\n\nignoreTwoUints discards a uint value with no destination. It's used to skip complex values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decAlloc",
              "documentation": {
                "identifier": "decAlloc",
                "newPage": false,
                "searchKey": "gob.decAlloc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decAlloc(v reflect.Value) reflect.Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decAlloc(v reflect.Value) reflect.Value\n```\n\ndecAlloc takes a value and returns a settable value that can be assigned to. If the value is a pointer, decAlloc guarantees it points to storage. The callers to the individual decoders are expected to have used decAlloc. The individual decoders don't need to it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decBool",
              "documentation": {
                "identifier": "decBool",
                "newPage": false,
                "searchKey": "gob.decBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decBool(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decBool(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecBool decodes a uint and stores it as a boolean in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt8",
              "documentation": {
                "identifier": "decInt8",
                "newPage": false,
                "searchKey": "gob.decInt8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt8(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt8(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecInt8 decodes an integer and stores it as an int8 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint8",
              "documentation": {
                "identifier": "decUint8",
                "newPage": false,
                "searchKey": "gob.decUint8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint8(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint8(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecUint8 decodes an unsigned integer and stores it as a uint8 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt16",
              "documentation": {
                "identifier": "decInt16",
                "newPage": false,
                "searchKey": "gob.decInt16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt16(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt16(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecInt16 decodes an integer and stores it as an int16 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint16",
              "documentation": {
                "identifier": "decUint16",
                "newPage": false,
                "searchKey": "gob.decUint16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint16(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint16(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecUint16 decodes an unsigned integer and stores it as a uint16 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt32",
              "documentation": {
                "identifier": "decInt32",
                "newPage": false,
                "searchKey": "gob.decInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt32(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt32(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecInt32 decodes an integer and stores it as an int32 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint32",
              "documentation": {
                "identifier": "decUint32",
                "newPage": false,
                "searchKey": "gob.decUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint32(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint32(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecUint32 decodes an unsigned integer and stores it as a uint32 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decInt64",
              "documentation": {
                "identifier": "decInt64",
                "newPage": false,
                "searchKey": "gob.decInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decInt64(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decInt64(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecInt64 decodes an integer and stores it as an int64 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint64",
              "documentation": {
                "identifier": "decUint64",
                "newPage": false,
                "searchKey": "gob.decUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint64(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint64(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecUint64 decodes an unsigned integer and stores it as a uint64 in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#float64FromBits",
              "documentation": {
                "identifier": "float64FromBits",
                "newPage": false,
                "searchKey": "gob.float64FromBits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func float64FromBits(u uint64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc float64FromBits(u uint64) float64\n```\n\nFloating-point numbers are transmitted as uint64s holding the bits of the underlying representation. They are sent byte-reversed, with the exponent end coming out first, so integer floating point numbers (for example) transmit more compactly. This routine does the unswizzling. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#float32FromBits",
              "documentation": {
                "identifier": "float32FromBits",
                "newPage": false,
                "searchKey": "gob.float32FromBits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func float32FromBits(u uint64, ovfl error) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc float32FromBits(u uint64, ovfl error) float64\n```\n\nfloat32FromBits decodes an unsigned integer, treats it as a 32-bit floating-point number, and returns it. It's a helper function for float32 and complex64. It returns a float64 because that's what reflection needs, but its return value is known to be accurately representable in a float32. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decFloat32",
              "documentation": {
                "identifier": "decFloat32",
                "newPage": false,
                "searchKey": "gob.decFloat32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decFloat32(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decFloat32(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecFloat32 decodes an unsigned integer, treats it as a 32-bit floating-point number, and stores it in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decFloat64",
              "documentation": {
                "identifier": "decFloat64",
                "newPage": false,
                "searchKey": "gob.decFloat64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decFloat64(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decFloat64(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecFloat64 decodes an unsigned integer, treats it as a 64-bit floating-point number, and stores it in value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decComplex64",
              "documentation": {
                "identifier": "decComplex64",
                "newPage": false,
                "searchKey": "gob.decComplex64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decComplex64(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decComplex64(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecComplex64 decodes a pair of unsigned integers, treats them as a pair of floating point numbers, and stores them as a complex64 in value. The real part comes first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decComplex128",
              "documentation": {
                "identifier": "decComplex128",
                "newPage": false,
                "searchKey": "gob.decComplex128",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decComplex128(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decComplex128(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecComplex128 decodes a pair of unsigned integers, treats them as a pair of floating point numbers, and stores them as a complex128 in value. The real part comes first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decUint8Slice",
              "documentation": {
                "identifier": "decUint8Slice",
                "newPage": false,
                "searchKey": "gob.decUint8Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decUint8Slice(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decUint8Slice(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecUint8Slice decodes a byte slice and stores in value a slice header describing the data. uint8 slices are encoded as an unsigned count followed by the raw bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decString",
              "documentation": {
                "identifier": "decString",
                "newPage": false,
                "searchKey": "gob.decString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decString(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decString(i *decInstr, state *decoderState, value reflect.Value)\n```\n\ndecString decodes byte array and stores in value a string header describing the data. Strings are encoded as an unsigned count followed by the raw bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#ignoreUint8Array",
              "documentation": {
                "identifier": "ignoreUint8Array",
                "newPage": false,
                "searchKey": "gob.ignoreUint8Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ignoreUint8Array(i *decInstr, state *decoderState, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ignoreUint8Array(i *decInstr, state *decoderState, value reflect.Value)\n```\n\nignoreUint8Array skips over the data for a byte slice value with no destination. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#decodeIntoValue",
              "documentation": {
                "identifier": "decodeIntoValue",
                "newPage": false,
                "searchKey": "gob.decodeIntoValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeIntoValue(state *decoderState, op decOp, isPtr bool, value reflect.Value, instr *decInstr) reflect.Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeIntoValue(state *decoderState, op decOp, isPtr bool, value reflect.Value, instr *decInstr) reflect.Value\n```\n\ndecodeIntoValue is a helper for map decoding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "gob.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#allocValue",
              "documentation": {
                "identifier": "allocValue",
                "newPage": false,
                "searchKey": "gob.allocValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func allocValue(t reflect.Type) reflect.Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allocValue(t reflect.Type) reflect.Value\n```\n\nGob depends on being able to take the address of zeroed Values it creates, so use this wrapper instead of the standard reflect.Zero. Each call allocates once. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#toInt",
              "documentation": {
                "identifier": "toInt",
                "newPage": false,
                "searchKey": "gob.toInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func toInt(x uint64) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toInt(x uint64) int64\n```\n\ntoInt turns an encoded uint64 into an int, according to the marshaling rules. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encBoolArray",
              "documentation": {
                "identifier": "encBoolArray",
                "newPage": false,
                "searchKey": "gob.encBoolArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encBoolArray(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encBoolArray(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encBoolSlice",
              "documentation": {
                "identifier": "encBoolSlice",
                "newPage": false,
                "searchKey": "gob.encBoolSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encBoolSlice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encBoolSlice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encComplex64Array",
              "documentation": {
                "identifier": "encComplex64Array",
                "newPage": false,
                "searchKey": "gob.encComplex64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encComplex64Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encComplex64Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encComplex64Slice",
              "documentation": {
                "identifier": "encComplex64Slice",
                "newPage": false,
                "searchKey": "gob.encComplex64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encComplex64Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encComplex64Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encComplex128Array",
              "documentation": {
                "identifier": "encComplex128Array",
                "newPage": false,
                "searchKey": "gob.encComplex128Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encComplex128Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encComplex128Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encComplex128Slice",
              "documentation": {
                "identifier": "encComplex128Slice",
                "newPage": false,
                "searchKey": "gob.encComplex128Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encComplex128Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encComplex128Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encFloat32Array",
              "documentation": {
                "identifier": "encFloat32Array",
                "newPage": false,
                "searchKey": "gob.encFloat32Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encFloat32Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encFloat32Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encFloat32Slice",
              "documentation": {
                "identifier": "encFloat32Slice",
                "newPage": false,
                "searchKey": "gob.encFloat32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encFloat32Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encFloat32Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encFloat64Array",
              "documentation": {
                "identifier": "encFloat64Array",
                "newPage": false,
                "searchKey": "gob.encFloat64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encFloat64Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encFloat64Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encFloat64Slice",
              "documentation": {
                "identifier": "encFloat64Slice",
                "newPage": false,
                "searchKey": "gob.encFloat64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encFloat64Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encFloat64Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encIntArray",
              "documentation": {
                "identifier": "encIntArray",
                "newPage": false,
                "searchKey": "gob.encIntArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encIntArray(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encIntArray(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encIntSlice",
              "documentation": {
                "identifier": "encIntSlice",
                "newPage": false,
                "searchKey": "gob.encIntSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encIntSlice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encIntSlice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt16Array",
              "documentation": {
                "identifier": "encInt16Array",
                "newPage": false,
                "searchKey": "gob.encInt16Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt16Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt16Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt16Slice",
              "documentation": {
                "identifier": "encInt16Slice",
                "newPage": false,
                "searchKey": "gob.encInt16Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt16Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt16Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt32Array",
              "documentation": {
                "identifier": "encInt32Array",
                "newPage": false,
                "searchKey": "gob.encInt32Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt32Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt32Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt32Slice",
              "documentation": {
                "identifier": "encInt32Slice",
                "newPage": false,
                "searchKey": "gob.encInt32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt32Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt32Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt64Array",
              "documentation": {
                "identifier": "encInt64Array",
                "newPage": false,
                "searchKey": "gob.encInt64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt64Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt64Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt64Slice",
              "documentation": {
                "identifier": "encInt64Slice",
                "newPage": false,
                "searchKey": "gob.encInt64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt64Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt64Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt8Array",
              "documentation": {
                "identifier": "encInt8Array",
                "newPage": false,
                "searchKey": "gob.encInt8Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt8Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt8Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt8Slice",
              "documentation": {
                "identifier": "encInt8Slice",
                "newPage": false,
                "searchKey": "gob.encInt8Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt8Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt8Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encStringArray",
              "documentation": {
                "identifier": "encStringArray",
                "newPage": false,
                "searchKey": "gob.encStringArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encStringArray(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encStringArray(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encStringSlice",
              "documentation": {
                "identifier": "encStringSlice",
                "newPage": false,
                "searchKey": "gob.encStringSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encStringSlice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encStringSlice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUintArray",
              "documentation": {
                "identifier": "encUintArray",
                "newPage": false,
                "searchKey": "gob.encUintArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUintArray(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUintArray(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUintSlice",
              "documentation": {
                "identifier": "encUintSlice",
                "newPage": false,
                "searchKey": "gob.encUintSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUintSlice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUintSlice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint16Array",
              "documentation": {
                "identifier": "encUint16Array",
                "newPage": false,
                "searchKey": "gob.encUint16Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint16Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint16Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint16Slice",
              "documentation": {
                "identifier": "encUint16Slice",
                "newPage": false,
                "searchKey": "gob.encUint16Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint16Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint16Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint32Array",
              "documentation": {
                "identifier": "encUint32Array",
                "newPage": false,
                "searchKey": "gob.encUint32Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint32Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint32Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint32Slice",
              "documentation": {
                "identifier": "encUint32Slice",
                "newPage": false,
                "searchKey": "gob.encUint32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint32Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint32Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint64Array",
              "documentation": {
                "identifier": "encUint64Array",
                "newPage": false,
                "searchKey": "gob.encUint64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint64Array(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint64Array(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint64Slice",
              "documentation": {
                "identifier": "encUint64Slice",
                "newPage": false,
                "searchKey": "gob.encUint64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint64Slice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint64Slice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUintptrArray",
              "documentation": {
                "identifier": "encUintptrArray",
                "newPage": false,
                "searchKey": "gob.encUintptrArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUintptrArray(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUintptrArray(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUintptrSlice",
              "documentation": {
                "identifier": "encUintptrSlice",
                "newPage": false,
                "searchKey": "gob.encUintptrSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUintptrSlice(state *encoderState, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUintptrSlice(state *encoderState, v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encIndirect",
              "documentation": {
                "identifier": "encIndirect",
                "newPage": false,
                "searchKey": "gob.encIndirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encIndirect(pv reflect.Value, indir int) reflect.Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encIndirect(pv reflect.Value, indir int) reflect.Value\n```\n\nencIndirect dereferences pv indir times and returns the result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encBool",
              "documentation": {
                "identifier": "encBool",
                "newPage": false,
                "searchKey": "gob.encBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encBool(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encBool(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencBool encodes the bool referenced by v as an unsigned 0 or 1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encInt",
              "documentation": {
                "identifier": "encInt",
                "newPage": false,
                "searchKey": "gob.encInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encInt(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encInt(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencInt encodes the signed integer (int int8 int16 int32 int64) referenced by v. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint",
              "documentation": {
                "identifier": "encUint",
                "newPage": false,
                "searchKey": "gob.encUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencUint encodes the unsigned integer (uint uint8 uint16 uint32 uint64 uintptr) referenced by v. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#floatBits",
              "documentation": {
                "identifier": "floatBits",
                "newPage": false,
                "searchKey": "gob.floatBits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func floatBits(f float64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc floatBits(f float64) uint64\n```\n\nfloatBits returns a uint64 holding the bits of a floating-point number. Floating-point numbers are transmitted as uint64s holding the bits of the underlying representation. They are sent byte-reversed, with the exponent end coming out first, so integer floating point numbers (for example) transmit more compactly. This routine does the swizzling. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encFloat",
              "documentation": {
                "identifier": "encFloat",
                "newPage": false,
                "searchKey": "gob.encFloat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encFloat(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encFloat(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencFloat encodes the floating point value (float32 float64) referenced by v. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encComplex",
              "documentation": {
                "identifier": "encComplex",
                "newPage": false,
                "searchKey": "gob.encComplex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encComplex(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encComplex(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencComplex encodes the complex value (complex64 complex128) referenced by v. Complex numbers are just a pair of floating-point numbers, real part first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encUint8Array",
              "documentation": {
                "identifier": "encUint8Array",
                "newPage": false,
                "searchKey": "gob.encUint8Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encUint8Array(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encUint8Array(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencUint8Array encodes the byte array referenced by v. Byte arrays are encoded as an unsigned count followed by the raw bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encString",
              "documentation": {
                "identifier": "encString",
                "newPage": false,
                "searchKey": "gob.encString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encString(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encString(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencString encodes the string referenced by v. Strings are encoded as an unsigned count followed by the raw bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encStructTerminator",
              "documentation": {
                "identifier": "encStructTerminator",
                "newPage": false,
                "searchKey": "gob.encStructTerminator",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encStructTerminator(i *encInstr, state *encoderState, v reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encStructTerminator(i *encInstr, state *encoderState, v reflect.Value)\n```\n\nencStructTerminator encodes the end of an encoded struct as delta field number of 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#valid",
              "documentation": {
                "identifier": "valid",
                "newPage": false,
                "searchKey": "gob.valid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func valid(v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc valid(v reflect.Value) bool\n```\n\nvalid reports whether the value is valid and a non-nil pointer. (Slices, maps, and chans take care of themselves.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encodeReflectValue",
              "documentation": {
                "identifier": "encodeReflectValue",
                "newPage": false,
                "searchKey": "gob.encodeReflectValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeReflectValue(state *encoderState, v reflect.Value, op encOp, indir int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeReflectValue(state *encoderState, v reflect.Value, op encOp, indir int)\n```\n\nencodeReflectValue is a helper for maps. It encodes the value v. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#isZero",
              "documentation": {
                "identifier": "isZero",
                "newPage": false,
                "searchKey": "gob.isZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isZero(val reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isZero(val reflect.Value) bool\n```\n\nisZero reports whether the value is the zero of its type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#errorf",
              "documentation": {
                "identifier": "errorf",
                "newPage": false,
                "searchKey": "gob.errorf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func errorf(format string, args ...interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc errorf(format string, args ...interface{})\n```\n\nerrorf is like error_ but takes Printf-style arguments to construct an error. It always prefixes the message with \"gob: \". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#error_",
              "documentation": {
                "identifier": "error_",
                "newPage": false,
                "searchKey": "gob.error_",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func error_(err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc error_(err error)\n```\n\nerror wraps the argument error and uses it as the argument to panic. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#catchError",
              "documentation": {
                "identifier": "catchError",
                "newPage": false,
                "searchKey": "gob.catchError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func catchError(err *error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc catchError(err *error)\n```\n\ncatchError is meant to be used as a deferred function to turn a panic(gobError) into a plain error. It overwrites the error return of the function that deferred its call. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#implementsInterface",
              "documentation": {
                "identifier": "implementsInterface",
                "newPage": false,
                "searchKey": "gob.implementsInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func implementsInterface(typ, gobEncDecType reflect.Type) (success bool, indir int8)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc implementsInterface(typ, gobEncDecType reflect.Type) (success bool, indir int8)\n```\n\nimplementsInterface reports whether the type implements the gobEncoder/gobDecoder interface. It also returns the number of indirections required to get to the implementation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#setTypeId",
              "documentation": {
                "identifier": "setTypeId",
                "newPage": false,
                "searchKey": "gob.setTypeId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func setTypeId(typ gobType)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setTypeId(typ gobType)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "gob.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#isExported",
              "documentation": {
                "identifier": "isExported",
                "newPage": false,
                "searchKey": "gob.isExported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isExported(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isExported(name string) bool\n```\n\nisExported reports whether this is an exported - upper case - name. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#isSent",
              "documentation": {
                "identifier": "isSent",
                "newPage": false,
                "searchKey": "gob.isSent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isSent(field *reflect.StructField) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isSent(field *reflect.StructField) bool\n```\n\nisSent reports whether this struct field is to be transmitted. It will be transmitted only if it is exported and not a chan or func field or pointer to chan or func. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#checkId",
              "documentation": {
                "identifier": "checkId",
                "newPage": false,
                "searchKey": "gob.checkId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkId(want, got typeId)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkId(want, got typeId)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#RegisterName",
              "documentation": {
                "identifier": "RegisterName",
                "newPage": false,
                "searchKey": "gob.RegisterName",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RegisterName(name string, value interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RegisterName(name string, value interface{})\n```\n\nRegisterName is like Register but uses the provided name rather than the type's default. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Register",
              "documentation": {
                "identifier": "Register",
                "newPage": false,
                "searchKey": "gob.Register",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Register(value interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Register(value interface{})\n```\n\nRegister records a type, identified by a value for that type, under its internal type name. That name will identify the concrete type of a value sent or received as an interface variable. Only types that will be transferred as implementations of interface values need to be registered. Expecting to be used only during initialization, it panics if the mapping between types and names is not a bijection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#registerBasics",
              "documentation": {
                "identifier": "registerBasics",
                "newPage": false,
                "searchKey": "gob.registerBasics",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func registerBasics()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc registerBasics()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testError",
              "documentation": {
                "identifier": "testError",
                "newPage": false,
                "searchKey": "gob.testError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testError(t *testing.T)\n```\n\ntestError is meant to be used as a deferred function to turn a panic(gobError) into a plain test.Error call. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestUintCodec",
              "documentation": {
                "identifier": "TestUintCodec",
                "newPage": false,
                "searchKey": "gob.TestUintCodec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUintCodec(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUintCodec(t *testing.T)\n```\n\nTest basic encode/decode routines for unsigned integers \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#verifyInt",
              "documentation": {
                "identifier": "verifyInt",
                "newPage": false,
                "searchKey": "gob.verifyInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyInt(i int64, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyInt(i int64, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestIntCodec",
              "documentation": {
                "identifier": "TestIntCodec",
                "newPage": false,
                "searchKey": "gob.TestIntCodec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntCodec(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntCodec(t *testing.T)\n```\n\nTest basic encode/decode routines for signed integers \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestScalarEncInstructions",
              "documentation": {
                "identifier": "TestScalarEncInstructions",
                "newPage": false,
                "searchKey": "gob.TestScalarEncInstructions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScalarEncInstructions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScalarEncInstructions(t *testing.T)\n```\n\nTest instruction execution for encoding. Do not run the machine yet; instead do individual instructions crafted by hand. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#execDec",
              "documentation": {
                "identifier": "execDec",
                "newPage": false,
                "searchKey": "gob.execDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func execDec(instr *decInstr, state *decoderState, t *testing.T, value reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc execDec(instr *decInstr, state *decoderState, t *testing.T, value reflect.Value)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestScalarDecInstructions",
              "documentation": {
                "identifier": "TestScalarDecInstructions",
                "newPage": false,
                "searchKey": "gob.TestScalarDecInstructions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScalarDecInstructions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScalarDecInstructions(t *testing.T)\n```\n\nTest instruction execution for decoding. Do not run the machine yet; instead do individual instructions crafted by hand. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestEndToEnd",
              "documentation": {
                "identifier": "TestEndToEnd",
                "newPage": false,
                "searchKey": "gob.TestEndToEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEndToEnd(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEndToEnd(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestOverflow",
              "documentation": {
                "identifier": "TestOverflow",
                "newPage": false,
                "searchKey": "gob.TestOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestNesting",
              "documentation": {
                "identifier": "TestNesting",
                "newPage": false,
                "searchKey": "gob.TestNesting",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNesting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNesting(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestAutoIndirection",
              "documentation": {
                "identifier": "TestAutoIndirection",
                "newPage": false,
                "searchKey": "gob.TestAutoIndirection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutoIndirection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutoIndirection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestReorderedFields",
              "documentation": {
                "identifier": "TestReorderedFields",
                "newPage": false,
                "searchKey": "gob.TestReorderedFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReorderedFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReorderedFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestIgnoredFields",
              "documentation": {
                "identifier": "TestIgnoredFields",
                "newPage": false,
                "searchKey": "gob.TestIgnoredFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIgnoredFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIgnoredFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestBadRecursiveType",
              "documentation": {
                "identifier": "TestBadRecursiveType",
                "newPage": false,
                "searchKey": "gob.TestBadRecursiveType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadRecursiveType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadRecursiveType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestIndirectSliceMapArray",
              "documentation": {
                "identifier": "TestIndirectSliceMapArray",
                "newPage": false,
                "searchKey": "gob.TestIndirectSliceMapArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndirectSliceMapArray(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndirectSliceMapArray(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestInterface",
              "documentation": {
                "identifier": "TestInterface",
                "newPage": false,
                "searchKey": "gob.TestInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestInterfaceBasic",
              "documentation": {
                "identifier": "TestInterfaceBasic",
                "newPage": false,
                "searchKey": "gob.TestInterfaceBasic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceBasic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceBasic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestInterfacePointer",
              "documentation": {
                "identifier": "TestInterfacePointer",
                "newPage": false,
                "searchKey": "gob.TestInterfacePointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfacePointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfacePointer(t *testing.T)\n```\n\nWe'll send pointers; should receive values. Also check that we can register T but send *T. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestIgnoreInterface",
              "documentation": {
                "identifier": "TestIgnoreInterface",
                "newPage": false,
                "searchKey": "gob.TestIgnoreInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIgnoreInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIgnoreInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestUnexportedFields",
              "documentation": {
                "identifier": "TestUnexportedFields",
                "newPage": false,
                "searchKey": "gob.TestUnexportedFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnexportedFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnexportedFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestDebugSingleton",
              "documentation": {
                "identifier": "TestDebugSingleton",
                "newPage": false,
                "searchKey": "gob.TestDebugSingleton",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugSingleton(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugSingleton(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestDebugStruct",
              "documentation": {
                "identifier": "TestDebugStruct",
                "newPage": false,
                "searchKey": "gob.TestDebugStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encFuzzDec",
              "documentation": {
                "identifier": "encFuzzDec",
                "newPage": false,
                "searchKey": "gob.encFuzzDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encFuzzDec(rng *rand.Rand, in interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encFuzzDec(rng *rand.Rand, in interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestFuzz",
              "documentation": {
                "identifier": "TestFuzz",
                "newPage": false,
                "searchKey": "gob.TestFuzz",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuzz(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuzz(t *testing.T)\n```\n\nThis does some \"fuzz testing\" by attempting to decode a sequence of random bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestFuzzRegressions",
              "documentation": {
                "identifier": "TestFuzzRegressions",
                "newPage": false,
                "searchKey": "gob.TestFuzzRegressions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuzzRegressions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuzzRegressions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#testFuzz",
              "documentation": {
                "identifier": "testFuzz",
                "newPage": false,
                "searchKey": "gob.testFuzz",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testFuzz(t *testing.T, seed int64, n int, input ...interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testFuzz(t *testing.T, seed int64, n int, input ...interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestFuzzOneByte",
              "documentation": {
                "identifier": "TestFuzzOneByte",
                "newPage": false,
                "searchKey": "gob.TestFuzzOneByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuzzOneByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuzzOneByte(t *testing.T)\n```\n\nTestFuzzOneByte tries to decode corrupted input sequences and checks that no panic occurs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestErrorInvalidTypeId",
              "documentation": {
                "identifier": "TestErrorInvalidTypeId",
                "newPage": false,
                "searchKey": "gob.TestErrorInvalidTypeId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorInvalidTypeId(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorInvalidTypeId(t *testing.T)\n```\n\nDon't crash, just give error with invalid type id. Issue 9649. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestBasicEncoderDecoder",
              "documentation": {
                "identifier": "TestBasicEncoderDecoder",
                "newPage": false,
                "searchKey": "gob.TestBasicEncoderDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasicEncoderDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasicEncoderDecoder(t *testing.T)\n```\n\nTest basic operations in a safe manner. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestEncodeIntSlice",
              "documentation": {
                "identifier": "TestEncodeIntSlice",
                "newPage": false,
                "searchKey": "gob.TestEncodeIntSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodeIntSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodeIntSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestEncoderDecoder",
              "documentation": {
                "identifier": "TestEncoderDecoder",
                "newPage": false,
                "searchKey": "gob.TestEncoderDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncoderDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncoderDecoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#badTypeCheck",
              "documentation": {
                "identifier": "badTypeCheck",
                "newPage": false,
                "searchKey": "gob.badTypeCheck",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func badTypeCheck(e interface{}, shouldFail bool, msg string, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc badTypeCheck(e interface{}, shouldFail bool, msg string, t *testing.T)\n```\n\nRun one value through the encoder/decoder, but use the wrong type. Input is always an ET1; we compare it to whatever is under 'e'. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestWrongTypeDecoder",
              "documentation": {
                "identifier": "TestWrongTypeDecoder",
                "newPage": false,
                "searchKey": "gob.TestWrongTypeDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWrongTypeDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWrongTypeDecoder(t *testing.T)\n```\n\nTest that we recognize a bad type the first time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestUnsupported",
              "documentation": {
                "identifier": "TestUnsupported",
                "newPage": false,
                "searchKey": "gob.TestUnsupported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnsupported(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnsupported(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encAndDec",
              "documentation": {
                "identifier": "encAndDec",
                "newPage": false,
                "searchKey": "gob.encAndDec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encAndDec(in, out interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encAndDec(in, out interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestTypeToPtrType",
              "documentation": {
                "identifier": "TestTypeToPtrType",
                "newPage": false,
                "searchKey": "gob.TestTypeToPtrType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeToPtrType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeToPtrType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestPtrTypeToType",
              "documentation": {
                "identifier": "TestPtrTypeToType",
                "newPage": false,
                "searchKey": "gob.TestPtrTypeToType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrTypeToType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrTypeToType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestTypeToPtrPtrPtrPtrType",
              "documentation": {
                "identifier": "TestTypeToPtrPtrPtrPtrType",
                "newPage": false,
                "searchKey": "gob.TestTypeToPtrPtrPtrPtrType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeToPtrPtrPtrPtrType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeToPtrPtrPtrPtrType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestSlice",
              "documentation": {
                "identifier": "TestSlice",
                "newPage": false,
                "searchKey": "gob.TestSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestValueError",
              "documentation": {
                "identifier": "TestValueError",
                "newPage": false,
                "searchKey": "gob.TestValueError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestArray",
              "documentation": {
                "identifier": "TestArray",
                "newPage": false,
                "searchKey": "gob.TestArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArray(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArray(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestRecursiveMapType",
              "documentation": {
                "identifier": "TestRecursiveMapType",
                "newPage": false,
                "searchKey": "gob.TestRecursiveMapType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursiveMapType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursiveMapType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestRecursiveSliceType",
              "documentation": {
                "identifier": "TestRecursiveSliceType",
                "newPage": false,
                "searchKey": "gob.TestRecursiveSliceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursiveSliceType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursiveSliceType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestDefaultsInArray",
              "documentation": {
                "identifier": "TestDefaultsInArray",
                "newPage": false,
                "searchKey": "gob.TestDefaultsInArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDefaultsInArray(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDefaultsInArray(t *testing.T)\n```\n\nRegression test for bug: must send zero values inside arrays \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestSingletons",
              "documentation": {
                "identifier": "TestSingletons",
                "newPage": false,
                "searchKey": "gob.TestSingletons",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSingletons(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSingletons(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestStructNonStruct",
              "documentation": {
                "identifier": "TestStructNonStruct",
                "newPage": false,
                "searchKey": "gob.TestStructNonStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructNonStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructNonStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestInterfaceIndirect",
              "documentation": {
                "identifier": "TestInterfaceIndirect",
                "newPage": false,
                "searchKey": "gob.TestInterfaceIndirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceIndirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceIndirect(t *testing.T)\n```\n\nA version of a bug reported on golang-nuts. Also tests top-level slice of interfaces. The issue was registering *T caused T to be stored as the concrete type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestDecodeIntoNothing",
              "documentation": {
                "identifier": "TestDecodeIntoNothing",
                "newPage": false,
                "searchKey": "gob.TestDecodeIntoNothing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeIntoNothing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeIntoNothing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestIgnoreRecursiveType",
              "documentation": {
                "identifier": "TestIgnoreRecursiveType",
                "newPage": false,
                "searchKey": "gob.TestIgnoreRecursiveType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIgnoreRecursiveType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIgnoreRecursiveType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestNestedInterfaces",
              "documentation": {
                "identifier": "TestNestedInterfaces",
                "newPage": false,
                "searchKey": "gob.TestNestedInterfaces",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNestedInterfaces(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNestedInterfaces(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestMapBug1",
              "documentation": {
                "identifier": "TestMapBug1",
                "newPage": false,
                "searchKey": "gob.TestMapBug1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapBug1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapBug1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobMapInterfaceEncode",
              "documentation": {
                "identifier": "TestGobMapInterfaceEncode",
                "newPage": false,
                "searchKey": "gob.TestGobMapInterfaceEncode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobMapInterfaceEncode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobMapInterfaceEncode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestSliceReusesMemory",
              "documentation": {
                "identifier": "TestSliceReusesMemory",
                "newPage": false,
                "searchKey": "gob.TestSliceReusesMemory",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceReusesMemory(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceReusesMemory(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestBadCount",
              "documentation": {
                "identifier": "TestBadCount",
                "newPage": false,
                "searchKey": "gob.TestBadCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadCount(t *testing.T)\n```\n\nUsed to crash: negative count in recvMessage. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestSequentialDecoder",
              "documentation": {
                "identifier": "TestSequentialDecoder",
                "newPage": false,
                "searchKey": "gob.TestSequentialDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSequentialDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSequentialDecoder(t *testing.T)\n```\n\nVerify that sequential Decoders built on a single input will succeed if the input implements ReadByte and there is no type information in the stream. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestChanFuncIgnored",
              "documentation": {
                "identifier": "TestChanFuncIgnored",
                "newPage": false,
                "searchKey": "gob.TestChanFuncIgnored",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanFuncIgnored(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanFuncIgnored(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestSliceIncompatibility",
              "documentation": {
                "identifier": "TestSliceIncompatibility",
                "newPage": false,
                "searchKey": "gob.TestSliceIncompatibility",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceIncompatibility(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceIncompatibility(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobPtrSlices",
              "documentation": {
                "identifier": "TestGobPtrSlices",
                "newPage": false,
                "searchKey": "gob.TestGobPtrSlices",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobPtrSlices(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobPtrSlices(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestPtrToMapOfMap",
              "documentation": {
                "identifier": "TestPtrToMapOfMap",
                "newPage": false,
                "searchKey": "gob.TestPtrToMapOfMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrToMapOfMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrToMapOfMap(t *testing.T)\n```\n\ngetDecEnginePtr cached engine for ut.base instead of ut.user so we passed a *map and then tried to reuse its engine to decode the inner map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestCatchInvalidNilValue",
              "documentation": {
                "identifier": "TestCatchInvalidNilValue",
                "newPage": false,
                "searchKey": "gob.TestCatchInvalidNilValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCatchInvalidNilValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCatchInvalidNilValue(t *testing.T)\n```\n\nTest that untyped nils generate an error, not a panic. See Issue 16204. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestTopLevelNilPointer",
              "documentation": {
                "identifier": "TestTopLevelNilPointer",
                "newPage": false,
                "searchKey": "gob.TestTopLevelNilPointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTopLevelNilPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTopLevelNilPointer(t *testing.T)\n```\n\nA top-level nil pointer generates a panic with a helpful string-valued message. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#encodeAndRecover",
              "documentation": {
                "identifier": "encodeAndRecover",
                "newPage": false,
                "searchKey": "gob.encodeAndRecover",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeAndRecover(value interface{}) (encodeErr, panicErr error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeAndRecover(value interface{}) (encodeErr, panicErr error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestNilPointerPanics",
              "documentation": {
                "identifier": "TestNilPointerPanics",
                "newPage": false,
                "searchKey": "gob.TestNilPointerPanics",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilPointerPanics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilPointerPanics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestNilPointerInsideInterface",
              "documentation": {
                "identifier": "TestNilPointerInsideInterface",
                "newPage": false,
                "searchKey": "gob.TestNilPointerInsideInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilPointerInsideInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilPointerInsideInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestMutipleEncodingsOfBadType",
              "documentation": {
                "identifier": "TestMutipleEncodingsOfBadType",
                "newPage": false,
                "searchKey": "gob.TestMutipleEncodingsOfBadType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutipleEncodingsOfBadType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutipleEncodingsOfBadType(t *testing.T)\n```\n\nTest that a failed compilation doesn't leave around an executable encoder. Issue 3723. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#Test29ElementSlice",
              "documentation": {
                "identifier": "Test29ElementSlice",
                "newPage": false,
                "searchKey": "gob.Test29ElementSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test29ElementSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test29ElementSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestErrorForHugeSlice",
              "documentation": {
                "identifier": "TestErrorForHugeSlice",
                "newPage": false,
                "searchKey": "gob.TestErrorForHugeSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorForHugeSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorForHugeSlice(t *testing.T)\n```\n\nDon't crash, just give error when allocating a huge slice. Issue 8084. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestBadData",
              "documentation": {
                "identifier": "TestBadData",
                "newPage": false,
                "searchKey": "gob.TestBadData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadData(t *testing.T)\n```\n\nTestBadData tests that various problems caused by malformed input are caught as errors and do not cause panics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestDecodeErrorMultipleTypes",
              "documentation": {
                "identifier": "TestDecodeErrorMultipleTypes",
                "newPage": false,
                "searchKey": "gob.TestDecodeErrorMultipleTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeErrorMultipleTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeErrorMultipleTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderField",
              "documentation": {
                "identifier": "TestGobEncoderField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderField(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderValueField",
              "documentation": {
                "identifier": "TestGobEncoderValueField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderValueField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderValueField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderValueField(t *testing.T)\n```\n\nEven though the field is a value, we can still take its address and should be able to call the methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderIndirectField",
              "documentation": {
                "identifier": "TestGobEncoderIndirectField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderIndirectField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderIndirectField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderIndirectField(t *testing.T)\n```\n\nGobEncode/Decode should work even if the value is more indirect than the receiver. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderArrayField",
              "documentation": {
                "identifier": "TestGobEncoderArrayField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderArrayField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderArrayField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderArrayField(t *testing.T)\n```\n\nTest with a large field with methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderIndirectArrayField",
              "documentation": {
                "identifier": "TestGobEncoderIndirectArrayField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderIndirectArrayField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderIndirectArrayField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderIndirectArrayField(t *testing.T)\n```\n\nTest an indirection to a large field with methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderFieldsOfDifferentType",
              "documentation": {
                "identifier": "TestGobEncoderFieldsOfDifferentType",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderFieldsOfDifferentType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderFieldsOfDifferentType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderFieldsOfDifferentType(t *testing.T)\n```\n\nAs long as the fields have the same name and implement the interface, we can cross-connect them. Not sure it's useful and may even be bad but it works and it's hard to prevent without exposing the contents of the object, which would defeat the purpose. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderValueEncoder",
              "documentation": {
                "identifier": "TestGobEncoderValueEncoder",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderValueEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderValueEncoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderValueEncoder(t *testing.T)\n```\n\nTest that we can encode a value and decode into a pointer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderValueThenPointer",
              "documentation": {
                "identifier": "TestGobEncoderValueThenPointer",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderValueThenPointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderValueThenPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderValueThenPointer(t *testing.T)\n```\n\nTest that we can use a value then a pointer type of a GobEncoder in the same encoded value. Bug 4647. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderPointerThenValue",
              "documentation": {
                "identifier": "TestGobEncoderPointerThenValue",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderPointerThenValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderPointerThenValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderPointerThenValue(t *testing.T)\n```\n\nTest that we can use a pointer then a value type of a GobEncoder in the same encoded value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderFieldTypeError",
              "documentation": {
                "identifier": "TestGobEncoderFieldTypeError",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderFieldTypeError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderFieldTypeError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderFieldTypeError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderStructSingleton",
              "documentation": {
                "identifier": "TestGobEncoderStructSingleton",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderStructSingleton",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderStructSingleton(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderStructSingleton(t *testing.T)\n```\n\nEven though ByteStruct is a struct, it's treated as a singleton at the top level. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderNonStructSingleton",
              "documentation": {
                "identifier": "TestGobEncoderNonStructSingleton",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderNonStructSingleton",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderNonStructSingleton(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderNonStructSingleton(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderIgnoreStructField",
              "documentation": {
                "identifier": "TestGobEncoderIgnoreStructField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderIgnoreStructField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderIgnoreStructField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderIgnoreStructField(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderIgnoreNonStructField",
              "documentation": {
                "identifier": "TestGobEncoderIgnoreNonStructField",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderIgnoreNonStructField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderIgnoreNonStructField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderIgnoreNonStructField(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderIgnoreNilEncoder",
              "documentation": {
                "identifier": "TestGobEncoderIgnoreNilEncoder",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderIgnoreNilEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderIgnoreNilEncoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderIgnoreNilEncoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncoderExtraIndirect",
              "documentation": {
                "identifier": "TestGobEncoderExtraIndirect",
                "newPage": false,
                "searchKey": "gob.TestGobEncoderExtraIndirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncoderExtraIndirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncoderExtraIndirect(t *testing.T)\n```\n\nThis was a bug: the receiver has a different indirection level than the variable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncodeIsZero",
              "documentation": {
                "identifier": "TestGobEncodeIsZero",
                "newPage": false,
                "searchKey": "gob.TestGobEncodeIsZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncodeIsZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncodeIsZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestGobEncodePtrError",
              "documentation": {
                "identifier": "TestGobEncodePtrError",
                "newPage": false,
                "searchKey": "gob.TestGobEncodePtrError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGobEncodePtrError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGobEncodePtrError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestNetIP",
              "documentation": {
                "identifier": "TestNetIP",
                "newPage": false,
                "searchKey": "gob.TestNetIP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNetIP(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNetIP(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#benchmarkEndToEnd",
              "documentation": {
                "identifier": "benchmarkEndToEnd",
                "newPage": false,
                "searchKey": "gob.benchmarkEndToEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkEndToEnd(b *testing.B, ctor func() interface{}, pipe func() (r io.Reader, w io.Writer, err error))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkEndToEnd(b *testing.B, ctor func() interface{}, pipe func() (r io.Reader, w io.Writer, err error))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEndToEndPipe",
              "documentation": {
                "identifier": "BenchmarkEndToEndPipe",
                "newPage": false,
                "searchKey": "gob.BenchmarkEndToEndPipe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEndToEndPipe(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEndToEndPipe(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEndToEndByteBuffer",
              "documentation": {
                "identifier": "BenchmarkEndToEndByteBuffer",
                "newPage": false,
                "searchKey": "gob.BenchmarkEndToEndByteBuffer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEndToEndByteBuffer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEndToEndByteBuffer(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEndToEndSliceByteBuffer",
              "documentation": {
                "identifier": "BenchmarkEndToEndSliceByteBuffer",
                "newPage": false,
                "searchKey": "gob.BenchmarkEndToEndSliceByteBuffer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEndToEndSliceByteBuffer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEndToEndSliceByteBuffer(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestCountEncodeMallocs",
              "documentation": {
                "identifier": "TestCountEncodeMallocs",
                "newPage": false,
                "searchKey": "gob.TestCountEncodeMallocs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCountEncodeMallocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCountEncodeMallocs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestCountDecodeMallocs",
              "documentation": {
                "identifier": "TestCountDecodeMallocs",
                "newPage": false,
                "searchKey": "gob.TestCountDecodeMallocs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCountDecodeMallocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCountDecodeMallocs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#benchmarkEncodeSlice",
              "documentation": {
                "identifier": "benchmarkEncodeSlice",
                "newPage": false,
                "searchKey": "gob.benchmarkEncodeSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkEncodeSlice(b *testing.B, a interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkEncodeSlice(b *testing.B, a interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEncodeComplex128Slice",
              "documentation": {
                "identifier": "BenchmarkEncodeComplex128Slice",
                "newPage": false,
                "searchKey": "gob.BenchmarkEncodeComplex128Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeComplex128Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeComplex128Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEncodeFloat64Slice",
              "documentation": {
                "identifier": "BenchmarkEncodeFloat64Slice",
                "newPage": false,
                "searchKey": "gob.BenchmarkEncodeFloat64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeFloat64Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeFloat64Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEncodeInt32Slice",
              "documentation": {
                "identifier": "BenchmarkEncodeInt32Slice",
                "newPage": false,
                "searchKey": "gob.BenchmarkEncodeInt32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeInt32Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeInt32Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEncodeStringSlice",
              "documentation": {
                "identifier": "BenchmarkEncodeStringSlice",
                "newPage": false,
                "searchKey": "gob.BenchmarkEncodeStringSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeStringSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeStringSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkEncodeInterfaceSlice",
              "documentation": {
                "identifier": "BenchmarkEncodeInterfaceSlice",
                "newPage": false,
                "searchKey": "gob.BenchmarkEncodeInterfaceSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeInterfaceSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeInterfaceSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#benchmarkDecodeSlice",
              "documentation": {
                "identifier": "benchmarkDecodeSlice",
                "newPage": false,
                "searchKey": "gob.benchmarkDecodeSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkDecodeSlice(b *testing.B, a interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkDecodeSlice(b *testing.B, a interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkDecodeComplex128Slice",
              "documentation": {
                "identifier": "BenchmarkDecodeComplex128Slice",
                "newPage": false,
                "searchKey": "gob.BenchmarkDecodeComplex128Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeComplex128Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeComplex128Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkDecodeFloat64Slice",
              "documentation": {
                "identifier": "BenchmarkDecodeFloat64Slice",
                "newPage": false,
                "searchKey": "gob.BenchmarkDecodeFloat64Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeFloat64Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeFloat64Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkDecodeInt32Slice",
              "documentation": {
                "identifier": "BenchmarkDecodeInt32Slice",
                "newPage": false,
                "searchKey": "gob.BenchmarkDecodeInt32Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeInt32Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeInt32Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkDecodeStringSlice",
              "documentation": {
                "identifier": "BenchmarkDecodeStringSlice",
                "newPage": false,
                "searchKey": "gob.BenchmarkDecodeStringSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeStringSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeStringSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkDecodeInterfaceSlice",
              "documentation": {
                "identifier": "BenchmarkDecodeInterfaceSlice",
                "newPage": false,
                "searchKey": "gob.BenchmarkDecodeInterfaceSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeInterfaceSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeInterfaceSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#BenchmarkDecodeMap",
              "documentation": {
                "identifier": "BenchmarkDecodeMap",
                "newPage": false,
                "searchKey": "gob.BenchmarkDecodeMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestBasic",
              "documentation": {
                "identifier": "TestBasic",
                "newPage": false,
                "searchKey": "gob.TestBasic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasic(t *testing.T)\n```\n\nSanity checks \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestReregistration",
              "documentation": {
                "identifier": "TestReregistration",
                "newPage": false,
                "searchKey": "gob.TestReregistration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReregistration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReregistration(t *testing.T)\n```\n\nReregister some basic types to check registration is idempotent. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestArrayType",
              "documentation": {
                "identifier": "TestArrayType",
                "newPage": false,
                "searchKey": "gob.TestArrayType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestSliceType",
              "documentation": {
                "identifier": "TestSliceType",
                "newPage": false,
                "searchKey": "gob.TestSliceType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestMapType",
              "documentation": {
                "identifier": "TestMapType",
                "newPage": false,
                "searchKey": "gob.TestMapType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestStructType",
              "documentation": {
                "identifier": "TestStructType",
                "newPage": false,
                "searchKey": "gob.TestStructType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestRegistration",
              "documentation": {
                "identifier": "TestRegistration",
                "newPage": false,
                "searchKey": "gob.TestRegistration",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegistration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegistration(t *testing.T)\n```\n\nShould be OK to register the same type multiple times, as long as they're at the same level of indirection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestRegistrationNaming",
              "documentation": {
                "identifier": "TestRegistrationNaming",
                "newPage": false,
                "searchKey": "gob.TestRegistrationNaming",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRegistrationNaming(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRegistrationNaming(t *testing.T)\n```\n\nSee comment in type.go/Register. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestStressParallel",
              "documentation": {
                "identifier": "TestStressParallel",
                "newPage": false,
                "searchKey": "gob.TestStressParallel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStressParallel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStressParallel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/gob#TestTypeRace",
              "documentation": {
                "identifier": "TestTypeRace",
                "newPage": false,
                "searchKey": "gob.TestTypeRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeRace(t *testing.T)\n```\n\nIssue 23328. Note that this test name is known to cmd/dist/test.go. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
