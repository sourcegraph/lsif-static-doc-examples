{
  "pathID": "/std/encoding/base64",
  "documentation": {
    "identifier": "base64",
    "newPage": true,
    "searchKey": "std/encoding/base64",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package base64"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package base64 implements base64 encoding as specified by RFC 4648. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/encoding/base64#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/base64#StdPadding",
              "documentation": {
                "identifier": "StdPadding",
                "newPage": false,
                "searchKey": "base64.StdPadding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const StdPadding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst StdPadding rune = '=' // Standard padding character\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#NoPadding",
              "documentation": {
                "identifier": "NoPadding",
                "newPage": false,
                "searchKey": "base64.NoPadding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NoPadding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NoPadding rune = -1 // No padding\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#encodeStd",
              "documentation": {
                "identifier": "encodeStd",
                "newPage": false,
                "searchKey": "base64.encodeStd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeStd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeStd = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#encodeURL",
              "documentation": {
                "identifier": "encodeURL",
                "newPage": false,
                "searchKey": "base64.encodeURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeURL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeURL = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/encoding/base64#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/base64#StdEncoding",
              "documentation": {
                "identifier": "StdEncoding",
                "newPage": false,
                "searchKey": "base64.StdEncoding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var StdEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar StdEncoding = NewEncoding(encodeStd)\n```\n\nStdEncoding is the standard base64 encoding, as defined in RFC 4648. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#URLEncoding",
              "documentation": {
                "identifier": "URLEncoding",
                "newPage": false,
                "searchKey": "base64.URLEncoding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var URLEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar URLEncoding = NewEncoding(encodeURL)\n```\n\nURLEncoding is the alternate base64 encoding defined in RFC 4648. It is typically used in URLs and file names. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#RawStdEncoding",
              "documentation": {
                "identifier": "RawStdEncoding",
                "newPage": false,
                "searchKey": "base64.RawStdEncoding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var RawStdEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar RawStdEncoding = StdEncoding.WithPadding(NoPadding)\n```\n\nRawStdEncoding is the standard raw, unpadded base64 encoding, as defined in RFC 4648 section 3.2. This is the same as StdEncoding but omits padding characters. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#RawURLEncoding",
              "documentation": {
                "identifier": "RawURLEncoding",
                "newPage": false,
                "searchKey": "base64.RawURLEncoding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var RawURLEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar RawURLEncoding = URLEncoding.WithPadding(NoPadding)\n```\n\nRawURLEncoding is the unpadded alternate base64 encoding defined in RFC 4648. It is typically used in URLs and file names. This is the same as URLEncoding but omits padding characters. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#pairs",
              "documentation": {
                "identifier": "pairs",
                "newPage": false,
                "searchKey": "base64.pairs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pairs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pairs = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#funnyEncoding",
              "documentation": {
                "identifier": "funnyEncoding",
                "newPage": false,
                "searchKey": "base64.funnyEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var funnyEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar funnyEncoding = NewEncoding(encodeStd).WithPadding(rune('@'))\n```\n\nA nonstandard encoding with a funny padding character, for testing \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#encodingTests",
              "documentation": {
                "identifier": "encodingTests",
                "newPage": false,
                "searchKey": "base64.encodingTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encodingTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encodingTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#bigtest",
              "documentation": {
                "identifier": "bigtest",
                "newPage": false,
                "searchKey": "base64.bigtest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var bigtest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bigtest = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/encoding/base64#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/base64#Encoding",
              "documentation": {
                "identifier": "Encoding",
                "newPage": false,
                "searchKey": "base64.Encoding",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Encoding struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Encoding struct {\n\tencode    [64]byte\n\tdecodeMap [256]byte\n\tpadChar   rune\n\tstrict    bool\n}\n```\n\nAn Encoding is a radix 64 encoding/decoding scheme, defined by a 64-character alphabet. The most common encoding is the \"base64\" encoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM (RFC 1421).  RFC 4648 also defines an alternate encoding, which is the standard encoding with - and _ substituted for + and /. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/base64#NewEncoding",
                    "documentation": {
                      "identifier": "NewEncoding",
                      "newPage": false,
                      "searchKey": "base64.NewEncoding",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewEncoding(encoder string) *Encoding"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewEncoding(encoder string) *Encoding\n```\n\nNewEncoding returns a new padded Encoding defined by the given alphabet, which must be a 64-byte string that does not contain the padding character or CR / LF ('\\r', '\\n'). The resulting Encoding uses the default padding character ('='), which may be changed or disabled via WithPadding. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.WithPadding",
                    "documentation": {
                      "identifier": "Encoding.WithPadding",
                      "newPage": false,
                      "searchKey": "base64.Encoding.WithPadding",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc Encoding) WithPadding(padding rune) *Encoding"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc Encoding) WithPadding(padding rune) *Encoding\n```\n\nWithPadding creates a new encoding identical to enc except with a specified padding character, or NoPadding to disable padding. The padding character must not be '\\r' or '\\n', must not be contained in the encoding's alphabet and must be a rune equal or below '\\xff'. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.Strict",
                    "documentation": {
                      "identifier": "Encoding.Strict",
                      "newPage": false,
                      "searchKey": "base64.Encoding.Strict",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc Encoding) Strict() *Encoding"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc Encoding) Strict() *Encoding\n```\n\nStrict creates a new encoding identical to enc except with strict decoding enabled. In this mode, the decoder requires that trailing padding bits are zero, as described in RFC 4648 section 3.5. \n\nNote that the input is still malleable, as new line characters (CR and LF) are still ignored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.Encode",
                    "documentation": {
                      "identifier": "Encoding.Encode",
                      "newPage": false,
                      "searchKey": "base64.Encoding.Encode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) Encode(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) Encode(dst, src []byte)\n```\n\nEncode encodes src using the encoding enc, writing EncodedLen(len(src)) bytes to dst. \n\nThe encoding pads the output to a multiple of 4 bytes, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.EncodeToString",
                    "documentation": {
                      "identifier": "Encoding.EncodeToString",
                      "newPage": false,
                      "searchKey": "base64.Encoding.EncodeToString",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) EncodeToString(src []byte) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) EncodeToString(src []byte) string\n```\n\nEncodeToString returns the base64 encoding of src. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.EncodedLen",
                    "documentation": {
                      "identifier": "Encoding.EncodedLen",
                      "newPage": false,
                      "searchKey": "base64.Encoding.EncodedLen",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) EncodedLen(n int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) EncodedLen(n int) int\n```\n\nEncodedLen returns the length in bytes of the base64 encoding of an input buffer of length n. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.decodeQuantum",
                    "documentation": {
                      "identifier": "Encoding.decodeQuantum",
                      "newPage": false,
                      "searchKey": "base64.Encoding.decodeQuantum",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) decodeQuantum(dst, src []byte, si int) (nsi, n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) decodeQuantum(dst, src []byte, si int) (nsi, n int, err error)\n```\n\ndecodeQuantum decodes up to 4 base64 bytes. The received parameters are the destination buffer dst, the source buffer src and an index in the source buffer si. It returns the number of bytes read from src, the number of bytes written to dst, and an error, if any. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.DecodeString",
                    "documentation": {
                      "identifier": "Encoding.DecodeString",
                      "newPage": false,
                      "searchKey": "base64.Encoding.DecodeString",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) DecodeString(s string) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) DecodeString(s string) ([]byte, error)\n```\n\nDecodeString returns the bytes represented by the base64 string s. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.Decode",
                    "documentation": {
                      "identifier": "Encoding.Decode",
                      "newPage": false,
                      "searchKey": "base64.Encoding.Decode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) Decode(dst, src []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) Decode(dst, src []byte) (n int, err error)\n```\n\nDecode decodes src using the encoding enc. It writes at most DecodedLen(len(src)) bytes to dst and returns the number of bytes written. If src contains invalid base64 data, it will return the number of bytes successfully written and CorruptInputError. New line characters (\\r and \\n) are ignored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#Encoding.DecodedLen",
                    "documentation": {
                      "identifier": "Encoding.DecodedLen",
                      "newPage": false,
                      "searchKey": "base64.Encoding.DecodedLen",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoding) DecodedLen(n int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoding) DecodedLen(n int) int\n```\n\nDecodedLen returns the maximum length in bytes of the decoded data corresponding to n bytes of base64-encoded data. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#encoder",
              "documentation": {
                "identifier": "encoder",
                "newPage": false,
                "searchKey": "base64.encoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encoder struct {\n\terr  error\n\tenc  *Encoding\n\tw    io.Writer\n\tbuf  [3]byte    // buffered data waiting to be encoded\n\tnbuf int        // number of bytes in buf\n\tout  [1024]byte // output buffer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/base64#encoder.Write",
                    "documentation": {
                      "identifier": "encoder.Write",
                      "newPage": false,
                      "searchKey": "base64.encoder.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encoder) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encoder) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/encoding/base64#encoder.Close",
                    "documentation": {
                      "identifier": "encoder.Close",
                      "newPage": false,
                      "searchKey": "base64.encoder.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encoder) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encoder) Close() error\n```\n\nClose flushes any pending output from the encoder. It is an error to call Write after calling Close. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#CorruptInputError",
              "documentation": {
                "identifier": "CorruptInputError",
                "newPage": false,
                "searchKey": "base64.CorruptInputError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CorruptInputError int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CorruptInputError int64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/base64#CorruptInputError.Error",
                    "documentation": {
                      "identifier": "CorruptInputError.Error",
                      "newPage": false,
                      "searchKey": "base64.CorruptInputError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e CorruptInputError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e CorruptInputError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#decoder",
              "documentation": {
                "identifier": "decoder",
                "newPage": false,
                "searchKey": "base64.decoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decoder struct {\n\terr     error\n\treadErr error // error from r.Read\n\tenc     *Encoding\n\tr       io.Reader\n\tbuf     [1024]byte // leftover input\n\tnbuf    int\n\tout     []byte // leftover decoded output\n\toutbuf  [1024 / 4 * 3]byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/base64#decoder.Read",
                    "documentation": {
                      "identifier": "decoder.Read",
                      "newPage": false,
                      "searchKey": "base64.decoder.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decoder) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decoder) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#newlineFilteringReader",
              "documentation": {
                "identifier": "newlineFilteringReader",
                "newPage": false,
                "searchKey": "base64.newlineFilteringReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type newlineFilteringReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype newlineFilteringReader struct {\n\twrapped io.Reader\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/base64#newlineFilteringReader.Read",
                    "documentation": {
                      "identifier": "newlineFilteringReader.Read",
                      "newPage": false,
                      "searchKey": "base64.newlineFilteringReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *newlineFilteringReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *newlineFilteringReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#testpair",
              "documentation": {
                "identifier": "testpair",
                "newPage": false,
                "searchKey": "base64.testpair",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testpair struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testpair struct {\n\tdecoded, encoded string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#encodingTest",
              "documentation": {
                "identifier": "encodingTest",
                "newPage": false,
                "searchKey": "base64.encodingTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encodingTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encodingTest struct {\n\tenc  *Encoding           // Encoding to test\n\tconv func(string) string // Reference string converter\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#nextRead",
              "documentation": {
                "identifier": "nextRead",
                "newPage": false,
                "searchKey": "base64.nextRead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nextRead struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nextRead struct {\n\tn   int   // bytes to return\n\terr error // error to return\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#faultInjectReader",
              "documentation": {
                "identifier": "faultInjectReader",
                "newPage": false,
                "searchKey": "base64.faultInjectReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type faultInjectReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype faultInjectReader struct {\n\tsource string\n\tnextc  <-chan nextRead\n}\n```\n\nfaultInjectReader returns data from source, rate-limited and with the errors as written to nextc. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/encoding/base64#faultInjectReader.Read",
                    "documentation": {
                      "identifier": "faultInjectReader.Read",
                      "newPage": false,
                      "searchKey": "base64.faultInjectReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *faultInjectReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *faultInjectReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/encoding/base64#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding/base64#NewEncoder",
              "documentation": {
                "identifier": "NewEncoder",
                "newPage": false,
                "searchKey": "base64.NewEncoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewEncoder(enc *Encoding, w io.Writer) io.WriteCloser\n```\n\nNewEncoder returns a new base64 stream encoder. Data written to the returned writer will be encoded using enc and then written to w. Base64 encodings operate in 4-byte blocks; when finished writing, the caller must Close the returned encoder to flush any partially written blocks. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#assemble32",
              "documentation": {
                "identifier": "assemble32",
                "newPage": false,
                "searchKey": "base64.assemble32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func assemble32(n1, n2, n3, n4 byte) (dn uint32, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assemble32(n1, n2, n3, n4 byte) (dn uint32, ok bool)\n```\n\nassemble32 assembles 4 base64 digits into 3 bytes. Each digit comes from the decode map, and will be 0xff if it came from an invalid character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#assemble64",
              "documentation": {
                "identifier": "assemble64",
                "newPage": false,
                "searchKey": "base64.assemble64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func assemble64(n1, n2, n3, n4, n5, n6, n7, n8 byte) (dn uint64, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assemble64(n1, n2, n3, n4, n5, n6, n7, n8 byte) (dn uint64, ok bool)\n```\n\nassemble64 assembles 8 base64 digits into 6 bytes. Each digit comes from the decode map, and will be 0xff if it came from an invalid character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#NewDecoder",
              "documentation": {
                "identifier": "NewDecoder",
                "newPage": false,
                "searchKey": "base64.NewDecoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewDecoder(enc *Encoding, r io.Reader) io.Reader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewDecoder(enc *Encoding, r io.Reader) io.Reader\n```\n\nNewDecoder constructs a new base64 stream decoder. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#stdRef",
              "documentation": {
                "identifier": "stdRef",
                "newPage": false,
                "searchKey": "base64.stdRef",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stdRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stdRef(ref string) string\n```\n\nDo nothing to a reference base64 string (leave in standard format) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#urlRef",
              "documentation": {
                "identifier": "urlRef",
                "newPage": false,
                "searchKey": "base64.urlRef",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func urlRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc urlRef(ref string) string\n```\n\nConvert a reference string to URL-encoding \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#rawRef",
              "documentation": {
                "identifier": "rawRef",
                "newPage": false,
                "searchKey": "base64.rawRef",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func rawRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rawRef(ref string) string\n```\n\nConvert a reference string to raw, unpadded format \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#rawURLRef",
              "documentation": {
                "identifier": "rawURLRef",
                "newPage": false,
                "searchKey": "base64.rawURLRef",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func rawURLRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rawURLRef(ref string) string\n```\n\nBoth URL and unpadding conversions \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#funnyRef",
              "documentation": {
                "identifier": "funnyRef",
                "newPage": false,
                "searchKey": "base64.funnyRef",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func funnyRef(ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc funnyRef(ref string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#testEqual",
              "documentation": {
                "identifier": "testEqual",
                "newPage": false,
                "searchKey": "base64.testEqual",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testEqual(t *testing.T, msg string, args ...interface{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testEqual(t *testing.T, msg string, args ...interface{}) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestEncode",
              "documentation": {
                "identifier": "TestEncode",
                "newPage": false,
                "searchKey": "base64.TestEncode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestEncoder",
              "documentation": {
                "identifier": "TestEncoder",
                "newPage": false,
                "searchKey": "base64.TestEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestEncoderBuffering",
              "documentation": {
                "identifier": "TestEncoderBuffering",
                "newPage": false,
                "searchKey": "base64.TestEncoderBuffering",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncoderBuffering(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncoderBuffering(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecode",
              "documentation": {
                "identifier": "TestDecode",
                "newPage": false,
                "searchKey": "base64.TestDecode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoder",
              "documentation": {
                "identifier": "TestDecoder",
                "newPage": false,
                "searchKey": "base64.TestDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoderBuffering",
              "documentation": {
                "identifier": "TestDecoderBuffering",
                "newPage": false,
                "searchKey": "base64.TestDecoderBuffering",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderBuffering(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderBuffering(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecodeCorrupt",
              "documentation": {
                "identifier": "TestDecodeCorrupt",
                "newPage": false,
                "searchKey": "base64.TestDecodeCorrupt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeCorrupt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeCorrupt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecodeBounds",
              "documentation": {
                "identifier": "TestDecodeBounds",
                "newPage": false,
                "searchKey": "base64.TestDecodeBounds",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeBounds(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeBounds(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestEncodedLen",
              "documentation": {
                "identifier": "TestEncodedLen",
                "newPage": false,
                "searchKey": "base64.TestEncodedLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodedLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodedLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecodedLen",
              "documentation": {
                "identifier": "TestDecodedLen",
                "newPage": false,
                "searchKey": "base64.TestDecodedLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodedLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodedLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestBig",
              "documentation": {
                "identifier": "TestBig",
                "newPage": false,
                "searchKey": "base64.TestBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestNewLineCharacters",
              "documentation": {
                "identifier": "TestNewLineCharacters",
                "newPage": false,
                "searchKey": "base64.TestNewLineCharacters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewLineCharacters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewLineCharacters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoderIssue3577",
              "documentation": {
                "identifier": "TestDecoderIssue3577",
                "newPage": false,
                "searchKey": "base64.TestDecoderIssue3577",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderIssue3577(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderIssue3577(t *testing.T)\n```\n\ntests that we don't ignore errors from our underlying reader \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoderIssue4779",
              "documentation": {
                "identifier": "TestDecoderIssue4779",
                "newPage": false,
                "searchKey": "base64.TestDecoderIssue4779",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderIssue4779(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderIssue4779(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoderIssue7733",
              "documentation": {
                "identifier": "TestDecoderIssue7733",
                "newPage": false,
                "searchKey": "base64.TestDecoderIssue7733",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderIssue7733(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderIssue7733(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoderIssue15656",
              "documentation": {
                "identifier": "TestDecoderIssue15656",
                "newPage": false,
                "searchKey": "base64.TestDecoderIssue15656",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderIssue15656(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderIssue15656(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#BenchmarkEncodeToString",
              "documentation": {
                "identifier": "BenchmarkEncodeToString",
                "newPage": false,
                "searchKey": "base64.BenchmarkEncodeToString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeToString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeToString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#BenchmarkDecodeString",
              "documentation": {
                "identifier": "BenchmarkDecodeString",
                "newPage": false,
                "searchKey": "base64.BenchmarkDecodeString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecodeString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecodeString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding/base64#TestDecoderRaw",
              "documentation": {
                "identifier": "TestDecoderRaw",
                "newPage": false,
                "searchKey": "base64.TestDecoderRaw",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderRaw(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderRaw(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
