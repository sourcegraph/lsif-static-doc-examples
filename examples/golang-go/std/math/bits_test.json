{
  "pathID": "/std/math/bits_test",
  "documentation": {
    "identifier": "bits_test",
    "newPage": true,
    "searchKey": "std/math/bits_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package bits_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/std/math/bits_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math/bits_test#_M",
              "documentation": {
                "identifier": "_M",
                "newPage": false,
                "searchKey": "bits_test._M",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const _M"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _M = 1<<UintSize - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#_M32",
              "documentation": {
                "identifier": "_M32",
                "newPage": false,
                "searchKey": "bits_test._M32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const _M32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _M32 = 1<<32 - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#_M64",
              "documentation": {
                "identifier": "_M64",
                "newPage": false,
                "searchKey": "bits_test._M64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const _M64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _M64 = 1<<64 - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#divZeroError",
              "documentation": {
                "identifier": "divZeroError",
                "newPage": false,
                "searchKey": "bits_test.divZeroError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const divZeroError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst divZeroError = \"runtime error: integer divide by zero\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#overflowError",
              "documentation": {
                "identifier": "overflowError",
                "newPage": false,
                "searchKey": "bits_test.overflowError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const overflowError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst overflowError = \"runtime error: integer overflow\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/math/bits_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math/bits_test#Input",
              "documentation": {
                "identifier": "Input",
                "newPage": false,
                "searchKey": "bits_test.Input",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var Input"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Input uint64 = DeBruijn64\n```\n\nExported (global) variable serving as input for some of the benchmarks to ensure side-effect free calls are not optimized away. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#Output",
              "documentation": {
                "identifier": "Output",
                "newPage": false,
                "searchKey": "bits_test.Output",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var Output"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Output int\n```\n\nExported (global) variable to store function results during benchmarking to ensure side-effect free calls are not optimized away. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#tab",
              "documentation": {
                "identifier": "tab",
                "newPage": false,
                "searchKey": "bits_test.tab",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tab [256]entry\n```\n\ntab contains results for all uint8 values \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/math/bits_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math/bits_test#entry",
              "documentation": {
                "identifier": "entry",
                "newPage": false,
                "searchKey": "bits_test.entry",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type entry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype entry = struct {\n\tnlz, ntz, pop int\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/math/bits_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math/bits_test#TestUintSize",
              "documentation": {
                "identifier": "TestUintSize",
                "newPage": false,
                "searchKey": "bits_test.TestUintSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUintSize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUintSize(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestLeadingZeros",
              "documentation": {
                "identifier": "TestLeadingZeros",
                "newPage": false,
                "searchKey": "bits_test.TestLeadingZeros",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLeadingZeros(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLeadingZeros(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkLeadingZeros",
              "documentation": {
                "identifier": "BenchmarkLeadingZeros",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkLeadingZeros",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLeadingZeros(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLeadingZeros(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkLeadingZeros8",
              "documentation": {
                "identifier": "BenchmarkLeadingZeros8",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkLeadingZeros8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLeadingZeros8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLeadingZeros8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkLeadingZeros16",
              "documentation": {
                "identifier": "BenchmarkLeadingZeros16",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkLeadingZeros16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLeadingZeros16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLeadingZeros16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkLeadingZeros32",
              "documentation": {
                "identifier": "BenchmarkLeadingZeros32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkLeadingZeros32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLeadingZeros32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLeadingZeros32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkLeadingZeros64",
              "documentation": {
                "identifier": "BenchmarkLeadingZeros64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkLeadingZeros64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLeadingZeros64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLeadingZeros64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestTrailingZeros",
              "documentation": {
                "identifier": "TestTrailingZeros",
                "newPage": false,
                "searchKey": "bits_test.TestTrailingZeros",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailingZeros(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailingZeros(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkTrailingZeros",
              "documentation": {
                "identifier": "BenchmarkTrailingZeros",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkTrailingZeros",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrailingZeros(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrailingZeros(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkTrailingZeros8",
              "documentation": {
                "identifier": "BenchmarkTrailingZeros8",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkTrailingZeros8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrailingZeros8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrailingZeros8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkTrailingZeros16",
              "documentation": {
                "identifier": "BenchmarkTrailingZeros16",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkTrailingZeros16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrailingZeros16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrailingZeros16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkTrailingZeros32",
              "documentation": {
                "identifier": "BenchmarkTrailingZeros32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkTrailingZeros32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrailingZeros32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrailingZeros32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkTrailingZeros64",
              "documentation": {
                "identifier": "BenchmarkTrailingZeros64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkTrailingZeros64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrailingZeros64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrailingZeros64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestOnesCount",
              "documentation": {
                "identifier": "TestOnesCount",
                "newPage": false,
                "searchKey": "bits_test.TestOnesCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOnesCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOnesCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#testOnesCount",
              "documentation": {
                "identifier": "testOnesCount",
                "newPage": false,
                "searchKey": "bits_test.testOnesCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testOnesCount(t *testing.T, x uint64, want int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testOnesCount(t *testing.T, x uint64, want int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkOnesCount",
              "documentation": {
                "identifier": "BenchmarkOnesCount",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkOnesCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkOnesCount(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkOnesCount(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkOnesCount8",
              "documentation": {
                "identifier": "BenchmarkOnesCount8",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkOnesCount8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkOnesCount8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkOnesCount8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkOnesCount16",
              "documentation": {
                "identifier": "BenchmarkOnesCount16",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkOnesCount16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkOnesCount16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkOnesCount16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkOnesCount32",
              "documentation": {
                "identifier": "BenchmarkOnesCount32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkOnesCount32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkOnesCount32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkOnesCount32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkOnesCount64",
              "documentation": {
                "identifier": "BenchmarkOnesCount64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkOnesCount64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkOnesCount64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkOnesCount64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestRotateLeft",
              "documentation": {
                "identifier": "TestRotateLeft",
                "newPage": false,
                "searchKey": "bits_test.TestRotateLeft",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRotateLeft(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRotateLeft(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkRotateLeft",
              "documentation": {
                "identifier": "BenchmarkRotateLeft",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkRotateLeft",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRotateLeft(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRotateLeft(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkRotateLeft8",
              "documentation": {
                "identifier": "BenchmarkRotateLeft8",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkRotateLeft8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRotateLeft8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRotateLeft8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkRotateLeft16",
              "documentation": {
                "identifier": "BenchmarkRotateLeft16",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkRotateLeft16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRotateLeft16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRotateLeft16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkRotateLeft32",
              "documentation": {
                "identifier": "BenchmarkRotateLeft32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkRotateLeft32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRotateLeft32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRotateLeft32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkRotateLeft64",
              "documentation": {
                "identifier": "BenchmarkRotateLeft64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkRotateLeft64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRotateLeft64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRotateLeft64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestReverse",
              "documentation": {
                "identifier": "TestReverse",
                "newPage": false,
                "searchKey": "bits_test.TestReverse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#testReverse",
              "documentation": {
                "identifier": "testReverse",
                "newPage": false,
                "searchKey": "bits_test.testReverse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testReverse(t *testing.T, x64, want64 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testReverse(t *testing.T, x64, want64 uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverse",
              "documentation": {
                "identifier": "BenchmarkReverse",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverse(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverse(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverse8",
              "documentation": {
                "identifier": "BenchmarkReverse8",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverse8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverse8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverse8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverse16",
              "documentation": {
                "identifier": "BenchmarkReverse16",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverse16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverse16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverse16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverse32",
              "documentation": {
                "identifier": "BenchmarkReverse32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverse32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverse32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverse32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverse64",
              "documentation": {
                "identifier": "BenchmarkReverse64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverse64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverse64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverse64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestReverseBytes",
              "documentation": {
                "identifier": "TestReverseBytes",
                "newPage": false,
                "searchKey": "bits_test.TestReverseBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#testReverseBytes",
              "documentation": {
                "identifier": "testReverseBytes",
                "newPage": false,
                "searchKey": "bits_test.testReverseBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testReverseBytes(t *testing.T, x64, want64 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testReverseBytes(t *testing.T, x64, want64 uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverseBytes",
              "documentation": {
                "identifier": "BenchmarkReverseBytes",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverseBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverseBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverseBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverseBytes16",
              "documentation": {
                "identifier": "BenchmarkReverseBytes16",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverseBytes16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverseBytes16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverseBytes16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverseBytes32",
              "documentation": {
                "identifier": "BenchmarkReverseBytes32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverseBytes32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverseBytes32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverseBytes32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkReverseBytes64",
              "documentation": {
                "identifier": "BenchmarkReverseBytes64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkReverseBytes64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReverseBytes64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReverseBytes64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestLen",
              "documentation": {
                "identifier": "TestLen",
                "newPage": false,
                "searchKey": "bits_test.TestLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestAddSubUint",
              "documentation": {
                "identifier": "TestAddSubUint",
                "newPage": false,
                "searchKey": "bits_test.TestAddSubUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddSubUint(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddSubUint(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestAddSubUint32",
              "documentation": {
                "identifier": "TestAddSubUint32",
                "newPage": false,
                "searchKey": "bits_test.TestAddSubUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddSubUint32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddSubUint32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestAddSubUint64",
              "documentation": {
                "identifier": "TestAddSubUint64",
                "newPage": false,
                "searchKey": "bits_test.TestAddSubUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddSubUint64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddSubUint64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestAdd64OverflowPanic",
              "documentation": {
                "identifier": "TestAdd64OverflowPanic",
                "newPage": false,
                "searchKey": "bits_test.TestAdd64OverflowPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdd64OverflowPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdd64OverflowPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestSub64OverflowPanic",
              "documentation": {
                "identifier": "TestSub64OverflowPanic",
                "newPage": false,
                "searchKey": "bits_test.TestSub64OverflowPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSub64OverflowPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSub64OverflowPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestMulDiv",
              "documentation": {
                "identifier": "TestMulDiv",
                "newPage": false,
                "searchKey": "bits_test.TestMulDiv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMulDiv(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMulDiv(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestMulDiv32",
              "documentation": {
                "identifier": "TestMulDiv32",
                "newPage": false,
                "searchKey": "bits_test.TestMulDiv32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMulDiv32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMulDiv32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestMulDiv64",
              "documentation": {
                "identifier": "TestMulDiv64",
                "newPage": false,
                "searchKey": "bits_test.TestMulDiv64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMulDiv64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMulDiv64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestDivPanicOverflow",
              "documentation": {
                "identifier": "TestDivPanicOverflow",
                "newPage": false,
                "searchKey": "bits_test.TestDivPanicOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDivPanicOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDivPanicOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestDiv32PanicOverflow",
              "documentation": {
                "identifier": "TestDiv32PanicOverflow",
                "newPage": false,
                "searchKey": "bits_test.TestDiv32PanicOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiv32PanicOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiv32PanicOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestDiv64PanicOverflow",
              "documentation": {
                "identifier": "TestDiv64PanicOverflow",
                "newPage": false,
                "searchKey": "bits_test.TestDiv64PanicOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiv64PanicOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiv64PanicOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestDivPanicZero",
              "documentation": {
                "identifier": "TestDivPanicZero",
                "newPage": false,
                "searchKey": "bits_test.TestDivPanicZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDivPanicZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDivPanicZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestDiv32PanicZero",
              "documentation": {
                "identifier": "TestDiv32PanicZero",
                "newPage": false,
                "searchKey": "bits_test.TestDiv32PanicZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiv32PanicZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiv32PanicZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestDiv64PanicZero",
              "documentation": {
                "identifier": "TestDiv64PanicZero",
                "newPage": false,
                "searchKey": "bits_test.TestDiv64PanicZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDiv64PanicZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDiv64PanicZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestRem32",
              "documentation": {
                "identifier": "TestRem32",
                "newPage": false,
                "searchKey": "bits_test.TestRem32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRem32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRem32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestRem32Overflow",
              "documentation": {
                "identifier": "TestRem32Overflow",
                "newPage": false,
                "searchKey": "bits_test.TestRem32Overflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRem32Overflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRem32Overflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestRem64",
              "documentation": {
                "identifier": "TestRem64",
                "newPage": false,
                "searchKey": "bits_test.TestRem64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRem64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRem64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#TestRem64Overflow",
              "documentation": {
                "identifier": "TestRem64Overflow",
                "newPage": false,
                "searchKey": "bits_test.TestRem64Overflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRem64Overflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRem64Overflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkAdd",
              "documentation": {
                "identifier": "BenchmarkAdd",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkAdd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdd(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdd(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkAdd32",
              "documentation": {
                "identifier": "BenchmarkAdd32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkAdd32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdd32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdd32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkAdd64",
              "documentation": {
                "identifier": "BenchmarkAdd64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkAdd64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdd64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdd64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkAdd64multiple",
              "documentation": {
                "identifier": "BenchmarkAdd64multiple",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkAdd64multiple",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdd64multiple(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdd64multiple(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkSub",
              "documentation": {
                "identifier": "BenchmarkSub",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkSub",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSub(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSub(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkSub32",
              "documentation": {
                "identifier": "BenchmarkSub32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkSub32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSub32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSub32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkSub64",
              "documentation": {
                "identifier": "BenchmarkSub64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkSub64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSub64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSub64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkSub64multiple",
              "documentation": {
                "identifier": "BenchmarkSub64multiple",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkSub64multiple",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSub64multiple(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSub64multiple(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkMul",
              "documentation": {
                "identifier": "BenchmarkMul",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkMul",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMul(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMul(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkMul32",
              "documentation": {
                "identifier": "BenchmarkMul32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkMul32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMul32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMul32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkMul64",
              "documentation": {
                "identifier": "BenchmarkMul64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkMul64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMul64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMul64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkDiv",
              "documentation": {
                "identifier": "BenchmarkDiv",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkDiv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDiv(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDiv(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkDiv32",
              "documentation": {
                "identifier": "BenchmarkDiv32",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkDiv32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDiv32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDiv32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#BenchmarkDiv64",
              "documentation": {
                "identifier": "BenchmarkDiv64",
                "newPage": false,
                "searchKey": "bits_test.BenchmarkDiv64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDiv64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDiv64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "bits_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLeadingZeros8",
              "documentation": {
                "identifier": "ExampleLeadingZeros8",
                "newPage": false,
                "searchKey": "bits_test.ExampleLeadingZeros8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLeadingZeros8()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLeadingZeros8()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLeadingZeros16",
              "documentation": {
                "identifier": "ExampleLeadingZeros16",
                "newPage": false,
                "searchKey": "bits_test.ExampleLeadingZeros16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLeadingZeros16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLeadingZeros16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLeadingZeros32",
              "documentation": {
                "identifier": "ExampleLeadingZeros32",
                "newPage": false,
                "searchKey": "bits_test.ExampleLeadingZeros32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLeadingZeros32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLeadingZeros32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLeadingZeros64",
              "documentation": {
                "identifier": "ExampleLeadingZeros64",
                "newPage": false,
                "searchKey": "bits_test.ExampleLeadingZeros64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLeadingZeros64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLeadingZeros64()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleTrailingZeros8",
              "documentation": {
                "identifier": "ExampleTrailingZeros8",
                "newPage": false,
                "searchKey": "bits_test.ExampleTrailingZeros8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrailingZeros8()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrailingZeros8()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleTrailingZeros16",
              "documentation": {
                "identifier": "ExampleTrailingZeros16",
                "newPage": false,
                "searchKey": "bits_test.ExampleTrailingZeros16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrailingZeros16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrailingZeros16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleTrailingZeros32",
              "documentation": {
                "identifier": "ExampleTrailingZeros32",
                "newPage": false,
                "searchKey": "bits_test.ExampleTrailingZeros32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrailingZeros32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrailingZeros32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleTrailingZeros64",
              "documentation": {
                "identifier": "ExampleTrailingZeros64",
                "newPage": false,
                "searchKey": "bits_test.ExampleTrailingZeros64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrailingZeros64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrailingZeros64()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleOnesCount",
              "documentation": {
                "identifier": "ExampleOnesCount",
                "newPage": false,
                "searchKey": "bits_test.ExampleOnesCount",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleOnesCount()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleOnesCount()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleOnesCount8",
              "documentation": {
                "identifier": "ExampleOnesCount8",
                "newPage": false,
                "searchKey": "bits_test.ExampleOnesCount8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleOnesCount8()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleOnesCount8()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleOnesCount16",
              "documentation": {
                "identifier": "ExampleOnesCount16",
                "newPage": false,
                "searchKey": "bits_test.ExampleOnesCount16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleOnesCount16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleOnesCount16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleOnesCount32",
              "documentation": {
                "identifier": "ExampleOnesCount32",
                "newPage": false,
                "searchKey": "bits_test.ExampleOnesCount32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleOnesCount32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleOnesCount32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleOnesCount64",
              "documentation": {
                "identifier": "ExampleOnesCount64",
                "newPage": false,
                "searchKey": "bits_test.ExampleOnesCount64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleOnesCount64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleOnesCount64()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleRotateLeft8",
              "documentation": {
                "identifier": "ExampleRotateLeft8",
                "newPage": false,
                "searchKey": "bits_test.ExampleRotateLeft8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRotateLeft8()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRotateLeft8()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleRotateLeft16",
              "documentation": {
                "identifier": "ExampleRotateLeft16",
                "newPage": false,
                "searchKey": "bits_test.ExampleRotateLeft16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRotateLeft16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRotateLeft16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleRotateLeft32",
              "documentation": {
                "identifier": "ExampleRotateLeft32",
                "newPage": false,
                "searchKey": "bits_test.ExampleRotateLeft32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRotateLeft32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRotateLeft32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleRotateLeft64",
              "documentation": {
                "identifier": "ExampleRotateLeft64",
                "newPage": false,
                "searchKey": "bits_test.ExampleRotateLeft64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRotateLeft64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRotateLeft64()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverse8",
              "documentation": {
                "identifier": "ExampleReverse8",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverse8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverse8()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverse8()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverse16",
              "documentation": {
                "identifier": "ExampleReverse16",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverse16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverse16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverse16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverse32",
              "documentation": {
                "identifier": "ExampleReverse32",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverse32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverse32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverse32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverse64",
              "documentation": {
                "identifier": "ExampleReverse64",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverse64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverse64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverse64()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverseBytes16",
              "documentation": {
                "identifier": "ExampleReverseBytes16",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverseBytes16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverseBytes16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverseBytes16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverseBytes32",
              "documentation": {
                "identifier": "ExampleReverseBytes32",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverseBytes32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverseBytes32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverseBytes32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleReverseBytes64",
              "documentation": {
                "identifier": "ExampleReverseBytes64",
                "newPage": false,
                "searchKey": "bits_test.ExampleReverseBytes64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReverseBytes64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReverseBytes64()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLen8",
              "documentation": {
                "identifier": "ExampleLen8",
                "newPage": false,
                "searchKey": "bits_test.ExampleLen8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLen8()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLen8()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLen16",
              "documentation": {
                "identifier": "ExampleLen16",
                "newPage": false,
                "searchKey": "bits_test.ExampleLen16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLen16()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLen16()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLen32",
              "documentation": {
                "identifier": "ExampleLen32",
                "newPage": false,
                "searchKey": "bits_test.ExampleLen32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLen32()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLen32()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math/bits_test#ExampleLen64",
              "documentation": {
                "identifier": "ExampleLen64",
                "newPage": false,
                "searchKey": "bits_test.ExampleLen64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLen64()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLen64()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
