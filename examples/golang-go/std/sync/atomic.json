{
  "pathID": "/std/sync/atomic",
  "documentation": {
    "identifier": "atomic",
    "newPage": true,
    "searchKey": "std/sync/atomic",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package atomic"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package atomic provides low-level atomic memory primitives useful for implementing synchronization algorithms. \n\nThese functions require great care to be used correctly. Except for special, low-level applications, synchronization is better done with channels or the facilities of the sync package. Share memory by communicating; don't communicate by sharing memory. \n\nThe swap operation, implemented by the SwapT functions, is the atomic equivalent of: \n\n```\nold = *addr\n*addr = new\nreturn old\n\n```\nThe compare-and-swap operation, implemented by the CompareAndSwapT functions, is the atomic equivalent of: \n\n```\nif *addr == old {\n\t*addr = new\n\treturn true\n}\nreturn false\n\n```\nThe add operation, implemented by the AddT functions, is the atomic equivalent of: \n\n```\n*addr += delta\nreturn *addr\n\n```\nThe load and store operations, implemented by the LoadT and StoreT functions, are the atomic equivalents of \"return *addr\" and \"*addr = val\". \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/sync/atomic#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync/atomic#Value",
              "documentation": {
                "identifier": "Value",
                "newPage": false,
                "searchKey": "atomic.Value",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Value struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Value struct {\n\tv interface{}\n}\n```\n\nA Value provides an atomic load and store of a consistently typed value. The zero value for a Value returns nil from Load. Once Store has been called, a Value must not be copied. \n\nA Value must not be copied after first use. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/sync/atomic#Value.Load",
                    "documentation": {
                      "identifier": "Value.Load",
                      "newPage": false,
                      "searchKey": "atomic.Value.Load",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *Value) Load() (val interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *Value) Load() (val interface{})\n```\n\nLoad returns the value set by the most recent Store. It returns nil if there has been no call to Store for this Value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync/atomic#Value.Store",
                    "documentation": {
                      "identifier": "Value.Store",
                      "newPage": false,
                      "searchKey": "atomic.Value.Store",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *Value) Store(val interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *Value) Store(val interface{})\n```\n\nStore sets the value of the Value to x. All calls to Store for a given Value must use values of the same concrete type. Store of an inconsistent type panics, as does Store(nil). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync/atomic#Value.Swap",
                    "documentation": {
                      "identifier": "Value.Swap",
                      "newPage": false,
                      "searchKey": "atomic.Value.Swap",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *Value) Swap(new interface{}) (old interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *Value) Swap(new interface{}) (old interface{})\n```\n\nSwap stores new into Value and returns the previous value. It returns nil if the Value is empty. \n\nAll calls to Swap for a given Value must use values of the same concrete type. Swap of an inconsistent type panics, as does Swap(nil). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync/atomic#Value.CompareAndSwap",
                    "documentation": {
                      "identifier": "Value.CompareAndSwap",
                      "newPage": false,
                      "searchKey": "atomic.Value.CompareAndSwap",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *Value) CompareAndSwap(old, new interface{}) (swapped bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *Value) CompareAndSwap(old, new interface{}) (swapped bool)\n```\n\nCompareAndSwapPointer executes the compare-and-swap operation for the Value. \n\nAll calls to CompareAndSwap for a given Value must use values of the same concrete type. CompareAndSwap of an inconsistent type panics, as does CompareAndSwap(old, nil). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#ifaceWords",
              "documentation": {
                "identifier": "ifaceWords",
                "newPage": false,
                "searchKey": "atomic.ifaceWords",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ifaceWords struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ifaceWords struct {\n\ttyp  unsafe.Pointer\n\tdata unsafe.Pointer\n}\n```\n\nifaceWords is interface{} internal representation. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/sync/atomic#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync/atomic#SwapInt32",
              "documentation": {
                "identifier": "SwapInt32",
                "newPage": false,
                "searchKey": "atomic.SwapInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SwapInt32(addr *int32, new int32) (old int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SwapInt32(addr *int32, new int32) (old int32)\n```\n\nSwapInt32 atomically stores new into *addr and returns the previous *addr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#SwapInt64",
              "documentation": {
                "identifier": "SwapInt64",
                "newPage": false,
                "searchKey": "atomic.SwapInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SwapInt64(addr *int64, new int64) (old int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SwapInt64(addr *int64, new int64) (old int64)\n```\n\nSwapInt64 atomically stores new into *addr and returns the previous *addr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#SwapUint32",
              "documentation": {
                "identifier": "SwapUint32",
                "newPage": false,
                "searchKey": "atomic.SwapUint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SwapUint32(addr *uint32, new uint32) (old uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SwapUint32(addr *uint32, new uint32) (old uint32)\n```\n\nSwapUint32 atomically stores new into *addr and returns the previous *addr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#SwapUint64",
              "documentation": {
                "identifier": "SwapUint64",
                "newPage": false,
                "searchKey": "atomic.SwapUint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SwapUint64(addr *uint64, new uint64) (old uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SwapUint64(addr *uint64, new uint64) (old uint64)\n```\n\nSwapUint64 atomically stores new into *addr and returns the previous *addr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#SwapUintptr",
              "documentation": {
                "identifier": "SwapUintptr",
                "newPage": false,
                "searchKey": "atomic.SwapUintptr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SwapUintptr(addr *uintptr, new uintptr) (old uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SwapUintptr(addr *uintptr, new uintptr) (old uintptr)\n```\n\nSwapUintptr atomically stores new into *addr and returns the previous *addr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#SwapPointer",
              "documentation": {
                "identifier": "SwapPointer",
                "newPage": false,
                "searchKey": "atomic.SwapPointer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SwapPointer(addr *unsafe.Pointer, new unsafe.Pointer) (old unsafe.Pointer)\n```\n\nSwapPointer atomically stores new into *addr and returns the previous *addr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#CompareAndSwapInt32",
              "documentation": {
                "identifier": "CompareAndSwapInt32",
                "newPage": false,
                "searchKey": "atomic.CompareAndSwapInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompareAndSwapInt32(addr *int32, old, new int32) (swapped bool)\n```\n\nCompareAndSwapInt32 executes the compare-and-swap operation for an int32 value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#CompareAndSwapInt64",
              "documentation": {
                "identifier": "CompareAndSwapInt64",
                "newPage": false,
                "searchKey": "atomic.CompareAndSwapInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompareAndSwapInt64(addr *int64, old, new int64) (swapped bool)\n```\n\nCompareAndSwapInt64 executes the compare-and-swap operation for an int64 value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#CompareAndSwapUint32",
              "documentation": {
                "identifier": "CompareAndSwapUint32",
                "newPage": false,
                "searchKey": "atomic.CompareAndSwapUint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompareAndSwapUint32(addr *uint32, old, new uint32) (swapped bool)\n```\n\nCompareAndSwapUint32 executes the compare-and-swap operation for a uint32 value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#CompareAndSwapUint64",
              "documentation": {
                "identifier": "CompareAndSwapUint64",
                "newPage": false,
                "searchKey": "atomic.CompareAndSwapUint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompareAndSwapUint64(addr *uint64, old, new uint64) (swapped bool)\n```\n\nCompareAndSwapUint64 executes the compare-and-swap operation for a uint64 value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#CompareAndSwapUintptr",
              "documentation": {
                "identifier": "CompareAndSwapUintptr",
                "newPage": false,
                "searchKey": "atomic.CompareAndSwapUintptr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompareAndSwapUintptr(addr *uintptr, old, new uintptr) (swapped bool)\n```\n\nCompareAndSwapUintptr executes the compare-and-swap operation for a uintptr value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#CompareAndSwapPointer",
              "documentation": {
                "identifier": "CompareAndSwapPointer",
                "newPage": false,
                "searchKey": "atomic.CompareAndSwapPointer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CompareAndSwapPointer(addr *unsafe.Pointer, old, new unsafe.Pointer) (swapped bool)\n```\n\nCompareAndSwapPointer executes the compare-and-swap operation for a unsafe.Pointer value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#AddInt32",
              "documentation": {
                "identifier": "AddInt32",
                "newPage": false,
                "searchKey": "atomic.AddInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AddInt32(addr *int32, delta int32) (new int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AddInt32(addr *int32, delta int32) (new int32)\n```\n\nAddInt32 atomically adds delta to *addr and returns the new value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#AddUint32",
              "documentation": {
                "identifier": "AddUint32",
                "newPage": false,
                "searchKey": "atomic.AddUint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AddUint32(addr *uint32, delta uint32) (new uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AddUint32(addr *uint32, delta uint32) (new uint32)\n```\n\nAddUint32 atomically adds delta to *addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint32(&x, ^uint32(c-1)). In particular, to decrement x, do AddUint32(&x, ^uint32(0)). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#AddInt64",
              "documentation": {
                "identifier": "AddInt64",
                "newPage": false,
                "searchKey": "atomic.AddInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AddInt64(addr *int64, delta int64) (new int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AddInt64(addr *int64, delta int64) (new int64)\n```\n\nAddInt64 atomically adds delta to *addr and returns the new value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#AddUint64",
              "documentation": {
                "identifier": "AddUint64",
                "newPage": false,
                "searchKey": "atomic.AddUint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AddUint64(addr *uint64, delta uint64) (new uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AddUint64(addr *uint64, delta uint64) (new uint64)\n```\n\nAddUint64 atomically adds delta to *addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint64(&x, ^uint64(c-1)). In particular, to decrement x, do AddUint64(&x, ^uint64(0)). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#AddUintptr",
              "documentation": {
                "identifier": "AddUintptr",
                "newPage": false,
                "searchKey": "atomic.AddUintptr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func AddUintptr(addr *uintptr, delta uintptr) (new uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc AddUintptr(addr *uintptr, delta uintptr) (new uintptr)\n```\n\nAddUintptr atomically adds delta to *addr and returns the new value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#LoadInt32",
              "documentation": {
                "identifier": "LoadInt32",
                "newPage": false,
                "searchKey": "atomic.LoadInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LoadInt32(addr *int32) (val int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LoadInt32(addr *int32) (val int32)\n```\n\nLoadInt32 atomically loads *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#LoadInt64",
              "documentation": {
                "identifier": "LoadInt64",
                "newPage": false,
                "searchKey": "atomic.LoadInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LoadInt64(addr *int64) (val int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LoadInt64(addr *int64) (val int64)\n```\n\nLoadInt64 atomically loads *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#LoadUint32",
              "documentation": {
                "identifier": "LoadUint32",
                "newPage": false,
                "searchKey": "atomic.LoadUint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LoadUint32(addr *uint32) (val uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LoadUint32(addr *uint32) (val uint32)\n```\n\nLoadUint32 atomically loads *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#LoadUint64",
              "documentation": {
                "identifier": "LoadUint64",
                "newPage": false,
                "searchKey": "atomic.LoadUint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LoadUint64(addr *uint64) (val uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LoadUint64(addr *uint64) (val uint64)\n```\n\nLoadUint64 atomically loads *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#LoadUintptr",
              "documentation": {
                "identifier": "LoadUintptr",
                "newPage": false,
                "searchKey": "atomic.LoadUintptr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LoadUintptr(addr *uintptr) (val uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LoadUintptr(addr *uintptr) (val uintptr)\n```\n\nLoadUintptr atomically loads *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#LoadPointer",
              "documentation": {
                "identifier": "LoadPointer",
                "newPage": false,
                "searchKey": "atomic.LoadPointer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LoadPointer(addr *unsafe.Pointer) (val unsafe.Pointer)\n```\n\nLoadPointer atomically loads *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#StoreInt32",
              "documentation": {
                "identifier": "StoreInt32",
                "newPage": false,
                "searchKey": "atomic.StoreInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StoreInt32(addr *int32, val int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StoreInt32(addr *int32, val int32)\n```\n\nStoreInt32 atomically stores val into *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#StoreInt64",
              "documentation": {
                "identifier": "StoreInt64",
                "newPage": false,
                "searchKey": "atomic.StoreInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StoreInt64(addr *int64, val int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StoreInt64(addr *int64, val int64)\n```\n\nStoreInt64 atomically stores val into *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#StoreUint32",
              "documentation": {
                "identifier": "StoreUint32",
                "newPage": false,
                "searchKey": "atomic.StoreUint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StoreUint32(addr *uint32, val uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StoreUint32(addr *uint32, val uint32)\n```\n\nStoreUint32 atomically stores val into *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#StoreUint64",
              "documentation": {
                "identifier": "StoreUint64",
                "newPage": false,
                "searchKey": "atomic.StoreUint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StoreUint64(addr *uint64, val uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StoreUint64(addr *uint64, val uint64)\n```\n\nStoreUint64 atomically stores val into *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#StoreUintptr",
              "documentation": {
                "identifier": "StoreUintptr",
                "newPage": false,
                "searchKey": "atomic.StoreUintptr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StoreUintptr(addr *uintptr, val uintptr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StoreUintptr(addr *uintptr, val uintptr)\n```\n\nStoreUintptr atomically stores val into *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#StorePointer",
              "documentation": {
                "identifier": "StorePointer",
                "newPage": false,
                "searchKey": "atomic.StorePointer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StorePointer(addr *unsafe.Pointer, val unsafe.Pointer)\n```\n\nStorePointer atomically stores val into *addr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#runtime_procPin",
              "documentation": {
                "identifier": "runtime_procPin",
                "newPage": false,
                "searchKey": "atomic.runtime_procPin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_procPin()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_procPin()\n```\n\nDisable/enable preemption, implemented in runtime. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic#runtime_procUnpin",
              "documentation": {
                "identifier": "runtime_procUnpin",
                "newPage": false,
                "searchKey": "atomic.runtime_procUnpin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_procUnpin()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_procUnpin()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
