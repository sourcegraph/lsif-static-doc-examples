{
  "pathID": "/std/sync/atomic_test",
  "documentation": {
    "identifier": "atomic_test",
    "newPage": true,
    "searchKey": "std/sync/atomic_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package atomic_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/std/sync/atomic_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync/atomic_test#magic32",
              "documentation": {
                "identifier": "magic32",
                "newPage": false,
                "searchKey": "atomic_test.magic32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const magic32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst magic32 = 0xdedbeef\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#magic64",
              "documentation": {
                "identifier": "magic64",
                "newPage": false,
                "searchKey": "atomic_test.magic64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const magic64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst magic64 = 0xdeddeadbeefbeef\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#arch32",
              "documentation": {
                "identifier": "arch32",
                "newPage": false,
                "searchKey": "atomic_test.arch32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const arch32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arch32 = unsafe.Sizeof(uintptr(0)) == 4\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/sync/atomic_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync/atomic_test#test64err",
              "documentation": {
                "identifier": "test64err",
                "newPage": false,
                "searchKey": "atomic_test.test64err",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var test64err"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar test64err = ...\n```\n\nDo the 64-bit functions panic? If so, don't bother testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#global",
              "documentation": {
                "identifier": "global",
                "newPage": false,
                "searchKey": "atomic_test.global",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var global"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar global [1024]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammer32",
              "documentation": {
                "identifier": "hammer32",
                "newPage": false,
                "searchKey": "atomic_test.hammer32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var hammer32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hammer32 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammer64",
              "documentation": {
                "identifier": "hammer64",
                "newPage": false,
                "searchKey": "atomic_test.hammer64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var hammer64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hammer64 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#Value_SwapTests",
              "documentation": {
                "identifier": "Value_SwapTests",
                "newPage": false,
                "searchKey": "atomic_test.Value_SwapTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var Value_SwapTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Value_SwapTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#heapA",
              "documentation": {
                "identifier": "heapA",
                "newPage": false,
                "searchKey": "atomic_test.heapA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapA, heapB = struct{ uint }{0}, struct{ uint }{0}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#heapB",
              "documentation": {
                "identifier": "heapB",
                "newPage": false,
                "searchKey": "atomic_test.heapB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapB"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapA, heapB = struct{ uint }{0}, struct{ uint }{0}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#Value_CompareAndSwapTests",
              "documentation": {
                "identifier": "Value_CompareAndSwapTests",
                "newPage": false,
                "searchKey": "atomic_test.Value_CompareAndSwapTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var Value_CompareAndSwapTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Value_CompareAndSwapTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/sync/atomic_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestSwapInt32",
              "documentation": {
                "identifier": "TestSwapInt32",
                "newPage": false,
                "searchKey": "atomic_test.TestSwapInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestSwapUint32",
              "documentation": {
                "identifier": "TestSwapUint32",
                "newPage": false,
                "searchKey": "atomic_test.TestSwapUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapUint32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapUint32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestSwapInt64",
              "documentation": {
                "identifier": "TestSwapInt64",
                "newPage": false,
                "searchKey": "atomic_test.TestSwapInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestSwapUint64",
              "documentation": {
                "identifier": "TestSwapUint64",
                "newPage": false,
                "searchKey": "atomic_test.TestSwapUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapUint64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapUint64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestSwapUintptr",
              "documentation": {
                "identifier": "TestSwapUintptr",
                "newPage": false,
                "searchKey": "atomic_test.TestSwapUintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapUintptr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapUintptr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#testPointers",
              "documentation": {
                "identifier": "testPointers",
                "newPage": false,
                "searchKey": "atomic_test.testPointers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPointers() []unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPointers() []unsafe.Pointer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestSwapPointer",
              "documentation": {
                "identifier": "TestSwapPointer",
                "newPage": false,
                "searchKey": "atomic_test.TestSwapPointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestAddInt32",
              "documentation": {
                "identifier": "TestAddInt32",
                "newPage": false,
                "searchKey": "atomic_test.TestAddInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestAddUint32",
              "documentation": {
                "identifier": "TestAddUint32",
                "newPage": false,
                "searchKey": "atomic_test.TestAddUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddUint32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddUint32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestAddInt64",
              "documentation": {
                "identifier": "TestAddInt64",
                "newPage": false,
                "searchKey": "atomic_test.TestAddInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestAddUint64",
              "documentation": {
                "identifier": "TestAddUint64",
                "newPage": false,
                "searchKey": "atomic_test.TestAddUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddUint64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddUint64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestAddUintptr",
              "documentation": {
                "identifier": "TestAddUintptr",
                "newPage": false,
                "searchKey": "atomic_test.TestAddUintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddUintptr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddUintptr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestCompareAndSwapInt32",
              "documentation": {
                "identifier": "TestCompareAndSwapInt32",
                "newPage": false,
                "searchKey": "atomic_test.TestCompareAndSwapInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareAndSwapInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareAndSwapInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestCompareAndSwapUint32",
              "documentation": {
                "identifier": "TestCompareAndSwapUint32",
                "newPage": false,
                "searchKey": "atomic_test.TestCompareAndSwapUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareAndSwapUint32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareAndSwapUint32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestCompareAndSwapInt64",
              "documentation": {
                "identifier": "TestCompareAndSwapInt64",
                "newPage": false,
                "searchKey": "atomic_test.TestCompareAndSwapInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareAndSwapInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareAndSwapInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#testCompareAndSwapUint64",
              "documentation": {
                "identifier": "testCompareAndSwapUint64",
                "newPage": false,
                "searchKey": "atomic_test.testCompareAndSwapUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCompareAndSwapUint64(t *testing.T, cas func(*uint64, uint64, uint64) bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCompareAndSwapUint64(t *testing.T, cas func(*uint64, uint64, uint64) bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestCompareAndSwapUint64",
              "documentation": {
                "identifier": "TestCompareAndSwapUint64",
                "newPage": false,
                "searchKey": "atomic_test.TestCompareAndSwapUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareAndSwapUint64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareAndSwapUint64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestCompareAndSwapUintptr",
              "documentation": {
                "identifier": "TestCompareAndSwapUintptr",
                "newPage": false,
                "searchKey": "atomic_test.TestCompareAndSwapUintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareAndSwapUintptr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareAndSwapUintptr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestCompareAndSwapPointer",
              "documentation": {
                "identifier": "TestCompareAndSwapPointer",
                "newPage": false,
                "searchKey": "atomic_test.TestCompareAndSwapPointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareAndSwapPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareAndSwapPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestLoadInt32",
              "documentation": {
                "identifier": "TestLoadInt32",
                "newPage": false,
                "searchKey": "atomic_test.TestLoadInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestLoadUint32",
              "documentation": {
                "identifier": "TestLoadUint32",
                "newPage": false,
                "searchKey": "atomic_test.TestLoadUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadUint32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadUint32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestLoadInt64",
              "documentation": {
                "identifier": "TestLoadInt64",
                "newPage": false,
                "searchKey": "atomic_test.TestLoadInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestLoadUint64",
              "documentation": {
                "identifier": "TestLoadUint64",
                "newPage": false,
                "searchKey": "atomic_test.TestLoadUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadUint64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadUint64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestLoadUintptr",
              "documentation": {
                "identifier": "TestLoadUintptr",
                "newPage": false,
                "searchKey": "atomic_test.TestLoadUintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadUintptr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadUintptr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestLoadPointer",
              "documentation": {
                "identifier": "TestLoadPointer",
                "newPage": false,
                "searchKey": "atomic_test.TestLoadPointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLoadPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLoadPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreInt32",
              "documentation": {
                "identifier": "TestStoreInt32",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreUint32",
              "documentation": {
                "identifier": "TestStoreUint32",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreUint32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreUint32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreInt64",
              "documentation": {
                "identifier": "TestStoreInt64",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreUint64",
              "documentation": {
                "identifier": "TestStoreUint64",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreUint64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreUint64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreUintptr",
              "documentation": {
                "identifier": "TestStoreUintptr",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreUintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreUintptr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreUintptr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStorePointer",
              "documentation": {
                "identifier": "TestStorePointer",
                "newPage": false,
                "searchKey": "atomic_test.TestStorePointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStorePointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStorePointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "atomic_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerSwapInt32",
              "documentation": {
                "identifier": "hammerSwapInt32",
                "newPage": false,
                "searchKey": "atomic_test.hammerSwapInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerSwapInt32(uaddr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerSwapInt32(uaddr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerSwapUint32",
              "documentation": {
                "identifier": "hammerSwapUint32",
                "newPage": false,
                "searchKey": "atomic_test.hammerSwapUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerSwapUint32(addr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerSwapUint32(addr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerSwapUintptr32",
              "documentation": {
                "identifier": "hammerSwapUintptr32",
                "newPage": false,
                "searchKey": "atomic_test.hammerSwapUintptr32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerSwapUintptr32(uaddr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerSwapUintptr32(uaddr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerAddInt32",
              "documentation": {
                "identifier": "hammerAddInt32",
                "newPage": false,
                "searchKey": "atomic_test.hammerAddInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerAddInt32(uaddr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerAddInt32(uaddr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerAddUint32",
              "documentation": {
                "identifier": "hammerAddUint32",
                "newPage": false,
                "searchKey": "atomic_test.hammerAddUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerAddUint32(addr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerAddUint32(addr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerAddUintptr32",
              "documentation": {
                "identifier": "hammerAddUintptr32",
                "newPage": false,
                "searchKey": "atomic_test.hammerAddUintptr32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerAddUintptr32(uaddr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerAddUintptr32(uaddr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerCompareAndSwapInt32",
              "documentation": {
                "identifier": "hammerCompareAndSwapInt32",
                "newPage": false,
                "searchKey": "atomic_test.hammerCompareAndSwapInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerCompareAndSwapInt32(uaddr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerCompareAndSwapInt32(uaddr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerCompareAndSwapUint32",
              "documentation": {
                "identifier": "hammerCompareAndSwapUint32",
                "newPage": false,
                "searchKey": "atomic_test.hammerCompareAndSwapUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerCompareAndSwapUint32(addr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerCompareAndSwapUint32(addr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerCompareAndSwapUintptr32",
              "documentation": {
                "identifier": "hammerCompareAndSwapUintptr32",
                "newPage": false,
                "searchKey": "atomic_test.hammerCompareAndSwapUintptr32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerCompareAndSwapUintptr32(uaddr *uint32, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerCompareAndSwapUintptr32(uaddr *uint32, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestHammer32",
              "documentation": {
                "identifier": "TestHammer32",
                "newPage": false,
                "searchKey": "atomic_test.TestHammer32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHammer32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHammer32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "atomic_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerSwapInt64",
              "documentation": {
                "identifier": "hammerSwapInt64",
                "newPage": false,
                "searchKey": "atomic_test.hammerSwapInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerSwapInt64(uaddr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerSwapInt64(uaddr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerSwapUint64",
              "documentation": {
                "identifier": "hammerSwapUint64",
                "newPage": false,
                "searchKey": "atomic_test.hammerSwapUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerSwapUint64(addr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerSwapUint64(addr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerSwapUintptr64",
              "documentation": {
                "identifier": "hammerSwapUintptr64",
                "newPage": false,
                "searchKey": "atomic_test.hammerSwapUintptr64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerSwapUintptr64(uaddr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerSwapUintptr64(uaddr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerAddInt64",
              "documentation": {
                "identifier": "hammerAddInt64",
                "newPage": false,
                "searchKey": "atomic_test.hammerAddInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerAddInt64(uaddr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerAddInt64(uaddr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerAddUint64",
              "documentation": {
                "identifier": "hammerAddUint64",
                "newPage": false,
                "searchKey": "atomic_test.hammerAddUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerAddUint64(addr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerAddUint64(addr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerAddUintptr64",
              "documentation": {
                "identifier": "hammerAddUintptr64",
                "newPage": false,
                "searchKey": "atomic_test.hammerAddUintptr64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerAddUintptr64(uaddr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerAddUintptr64(uaddr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerCompareAndSwapInt64",
              "documentation": {
                "identifier": "hammerCompareAndSwapInt64",
                "newPage": false,
                "searchKey": "atomic_test.hammerCompareAndSwapInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerCompareAndSwapInt64(uaddr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerCompareAndSwapInt64(uaddr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerCompareAndSwapUint64",
              "documentation": {
                "identifier": "hammerCompareAndSwapUint64",
                "newPage": false,
                "searchKey": "atomic_test.hammerCompareAndSwapUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerCompareAndSwapUint64(addr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerCompareAndSwapUint64(addr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerCompareAndSwapUintptr64",
              "documentation": {
                "identifier": "hammerCompareAndSwapUintptr64",
                "newPage": false,
                "searchKey": "atomic_test.hammerCompareAndSwapUintptr64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerCompareAndSwapUintptr64(uaddr *uint64, count int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerCompareAndSwapUintptr64(uaddr *uint64, count int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestHammer64",
              "documentation": {
                "identifier": "TestHammer64",
                "newPage": false,
                "searchKey": "atomic_test.TestHammer64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHammer64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHammer64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerStoreLoadInt32",
              "documentation": {
                "identifier": "hammerStoreLoadInt32",
                "newPage": false,
                "searchKey": "atomic_test.hammerStoreLoadInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerStoreLoadInt32(t *testing.T, paddr unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerStoreLoadInt32(t *testing.T, paddr unsafe.Pointer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerStoreLoadUint32",
              "documentation": {
                "identifier": "hammerStoreLoadUint32",
                "newPage": false,
                "searchKey": "atomic_test.hammerStoreLoadUint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerStoreLoadUint32(t *testing.T, paddr unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerStoreLoadUint32(t *testing.T, paddr unsafe.Pointer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerStoreLoadInt64",
              "documentation": {
                "identifier": "hammerStoreLoadInt64",
                "newPage": false,
                "searchKey": "atomic_test.hammerStoreLoadInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerStoreLoadInt64(t *testing.T, paddr unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerStoreLoadInt64(t *testing.T, paddr unsafe.Pointer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerStoreLoadUint64",
              "documentation": {
                "identifier": "hammerStoreLoadUint64",
                "newPage": false,
                "searchKey": "atomic_test.hammerStoreLoadUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerStoreLoadUint64(t *testing.T, paddr unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerStoreLoadUint64(t *testing.T, paddr unsafe.Pointer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerStoreLoadUintptr",
              "documentation": {
                "identifier": "hammerStoreLoadUintptr",
                "newPage": false,
                "searchKey": "atomic_test.hammerStoreLoadUintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerStoreLoadUintptr(t *testing.T, paddr unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerStoreLoadUintptr(t *testing.T, paddr unsafe.Pointer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#hammerStoreLoadPointer",
              "documentation": {
                "identifier": "hammerStoreLoadPointer",
                "newPage": false,
                "searchKey": "atomic_test.hammerStoreLoadPointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hammerStoreLoadPointer(t *testing.T, paddr unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hammerStoreLoadPointer(t *testing.T, paddr unsafe.Pointer)\n```\n\nThis code is just testing that LoadPointer/StorePointer operate atomically; it's not actually calculating pointers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestHammerStoreLoad",
              "documentation": {
                "identifier": "TestHammerStoreLoad",
                "newPage": false,
                "searchKey": "atomic_test.TestHammerStoreLoad",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHammerStoreLoad(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHammerStoreLoad(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreLoadSeqCst32",
              "documentation": {
                "identifier": "TestStoreLoadSeqCst32",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreLoadSeqCst32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreLoadSeqCst32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreLoadSeqCst32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreLoadSeqCst64",
              "documentation": {
                "identifier": "TestStoreLoadSeqCst64",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreLoadSeqCst64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreLoadSeqCst64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreLoadSeqCst64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreLoadRelAcq32",
              "documentation": {
                "identifier": "TestStoreLoadRelAcq32",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreLoadRelAcq32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreLoadRelAcq32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreLoadRelAcq32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestStoreLoadRelAcq64",
              "documentation": {
                "identifier": "TestStoreLoadRelAcq64",
                "newPage": false,
                "searchKey": "atomic_test.TestStoreLoadRelAcq64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStoreLoadRelAcq64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStoreLoadRelAcq64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#shouldPanic",
              "documentation": {
                "identifier": "shouldPanic",
                "newPage": false,
                "searchKey": "atomic_test.shouldPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func shouldPanic(t *testing.T, name string, f func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shouldPanic(t *testing.T, name string, f func())\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestUnaligned64",
              "documentation": {
                "identifier": "TestUnaligned64",
                "newPage": false,
                "searchKey": "atomic_test.TestUnaligned64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnaligned64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnaligned64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestNilDeref",
              "documentation": {
                "identifier": "TestNilDeref",
                "newPage": false,
                "searchKey": "atomic_test.TestNilDeref",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilDeref(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilDeref(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#loadConfig",
              "documentation": {
                "identifier": "loadConfig",
                "newPage": false,
                "searchKey": "atomic_test.loadConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func loadConfig() map[string]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc loadConfig() map[string]string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#requests",
              "documentation": {
                "identifier": "requests",
                "newPage": false,
                "searchKey": "atomic_test.requests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func requests() chan int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc requests() chan int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#ExampleValue_config",
              "documentation": {
                "identifier": "ExampleValue_config",
                "newPage": false,
                "searchKey": "atomic_test.ExampleValue_config",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleValue_config()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleValue_config()\n```\n\nThe following example shows how to use Value for periodic program config updates and propagation of the changes to worker goroutines. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#ExampleValue_readMostly",
              "documentation": {
                "identifier": "ExampleValue_readMostly",
                "newPage": false,
                "searchKey": "atomic_test.ExampleValue_readMostly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleValue_readMostly()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleValue_readMostly()\n```\n\nThe following example shows how to maintain a scalable frequently read, but infrequently updated data structure using copy-on-write idiom. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValue",
              "documentation": {
                "identifier": "TestValue",
                "newPage": false,
                "searchKey": "atomic_test.TestValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValueLarge",
              "documentation": {
                "identifier": "TestValueLarge",
                "newPage": false,
                "searchKey": "atomic_test.TestValueLarge",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueLarge(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueLarge(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValuePanic",
              "documentation": {
                "identifier": "TestValuePanic",
                "newPage": false,
                "searchKey": "atomic_test.TestValuePanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValuePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValuePanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValueConcurrent",
              "documentation": {
                "identifier": "TestValueConcurrent",
                "newPage": false,
                "searchKey": "atomic_test.TestValueConcurrent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueConcurrent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueConcurrent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#BenchmarkValueRead",
              "documentation": {
                "identifier": "BenchmarkValueRead",
                "newPage": false,
                "searchKey": "atomic_test.BenchmarkValueRead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkValueRead(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkValueRead(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValue_Swap",
              "documentation": {
                "identifier": "TestValue_Swap",
                "newPage": false,
                "searchKey": "atomic_test.TestValue_Swap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValue_Swap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValue_Swap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValueSwapConcurrent",
              "documentation": {
                "identifier": "TestValueSwapConcurrent",
                "newPage": false,
                "searchKey": "atomic_test.TestValueSwapConcurrent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueSwapConcurrent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueSwapConcurrent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValue_CompareAndSwap",
              "documentation": {
                "identifier": "TestValue_CompareAndSwap",
                "newPage": false,
                "searchKey": "atomic_test.TestValue_CompareAndSwap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValue_CompareAndSwap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValue_CompareAndSwap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync/atomic_test#TestValueCompareAndSwapConcurrent",
              "documentation": {
                "identifier": "TestValueCompareAndSwapConcurrent",
                "newPage": false,
                "searchKey": "atomic_test.TestValueCompareAndSwapConcurrent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueCompareAndSwapConcurrent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueCompareAndSwapConcurrent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
