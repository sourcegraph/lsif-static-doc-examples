{
  "pathID": "/std/reflect_test",
  "documentation": {
    "identifier": "reflect_test",
    "newPage": true,
    "searchKey": "std/reflect_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package reflect_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/std/reflect_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/reflect_test#sink",
              "documentation": {
                "identifier": "sink",
                "newPage": false,
                "searchKey": "reflect_test.sink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sink interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#typeTests",
              "documentation": {
                "identifier": "typeTests",
                "newPage": false,
                "searchKey": "reflect_test.typeTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var typeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar typeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#valueTests",
              "documentation": {
                "identifier": "valueTests",
                "newPage": false,
                "searchKey": "reflect_test.valueTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var valueTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar valueTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#_i",
              "documentation": {
                "identifier": "_i",
                "newPage": false,
                "searchKey": "reflect_test._i",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _i"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _i = 7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#valueToStringTests",
              "documentation": {
                "identifier": "valueToStringTests",
                "newPage": false,
                "searchKey": "reflect_test.valueToStringTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var valueToStringTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar valueToStringTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#appendTests",
              "documentation": {
                "identifier": "appendTests",
                "newPage": false,
                "searchKey": "reflect_test.appendTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var appendTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar appendTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fn1",
              "documentation": {
                "identifier": "fn1",
                "newPage": false,
                "searchKey": "reflect_test.fn1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fn1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fn1 func() // nil.\n\n```\n\nSimple functions for DeepEqual tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fn2",
              "documentation": {
                "identifier": "fn2",
                "newPage": false,
                "searchKey": "reflect_test.fn2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fn2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fn2 func() // nil.\n\n```\n\nSimple functions for DeepEqual tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fn3",
              "documentation": {
                "identifier": "fn3",
                "newPage": false,
                "searchKey": "reflect_test.fn3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fn3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fn3 = func() { fn1() } // Not nil.\n\n```\n\nSimple functions for DeepEqual tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#loop1",
              "documentation": {
                "identifier": "loop1",
                "newPage": false,
                "searchKey": "reflect_test.loop1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var loop1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar loop1, loop2 Loop\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#loop2",
              "documentation": {
                "identifier": "loop2",
                "newPage": false,
                "searchKey": "reflect_test.loop2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var loop2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar loop1, loop2 Loop\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#loopy1",
              "documentation": {
                "identifier": "loopy1",
                "newPage": false,
                "searchKey": "reflect_test.loopy1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var loopy1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar loopy1, loopy2 Loopy\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#loopy2",
              "documentation": {
                "identifier": "loopy2",
                "newPage": false,
                "searchKey": "reflect_test.loopy2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var loopy2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar loopy1, loopy2 Loopy\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#cycleMap1",
              "documentation": {
                "identifier": "cycleMap1",
                "newPage": false,
                "searchKey": "reflect_test.cycleMap1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cycleMap1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cycleMap1, cycleMap2, cycleMap3 map[string]interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#cycleMap2",
              "documentation": {
                "identifier": "cycleMap2",
                "newPage": false,
                "searchKey": "reflect_test.cycleMap2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cycleMap2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cycleMap1, cycleMap2, cycleMap3 map[string]interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#cycleMap3",
              "documentation": {
                "identifier": "cycleMap3",
                "newPage": false,
                "searchKey": "reflect_test.cycleMap3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cycleMap3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cycleMap1, cycleMap2, cycleMap3 map[string]interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#deepEqualTests",
              "documentation": {
                "identifier": "deepEqualTests",
                "newPage": false,
                "searchKey": "reflect_test.deepEqualTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var deepEqualTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deepEqualTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#allselect",
              "documentation": {
                "identifier": "allselect",
                "newPage": false,
                "searchKey": "reflect_test.allselect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allselect"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allselect = flag.Bool(\"allselect\", false, \"exhaustive select test\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#selectWatch",
              "documentation": {
                "identifier": "selectWatch",
                "newPage": false,
                "searchKey": "reflect_test.selectWatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var selectWatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar selectWatch struct {\n\tsync.Mutex\n\tonce sync.Once\n\tnow  time.Time\n\tinfo []caseInfo\n}\n```\n\nselectWatch and the selectWatcher are a watchdog mechanism for running Select. If the selectWatcher notices that the select has been blocked for >1 second, it prints an error describing the select and panics the entire test binary. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fieldTests",
              "documentation": {
                "identifier": "fieldTests",
                "newPage": false,
                "searchKey": "reflect_test.fieldTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fieldTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fieldTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#unexpi",
              "documentation": {
                "identifier": "unexpi",
                "newPage": false,
                "searchKey": "reflect_test.unexpi",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unexpi"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unexpi unexpI = new(unexp)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#tagGetTests",
              "documentation": {
                "identifier": "tagGetTests",
                "newPage": false,
                "searchKey": "reflect_test.tagGetTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tagGetTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tagGetTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#V",
              "documentation": {
                "identifier": "V",
                "newPage": false,
                "searchKey": "reflect_test.V",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var V"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar V = ValueOf\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#convertTests",
              "documentation": {
                "identifier": "convertTests",
                "newPage": false,
                "searchKey": "reflect_test.convertTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var convertTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar convertTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#gFloat32",
              "documentation": {
                "identifier": "gFloat32",
                "newPage": false,
                "searchKey": "reflect_test.gFloat32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var gFloat32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gFloat32 float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#comparableTests",
              "documentation": {
                "identifier": "comparableTests",
                "newPage": false,
                "searchKey": "reflect_test.comparableTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var comparableTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar comparableTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#nameTests",
              "documentation": {
                "identifier": "nameTests",
                "newPage": false,
                "searchKey": "reflect_test.nameTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#implementsTests",
              "documentation": {
                "identifier": "implementsTests",
                "newPage": false,
                "searchKey": "reflect_test.implementsTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var implementsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar implementsTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#assignableTests",
              "documentation": {
                "identifier": "assignableTests",
                "newPage": false,
                "searchKey": "reflect_test.assignableTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var assignableTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar assignableTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fieldsTests",
              "documentation": {
                "identifier": "fieldsTests",
                "newPage": false,
                "searchKey": "reflect_test.fieldsTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fieldsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fieldsTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/reflect_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/reflect_test#integer",
              "documentation": {
                "identifier": "integer",
                "newPage": false,
                "searchKey": "reflect_test.integer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type integer int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype integer int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#T",
              "documentation": {
                "identifier": "T",
                "newPage": false,
                "searchKey": "reflect_test.T",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T struct {\n\ta int\n\tb float64\n\tc string\n\td *int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#pair",
              "documentation": {
                "identifier": "pair",
                "newPage": false,
                "searchKey": "reflect_test.pair",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pair struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pair struct {\n\ti interface{}\n\ts string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#big",
              "documentation": {
                "identifier": "big",
                "newPage": false,
                "searchKey": "reflect_test.big",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type big struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype big struct {\n\ta, b, c, d, e int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Basic",
              "documentation": {
                "identifier": "Basic",
                "newPage": false,
                "searchKey": "reflect_test.Basic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Basic struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Basic struct {\n\tx int\n\ty float32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#NotBasic",
              "documentation": {
                "identifier": "NotBasic",
                "newPage": false,
                "searchKey": "reflect_test.NotBasic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NotBasic reflect_test.Basic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NotBasic Basic\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#DeepEqualTest",
              "documentation": {
                "identifier": "DeepEqualTest",
                "newPage": false,
                "searchKey": "reflect_test.DeepEqualTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeepEqualTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeepEqualTest struct {\n\ta, b interface{}\n\teq   bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#self",
              "documentation": {
                "identifier": "self",
                "newPage": false,
                "searchKey": "reflect_test.self",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type self struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype self struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Loop",
              "documentation": {
                "identifier": "Loop",
                "newPage": false,
                "searchKey": "reflect_test.Loop",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Loop *reflect_test.Loop"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Loop *Loop\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Loopy",
              "documentation": {
                "identifier": "Loopy",
                "newPage": false,
                "searchKey": "reflect_test.Loopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Loopy interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Loopy interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#structWithSelfPtr",
              "documentation": {
                "identifier": "structWithSelfPtr",
                "newPage": false,
                "searchKey": "reflect_test.structWithSelfPtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type structWithSelfPtr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structWithSelfPtr struct {\n\tp *structWithSelfPtr\n\ts string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Recursive",
              "documentation": {
                "identifier": "Recursive",
                "newPage": false,
                "searchKey": "reflect_test.Recursive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Recursive struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Recursive struct {\n\tx int\n\tr *Recursive\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#_Complex",
              "documentation": {
                "identifier": "_Complex",
                "newPage": false,
                "searchKey": "reflect_test._Complex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type _Complex struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype _Complex struct {\n\ta int\n\tb [3]*_Complex\n\tc *string\n\td map[float64]float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#UnexpT",
              "documentation": {
                "identifier": "UnexpT",
                "newPage": false,
                "searchKey": "reflect_test.UnexpT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnexpT struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnexpT struct {\n\tm map[int]int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#caseInfo",
              "documentation": {
                "identifier": "caseInfo",
                "newPage": false,
                "searchKey": "reflect_test.caseInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type caseInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype caseInfo struct {\n\tdesc      string\n\tcanSelect bool\n\trecv      Value\n\tclosed    bool\n\thelper    func()\n\tpanic     bool\n}\n```\n\ncaseInfo describes a single case in a select test. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#two",
              "documentation": {
                "identifier": "two",
                "newPage": false,
                "searchKey": "reflect_test.two",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type two [2]uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype two [2]uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#dummy",
                    "documentation": {
                      "identifier": "dummy",
                      "newPage": false,
                      "searchKey": "reflect_test.dummy",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func dummy(b byte, c int, d byte, e two, f byte, g float32, h byte) (i byte, j int, k byte, l two, m byte, n float32, o byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc dummy(b byte, c int, d byte, e two, f byte, g float32, h byte) (i byte, j int, k byte, l two, m byte, n float32, o byte)\n```\n\nDifficult test for function call because of implicit padding between arguments. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#emptyStruct",
              "documentation": {
                "identifier": "emptyStruct",
                "newPage": false,
                "searchKey": "reflect_test.emptyStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type emptyStruct struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype emptyStruct struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#returnEmpty",
                    "documentation": {
                      "identifier": "returnEmpty",
                      "newPage": false,
                      "searchKey": "reflect_test.returnEmpty",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func returnEmpty() emptyStruct"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc returnEmpty() emptyStruct\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#nonEmptyStruct",
              "documentation": {
                "identifier": "nonEmptyStruct",
                "newPage": false,
                "searchKey": "reflect_test.nonEmptyStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nonEmptyStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nonEmptyStruct struct {\n\tmember int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#returnNonEmpty",
                    "documentation": {
                      "identifier": "returnNonEmpty",
                      "newPage": false,
                      "searchKey": "reflect_test.returnNonEmpty",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func returnNonEmpty(i int) nonEmptyStruct"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc returnNonEmpty(i int) nonEmptyStruct\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#myint",
              "documentation": {
                "identifier": "myint",
                "newPage": false,
                "searchKey": "reflect_test.myint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type myint int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype myint int64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#myint.inc",
                    "documentation": {
                      "identifier": "myint.inc",
                      "newPage": false,
                      "searchKey": "reflect_test.myint.inc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *myint) inc()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *myint) inc()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#WC",
              "documentation": {
                "identifier": "WC",
                "newPage": false,
                "searchKey": "reflect_test.WC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type WC struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WC struct {\n}\n```\n\nDummy type that implements io.WriteCloser \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#WC.Write",
                    "documentation": {
                      "identifier": "WC.Write",
                      "newPage": false,
                      "searchKey": "reflect_test.WC.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *WC) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *WC) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#WC.Close",
                    "documentation": {
                      "identifier": "WC.Close",
                      "newPage": false,
                      "searchKey": "reflect_test.WC.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *WC) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *WC) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Point",
              "documentation": {
                "identifier": "Point",
                "newPage": false,
                "searchKey": "reflect_test.Point",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Point struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Point struct {\n\tx, y int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.AnotherMethod",
                    "documentation": {
                      "identifier": "Point.AnotherMethod",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.AnotherMethod",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) AnotherMethod(scale int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) AnotherMethod(scale int) int\n```\n\nThis will be index 0. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.Dist",
                    "documentation": {
                      "identifier": "Point.Dist",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.Dist",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) Dist(scale int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) Dist(scale int) int\n```\n\nThis will be index 1. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.GCMethod",
                    "documentation": {
                      "identifier": "Point.GCMethod",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.GCMethod",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) GCMethod(k int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) GCMethod(k int) int\n```\n\nThis will be index 2. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.NoArgs",
                    "documentation": {
                      "identifier": "Point.NoArgs",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.NoArgs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) NoArgs()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) NoArgs()\n```\n\nThis will be index 3. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.TotalDist",
                    "documentation": {
                      "identifier": "Point.TotalDist",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.TotalDist",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Point) TotalDist(points ...Point) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Point) TotalDist(points ...Point) int\n```\n\nThis will be index 4. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.Int64Method",
                    "documentation": {
                      "identifier": "Point.Int64Method",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.Int64Method",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Point) Int64Method(x int64) int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Point) Int64Method(x int64) int64\n```\n\nThis will be index 5. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#Point.Int32Method",
                    "documentation": {
                      "identifier": "Point.Int32Method",
                      "newPage": false,
                      "searchKey": "reflect_test.Point.Int32Method",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Point) Int32Method(x int32) int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Point) Int32Method(x int32) int32\n```\n\nThis will be index 6. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#DirectIfaceT",
              "documentation": {
                "identifier": "DirectIfaceT",
                "newPage": false,
                "searchKey": "reflect_test.DirectIfaceT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectIfaceT struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectIfaceT struct {\n\tp *int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#DirectIfaceT.M",
                    "documentation": {
                      "identifier": "DirectIfaceT.M",
                      "newPage": false,
                      "searchKey": "reflect_test.DirectIfaceT.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d DirectIfaceT) M() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d DirectIfaceT) M() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tinter",
              "documentation": {
                "identifier": "Tinter",
                "newPage": false,
                "searchKey": "reflect_test.Tinter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tinter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tinter interface {\n\tM(int, byte) (byte, int)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tsmallv",
              "documentation": {
                "identifier": "Tsmallv",
                "newPage": false,
                "searchKey": "reflect_test.Tsmallv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tsmallv byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tsmallv byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Tsmallv.M",
                    "documentation": {
                      "identifier": "Tsmallv.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Tsmallv.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Tsmallv) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Tsmallv) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tsmallp",
              "documentation": {
                "identifier": "Tsmallp",
                "newPage": false,
                "searchKey": "reflect_test.Tsmallp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tsmallp byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tsmallp byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Tsmallp.M",
                    "documentation": {
                      "identifier": "Tsmallp.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Tsmallp.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Tsmallp) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Tsmallp) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Twordv",
              "documentation": {
                "identifier": "Twordv",
                "newPage": false,
                "searchKey": "reflect_test.Twordv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Twordv uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Twordv uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Twordv.M",
                    "documentation": {
                      "identifier": "Twordv.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Twordv.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Twordv) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Twordv) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Twordp",
              "documentation": {
                "identifier": "Twordp",
                "newPage": false,
                "searchKey": "reflect_test.Twordp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Twordp uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Twordp uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Twordp.M",
                    "documentation": {
                      "identifier": "Twordp.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Twordp.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Twordp) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Twordp) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tbigv",
              "documentation": {
                "identifier": "Tbigv",
                "newPage": false,
                "searchKey": "reflect_test.Tbigv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tbigv [2]uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tbigv [2]uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Tbigv.M",
                    "documentation": {
                      "identifier": "Tbigv.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Tbigv.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Tbigv) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Tbigv) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tbigp",
              "documentation": {
                "identifier": "Tbigp",
                "newPage": false,
                "searchKey": "reflect_test.Tbigp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tbigp [2]uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tbigp [2]uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Tbigp.M",
                    "documentation": {
                      "identifier": "Tbigp.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Tbigp.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Tbigp) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Tbigp) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#tinter",
              "documentation": {
                "identifier": "tinter",
                "newPage": false,
                "searchKey": "reflect_test.tinter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tinter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tinter interface {\n\tm(int, byte) (byte, int)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tm1",
              "documentation": {
                "identifier": "Tm1",
                "newPage": false,
                "searchKey": "reflect_test.Tm1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tm1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tm1 struct {\n\tTm2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tm2",
              "documentation": {
                "identifier": "Tm2",
                "newPage": false,
                "searchKey": "reflect_test.Tm2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tm2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tm2 struct {\n\t*Tm3\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tm3",
              "documentation": {
                "identifier": "Tm3",
                "newPage": false,
                "searchKey": "reflect_test.Tm3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tm3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tm3 struct {\n\t*Tm4\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tm4",
              "documentation": {
                "identifier": "Tm4",
                "newPage": false,
                "searchKey": "reflect_test.Tm4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tm4 struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tm4 struct {\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Tm4.M",
                    "documentation": {
                      "identifier": "Tm4.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Tm4.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t4 Tm4) M(x int, b byte) (byte, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t4 Tm4) M(x int, b byte) (byte, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#T1",
              "documentation": {
                "identifier": "T1",
                "newPage": false,
                "searchKey": "reflect_test.T1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T1 struct {\n\ta string\n\tint\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#FTest",
              "documentation": {
                "identifier": "FTest",
                "newPage": false,
                "searchKey": "reflect_test.FTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type FTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FTest struct {\n\ts     interface{}\n\tname  string\n\tindex []int\n\tvalue int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#D1",
              "documentation": {
                "identifier": "D1",
                "newPage": false,
                "searchKey": "reflect_test.D1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type D1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype D1 struct {\n\td int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#D2",
              "documentation": {
                "identifier": "D2",
                "newPage": false,
                "searchKey": "reflect_test.D2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type D2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype D2 struct {\n\td int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S0",
              "documentation": {
                "identifier": "S0",
                "newPage": false,
                "searchKey": "reflect_test.S0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S0 struct {\n\tA, B, C int\n\tD1\n\tD2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S1",
              "documentation": {
                "identifier": "S1",
                "newPage": false,
                "searchKey": "reflect_test.S1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S1 struct {\n\tB int\n\tS0\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S2",
              "documentation": {
                "identifier": "S2",
                "newPage": false,
                "searchKey": "reflect_test.S2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S2 struct {\n\tA int\n\t*S1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S1x",
              "documentation": {
                "identifier": "S1x",
                "newPage": false,
                "searchKey": "reflect_test.S1x",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S1x struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S1x struct {\n\tS1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S1y",
              "documentation": {
                "identifier": "S1y",
                "newPage": false,
                "searchKey": "reflect_test.S1y",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S1y struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S1y struct {\n\tS1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S3",
              "documentation": {
                "identifier": "S3",
                "newPage": false,
                "searchKey": "reflect_test.S3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S3 struct {\n\tS1x\n\tS2\n\tD, E int\n\t*S1y\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S4",
              "documentation": {
                "identifier": "S4",
                "newPage": false,
                "searchKey": "reflect_test.S4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S4 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S4 struct {\n\t*S4\n\tA int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S5",
              "documentation": {
                "identifier": "S5",
                "newPage": false,
                "searchKey": "reflect_test.S5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S5 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S5 struct {\n\tS6\n\tS7\n\tS8\n}\n```\n\nThe X in S6 and S7 annihilate, but they also block the X in S8.S9. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S6",
              "documentation": {
                "identifier": "S6",
                "newPage": false,
                "searchKey": "reflect_test.S6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S6 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S6 struct {\n\tX int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S7",
              "documentation": {
                "identifier": "S7",
                "newPage": false,
                "searchKey": "reflect_test.S7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S7 reflect_test.S6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S7 S6\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S8",
              "documentation": {
                "identifier": "S8",
                "newPage": false,
                "searchKey": "reflect_test.S8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S8 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S8 struct {\n\tS9\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S9",
              "documentation": {
                "identifier": "S9",
                "newPage": false,
                "searchKey": "reflect_test.S9",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S9 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S9 struct {\n\tX int\n\tY int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S10",
              "documentation": {
                "identifier": "S10",
                "newPage": false,
                "searchKey": "reflect_test.S10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S10 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S10 struct {\n\tS11\n\tS12\n\tS13\n}\n```\n\nThe X in S11.S6 and S12.S6 annihilate, but they also block the X in S13.S8.S9. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S11",
              "documentation": {
                "identifier": "S11",
                "newPage": false,
                "searchKey": "reflect_test.S11",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S11 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S11 struct {\n\tS6\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S12",
              "documentation": {
                "identifier": "S12",
                "newPage": false,
                "searchKey": "reflect_test.S12",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S12 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S12 struct {\n\tS6\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S13",
              "documentation": {
                "identifier": "S13",
                "newPage": false,
                "searchKey": "reflect_test.S13",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S13 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S13 struct {\n\tS8\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S14",
              "documentation": {
                "identifier": "S14",
                "newPage": false,
                "searchKey": "reflect_test.S14",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S14 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S14 struct {\n\tS15\n\tS16\n}\n```\n\nThe X in S15.S11.S1 and S16.S11.S1 annihilate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S15",
              "documentation": {
                "identifier": "S15",
                "newPage": false,
                "searchKey": "reflect_test.S15",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S15 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S15 struct {\n\tS11\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S16",
              "documentation": {
                "identifier": "S16",
                "newPage": false,
                "searchKey": "reflect_test.S16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S16 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S16 struct {\n\tS11\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#inner",
              "documentation": {
                "identifier": "inner",
                "newPage": false,
                "searchKey": "reflect_test.inner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type inner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype inner struct {\n\tx int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#inner.M",
                    "documentation": {
                      "identifier": "inner.M",
                      "newPage": false,
                      "searchKey": "reflect_test.inner.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*inner) M()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*inner) M()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#outer",
              "documentation": {
                "identifier": "outer",
                "newPage": false,
                "searchKey": "reflect_test.outer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type outer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype outer struct {\n\ty int\n\tinner\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#outer.M",
                    "documentation": {
                      "identifier": "outer.M",
                      "newPage": false,
                      "searchKey": "reflect_test.outer.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*outer) M()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*outer) M()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#unexp",
              "documentation": {
                "identifier": "unexp",
                "newPage": false,
                "searchKey": "reflect_test.unexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unexp struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unexp struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#unexp.f",
                    "documentation": {
                      "identifier": "unexp.f",
                      "newPage": false,
                      "searchKey": "reflect_test.unexp.f",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*unexp) f() (int32, int8)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*unexp) f() (int32, int8)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#unexp.g",
                    "documentation": {
                      "identifier": "unexp.g",
                      "newPage": false,
                      "searchKey": "reflect_test.unexp.g",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*unexp) g() (int64, int8)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*unexp) g() (int64, int8)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#unexpI",
              "documentation": {
                "identifier": "unexpI",
                "newPage": false,
                "searchKey": "reflect_test.unexpI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unexpI interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unexpI interface {\n\tf() (int32, int8)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#InnerInt",
              "documentation": {
                "identifier": "InnerInt",
                "newPage": false,
                "searchKey": "reflect_test.InnerInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type InnerInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InnerInt struct {\n\tX int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#InnerInt.M",
                    "documentation": {
                      "identifier": "InnerInt.M",
                      "newPage": false,
                      "searchKey": "reflect_test.InnerInt.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *InnerInt) M() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *InnerInt) M() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#OuterInt",
              "documentation": {
                "identifier": "OuterInt",
                "newPage": false,
                "searchKey": "reflect_test.OuterInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OuterInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OuterInt struct {\n\tY int\n\tInnerInt\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#FuncDDD",
              "documentation": {
                "identifier": "FuncDDD",
                "newPage": false,
                "searchKey": "reflect_test.FuncDDD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type FuncDDD func(...interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FuncDDD func(...interface{}) error\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#FuncDDD.M",
                    "documentation": {
                      "identifier": "FuncDDD.M",
                      "newPage": false,
                      "searchKey": "reflect_test.FuncDDD.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f FuncDDD) M()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f FuncDDD) M()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Private",
              "documentation": {
                "identifier": "Private",
                "newPage": false,
                "searchKey": "reflect_test.Private",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Private struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Private struct {\n\tx int\n\ty **int\n\tZ int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Private.m",
                    "documentation": {
                      "identifier": "Private.m",
                      "newPage": false,
                      "searchKey": "reflect_test.Private.m",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Private) m()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Private) m()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#private",
              "documentation": {
                "identifier": "private",
                "newPage": false,
                "searchKey": "reflect_test.private",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type private struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype private struct {\n\tZ int\n\tz int\n\tS string\n\tA [1]Private\n\tT []Private\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#private.P",
                    "documentation": {
                      "identifier": "private.P",
                      "newPage": false,
                      "searchKey": "reflect_test.private.P",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *private) P()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *private) P()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Public",
              "documentation": {
                "identifier": "Public",
                "newPage": false,
                "searchKey": "reflect_test.Public",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Public struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Public struct {\n\tX int\n\tY **int\n\tprivate\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Public.M",
                    "documentation": {
                      "identifier": "Public.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Public.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Public) M()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Public) M()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#timp",
              "documentation": {
                "identifier": "timp",
                "newPage": false,
                "searchKey": "reflect_test.timp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type timp int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype timp int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#timp.W",
                    "documentation": {
                      "identifier": "timp.W",
                      "newPage": false,
                      "searchKey": "reflect_test.timp.W",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timp) W()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timp) W()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#timp.Y",
                    "documentation": {
                      "identifier": "timp.Y",
                      "newPage": false,
                      "searchKey": "reflect_test.timp.Y",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timp) Y()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timp) Y()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#timp.w",
                    "documentation": {
                      "identifier": "timp.w",
                      "newPage": false,
                      "searchKey": "reflect_test.timp.w",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timp) w()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timp) w()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#timp.y",
                    "documentation": {
                      "identifier": "timp.y",
                      "newPage": false,
                      "searchKey": "reflect_test.timp.y",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t timp) y()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t timp) y()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Empty",
              "documentation": {
                "identifier": "Empty",
                "newPage": false,
                "searchKey": "reflect_test.Empty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Empty struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Empty struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyStruct",
              "documentation": {
                "identifier": "MyStruct",
                "newPage": false,
                "searchKey": "reflect_test.MyStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyStruct struct {\n\tx int `some:\"tag\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyStruct1",
              "documentation": {
                "identifier": "MyStruct1",
                "newPage": false,
                "searchKey": "reflect_test.MyStruct1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyStruct1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyStruct1 struct {\n\tx struct {\n\t\tint `some:\"bar\"`\n\t}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyStruct2",
              "documentation": {
                "identifier": "MyStruct2",
                "newPage": false,
                "searchKey": "reflect_test.MyStruct2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyStruct2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyStruct2 struct {\n\tx struct {\n\t\tint `some:\"foo\"`\n\t}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyString",
              "documentation": {
                "identifier": "MyString",
                "newPage": false,
                "searchKey": "reflect_test.MyString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyString string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyString string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyBytes",
              "documentation": {
                "identifier": "MyBytes",
                "newPage": false,
                "searchKey": "reflect_test.MyBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyBytes []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyBytes []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyBytesArrayPtr0",
              "documentation": {
                "identifier": "MyBytesArrayPtr0",
                "newPage": false,
                "searchKey": "reflect_test.MyBytesArrayPtr0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyBytesArrayPtr0 *[0]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyBytesArrayPtr0 *[0]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyBytesArrayPtr",
              "documentation": {
                "identifier": "MyBytesArrayPtr",
                "newPage": false,
                "searchKey": "reflect_test.MyBytesArrayPtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyBytesArrayPtr *[4]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyBytesArrayPtr *[4]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyBytesArray0",
              "documentation": {
                "identifier": "MyBytesArray0",
                "newPage": false,
                "searchKey": "reflect_test.MyBytesArray0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyBytesArray0 [0]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyBytesArray0 [0]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyBytesArray",
              "documentation": {
                "identifier": "MyBytesArray",
                "newPage": false,
                "searchKey": "reflect_test.MyBytesArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyBytesArray [4]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyBytesArray [4]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyRunes",
              "documentation": {
                "identifier": "MyRunes",
                "newPage": false,
                "searchKey": "reflect_test.MyRunes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyRunes []int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyRunes []int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyFunc",
              "documentation": {
                "identifier": "MyFunc",
                "newPage": false,
                "searchKey": "reflect_test.MyFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyFunc func()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyFunc func()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#MyByte",
              "documentation": {
                "identifier": "MyByte",
                "newPage": false,
                "searchKey": "reflect_test.MyByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyByte byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyByte byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#IntChan",
              "documentation": {
                "identifier": "IntChan",
                "newPage": false,
                "searchKey": "reflect_test.IntChan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntChan chan int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntChan chan int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#IntChanRecv",
              "documentation": {
                "identifier": "IntChanRecv",
                "newPage": false,
                "searchKey": "reflect_test.IntChanRecv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntChanRecv <-chan int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntChanRecv <-chan int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#IntChanSend",
              "documentation": {
                "identifier": "IntChanSend",
                "newPage": false,
                "searchKey": "reflect_test.IntChanSend",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntChanSend chan<- int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntChanSend chan<- int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BytesChan",
              "documentation": {
                "identifier": "BytesChan",
                "newPage": false,
                "searchKey": "reflect_test.BytesChan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BytesChan chan []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BytesChan chan []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BytesChanRecv",
              "documentation": {
                "identifier": "BytesChanRecv",
                "newPage": false,
                "searchKey": "reflect_test.BytesChanRecv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BytesChanRecv <-chan []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BytesChanRecv <-chan []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BytesChanSend",
              "documentation": {
                "identifier": "BytesChanSend",
                "newPage": false,
                "searchKey": "reflect_test.BytesChanSend",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BytesChanSend chan<- []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BytesChanSend chan<- []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ComparableStruct",
              "documentation": {
                "identifier": "ComparableStruct",
                "newPage": false,
                "searchKey": "reflect_test.ComparableStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ComparableStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ComparableStruct struct {\n\tX int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#NonComparableStruct",
              "documentation": {
                "identifier": "NonComparableStruct",
                "newPage": false,
                "searchKey": "reflect_test.NonComparableStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NonComparableStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NonComparableStruct struct {\n\tX int\n\tY map[string]int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#StructI",
              "documentation": {
                "identifier": "StructI",
                "newPage": false,
                "searchKey": "reflect_test.StructI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructI int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructI int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#StructI.Get",
                    "documentation": {
                      "identifier": "StructI.Get",
                      "newPage": false,
                      "searchKey": "reflect_test.StructI.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i StructI) Get() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i StructI) Get() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#StructIPtr",
              "documentation": {
                "identifier": "StructIPtr",
                "newPage": false,
                "searchKey": "reflect_test.StructIPtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructIPtr int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructIPtr int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#StructIPtr.Get",
                    "documentation": {
                      "identifier": "StructIPtr.Get",
                      "newPage": false,
                      "searchKey": "reflect_test.StructIPtr.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *StructIPtr) Get() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *StructIPtr) Get() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#StructIPtr.Set",
                    "documentation": {
                      "identifier": "StructIPtr.Set",
                      "newPage": false,
                      "searchKey": "reflect_test.StructIPtr.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *StructIPtr) Set(v int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *StructIPtr) Set(v int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SettableStruct",
              "documentation": {
                "identifier": "SettableStruct",
                "newPage": false,
                "searchKey": "reflect_test.SettableStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SettableStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SettableStruct struct {\n\tSettableField int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#SettableStruct.Set",
                    "documentation": {
                      "identifier": "SettableStruct.Set",
                      "newPage": false,
                      "searchKey": "reflect_test.SettableStruct.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *SettableStruct) Set(v int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *SettableStruct) Set(v int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SettablePointer",
              "documentation": {
                "identifier": "SettablePointer",
                "newPage": false,
                "searchKey": "reflect_test.SettablePointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SettablePointer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SettablePointer struct {\n\tSettableField *int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#SettablePointer.Set",
                    "documentation": {
                      "identifier": "SettablePointer.Set",
                      "newPage": false,
                      "searchKey": "reflect_test.SettablePointer.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *SettablePointer) Set(v int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *SettablePointer) Set(v int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#B1",
              "documentation": {
                "identifier": "B1",
                "newPage": false,
                "searchKey": "reflect_test.B1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type B1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype B1 struct {\n\tX int\n\tY int\n\tZ int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R0",
              "documentation": {
                "identifier": "R0",
                "newPage": false,
                "searchKey": "reflect_test.R0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R0 struct {\n\t*R1\n\t*R2\n\t*R3\n\t*R4\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R1",
              "documentation": {
                "identifier": "R1",
                "newPage": false,
                "searchKey": "reflect_test.R1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R1 struct {\n\t*R5\n\t*R6\n\t*R7\n\t*R8\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R2",
              "documentation": {
                "identifier": "R2",
                "newPage": false,
                "searchKey": "reflect_test.R2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R2 reflect_test.R1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R2 R1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R3",
              "documentation": {
                "identifier": "R3",
                "newPage": false,
                "searchKey": "reflect_test.R3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R3 reflect_test.R1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R3 R1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R4",
              "documentation": {
                "identifier": "R4",
                "newPage": false,
                "searchKey": "reflect_test.R4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R4 reflect_test.R1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R4 R1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R5",
              "documentation": {
                "identifier": "R5",
                "newPage": false,
                "searchKey": "reflect_test.R5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R5 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R5 struct {\n\t*R9\n\t*R10\n\t*R11\n\t*R12\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R6",
              "documentation": {
                "identifier": "R6",
                "newPage": false,
                "searchKey": "reflect_test.R6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R6 reflect_test.R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R6 R5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R7",
              "documentation": {
                "identifier": "R7",
                "newPage": false,
                "searchKey": "reflect_test.R7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R7 reflect_test.R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R7 R5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R8",
              "documentation": {
                "identifier": "R8",
                "newPage": false,
                "searchKey": "reflect_test.R8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R8 reflect_test.R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R8 R5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R9",
              "documentation": {
                "identifier": "R9",
                "newPage": false,
                "searchKey": "reflect_test.R9",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R9 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R9 struct {\n\t*R13\n\t*R14\n\t*R15\n\t*R16\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R10",
              "documentation": {
                "identifier": "R10",
                "newPage": false,
                "searchKey": "reflect_test.R10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R10 reflect_test.R9"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R10 R9\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R11",
              "documentation": {
                "identifier": "R11",
                "newPage": false,
                "searchKey": "reflect_test.R11",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R11 reflect_test.R9"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R11 R9\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R12",
              "documentation": {
                "identifier": "R12",
                "newPage": false,
                "searchKey": "reflect_test.R12",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R12 reflect_test.R9"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R12 R9\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R13",
              "documentation": {
                "identifier": "R13",
                "newPage": false,
                "searchKey": "reflect_test.R13",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R13 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R13 struct {\n\t*R17\n\t*R18\n\t*R19\n\t*R20\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R14",
              "documentation": {
                "identifier": "R14",
                "newPage": false,
                "searchKey": "reflect_test.R14",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R14 reflect_test.R13"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R14 R13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R15",
              "documentation": {
                "identifier": "R15",
                "newPage": false,
                "searchKey": "reflect_test.R15",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R15 reflect_test.R13"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R15 R13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R16",
              "documentation": {
                "identifier": "R16",
                "newPage": false,
                "searchKey": "reflect_test.R16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R16 reflect_test.R13"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R16 R13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R17",
              "documentation": {
                "identifier": "R17",
                "newPage": false,
                "searchKey": "reflect_test.R17",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R17 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R17 struct {\n\t*R21\n\t*R22\n\t*R23\n\t*R24\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R18",
              "documentation": {
                "identifier": "R18",
                "newPage": false,
                "searchKey": "reflect_test.R18",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R18 reflect_test.R17"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R18 R17\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R19",
              "documentation": {
                "identifier": "R19",
                "newPage": false,
                "searchKey": "reflect_test.R19",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R19 reflect_test.R17"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R19 R17\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R20",
              "documentation": {
                "identifier": "R20",
                "newPage": false,
                "searchKey": "reflect_test.R20",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R20 reflect_test.R17"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R20 R17\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R21",
              "documentation": {
                "identifier": "R21",
                "newPage": false,
                "searchKey": "reflect_test.R21",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R21 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R21 struct {\n\tX int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R22",
              "documentation": {
                "identifier": "R22",
                "newPage": false,
                "searchKey": "reflect_test.R22",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R22 reflect_test.R21"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R22 R21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R23",
              "documentation": {
                "identifier": "R23",
                "newPage": false,
                "searchKey": "reflect_test.R23",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R23 reflect_test.R21"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R23 R21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#R24",
              "documentation": {
                "identifier": "R24",
                "newPage": false,
                "searchKey": "reflect_test.R24",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type R24 reflect_test.R21"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype R24 R21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#S",
              "documentation": {
                "identifier": "S",
                "newPage": false,
                "searchKey": "reflect_test.S",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S struct {\n\ti1 int64\n\ti2 int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#exhaustive",
              "documentation": {
                "identifier": "exhaustive",
                "newPage": false,
                "searchKey": "reflect_test.exhaustive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type exhaustive struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype exhaustive struct {\n\tr    *rand.Rand\n\tpos  int\n\tlast []choice\n}\n```\n\nAn exhaustive is a mechanism for writing exhaustive or stochastic tests. The basic usage is: \n\n```\nfor x.Next() {\n\t... code using x.Maybe() or x.Choice(n) to create test cases ...\n}\n\n```\nEach iteration of the loop returns a different set of results, until all possible result sets have been explored. It is okay for different code paths to make different method call sequences on x, but there must be no other source of non-determinism in the call sequences. \n\nWhen faced with a new decision, x chooses randomly. Future explorations of that path will choose successive values for the result. Thus, stopping the loop after a fixed number of iterations gives somewhat stochastic testing. \n\nExample: \n\n```\nfor x.Next() {\n\tv := make([]bool, x.Choose(4))\n\tfor i := range v {\n\t\tv[i] = x.Maybe()\n\t}\n\tfmt.Println(v)\n}\n\n```\nprints (in some order): \n\n```\n[]\n[false]\n[true]\n[false false]\n[false true]\n...\n[true true]\n[false false false]\n...\n[true true true]\n[false false false false]\n...\n[true true true true]\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#exhaustive.Next",
                    "documentation": {
                      "identifier": "exhaustive.Next",
                      "newPage": false,
                      "searchKey": "reflect_test.exhaustive.Next",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *exhaustive) Next() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *exhaustive) Next() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#exhaustive.Choose",
                    "documentation": {
                      "identifier": "exhaustive.Choose",
                      "newPage": false,
                      "searchKey": "reflect_test.exhaustive.Choose",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *exhaustive) Choose(max int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *exhaustive) Choose(max int) int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#exhaustive.Maybe",
                    "documentation": {
                      "identifier": "exhaustive.Maybe",
                      "newPage": false,
                      "searchKey": "reflect_test.exhaustive.Maybe",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *exhaustive) Maybe() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *exhaustive) Maybe() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#choice",
              "documentation": {
                "identifier": "choice",
                "newPage": false,
                "searchKey": "reflect_test.choice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type choice struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype choice struct {\n\toff int\n\tn   int\n\tmax int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Outer",
              "documentation": {
                "identifier": "Outer",
                "newPage": false,
                "searchKey": "reflect_test.Outer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Outer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Outer struct {\n\t*Inner\n\tR io.Reader\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Inner",
              "documentation": {
                "identifier": "Inner",
                "newPage": false,
                "searchKey": "reflect_test.Inner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Inner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Inner struct {\n\tX  *Outer\n\tP1 uintptr\n\tP2 uintptr\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Inner.M",
                    "documentation": {
                      "identifier": "Inner.M",
                      "newPage": false,
                      "searchKey": "reflect_test.Inner.M",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pi *Inner) M()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pi *Inner) M()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Impl",
              "documentation": {
                "identifier": "Impl",
                "newPage": false,
                "searchKey": "reflect_test.Impl",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Impl struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Impl struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#Impl.F",
                    "documentation": {
                      "identifier": "Impl.F",
                      "newPage": false,
                      "searchKey": "reflect_test.Impl.F",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (Impl) F()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (Impl) F()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#UnExportedFirst",
              "documentation": {
                "identifier": "UnExportedFirst",
                "newPage": false,
                "searchKey": "reflect_test.UnExportedFirst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnExportedFirst int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnExportedFirst int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#UnExportedFirst.ΦExported",
                    "documentation": {
                      "identifier": "UnExportedFirst.ΦExported",
                      "newPage": false,
                      "searchKey": "reflect_test.UnExportedFirst.ΦExported",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i UnExportedFirst) ΦExported()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i UnExportedFirst) ΦExported()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#UnExportedFirst.unexported",
                    "documentation": {
                      "identifier": "UnExportedFirst.unexported",
                      "newPage": false,
                      "searchKey": "reflect_test.UnExportedFirst.unexported",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i UnExportedFirst) unexported()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i UnExportedFirst) unexported()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#KeepMethodLive",
              "documentation": {
                "identifier": "KeepMethodLive",
                "newPage": false,
                "searchKey": "reflect_test.KeepMethodLive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type KeepMethodLive struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype KeepMethodLive struct{}\n```\n\nIssue 18635 (method version). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#KeepMethodLive.Method1",
                    "documentation": {
                      "identifier": "KeepMethodLive.Method1",
                      "newPage": false,
                      "searchKey": "reflect_test.KeepMethodLive.Method1",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k KeepMethodLive) Method1(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k KeepMethodLive) Method1(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#KeepMethodLive.Method2",
                    "documentation": {
                      "identifier": "KeepMethodLive.Method2",
                      "newPage": false,
                      "searchKey": "reflect_test.KeepMethodLive.Method2",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k KeepMethodLive) Method2(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k KeepMethodLive) Method2(i int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#XM",
              "documentation": {
                "identifier": "XM",
                "newPage": false,
                "searchKey": "reflect_test.XM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type XM struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype XM struct{ _ bool }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#XM.String",
                    "documentation": {
                      "identifier": "XM.String",
                      "newPage": false,
                      "searchKey": "reflect_test.XM.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*XM) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*XM) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678",
              "documentation": {
                "identifier": "TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678",
                "newPage": false,
                "searchKey": "reflect_test.TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678 int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TheNameOfThisTypeIsExactly255BytesLongSoWhenTheCompilerPrependsTheReflectTestPackageNameAndExtraStarTheLinkerRuntimeAndReflectPackagesWillHaveToCorrectlyDecodeTheSecondLengthByte0123456789_0123456789_0123456789_0123456789_0123456789_012345678 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#nameTest",
              "documentation": {
                "identifier": "nameTest",
                "newPage": false,
                "searchKey": "reflect_test.nameTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nameTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nameTest struct {\n\tv    interface{}\n\twant string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tint",
              "documentation": {
                "identifier": "Tint",
                "newPage": false,
                "searchKey": "reflect_test.Tint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tint int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tint int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Tint2",
              "documentation": {
                "identifier": "Tint2",
                "newPage": false,
                "searchKey": "reflect_test.Tint2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tint2 reflect_test.Tint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tint2 = Tint\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Talias1",
              "documentation": {
                "identifier": "Talias1",
                "newPage": false,
                "searchKey": "reflect_test.Talias1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Talias1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Talias1 struct {\n\tbyte\n\tuint8\n\tint\n\tint32\n\trune\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Talias2",
              "documentation": {
                "identifier": "Talias2",
                "newPage": false,
                "searchKey": "reflect_test.Talias2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Talias2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Talias2 struct {\n\tTint\n\tTint2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#NonExportedFirst",
              "documentation": {
                "identifier": "NonExportedFirst",
                "newPage": false,
                "searchKey": "reflect_test.NonExportedFirst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NonExportedFirst int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NonExportedFirst int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#NonExportedFirst.ΦExported",
                    "documentation": {
                      "identifier": "NonExportedFirst.ΦExported",
                      "newPage": false,
                      "searchKey": "reflect_test.NonExportedFirst.ΦExported",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i NonExportedFirst) ΦExported()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i NonExportedFirst) ΦExported()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#NonExportedFirst.nonexported",
                    "documentation": {
                      "identifier": "NonExportedFirst.nonexported",
                      "newPage": false,
                      "searchKey": "reflect_test.NonExportedFirst.nonexported",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i NonExportedFirst) nonexported() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i NonExportedFirst) nonexported() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#notAnExpr",
              "documentation": {
                "identifier": "notAnExpr",
                "newPage": false,
                "searchKey": "reflect_test.notAnExpr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type notAnExpr struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype notAnExpr struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/reflect_test#notAnExpr.Pos",
                    "documentation": {
                      "identifier": "notAnExpr.Pos",
                      "newPage": false,
                      "searchKey": "reflect_test.notAnExpr.Pos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (notAnExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (notAnExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#notAnExpr.End",
                    "documentation": {
                      "identifier": "notAnExpr.End",
                      "newPage": false,
                      "searchKey": "reflect_test.notAnExpr.End",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (notAnExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (notAnExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/reflect_test#notAnExpr.exprNode",
                    "documentation": {
                      "identifier": "notAnExpr.exprNode",
                      "newPage": false,
                      "searchKey": "reflect_test.notAnExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (notAnExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (notAnExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#notASTExpr",
              "documentation": {
                "identifier": "notASTExpr",
                "newPage": false,
                "searchKey": "reflect_test.notASTExpr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type notASTExpr interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype notASTExpr interface {\n\tPos() token.Pos\n\tEnd() token.Pos\n\texprNode()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#IntPtr",
              "documentation": {
                "identifier": "IntPtr",
                "newPage": false,
                "searchKey": "reflect_test.IntPtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntPtr *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntPtr *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#IntPtr1",
              "documentation": {
                "identifier": "IntPtr1",
                "newPage": false,
                "searchKey": "reflect_test.IntPtr1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntPtr1 *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntPtr1 *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Ch",
              "documentation": {
                "identifier": "Ch",
                "newPage": false,
                "searchKey": "reflect_test.Ch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ch <-chan interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ch <-chan interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#structField",
              "documentation": {
                "identifier": "structField",
                "newPage": false,
                "searchKey": "reflect_test.structField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type structField struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structField struct {\n\tname  string\n\tindex []int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFG",
              "documentation": {
                "identifier": "SFG",
                "newPage": false,
                "searchKey": "reflect_test.SFG",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFG struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFG struct {\n\tF int\n\tG int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFG1",
              "documentation": {
                "identifier": "SFG1",
                "newPage": false,
                "searchKey": "reflect_test.SFG1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFG1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFG1 struct {\n\tSFG\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFG2",
              "documentation": {
                "identifier": "SFG2",
                "newPage": false,
                "searchKey": "reflect_test.SFG2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFG2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFG2 struct {\n\tSFG1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFGH",
              "documentation": {
                "identifier": "SFGH",
                "newPage": false,
                "searchKey": "reflect_test.SFGH",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFGH struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFGH struct {\n\tF int\n\tG int\n\tH int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFGH1",
              "documentation": {
                "identifier": "SFGH1",
                "newPage": false,
                "searchKey": "reflect_test.SFGH1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFGH1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFGH1 struct {\n\tSFGH\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFGH2",
              "documentation": {
                "identifier": "SFGH2",
                "newPage": false,
                "searchKey": "reflect_test.SFGH2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFGH2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFGH2 struct {\n\tSFGH1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SFGH3",
              "documentation": {
                "identifier": "SFGH3",
                "newPage": false,
                "searchKey": "reflect_test.SFGH3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SFGH3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SFGH3 struct {\n\tSFGH2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SF",
              "documentation": {
                "identifier": "SF",
                "newPage": false,
                "searchKey": "reflect_test.SF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SF struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SF struct {\n\tF int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SF1",
              "documentation": {
                "identifier": "SF1",
                "newPage": false,
                "searchKey": "reflect_test.SF1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SF1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SF1 struct {\n\tSF\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SF2",
              "documentation": {
                "identifier": "SF2",
                "newPage": false,
                "searchKey": "reflect_test.SF2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SF2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SF2 struct {\n\tSF1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SG",
              "documentation": {
                "identifier": "SG",
                "newPage": false,
                "searchKey": "reflect_test.SG",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SG struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SG struct {\n\tG int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#SG1",
              "documentation": {
                "identifier": "SG1",
                "newPage": false,
                "searchKey": "reflect_test.SG1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SG1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SG1 struct {\n\tSG\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#sFG",
              "documentation": {
                "identifier": "sFG",
                "newPage": false,
                "searchKey": "reflect_test.sFG",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sFG struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sFG struct {\n\tF int\n\tG int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#RS1",
              "documentation": {
                "identifier": "RS1",
                "newPage": false,
                "searchKey": "reflect_test.RS1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RS1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RS1 struct {\n\ti int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#RS2",
              "documentation": {
                "identifier": "RS2",
                "newPage": false,
                "searchKey": "reflect_test.RS2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RS2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RS2 struct {\n\tRS1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#RS3",
              "documentation": {
                "identifier": "RS3",
                "newPage": false,
                "searchKey": "reflect_test.RS3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RS3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RS3 struct {\n\tRS2\n\tRS1\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#M",
              "documentation": {
                "identifier": "M",
                "newPage": false,
                "searchKey": "reflect_test.M",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type M map[string]interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype M map[string]interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Rec1",
              "documentation": {
                "identifier": "Rec1",
                "newPage": false,
                "searchKey": "reflect_test.Rec1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Rec1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Rec1 struct {\n\t*Rec2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Rec2",
              "documentation": {
                "identifier": "Rec2",
                "newPage": false,
                "searchKey": "reflect_test.Rec2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Rec2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Rec2 struct {\n\tF string\n\t*Rec1\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/reflect_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/reflect_test#TestBool",
              "documentation": {
                "identifier": "TestBool",
                "newPage": false,
                "searchKey": "reflect_test.TestBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBool(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#assert",
              "documentation": {
                "identifier": "assert",
                "newPage": false,
                "searchKey": "reflect_test.assert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func assert(t *testing.T, s, want string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assert(t *testing.T, s, want string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#testType",
              "documentation": {
                "identifier": "testType",
                "newPage": false,
                "searchKey": "reflect_test.testType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testType(t *testing.T, i int, typ Type, want string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testType(t *testing.T, i int, typ Type, want string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTypes",
              "documentation": {
                "identifier": "TestTypes",
                "newPage": false,
                "searchKey": "reflect_test.TestTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSet",
              "documentation": {
                "identifier": "TestSet",
                "newPage": false,
                "searchKey": "reflect_test.TestSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSetValue",
              "documentation": {
                "identifier": "TestSetValue",
                "newPage": false,
                "searchKey": "reflect_test.TestSetValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCanSetField",
              "documentation": {
                "identifier": "TestCanSetField",
                "newPage": false,
                "searchKey": "reflect_test.TestCanSetField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCanSetField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCanSetField(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestValueToString",
              "documentation": {
                "identifier": "TestValueToString",
                "newPage": false,
                "searchKey": "reflect_test.TestValueToString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueToString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueToString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayElemSet",
              "documentation": {
                "identifier": "TestArrayElemSet",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayElemSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayElemSet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayElemSet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestPtrPointTo",
              "documentation": {
                "identifier": "TestPtrPointTo",
                "newPage": false,
                "searchKey": "reflect_test.TestPtrPointTo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrPointTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrPointTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestPtrSetNil",
              "documentation": {
                "identifier": "TestPtrSetNil",
                "newPage": false,
                "searchKey": "reflect_test.TestPtrSetNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrSetNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrSetNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapSetNil",
              "documentation": {
                "identifier": "TestMapSetNil",
                "newPage": false,
                "searchKey": "reflect_test.TestMapSetNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapSetNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapSetNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAll",
              "documentation": {
                "identifier": "TestAll",
                "newPage": false,
                "searchKey": "reflect_test.TestAll",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAll(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAll(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestInterfaceGet",
              "documentation": {
                "identifier": "TestInterfaceGet",
                "newPage": false,
                "searchKey": "reflect_test.TestInterfaceGet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceGet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceGet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestInterfaceValue",
              "documentation": {
                "identifier": "TestInterfaceValue",
                "newPage": false,
                "searchKey": "reflect_test.TestInterfaceValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFunctionValue",
              "documentation": {
                "identifier": "TestFunctionValue",
                "newPage": false,
                "searchKey": "reflect_test.TestFunctionValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFunctionValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFunctionValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#sameInts",
              "documentation": {
                "identifier": "sameInts",
                "newPage": false,
                "searchKey": "reflect_test.sameInts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sameInts(x, y []int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sameInts(x, y []int) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAppend",
              "documentation": {
                "identifier": "TestAppend",
                "newPage": false,
                "searchKey": "reflect_test.TestAppend",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAppend(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAppend(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCopy",
              "documentation": {
                "identifier": "TestCopy",
                "newPage": false,
                "searchKey": "reflect_test.TestCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCopyString",
              "documentation": {
                "identifier": "TestCopyString",
                "newPage": false,
                "searchKey": "reflect_test.TestCopyString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCopyString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCopyString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCopyArray",
              "documentation": {
                "identifier": "TestCopyArray",
                "newPage": false,
                "searchKey": "reflect_test.TestCopyArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCopyArray(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCopyArray(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestBigUnnamedStruct",
              "documentation": {
                "identifier": "TestBigUnnamedStruct",
                "newPage": false,
                "searchKey": "reflect_test.TestBigUnnamedStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBigUnnamedStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBigUnnamedStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestBigStruct",
              "documentation": {
                "identifier": "TestBigStruct",
                "newPage": false,
                "searchKey": "reflect_test.TestBigStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBigStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBigStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "reflect_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestDeepEqual",
              "documentation": {
                "identifier": "TestDeepEqual",
                "newPage": false,
                "searchKey": "reflect_test.TestDeepEqual",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeepEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeepEqual(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTypeOf",
              "documentation": {
                "identifier": "TestTypeOf",
                "newPage": false,
                "searchKey": "reflect_test.TestTypeOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestDeepEqualRecursiveStruct",
              "documentation": {
                "identifier": "TestDeepEqualRecursiveStruct",
                "newPage": false,
                "searchKey": "reflect_test.TestDeepEqualRecursiveStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeepEqualRecursiveStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeepEqualRecursiveStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestDeepEqualComplexStruct",
              "documentation": {
                "identifier": "TestDeepEqualComplexStruct",
                "newPage": false,
                "searchKey": "reflect_test.TestDeepEqualComplexStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeepEqualComplexStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeepEqualComplexStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestDeepEqualComplexStructInequality",
              "documentation": {
                "identifier": "TestDeepEqualComplexStructInequality",
                "newPage": false,
                "searchKey": "reflect_test.TestDeepEqualComplexStructInequality",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeepEqualComplexStructInequality(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeepEqualComplexStructInequality(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestDeepEqualUnexportedMap",
              "documentation": {
                "identifier": "TestDeepEqualUnexportedMap",
                "newPage": false,
                "searchKey": "reflect_test.TestDeepEqualUnexportedMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeepEqualUnexportedMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeepEqualUnexportedMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#check2ndField",
              "documentation": {
                "identifier": "check2ndField",
                "newPage": false,
                "searchKey": "reflect_test.check2ndField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func check2ndField(x interface{}, offs uintptr, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc check2ndField(x interface{}, offs uintptr, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAlignment",
              "documentation": {
                "identifier": "TestAlignment",
                "newPage": false,
                "searchKey": "reflect_test.TestAlignment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlignment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlignment(t *testing.T)\n```\n\nCheck that structure alignment & offsets viewed through reflect agree with those from the compiler itself. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#Nil",
              "documentation": {
                "identifier": "Nil",
                "newPage": false,
                "searchKey": "reflect_test.Nil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Nil(a interface{}, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Nil(a interface{}, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#NotNil",
              "documentation": {
                "identifier": "NotNil",
                "newPage": false,
                "searchKey": "reflect_test.NotNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func NotNil(a interface{}, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NotNil(a interface{}, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestIsNil",
              "documentation": {
                "identifier": "TestIsNil",
                "newPage": false,
                "searchKey": "reflect_test.TestIsNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestIsZero",
              "documentation": {
                "identifier": "TestIsZero",
                "newPage": false,
                "searchKey": "reflect_test.TestIsZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestInterfaceExtraction",
              "documentation": {
                "identifier": "TestInterfaceExtraction",
                "newPage": false,
                "searchKey": "reflect_test.TestInterfaceExtraction",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceExtraction(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceExtraction(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestNilPtrValueSub",
              "documentation": {
                "identifier": "TestNilPtrValueSub",
                "newPage": false,
                "searchKey": "reflect_test.TestNilPtrValueSub",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilPtrValueSub(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilPtrValueSub(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMap",
              "documentation": {
                "identifier": "TestMap",
                "newPage": false,
                "searchKey": "reflect_test.TestMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestNilMap",
              "documentation": {
                "identifier": "TestNilMap",
                "newPage": false,
                "searchKey": "reflect_test.TestNilMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestChan",
              "documentation": {
                "identifier": "TestChan",
                "newPage": false,
                "searchKey": "reflect_test.TestChan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChan(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSelect",
              "documentation": {
                "identifier": "TestSelect",
                "newPage": false,
                "searchKey": "reflect_test.TestSelect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelect(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSelectMaxCases",
              "documentation": {
                "identifier": "TestSelectMaxCases",
                "newPage": false,
                "searchKey": "reflect_test.TestSelectMaxCases",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectMaxCases(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectMaxCases(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSelectNop",
              "documentation": {
                "identifier": "TestSelectNop",
                "newPage": false,
                "searchKey": "reflect_test.TestSelectNop",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectNop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectNop(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkSelect",
              "documentation": {
                "identifier": "BenchmarkSelect",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkSelect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSelect(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSelect(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#selectWatcher",
              "documentation": {
                "identifier": "selectWatcher",
                "newPage": false,
                "searchKey": "reflect_test.selectWatcher",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func selectWatcher()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc selectWatcher()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#runSelect",
              "documentation": {
                "identifier": "runSelect",
                "newPage": false,
                "searchKey": "reflect_test.runSelect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runSelect(cases []SelectCase, info []caseInfo) (chosen int, recv Value, recvOK bool, panicErr interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runSelect(cases []SelectCase, info []caseInfo) (chosen int, recv Value, recvOK bool, panicErr interface{})\n```\n\nrunSelect runs a single select test. It returns the values returned by Select but also returns a panic value if the Select panics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fmtSelect",
              "documentation": {
                "identifier": "fmtSelect",
                "newPage": false,
                "searchKey": "reflect_test.fmtSelect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fmtSelect(info []caseInfo) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fmtSelect(info []caseInfo) string\n```\n\nfmtSelect formats the information about a single select test. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFunc",
              "documentation": {
                "identifier": "TestFunc",
                "newPage": false,
                "searchKey": "reflect_test.TestFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCallConvert",
              "documentation": {
                "identifier": "TestCallConvert",
                "newPage": false,
                "searchKey": "reflect_test.TestCallConvert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallConvert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallConvert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#takesEmpty",
              "documentation": {
                "identifier": "takesEmpty",
                "newPage": false,
                "searchKey": "reflect_test.takesEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func takesEmpty(e emptyStruct)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc takesEmpty(e emptyStruct)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#takesNonEmpty",
              "documentation": {
                "identifier": "takesNonEmpty",
                "newPage": false,
                "searchKey": "reflect_test.takesNonEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func takesNonEmpty(n nonEmptyStruct) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc takesNonEmpty(n nonEmptyStruct) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCallWithStruct",
              "documentation": {
                "identifier": "TestCallWithStruct",
                "newPage": false,
                "searchKey": "reflect_test.TestCallWithStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallWithStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallWithStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCallReturnsEmpty",
              "documentation": {
                "identifier": "TestCallReturnsEmpty",
                "newPage": false,
                "searchKey": "reflect_test.TestCallReturnsEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallReturnsEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallReturnsEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkCall",
              "documentation": {
                "identifier": "BenchmarkCall",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCall(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkCallMethod",
              "documentation": {
                "identifier": "BenchmarkCallMethod",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkCallMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallMethod(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallMethod(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkCallArgCopy",
              "documentation": {
                "identifier": "BenchmarkCallArgCopy",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkCallArgCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallArgCopy(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallArgCopy(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMakeFunc",
              "documentation": {
                "identifier": "TestMakeFunc",
                "newPage": false,
                "searchKey": "reflect_test.TestMakeFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMakeFuncInterface",
              "documentation": {
                "identifier": "TestMakeFuncInterface",
                "newPage": false,
                "searchKey": "reflect_test.TestMakeFuncInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeFuncInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeFuncInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMakeFuncVariadic",
              "documentation": {
                "identifier": "TestMakeFuncVariadic",
                "newPage": false,
                "searchKey": "reflect_test.TestMakeFuncVariadic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeFuncVariadic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeFuncVariadic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMakeFuncValidReturnAssignments",
              "documentation": {
                "identifier": "TestMakeFuncValidReturnAssignments",
                "newPage": false,
                "searchKey": "reflect_test.TestMakeFuncValidReturnAssignments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeFuncValidReturnAssignments(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeFuncValidReturnAssignments(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMakeFuncInvalidReturnAssignments",
              "documentation": {
                "identifier": "TestMakeFuncInvalidReturnAssignments",
                "newPage": false,
                "searchKey": "reflect_test.TestMakeFuncInvalidReturnAssignments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeFuncInvalidReturnAssignments(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeFuncInvalidReturnAssignments(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMethod",
              "documentation": {
                "identifier": "TestMethod",
                "newPage": false,
                "searchKey": "reflect_test.TestMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethod(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMethodValue",
              "documentation": {
                "identifier": "TestMethodValue",
                "newPage": false,
                "searchKey": "reflect_test.TestMethodValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestVariadicMethodValue",
              "documentation": {
                "identifier": "TestVariadicMethodValue",
                "newPage": false,
                "searchKey": "reflect_test.TestVariadicMethodValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariadicMethodValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariadicMethodValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestDirectIfaceMethod",
              "documentation": {
                "identifier": "TestDirectIfaceMethod",
                "newPage": false,
                "searchKey": "reflect_test.TestDirectIfaceMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDirectIfaceMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDirectIfaceMethod(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMethod5",
              "documentation": {
                "identifier": "TestMethod5",
                "newPage": false,
                "searchKey": "reflect_test.TestMethod5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethod5(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethod5(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestInterfaceSet",
              "documentation": {
                "identifier": "TestInterfaceSet",
                "newPage": false,
                "searchKey": "reflect_test.TestInterfaceSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceSet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceSet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAnonymousFields",
              "documentation": {
                "identifier": "TestAnonymousFields",
                "newPage": false,
                "searchKey": "reflect_test.TestAnonymousFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAnonymousFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAnonymousFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFieldByIndex",
              "documentation": {
                "identifier": "TestFieldByIndex",
                "newPage": false,
                "searchKey": "reflect_test.TestFieldByIndex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFieldByIndex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFieldByIndex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFieldByName",
              "documentation": {
                "identifier": "TestFieldByName",
                "newPage": false,
                "searchKey": "reflect_test.TestFieldByName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFieldByName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFieldByName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImportPath",
              "documentation": {
                "identifier": "TestImportPath",
                "newPage": false,
                "searchKey": "reflect_test.TestImportPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImportPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImportPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFieldPkgPath",
              "documentation": {
                "identifier": "TestFieldPkgPath",
                "newPage": false,
                "searchKey": "reflect_test.TestFieldPkgPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFieldPkgPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFieldPkgPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMethodPkgPath",
              "documentation": {
                "identifier": "TestMethodPkgPath",
                "newPage": false,
                "searchKey": "reflect_test.TestMethodPkgPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodPkgPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodPkgPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestVariadicType",
              "documentation": {
                "identifier": "TestVariadicType",
                "newPage": false,
                "searchKey": "reflect_test.TestVariadicType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariadicType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariadicType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestNestedMethods",
              "documentation": {
                "identifier": "TestNestedMethods",
                "newPage": false,
                "searchKey": "reflect_test.TestNestedMethods",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNestedMethods(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNestedMethods(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestUnexportedMethods",
              "documentation": {
                "identifier": "TestUnexportedMethods",
                "newPage": false,
                "searchKey": "reflect_test.TestUnexportedMethods",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnexportedMethods(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnexportedMethods(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestEmbeddedMethods",
              "documentation": {
                "identifier": "TestEmbeddedMethods",
                "newPage": false,
                "searchKey": "reflect_test.TestEmbeddedMethods",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmbeddedMethods(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmbeddedMethods(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestNumMethodOnDDD",
              "documentation": {
                "identifier": "TestNumMethodOnDDD",
                "newPage": false,
                "searchKey": "reflect_test.TestNumMethodOnDDD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNumMethodOnDDD(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNumMethodOnDDD(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestPtrTo",
              "documentation": {
                "identifier": "TestPtrTo",
                "newPage": false,
                "searchKey": "reflect_test.TestPtrTo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestPtrToGC",
              "documentation": {
                "identifier": "TestPtrToGC",
                "newPage": false,
                "searchKey": "reflect_test.TestPtrToGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrToGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrToGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkPtrTo",
              "documentation": {
                "identifier": "BenchmarkPtrTo",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkPtrTo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPtrTo(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPtrTo(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAddr",
              "documentation": {
                "identifier": "TestAddr",
                "newPage": false,
                "searchKey": "reflect_test.TestAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#noAlloc",
              "documentation": {
                "identifier": "noAlloc",
                "newPage": false,
                "searchKey": "reflect_test.noAlloc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func noAlloc(t *testing.T, n int, f func(int))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc noAlloc(t *testing.T, n int, f func(int))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAllocations",
              "documentation": {
                "identifier": "TestAllocations",
                "newPage": false,
                "searchKey": "reflect_test.TestAllocations",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAllocations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAllocations(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSmallNegativeInt",
              "documentation": {
                "identifier": "TestSmallNegativeInt",
                "newPage": false,
                "searchKey": "reflect_test.TestSmallNegativeInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmallNegativeInt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmallNegativeInt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestIndex",
              "documentation": {
                "identifier": "TestIndex",
                "newPage": false,
                "searchKey": "reflect_test.TestIndex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSlice",
              "documentation": {
                "identifier": "TestSlice",
                "newPage": false,
                "searchKey": "reflect_test.TestSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSlice3",
              "documentation": {
                "identifier": "TestSlice3",
                "newPage": false,
                "searchKey": "reflect_test.TestSlice3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSlice3(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSlice3(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSetLenCap",
              "documentation": {
                "identifier": "TestSetLenCap",
                "newPage": false,
                "searchKey": "reflect_test.TestSetLenCap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetLenCap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetLenCap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestVariadic",
              "documentation": {
                "identifier": "TestVariadic",
                "newPage": false,
                "searchKey": "reflect_test.TestVariadic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariadic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariadic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFuncArg",
              "documentation": {
                "identifier": "TestFuncArg",
                "newPage": false,
                "searchKey": "reflect_test.TestFuncArg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuncArg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuncArg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructArg",
              "documentation": {
                "identifier": "TestStructArg",
                "newPage": false,
                "searchKey": "reflect_test.TestStructArg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructArg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructArg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTagGet",
              "documentation": {
                "identifier": "TestTagGet",
                "newPage": false,
                "searchKey": "reflect_test.TestTagGet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTagGet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTagGet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestBytes",
              "documentation": {
                "identifier": "TestBytes",
                "newPage": false,
                "searchKey": "reflect_test.TestBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSetBytes",
              "documentation": {
                "identifier": "TestSetBytes",
                "newPage": false,
                "searchKey": "reflect_test.TestSetBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestUnexported",
              "documentation": {
                "identifier": "TestUnexported",
                "newPage": false,
                "searchKey": "reflect_test.TestUnexported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnexported(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnexported(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSetPanic",
              "documentation": {
                "identifier": "TestSetPanic",
                "newPage": false,
                "searchKey": "reflect_test.TestSetPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCallPanic",
              "documentation": {
                "identifier": "TestCallPanic",
                "newPage": false,
                "searchKey": "reflect_test.TestCallPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#shouldPanic",
              "documentation": {
                "identifier": "shouldPanic",
                "newPage": false,
                "searchKey": "reflect_test.shouldPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func shouldPanic(expect string, f func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shouldPanic(expect string, f func())\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#isNonNil",
              "documentation": {
                "identifier": "isNonNil",
                "newPage": false,
                "searchKey": "reflect_test.isNonNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isNonNil(x interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isNonNil(x interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#isValid",
              "documentation": {
                "identifier": "isValid",
                "newPage": false,
                "searchKey": "reflect_test.isValid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValid(v Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValid(v Value)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAlias",
              "documentation": {
                "identifier": "TestAlias",
                "newPage": false,
                "searchKey": "reflect_test.TestAlias",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlias(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlias(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#EmptyInterfaceV",
              "documentation": {
                "identifier": "EmptyInterfaceV",
                "newPage": false,
                "searchKey": "reflect_test.EmptyInterfaceV",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func EmptyInterfaceV(x interface{}) Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc EmptyInterfaceV(x interface{}) Value\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ReaderV",
              "documentation": {
                "identifier": "ReaderV",
                "newPage": false,
                "searchKey": "reflect_test.ReaderV",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReaderV(x io.Reader) Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReaderV(x io.Reader) Value\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ReadWriterV",
              "documentation": {
                "identifier": "ReadWriterV",
                "newPage": false,
                "searchKey": "reflect_test.ReadWriterV",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReadWriterV(x io.ReadWriter) Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReadWriterV(x io.ReadWriter) Value\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestConvert",
              "documentation": {
                "identifier": "TestConvert",
                "newPage": false,
                "searchKey": "reflect_test.TestConvert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestConvertPanic",
              "documentation": {
                "identifier": "TestConvertPanic",
                "newPage": false,
                "searchKey": "reflect_test.TestConvertPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvertPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvertPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestConvertNaNs",
              "documentation": {
                "identifier": "TestConvertNaNs",
                "newPage": false,
                "searchKey": "reflect_test.TestConvertNaNs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvertNaNs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvertNaNs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestComparable",
              "documentation": {
                "identifier": "TestComparable",
                "newPage": false,
                "searchKey": "reflect_test.TestComparable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestComparable(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestComparable(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestOverflow",
              "documentation": {
                "identifier": "TestOverflow",
                "newPage": false,
                "searchKey": "reflect_test.TestOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#checkSameType",
              "documentation": {
                "identifier": "checkSameType",
                "newPage": false,
                "searchKey": "reflect_test.checkSameType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkSameType(t *testing.T, x Type, y interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkSameType(t *testing.T, x Type, y interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayOf",
              "documentation": {
                "identifier": "TestArrayOf",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayOfGC",
              "documentation": {
                "identifier": "TestArrayOfGC",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayOfGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayOfGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayOfGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayOfAlg",
              "documentation": {
                "identifier": "TestArrayOfAlg",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayOfAlg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayOfAlg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayOfAlg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayOfGenericAlg",
              "documentation": {
                "identifier": "TestArrayOfGenericAlg",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayOfGenericAlg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayOfGenericAlg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayOfGenericAlg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayOfDirectIface",
              "documentation": {
                "identifier": "TestArrayOfDirectIface",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayOfDirectIface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayOfDirectIface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayOfDirectIface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestArrayOfPanicOnNegativeLength",
              "documentation": {
                "identifier": "TestArrayOfPanicOnNegativeLength",
                "newPage": false,
                "searchKey": "reflect_test.TestArrayOfPanicOnNegativeLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayOfPanicOnNegativeLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayOfPanicOnNegativeLength(t *testing.T)\n```\n\nEnsure passing in negative lengths panics. See [https://golang.org/issue/43603](https://golang.org/issue/43603) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSliceOf",
              "documentation": {
                "identifier": "TestSliceOf",
                "newPage": false,
                "searchKey": "reflect_test.TestSliceOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSliceOverflow",
              "documentation": {
                "identifier": "TestSliceOverflow",
                "newPage": false,
                "searchKey": "reflect_test.TestSliceOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSliceOfGC",
              "documentation": {
                "identifier": "TestSliceOfGC",
                "newPage": false,
                "searchKey": "reflect_test.TestSliceOfGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceOfGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceOfGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfFieldName",
              "documentation": {
                "identifier": "TestStructOfFieldName",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfFieldName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfFieldName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfFieldName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOf",
              "documentation": {
                "identifier": "TestStructOf",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfExportRules",
              "documentation": {
                "identifier": "TestStructOfExportRules",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfExportRules",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfExportRules(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfExportRules(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfGC",
              "documentation": {
                "identifier": "TestStructOfGC",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfAlg",
              "documentation": {
                "identifier": "TestStructOfAlg",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfAlg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfAlg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfAlg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfGenericAlg",
              "documentation": {
                "identifier": "TestStructOfGenericAlg",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfGenericAlg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfGenericAlg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfGenericAlg(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfDirectIface",
              "documentation": {
                "identifier": "TestStructOfDirectIface",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfDirectIface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfDirectIface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfDirectIface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfWithInterface",
              "documentation": {
                "identifier": "TestStructOfWithInterface",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfWithInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfWithInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfWithInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfTooManyFields",
              "documentation": {
                "identifier": "TestStructOfTooManyFields",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfTooManyFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfTooManyFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfTooManyFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestStructOfDifferentPkgPath",
              "documentation": {
                "identifier": "TestStructOfDifferentPkgPath",
                "newPage": false,
                "searchKey": "reflect_test.TestStructOfDifferentPkgPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructOfDifferentPkgPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructOfDifferentPkgPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestChanOf",
              "documentation": {
                "identifier": "TestChanOf",
                "newPage": false,
                "searchKey": "reflect_test.TestChanOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestChanOfDir",
              "documentation": {
                "identifier": "TestChanOfDir",
                "newPage": false,
                "searchKey": "reflect_test.TestChanOfDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanOfDir(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanOfDir(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestChanOfGC",
              "documentation": {
                "identifier": "TestChanOfGC",
                "newPage": false,
                "searchKey": "reflect_test.TestChanOfGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanOfGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanOfGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapOf",
              "documentation": {
                "identifier": "TestMapOf",
                "newPage": false,
                "searchKey": "reflect_test.TestMapOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapOfGCKeys",
              "documentation": {
                "identifier": "TestMapOfGCKeys",
                "newPage": false,
                "searchKey": "reflect_test.TestMapOfGCKeys",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapOfGCKeys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapOfGCKeys(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapOfGCValues",
              "documentation": {
                "identifier": "TestMapOfGCValues",
                "newPage": false,
                "searchKey": "reflect_test.TestMapOfGCValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapOfGCValues(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapOfGCValues(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTypelinksSorted",
              "documentation": {
                "identifier": "TestTypelinksSorted",
                "newPage": false,
                "searchKey": "reflect_test.TestTypelinksSorted",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypelinksSorted(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypelinksSorted(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFuncOf",
              "documentation": {
                "identifier": "TestFuncOf",
                "newPage": false,
                "searchKey": "reflect_test.TestFuncOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuncOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuncOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkFieldByName1",
              "documentation": {
                "identifier": "BenchmarkFieldByName1",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkFieldByName1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFieldByName1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFieldByName1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkFieldByName2",
              "documentation": {
                "identifier": "BenchmarkFieldByName2",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkFieldByName2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFieldByName2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFieldByName2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestEmbed",
              "documentation": {
                "identifier": "TestEmbed",
                "newPage": false,
                "searchKey": "reflect_test.TestEmbed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmbed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmbed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkFieldByName3",
              "documentation": {
                "identifier": "BenchmarkFieldByName3",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkFieldByName3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFieldByName3(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFieldByName3(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkInterfaceBig",
              "documentation": {
                "identifier": "BenchmarkInterfaceBig",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkInterfaceBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkInterfaceBig(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkInterfaceBig(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAllocsInterfaceBig",
              "documentation": {
                "identifier": "TestAllocsInterfaceBig",
                "newPage": false,
                "searchKey": "reflect_test.TestAllocsInterfaceBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAllocsInterfaceBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAllocsInterfaceBig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkInterfaceSmall",
              "documentation": {
                "identifier": "BenchmarkInterfaceSmall",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkInterfaceSmall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkInterfaceSmall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkInterfaceSmall(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAllocsInterfaceSmall",
              "documentation": {
                "identifier": "TestAllocsInterfaceSmall",
                "newPage": false,
                "searchKey": "reflect_test.TestAllocsInterfaceSmall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAllocsInterfaceSmall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAllocsInterfaceSmall(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#GCFunc",
              "documentation": {
                "identifier": "GCFunc",
                "newPage": false,
                "searchKey": "reflect_test.GCFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GCFunc(args []Value) []Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GCFunc(args []Value) []Value\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestReflectFuncTraceback",
              "documentation": {
                "identifier": "TestReflectFuncTraceback",
                "newPage": false,
                "searchKey": "reflect_test.TestReflectFuncTraceback",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReflectFuncTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReflectFuncTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestReflectMethodTraceback",
              "documentation": {
                "identifier": "TestReflectMethodTraceback",
                "newPage": false,
                "searchKey": "reflect_test.TestReflectMethodTraceback",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReflectMethodTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReflectMethodTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSmallZero",
              "documentation": {
                "identifier": "TestSmallZero",
                "newPage": false,
                "searchKey": "reflect_test.TestSmallZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmallZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmallZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestBigZero",
              "documentation": {
                "identifier": "TestBigZero",
                "newPage": false,
                "searchKey": "reflect_test.TestBigZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBigZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBigZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestZeroSet",
              "documentation": {
                "identifier": "TestZeroSet",
                "newPage": false,
                "searchKey": "reflect_test.TestZeroSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroSet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroSet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFieldByIndexNil",
              "documentation": {
                "identifier": "TestFieldByIndexNil",
                "newPage": false,
                "searchKey": "reflect_test.TestFieldByIndexNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFieldByIndexNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFieldByIndexNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCallMethodJump",
              "documentation": {
                "identifier": "TestCallMethodJump",
                "newPage": false,
                "searchKey": "reflect_test.TestCallMethodJump",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallMethodJump(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallMethodJump(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMakeFuncStackCopy",
              "documentation": {
                "identifier": "TestMakeFuncStackCopy",
                "newPage": false,
                "searchKey": "reflect_test.TestMakeFuncStackCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMakeFuncStackCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMakeFuncStackCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#useStack",
              "documentation": {
                "identifier": "useStack",
                "newPage": false,
                "searchKey": "reflect_test.useStack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func useStack(n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc useStack(n int)\n```\n\nuse about n KB of stack \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestValueString",
              "documentation": {
                "identifier": "TestValueString",
                "newPage": false,
                "searchKey": "reflect_test.TestValueString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValueString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValueString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestInvalid",
              "documentation": {
                "identifier": "TestInvalid",
                "newPage": false,
                "searchKey": "reflect_test.TestInvalid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestLargeGCProg",
              "documentation": {
                "identifier": "TestLargeGCProg",
                "newPage": false,
                "searchKey": "reflect_test.TestLargeGCProg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeGCProg(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeGCProg(t *testing.T)\n```\n\nIssue 8917. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#fieldIndexRecover",
              "documentation": {
                "identifier": "fieldIndexRecover",
                "newPage": false,
                "searchKey": "reflect_test.fieldIndexRecover",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fieldIndexRecover(t Type, i int) (recovered interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fieldIndexRecover(t Type, i int) (recovered interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTypeFieldOutOfRangePanic",
              "documentation": {
                "identifier": "TestTypeFieldOutOfRangePanic",
                "newPage": false,
                "searchKey": "reflect_test.TestTypeFieldOutOfRangePanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeFieldOutOfRangePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeFieldOutOfRangePanic(t *testing.T)\n```\n\nIssue 15046. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestCallGC",
              "documentation": {
                "identifier": "TestCallGC",
                "newPage": false,
                "searchKey": "reflect_test.TestCallGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallGC(t *testing.T)\n```\n\nIssue 9179. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestKeepFuncLive",
              "documentation": {
                "identifier": "TestKeepFuncLive",
                "newPage": false,
                "searchKey": "reflect_test.TestKeepFuncLive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestKeepFuncLive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestKeepFuncLive(t *testing.T)\n```\n\nIssue 18635 (function version). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMethodByNameUnExportedFirst",
              "documentation": {
                "identifier": "TestMethodByNameUnExportedFirst",
                "newPage": false,
                "searchKey": "reflect_test.TestMethodByNameUnExportedFirst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMethodByNameUnExportedFirst(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMethodByNameUnExportedFirst(t *testing.T)\n```\n\nIssue 21177 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestKeepMethodLive",
              "documentation": {
                "identifier": "TestKeepMethodLive",
                "newPage": false,
                "searchKey": "reflect_test.TestKeepMethodLive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestKeepMethodLive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestKeepMethodLive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#clobber",
              "documentation": {
                "identifier": "clobber",
                "newPage": false,
                "searchKey": "reflect_test.clobber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func clobber()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc clobber()\n```\n\nclobber tries to clobber unreachable memory. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFuncLayout",
              "documentation": {
                "identifier": "TestFuncLayout",
                "newPage": false,
                "searchKey": "reflect_test.TestFuncLayout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuncLayout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuncLayout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#verifyGCBits",
              "documentation": {
                "identifier": "verifyGCBits",
                "newPage": false,
                "searchKey": "reflect_test.verifyGCBits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyGCBits(t *testing.T, typ Type, bits []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyGCBits(t *testing.T, typ Type, bits []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#verifyGCBitsSlice",
              "documentation": {
                "identifier": "verifyGCBitsSlice",
                "newPage": false,
                "searchKey": "reflect_test.verifyGCBitsSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyGCBitsSlice(t *testing.T, typ Type, cap int, bits []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyGCBitsSlice(t *testing.T, typ Type, cap int, bits []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestGCBits",
              "documentation": {
                "identifier": "TestGCBits",
                "newPage": false,
                "searchKey": "reflect_test.TestGCBits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCBits(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCBits(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#rep",
              "documentation": {
                "identifier": "rep",
                "newPage": false,
                "searchKey": "reflect_test.rep",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func rep(n int, b []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rep(n int, b []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#join",
              "documentation": {
                "identifier": "join",
                "newPage": false,
                "searchKey": "reflect_test.join",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func join(b ...[]byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc join(b ...[]byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#lit",
              "documentation": {
                "identifier": "lit",
                "newPage": false,
                "searchKey": "reflect_test.lit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func lit(x ...byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lit(x ...byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTypeOfTypeOf",
              "documentation": {
                "identifier": "TestTypeOfTypeOf",
                "newPage": false,
                "searchKey": "reflect_test.TestTypeOfTypeOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeOfTypeOf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeOfTypeOf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestPtrToMethods",
              "documentation": {
                "identifier": "TestPtrToMethods",
                "newPage": false,
                "searchKey": "reflect_test.TestPtrToMethods",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPtrToMethods(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPtrToMethods(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapAlloc",
              "documentation": {
                "identifier": "TestMapAlloc",
                "newPage": false,
                "searchKey": "reflect_test.TestMapAlloc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapAlloc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestChanAlloc",
              "documentation": {
                "identifier": "TestChanAlloc",
                "newPage": false,
                "searchKey": "reflect_test.TestChanAlloc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanAlloc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestNames",
              "documentation": {
                "identifier": "TestNames",
                "newPage": false,
                "searchKey": "reflect_test.TestNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestExported",
              "documentation": {
                "identifier": "TestExported",
                "newPage": false,
                "searchKey": "reflect_test.TestExported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExported(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExported(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestTypeStrings",
              "documentation": {
                "identifier": "TestTypeStrings",
                "newPage": false,
                "searchKey": "reflect_test.TestTypeStrings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeStrings(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeStrings(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestOffsetLock",
              "documentation": {
                "identifier": "TestOffsetLock",
                "newPage": false,
                "searchKey": "reflect_test.TestOffsetLock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOffsetLock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOffsetLock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#BenchmarkNew",
              "documentation": {
                "identifier": "BenchmarkNew",
                "newPage": false,
                "searchKey": "reflect_test.BenchmarkNew",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNew(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNew(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestSwapper",
              "documentation": {
                "identifier": "TestSwapper",
                "newPage": false,
                "searchKey": "reflect_test.TestSwapper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSwapper(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSwapper(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestUnaddressableField",
              "documentation": {
                "identifier": "TestUnaddressableField",
                "newPage": false,
                "searchKey": "reflect_test.TestUnaddressableField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnaddressableField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnaddressableField(t *testing.T)\n```\n\nTestUnaddressableField tests that the reflect package will not allow a type from another package to be used as a named type with an unexported field. \n\nThis ensures that unexported fields cannot be modified by other packages. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAliasNames",
              "documentation": {
                "identifier": "TestAliasNames",
                "newPage": false,
                "searchKey": "reflect_test.TestAliasNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAliasNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAliasNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestIssue22031",
              "documentation": {
                "identifier": "TestIssue22031",
                "newPage": false,
                "searchKey": "reflect_test.TestIssue22031",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue22031(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue22031(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestIssue22073",
              "documentation": {
                "identifier": "TestIssue22073",
                "newPage": false,
                "searchKey": "reflect_test.TestIssue22073",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue22073(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue22073(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapIterNonEmptyMap",
              "documentation": {
                "identifier": "TestMapIterNonEmptyMap",
                "newPage": false,
                "searchKey": "reflect_test.TestMapIterNonEmptyMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterNonEmptyMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterNonEmptyMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapIterNilMap",
              "documentation": {
                "identifier": "TestMapIterNilMap",
                "newPage": false,
                "searchKey": "reflect_test.TestMapIterNilMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterNilMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterNilMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapIterSafety",
              "documentation": {
                "identifier": "TestMapIterSafety",
                "newPage": false,
                "searchKey": "reflect_test.TestMapIterSafety",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterSafety(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterSafety(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapIterNext",
              "documentation": {
                "identifier": "TestMapIterNext",
                "newPage": false,
                "searchKey": "reflect_test.TestMapIterNext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterNext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterNext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapIterDelete0",
              "documentation": {
                "identifier": "TestMapIterDelete0",
                "newPage": false,
                "searchKey": "reflect_test.TestMapIterDelete0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterDelete0(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterDelete0(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestMapIterDelete1",
              "documentation": {
                "identifier": "TestMapIterDelete1",
                "newPage": false,
                "searchKey": "reflect_test.TestMapIterDelete1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterDelete1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterDelete1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#iterateToString",
              "documentation": {
                "identifier": "iterateToString",
                "newPage": false,
                "searchKey": "reflect_test.iterateToString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func iterateToString(it *MapIter) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc iterateToString(it *MapIter) string\n```\n\niterateToString returns the set of elements returned by an iterator in readable form. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestConvertibleTo",
              "documentation": {
                "identifier": "TestConvertibleTo",
                "newPage": false,
                "searchKey": "reflect_test.TestConvertibleTo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConvertibleTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConvertibleTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ExampleKind",
              "documentation": {
                "identifier": "ExampleKind",
                "newPage": false,
                "searchKey": "reflect_test.ExampleKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleKind()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleKind()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ExampleMakeFunc",
              "documentation": {
                "identifier": "ExampleMakeFunc",
                "newPage": false,
                "searchKey": "reflect_test.ExampleMakeFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleMakeFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleMakeFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ExampleStructTag",
              "documentation": {
                "identifier": "ExampleStructTag",
                "newPage": false,
                "searchKey": "reflect_test.ExampleStructTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleStructTag()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleStructTag()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ExampleStructTag_Lookup",
              "documentation": {
                "identifier": "ExampleStructTag_Lookup",
                "newPage": false,
                "searchKey": "reflect_test.ExampleStructTag_Lookup",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleStructTag_Lookup()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleStructTag_Lookup()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ExampleTypeOf",
              "documentation": {
                "identifier": "ExampleTypeOf",
                "newPage": false,
                "searchKey": "reflect_test.ExampleTypeOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTypeOf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTypeOf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#ExampleStructOf",
              "documentation": {
                "identifier": "ExampleStructOf",
                "newPage": false,
                "searchKey": "reflect_test.ExampleStructOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleStructOf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleStructOf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImplicitMapConversion",
              "documentation": {
                "identifier": "TestImplicitMapConversion",
                "newPage": false,
                "searchKey": "reflect_test.TestImplicitMapConversion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplicitMapConversion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplicitMapConversion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImplicitSetConversion",
              "documentation": {
                "identifier": "TestImplicitSetConversion",
                "newPage": false,
                "searchKey": "reflect_test.TestImplicitSetConversion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplicitSetConversion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplicitSetConversion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImplicitSendConversion",
              "documentation": {
                "identifier": "TestImplicitSendConversion",
                "newPage": false,
                "searchKey": "reflect_test.TestImplicitSendConversion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplicitSendConversion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplicitSendConversion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImplicitCallConversion",
              "documentation": {
                "identifier": "TestImplicitCallConversion",
                "newPage": false,
                "searchKey": "reflect_test.TestImplicitCallConversion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplicitCallConversion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplicitCallConversion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImplicitAppendConversion",
              "documentation": {
                "identifier": "TestImplicitAppendConversion",
                "newPage": false,
                "searchKey": "reflect_test.TestImplicitAppendConversion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplicitAppendConversion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplicitAppendConversion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestImplements",
              "documentation": {
                "identifier": "TestImplements",
                "newPage": false,
                "searchKey": "reflect_test.TestImplements",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplements(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplements(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestAssignableTo",
              "documentation": {
                "identifier": "TestAssignableTo",
                "newPage": false,
                "searchKey": "reflect_test.TestAssignableTo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAssignableTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAssignableTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#valueToString",
              "documentation": {
                "identifier": "valueToString",
                "newPage": false,
                "searchKey": "reflect_test.valueToString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func valueToString(val Value) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc valueToString(val Value) string\n```\n\nvalueToString returns a textual representation of the reflection value val. For debugging only. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/reflect_test#TestFields",
              "documentation": {
                "identifier": "TestFields",
                "newPage": false,
                "searchKey": "reflect_test.TestFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
