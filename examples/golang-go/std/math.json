{
  "pathID": "/std/math",
  "documentation": {
    "identifier": "math",
    "newPage": true,
    "searchKey": "std/math",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package math"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package math provides basic constants and mathematical functions. \n\nThis package does not guarantee bit-identical results across architectures. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/math#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math#uvnan",
              "documentation": {
                "identifier": "uvnan",
                "newPage": false,
                "searchKey": "math.uvnan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const uvnan"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uvnan = 0x7FF8000000000001\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#uvinf",
              "documentation": {
                "identifier": "uvinf",
                "newPage": false,
                "searchKey": "math.uvinf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const uvinf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uvinf = 0x7FF0000000000000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#uvneginf",
              "documentation": {
                "identifier": "uvneginf",
                "newPage": false,
                "searchKey": "math.uvneginf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const uvneginf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uvneginf = 0xFFF0000000000000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#uvone",
              "documentation": {
                "identifier": "uvone",
                "newPage": false,
                "searchKey": "math.uvone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const uvone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uvone = 0x3FF0000000000000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#mask",
              "documentation": {
                "identifier": "mask",
                "newPage": false,
                "searchKey": "math.mask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const mask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mask = 0x7FF\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#shift",
              "documentation": {
                "identifier": "shift",
                "newPage": false,
                "searchKey": "math.shift",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const shift"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst shift = 64 - 11 - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#bias",
              "documentation": {
                "identifier": "bias",
                "newPage": false,
                "searchKey": "math.bias",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const bias"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst bias = 1023\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#signMask",
              "documentation": {
                "identifier": "signMask",
                "newPage": false,
                "searchKey": "math.signMask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const signMask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst signMask = 1 << 63\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#fracMask",
              "documentation": {
                "identifier": "fracMask",
                "newPage": false,
                "searchKey": "math.fracMask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fracMask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fracMask = 1<<shift - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#E",
              "documentation": {
                "identifier": "E",
                "newPage": false,
                "searchKey": "math.E",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const E"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst E // https://oeis.org/A001113\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Pi",
              "documentation": {
                "identifier": "Pi",
                "newPage": false,
                "searchKey": "math.Pi",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Pi"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Pi // https://oeis.org/A000796\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Phi",
              "documentation": {
                "identifier": "Phi",
                "newPage": false,
                "searchKey": "math.Phi",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Phi"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Phi // https://oeis.org/A001622\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Sqrt2",
              "documentation": {
                "identifier": "Sqrt2",
                "newPage": false,
                "searchKey": "math.Sqrt2",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Sqrt2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Sqrt2 // https://oeis.org/A002193\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#SqrtE",
              "documentation": {
                "identifier": "SqrtE",
                "newPage": false,
                "searchKey": "math.SqrtE",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SqrtE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SqrtE // https://oeis.org/A019774\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#SqrtPi",
              "documentation": {
                "identifier": "SqrtPi",
                "newPage": false,
                "searchKey": "math.SqrtPi",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SqrtPi"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SqrtPi // https://oeis.org/A002161\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#SqrtPhi",
              "documentation": {
                "identifier": "SqrtPhi",
                "newPage": false,
                "searchKey": "math.SqrtPhi",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SqrtPhi"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SqrtPhi // https://oeis.org/A139339\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Ln2",
              "documentation": {
                "identifier": "Ln2",
                "newPage": false,
                "searchKey": "math.Ln2",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Ln2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Ln2 // https://oeis.org/A002162\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Log2E",
              "documentation": {
                "identifier": "Log2E",
                "newPage": false,
                "searchKey": "math.Log2E",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Log2E"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Log2E = 1 / Ln2\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Ln10",
              "documentation": {
                "identifier": "Ln10",
                "newPage": false,
                "searchKey": "math.Ln10",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Ln10"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Ln10 // https://oeis.org/A002392\n = ...\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Log10E",
              "documentation": {
                "identifier": "Log10E",
                "newPage": false,
                "searchKey": "math.Log10E",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Log10E"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Log10E = 1 / Ln10\n```\n\nMathematical constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxFloat32",
              "documentation": {
                "identifier": "MaxFloat32",
                "newPage": false,
                "searchKey": "math.MaxFloat32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxFloat32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxFloat32 = 0x1p127 * (1 + (1 - 0x1p-23)) // 3.40282346638528859811704183484516925440e+38\n\n```\n\nFloating-point limit values. Max is the largest finite value representable by the type. SmallestNonzero is the smallest positive, non-zero value representable by the type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#SmallestNonzeroFloat32",
              "documentation": {
                "identifier": "SmallestNonzeroFloat32",
                "newPage": false,
                "searchKey": "math.SmallestNonzeroFloat32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SmallestNonzeroFloat32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SmallestNonzeroFloat32 = 0x1p-126 * 0x1p-23 // 1.401298464324817070923729583289916131280e-45\n\n```\n\nFloating-point limit values. Max is the largest finite value representable by the type. SmallestNonzero is the smallest positive, non-zero value representable by the type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxFloat64",
              "documentation": {
                "identifier": "MaxFloat64",
                "newPage": false,
                "searchKey": "math.MaxFloat64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxFloat64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxFloat64 // 1.79769313486231570814527423731704356798070e+308\n = ...\n```\n\nFloating-point limit values. Max is the largest finite value representable by the type. SmallestNonzero is the smallest positive, non-zero value representable by the type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#SmallestNonzeroFloat64",
              "documentation": {
                "identifier": "SmallestNonzeroFloat64",
                "newPage": false,
                "searchKey": "math.SmallestNonzeroFloat64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SmallestNonzeroFloat64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SmallestNonzeroFloat64 // 4.9406564584124654417656879286822137236505980e-324\n = ...\n```\n\nFloating-point limit values. Max is the largest finite value representable by the type. SmallestNonzero is the smallest positive, non-zero value representable by the type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#intSize",
              "documentation": {
                "identifier": "intSize",
                "newPage": false,
                "searchKey": "math.intSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const intSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst intSize = 32 << (^uint(0) >> 63) // 32 or 64\n\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxInt",
              "documentation": {
                "identifier": "MaxInt",
                "newPage": false,
                "searchKey": "math.MaxInt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxInt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxInt = 1<<(intSize-1) - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MinInt",
              "documentation": {
                "identifier": "MinInt",
                "newPage": false,
                "searchKey": "math.MinInt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MinInt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MinInt = -1 << (intSize - 1)\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxInt8",
              "documentation": {
                "identifier": "MaxInt8",
                "newPage": false,
                "searchKey": "math.MaxInt8",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxInt8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxInt8 = 1<<7 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MinInt8",
              "documentation": {
                "identifier": "MinInt8",
                "newPage": false,
                "searchKey": "math.MinInt8",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MinInt8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MinInt8 = -1 << 7\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxInt16",
              "documentation": {
                "identifier": "MaxInt16",
                "newPage": false,
                "searchKey": "math.MaxInt16",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxInt16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxInt16 = 1<<15 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MinInt16",
              "documentation": {
                "identifier": "MinInt16",
                "newPage": false,
                "searchKey": "math.MinInt16",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MinInt16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MinInt16 = -1 << 15\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxInt32",
              "documentation": {
                "identifier": "MaxInt32",
                "newPage": false,
                "searchKey": "math.MaxInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxInt32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxInt32 = 1<<31 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MinInt32",
              "documentation": {
                "identifier": "MinInt32",
                "newPage": false,
                "searchKey": "math.MinInt32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MinInt32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MinInt32 = -1 << 31\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxInt64",
              "documentation": {
                "identifier": "MaxInt64",
                "newPage": false,
                "searchKey": "math.MaxInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxInt64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxInt64 = 1<<63 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MinInt64",
              "documentation": {
                "identifier": "MinInt64",
                "newPage": false,
                "searchKey": "math.MinInt64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MinInt64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MinInt64 = -1 << 63\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxUint",
              "documentation": {
                "identifier": "MaxUint",
                "newPage": false,
                "searchKey": "math.MaxUint",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxUint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxUint = 1<<intSize - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxUint8",
              "documentation": {
                "identifier": "MaxUint8",
                "newPage": false,
                "searchKey": "math.MaxUint8",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxUint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxUint8 = 1<<8 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxUint16",
              "documentation": {
                "identifier": "MaxUint16",
                "newPage": false,
                "searchKey": "math.MaxUint16",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxUint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxUint16 = 1<<16 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxUint32",
              "documentation": {
                "identifier": "MaxUint32",
                "newPage": false,
                "searchKey": "math.MaxUint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxUint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxUint32 = 1<<32 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#MaxUint64",
              "documentation": {
                "identifier": "MaxUint64",
                "newPage": false,
                "searchKey": "math.MaxUint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MaxUint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MaxUint64 = 1<<64 - 1\n```\n\nInteger limit values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchMax",
              "documentation": {
                "identifier": "haveArchMax",
                "newPage": false,
                "searchKey": "math.haveArchMax",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchMax"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchMax = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchMin",
              "documentation": {
                "identifier": "haveArchMin",
                "newPage": false,
                "searchKey": "math.haveArchMin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchMin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchMin = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#erx",
              "documentation": {
                "identifier": "erx",
                "newPage": false,
                "searchKey": "math.erx",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const erx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst erx = 8.45062911510467529297e-01 // 0x3FEB0AC160000000\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#efx",
              "documentation": {
                "identifier": "efx",
                "newPage": false,
                "searchKey": "math.efx",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const efx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst efx = 1.28379167095512586316e-01 // 0x3FC06EBA8214DB69\n\n```\n\nCoefficients for approximation to  erf in [0, 0.84375] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#efx8",
              "documentation": {
                "identifier": "efx8",
                "newPage": false,
                "searchKey": "math.efx8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const efx8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst efx8 = 1.02703333676410069053e+00 // 0x3FF06EBA8214DB69\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pp0",
              "documentation": {
                "identifier": "pp0",
                "newPage": false,
                "searchKey": "math.pp0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pp0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pp0 = 1.28379167095512558561e-01 // 0x3FC06EBA8214DB68\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pp1",
              "documentation": {
                "identifier": "pp1",
                "newPage": false,
                "searchKey": "math.pp1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pp1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pp1 = -3.25042107247001499370e-01 // 0xBFD4CD7D691CB913\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pp2",
              "documentation": {
                "identifier": "pp2",
                "newPage": false,
                "searchKey": "math.pp2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pp2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pp2 = -2.84817495755985104766e-02 // 0xBF9D2A51DBD7194F\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pp3",
              "documentation": {
                "identifier": "pp3",
                "newPage": false,
                "searchKey": "math.pp3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pp3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pp3 = -5.77027029648944159157e-03 // 0xBF77A291236668E4\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pp4",
              "documentation": {
                "identifier": "pp4",
                "newPage": false,
                "searchKey": "math.pp4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pp4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pp4 = -2.37630166566501626084e-05 // 0xBEF8EAD6120016AC\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qq1",
              "documentation": {
                "identifier": "qq1",
                "newPage": false,
                "searchKey": "math.qq1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qq1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qq1 = 3.97917223959155352819e-01 // 0x3FD97779CDDADC09\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qq2",
              "documentation": {
                "identifier": "qq2",
                "newPage": false,
                "searchKey": "math.qq2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qq2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qq2 = 6.50222499887672944485e-02 // 0x3FB0A54C5536CEBA\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qq3",
              "documentation": {
                "identifier": "qq3",
                "newPage": false,
                "searchKey": "math.qq3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qq3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qq3 = 5.08130628187576562776e-03 // 0x3F74D022C4D36B0F\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qq4",
              "documentation": {
                "identifier": "qq4",
                "newPage": false,
                "searchKey": "math.qq4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qq4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qq4 = 1.32494738004321644526e-04 // 0x3F215DC9221C1A10\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qq5",
              "documentation": {
                "identifier": "qq5",
                "newPage": false,
                "searchKey": "math.qq5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qq5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qq5 = -3.96022827877536812320e-06 // 0xBED09C4342A26120\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa0",
              "documentation": {
                "identifier": "pa0",
                "newPage": false,
                "searchKey": "math.pa0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa0 = -2.36211856075265944077e-03 // 0xBF6359B8BEF77538\n\n```\n\nCoefficients for approximation to  erf  in [0.84375, 1.25] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa1",
              "documentation": {
                "identifier": "pa1",
                "newPage": false,
                "searchKey": "math.pa1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa1 = 4.14856118683748331666e-01 // 0x3FDA8D00AD92B34D\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa2",
              "documentation": {
                "identifier": "pa2",
                "newPage": false,
                "searchKey": "math.pa2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa2 = -3.72207876035701323847e-01 // 0xBFD7D240FBB8C3F1\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa3",
              "documentation": {
                "identifier": "pa3",
                "newPage": false,
                "searchKey": "math.pa3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa3 = 3.18346619901161753674e-01 // 0x3FD45FCA805120E4\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa4",
              "documentation": {
                "identifier": "pa4",
                "newPage": false,
                "searchKey": "math.pa4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa4 = -1.10894694282396677476e-01 // 0xBFBC63983D3E28EC\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa5",
              "documentation": {
                "identifier": "pa5",
                "newPage": false,
                "searchKey": "math.pa5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa5 = 3.54783043256182359371e-02 // 0x3FA22A36599795EB\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pa6",
              "documentation": {
                "identifier": "pa6",
                "newPage": false,
                "searchKey": "math.pa6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pa6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pa6 = -2.16637559486879084300e-03 // 0xBF61BF380A96073F\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qa1",
              "documentation": {
                "identifier": "qa1",
                "newPage": false,
                "searchKey": "math.qa1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qa1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qa1 = 1.06420880400844228286e-01 // 0x3FBB3E6618EEE323\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qa2",
              "documentation": {
                "identifier": "qa2",
                "newPage": false,
                "searchKey": "math.qa2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qa2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qa2 = 5.40397917702171048937e-01 // 0x3FE14AF092EB6F33\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qa3",
              "documentation": {
                "identifier": "qa3",
                "newPage": false,
                "searchKey": "math.qa3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qa3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qa3 = 7.18286544141962662868e-02 // 0x3FB2635CD99FE9A7\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qa4",
              "documentation": {
                "identifier": "qa4",
                "newPage": false,
                "searchKey": "math.qa4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qa4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qa4 = 1.26171219808761642112e-01 // 0x3FC02660E763351F\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qa5",
              "documentation": {
                "identifier": "qa5",
                "newPage": false,
                "searchKey": "math.qa5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qa5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qa5 = 1.36370839120290507362e-02 // 0x3F8BEDC26B51DD1C\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qa6",
              "documentation": {
                "identifier": "qa6",
                "newPage": false,
                "searchKey": "math.qa6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const qa6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst qa6 = 1.19844998467991074170e-02 // 0x3F888B545735151D\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra0",
              "documentation": {
                "identifier": "ra0",
                "newPage": false,
                "searchKey": "math.ra0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra0 = -9.86494403484714822705e-03 // 0xBF843412600D6435\n\n```\n\nCoefficients for approximation to  erfc in [1.25, 1/0.35] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra1",
              "documentation": {
                "identifier": "ra1",
                "newPage": false,
                "searchKey": "math.ra1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra1 = -6.93858572707181764372e-01 // 0xBFE63416E4BA7360\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra2",
              "documentation": {
                "identifier": "ra2",
                "newPage": false,
                "searchKey": "math.ra2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra2 = -1.05586262253232909814e+01 // 0xC0251E0441B0E726\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra3",
              "documentation": {
                "identifier": "ra3",
                "newPage": false,
                "searchKey": "math.ra3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra3 = -6.23753324503260060396e+01 // 0xC04F300AE4CBA38D\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra4",
              "documentation": {
                "identifier": "ra4",
                "newPage": false,
                "searchKey": "math.ra4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra4 = -1.62396669462573470355e+02 // 0xC0644CB184282266\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra5",
              "documentation": {
                "identifier": "ra5",
                "newPage": false,
                "searchKey": "math.ra5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra5 = -1.84605092906711035994e+02 // 0xC067135CEBCCABB2\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra6",
              "documentation": {
                "identifier": "ra6",
                "newPage": false,
                "searchKey": "math.ra6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra6 = -8.12874355063065934246e+01 // 0xC054526557E4D2F2\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ra7",
              "documentation": {
                "identifier": "ra7",
                "newPage": false,
                "searchKey": "math.ra7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ra7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ra7 = -9.81432934416914548592e+00 // 0xC023A0EFC69AC25C\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa1",
              "documentation": {
                "identifier": "sa1",
                "newPage": false,
                "searchKey": "math.sa1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa1 = 1.96512716674392571292e+01 // 0x4033A6B9BD707687\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa2",
              "documentation": {
                "identifier": "sa2",
                "newPage": false,
                "searchKey": "math.sa2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa2 = 1.37657754143519042600e+02 // 0x4061350C526AE721\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa3",
              "documentation": {
                "identifier": "sa3",
                "newPage": false,
                "searchKey": "math.sa3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa3 = 4.34565877475229228821e+02 // 0x407B290DD58A1A71\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa4",
              "documentation": {
                "identifier": "sa4",
                "newPage": false,
                "searchKey": "math.sa4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa4 = 6.45387271733267880336e+02 // 0x40842B1921EC2868\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa5",
              "documentation": {
                "identifier": "sa5",
                "newPage": false,
                "searchKey": "math.sa5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa5 = 4.29008140027567833386e+02 // 0x407AD02157700314\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa6",
              "documentation": {
                "identifier": "sa6",
                "newPage": false,
                "searchKey": "math.sa6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa6 = 1.08635005541779435134e+02 // 0x405B28A3EE48AE2C\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa7",
              "documentation": {
                "identifier": "sa7",
                "newPage": false,
                "searchKey": "math.sa7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa7 = 6.57024977031928170135e+00 // 0x401A47EF8E484A93\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sa8",
              "documentation": {
                "identifier": "sa8",
                "newPage": false,
                "searchKey": "math.sa8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sa8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sa8 = -6.04244152148580987438e-02 // 0xBFAEEFF2EE749A62\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb0",
              "documentation": {
                "identifier": "rb0",
                "newPage": false,
                "searchKey": "math.rb0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb0 = -9.86494292470009928597e-03 // 0xBF84341239E86F4A\n\n```\n\nCoefficients for approximation to  erfc in [1/.35, 28] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb1",
              "documentation": {
                "identifier": "rb1",
                "newPage": false,
                "searchKey": "math.rb1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb1 = -7.99283237680523006574e-01 // 0xBFE993BA70C285DE\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb2",
              "documentation": {
                "identifier": "rb2",
                "newPage": false,
                "searchKey": "math.rb2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb2 = -1.77579549177547519889e+01 // 0xC031C209555F995A\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb3",
              "documentation": {
                "identifier": "rb3",
                "newPage": false,
                "searchKey": "math.rb3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb3 = -1.60636384855821916062e+02 // 0xC064145D43C5ED98\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb4",
              "documentation": {
                "identifier": "rb4",
                "newPage": false,
                "searchKey": "math.rb4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb4 = -6.37566443368389627722e+02 // 0xC083EC881375F228\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb5",
              "documentation": {
                "identifier": "rb5",
                "newPage": false,
                "searchKey": "math.rb5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb5 = -1.02509513161107724954e+03 // 0xC09004616A2E5992\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#rb6",
              "documentation": {
                "identifier": "rb6",
                "newPage": false,
                "searchKey": "math.rb6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rb6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rb6 = -4.83519191608651397019e+02 // 0xC07E384E9BDC383F\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb1",
              "documentation": {
                "identifier": "sb1",
                "newPage": false,
                "searchKey": "math.sb1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb1 = 3.03380607434824582924e+01 // 0x403E568B261D5190\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb2",
              "documentation": {
                "identifier": "sb2",
                "newPage": false,
                "searchKey": "math.sb2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb2 = 3.25792512996573918826e+02 // 0x40745CAE221B9F0A\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb3",
              "documentation": {
                "identifier": "sb3",
                "newPage": false,
                "searchKey": "math.sb3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb3 = 1.53672958608443695994e+03 // 0x409802EB189D5118\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb4",
              "documentation": {
                "identifier": "sb4",
                "newPage": false,
                "searchKey": "math.sb4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb4 = 3.19985821950859553908e+03 // 0x40A8FFB7688C246A\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb5",
              "documentation": {
                "identifier": "sb5",
                "newPage": false,
                "searchKey": "math.sb5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb5 = 2.55305040643316442583e+03 // 0x40A3F219CEDF3BE6\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb6",
              "documentation": {
                "identifier": "sb6",
                "newPage": false,
                "searchKey": "math.sb6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb6 = 4.74528541206955367215e+02 // 0x407DA874E79FE763\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sb7",
              "documentation": {
                "identifier": "sb7",
                "newPage": false,
                "searchKey": "math.sb7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const sb7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sb7 = -2.24409524465858183362e+01 // 0xC03670E242712D62\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a0",
              "documentation": {
                "identifier": "a0",
                "newPage": false,
                "searchKey": "math.a0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a0 = 1.1975323115670912564578e0\n```\n\nCoefficients for approximation to erf in |x| <= 0.85 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a1",
              "documentation": {
                "identifier": "a1",
                "newPage": false,
                "searchKey": "math.a1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a1 = 4.7072688112383978012285e1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a2",
              "documentation": {
                "identifier": "a2",
                "newPage": false,
                "searchKey": "math.a2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a2 = 6.9706266534389598238465e2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a3",
              "documentation": {
                "identifier": "a3",
                "newPage": false,
                "searchKey": "math.a3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a3 = 4.8548868893843886794648e3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a4",
              "documentation": {
                "identifier": "a4",
                "newPage": false,
                "searchKey": "math.a4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a4 = 1.6235862515167575384252e4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a5",
              "documentation": {
                "identifier": "a5",
                "newPage": false,
                "searchKey": "math.a5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a5 = 2.3782041382114385731252e4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a6",
              "documentation": {
                "identifier": "a6",
                "newPage": false,
                "searchKey": "math.a6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a6 = 1.1819493347062294404278e4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#a7",
              "documentation": {
                "identifier": "a7",
                "newPage": false,
                "searchKey": "math.a7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const a7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst a7 = 8.8709406962545514830200e2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b0",
              "documentation": {
                "identifier": "b0",
                "newPage": false,
                "searchKey": "math.b0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b0 = 1.0000000000000000000e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b1",
              "documentation": {
                "identifier": "b1",
                "newPage": false,
                "searchKey": "math.b1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b1 = 4.2313330701600911252e1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b2",
              "documentation": {
                "identifier": "b2",
                "newPage": false,
                "searchKey": "math.b2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b2 = 6.8718700749205790830e2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b3",
              "documentation": {
                "identifier": "b3",
                "newPage": false,
                "searchKey": "math.b3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b3 = 5.3941960214247511077e3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b4",
              "documentation": {
                "identifier": "b4",
                "newPage": false,
                "searchKey": "math.b4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b4 = 2.1213794301586595867e4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b5",
              "documentation": {
                "identifier": "b5",
                "newPage": false,
                "searchKey": "math.b5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b5 = 3.9307895800092710610e4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b6",
              "documentation": {
                "identifier": "b6",
                "newPage": false,
                "searchKey": "math.b6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b6 = 2.8729085735721942674e4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#b7",
              "documentation": {
                "identifier": "b7",
                "newPage": false,
                "searchKey": "math.b7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const b7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst b7 = 5.2264952788528545610e3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c0",
              "documentation": {
                "identifier": "c0",
                "newPage": false,
                "searchKey": "math.c0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c0 = 1.42343711074968357734e0\n```\n\nCoefficients for approximation to erf in 0.85 < |x| <= 1-2*exp(-25) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c1",
              "documentation": {
                "identifier": "c1",
                "newPage": false,
                "searchKey": "math.c1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c1 = 4.63033784615654529590e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c2",
              "documentation": {
                "identifier": "c2",
                "newPage": false,
                "searchKey": "math.c2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c2 = 5.76949722146069140550e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c3",
              "documentation": {
                "identifier": "c3",
                "newPage": false,
                "searchKey": "math.c3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c3 = 3.64784832476320460504e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c4",
              "documentation": {
                "identifier": "c4",
                "newPage": false,
                "searchKey": "math.c4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c4 = 1.27045825245236838258e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c5",
              "documentation": {
                "identifier": "c5",
                "newPage": false,
                "searchKey": "math.c5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c5 = 2.41780725177450611770e-1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c6",
              "documentation": {
                "identifier": "c6",
                "newPage": false,
                "searchKey": "math.c6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c6 = 2.27238449892691845833e-2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#c7",
              "documentation": {
                "identifier": "c7",
                "newPage": false,
                "searchKey": "math.c7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const c7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst c7 = 7.74545014278341407640e-4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d0",
              "documentation": {
                "identifier": "d0",
                "newPage": false,
                "searchKey": "math.d0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d0 = 1.4142135623730950488016887e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d1",
              "documentation": {
                "identifier": "d1",
                "newPage": false,
                "searchKey": "math.d1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d1 = 2.9036514445419946173133295e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d2",
              "documentation": {
                "identifier": "d2",
                "newPage": false,
                "searchKey": "math.d2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d2 = 2.3707661626024532365971225e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d3",
              "documentation": {
                "identifier": "d3",
                "newPage": false,
                "searchKey": "math.d3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d3 = 9.7547832001787427186894837e-1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d4",
              "documentation": {
                "identifier": "d4",
                "newPage": false,
                "searchKey": "math.d4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d4 = 2.0945065210512749128288442e-1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d5",
              "documentation": {
                "identifier": "d5",
                "newPage": false,
                "searchKey": "math.d5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d5 = 2.1494160384252876777097297e-2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d6",
              "documentation": {
                "identifier": "d6",
                "newPage": false,
                "searchKey": "math.d6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d6 = 7.7441459065157709165577218e-4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#d7",
              "documentation": {
                "identifier": "d7",
                "newPage": false,
                "searchKey": "math.d7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const d7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst d7 = 1.4859850019840355905497876e-9\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e0",
              "documentation": {
                "identifier": "e0",
                "newPage": false,
                "searchKey": "math.e0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e0 = 6.65790464350110377720e0\n```\n\nCoefficients for approximation to erf in 1-2*exp(-25) < |x| < 1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e1",
              "documentation": {
                "identifier": "e1",
                "newPage": false,
                "searchKey": "math.e1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e1 = 5.46378491116411436990e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e2",
              "documentation": {
                "identifier": "e2",
                "newPage": false,
                "searchKey": "math.e2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e2 = 1.78482653991729133580e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e3",
              "documentation": {
                "identifier": "e3",
                "newPage": false,
                "searchKey": "math.e3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e3 = 2.96560571828504891230e-1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e4",
              "documentation": {
                "identifier": "e4",
                "newPage": false,
                "searchKey": "math.e4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e4 = 2.65321895265761230930e-2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e5",
              "documentation": {
                "identifier": "e5",
                "newPage": false,
                "searchKey": "math.e5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e5 = 1.24266094738807843860e-3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e6",
              "documentation": {
                "identifier": "e6",
                "newPage": false,
                "searchKey": "math.e6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e6 = 2.71155556874348757815e-5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#e7",
              "documentation": {
                "identifier": "e7",
                "newPage": false,
                "searchKey": "math.e7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const e7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst e7 = 2.01033439929228813265e-7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f0",
              "documentation": {
                "identifier": "f0",
                "newPage": false,
                "searchKey": "math.f0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f0 = 1.414213562373095048801689e0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f1",
              "documentation": {
                "identifier": "f1",
                "newPage": false,
                "searchKey": "math.f1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f1 = 8.482908416595164588112026e-1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f2",
              "documentation": {
                "identifier": "f2",
                "newPage": false,
                "searchKey": "math.f2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f2 = 1.936480946950659106176712e-1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f3",
              "documentation": {
                "identifier": "f3",
                "newPage": false,
                "searchKey": "math.f3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f3 = 2.103693768272068968719679e-2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f4",
              "documentation": {
                "identifier": "f4",
                "newPage": false,
                "searchKey": "math.f4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f4 = 1.112800997078859844711555e-3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f5",
              "documentation": {
                "identifier": "f5",
                "newPage": false,
                "searchKey": "math.f5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f5 = 2.611088405080593625138020e-5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f6",
              "documentation": {
                "identifier": "f6",
                "newPage": false,
                "searchKey": "math.f6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f6 = 2.010321207683943062279931e-7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#f7",
              "documentation": {
                "identifier": "f7",
                "newPage": false,
                "searchKey": "math.f7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const f7"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst f7 = 2.891024605872965461538222e-15\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchExp2",
              "documentation": {
                "identifier": "haveArchExp2",
                "newPage": false,
                "searchKey": "math.haveArchExp2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchExp2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchExp2 = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchExp",
              "documentation": {
                "identifier": "haveArchExp",
                "newPage": false,
                "searchKey": "math.haveArchExp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchExp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchExp = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchFloor",
              "documentation": {
                "identifier": "haveArchFloor",
                "newPage": false,
                "searchKey": "math.haveArchFloor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchFloor"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchFloor = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchCeil",
              "documentation": {
                "identifier": "haveArchCeil",
                "newPage": false,
                "searchKey": "math.haveArchCeil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchCeil"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchCeil = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchTrunc",
              "documentation": {
                "identifier": "haveArchTrunc",
                "newPage": false,
                "searchKey": "math.haveArchTrunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchTrunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchTrunc = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchHypot",
              "documentation": {
                "identifier": "haveArchHypot",
                "newPage": false,
                "searchKey": "math.haveArchHypot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchHypot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchHypot = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchLog",
              "documentation": {
                "identifier": "haveArchLog",
                "newPage": false,
                "searchKey": "math.haveArchLog",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchLog"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchLog = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchModf",
              "documentation": {
                "identifier": "haveArchModf",
                "newPage": false,
                "searchKey": "math.haveArchModf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchModf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchModf = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchSqrt",
              "documentation": {
                "identifier": "haveArchSqrt",
                "newPage": false,
                "searchKey": "math.haveArchSqrt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchSqrt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchSqrt = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAcos",
              "documentation": {
                "identifier": "haveArchAcos",
                "newPage": false,
                "searchKey": "math.haveArchAcos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAcos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAcos = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAcosh",
              "documentation": {
                "identifier": "haveArchAcosh",
                "newPage": false,
                "searchKey": "math.haveArchAcosh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAcosh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAcosh = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAsin",
              "documentation": {
                "identifier": "haveArchAsin",
                "newPage": false,
                "searchKey": "math.haveArchAsin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAsin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAsin = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAsinh",
              "documentation": {
                "identifier": "haveArchAsinh",
                "newPage": false,
                "searchKey": "math.haveArchAsinh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAsinh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAsinh = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAtan",
              "documentation": {
                "identifier": "haveArchAtan",
                "newPage": false,
                "searchKey": "math.haveArchAtan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAtan"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAtan = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAtan2",
              "documentation": {
                "identifier": "haveArchAtan2",
                "newPage": false,
                "searchKey": "math.haveArchAtan2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAtan2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAtan2 = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchAtanh",
              "documentation": {
                "identifier": "haveArchAtanh",
                "newPage": false,
                "searchKey": "math.haveArchAtanh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchAtanh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchAtanh = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchCbrt",
              "documentation": {
                "identifier": "haveArchCbrt",
                "newPage": false,
                "searchKey": "math.haveArchCbrt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchCbrt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchCbrt = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchCos",
              "documentation": {
                "identifier": "haveArchCos",
                "newPage": false,
                "searchKey": "math.haveArchCos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchCos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchCos = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchCosh",
              "documentation": {
                "identifier": "haveArchCosh",
                "newPage": false,
                "searchKey": "math.haveArchCosh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchCosh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchCosh = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchErf",
              "documentation": {
                "identifier": "haveArchErf",
                "newPage": false,
                "searchKey": "math.haveArchErf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchErf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchErf = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchErfc",
              "documentation": {
                "identifier": "haveArchErfc",
                "newPage": false,
                "searchKey": "math.haveArchErfc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchErfc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchErfc = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchExpm1",
              "documentation": {
                "identifier": "haveArchExpm1",
                "newPage": false,
                "searchKey": "math.haveArchExpm1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchExpm1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchExpm1 = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchFrexp",
              "documentation": {
                "identifier": "haveArchFrexp",
                "newPage": false,
                "searchKey": "math.haveArchFrexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchFrexp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchFrexp = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchLdexp",
              "documentation": {
                "identifier": "haveArchLdexp",
                "newPage": false,
                "searchKey": "math.haveArchLdexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchLdexp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchLdexp = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchLog10",
              "documentation": {
                "identifier": "haveArchLog10",
                "newPage": false,
                "searchKey": "math.haveArchLog10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchLog10"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchLog10 = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchLog2",
              "documentation": {
                "identifier": "haveArchLog2",
                "newPage": false,
                "searchKey": "math.haveArchLog2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchLog2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchLog2 = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchLog1p",
              "documentation": {
                "identifier": "haveArchLog1p",
                "newPage": false,
                "searchKey": "math.haveArchLog1p",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchLog1p"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchLog1p = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchMod",
              "documentation": {
                "identifier": "haveArchMod",
                "newPage": false,
                "searchKey": "math.haveArchMod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchMod"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchMod = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchPow",
              "documentation": {
                "identifier": "haveArchPow",
                "newPage": false,
                "searchKey": "math.haveArchPow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchPow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchPow = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchRemainder",
              "documentation": {
                "identifier": "haveArchRemainder",
                "newPage": false,
                "searchKey": "math.haveArchRemainder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchRemainder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchRemainder = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchSin",
              "documentation": {
                "identifier": "haveArchSin",
                "newPage": false,
                "searchKey": "math.haveArchSin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchSin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchSin = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchSinh",
              "documentation": {
                "identifier": "haveArchSinh",
                "newPage": false,
                "searchKey": "math.haveArchSinh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchSinh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchSinh = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchTan",
              "documentation": {
                "identifier": "haveArchTan",
                "newPage": false,
                "searchKey": "math.haveArchTan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchTan"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchTan = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#haveArchTanh",
              "documentation": {
                "identifier": "haveArchTanh",
                "newPage": false,
                "searchKey": "math.haveArchTanh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const haveArchTanh"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst haveArchTanh = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#reduceThreshold",
              "documentation": {
                "identifier": "reduceThreshold",
                "newPage": false,
                "searchKey": "math.reduceThreshold",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const reduceThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst reduceThreshold = 1 << 29\n```\n\nreduceThreshold is the maximum value of x where the reduction using Pi/4 in 3 float64 parts still gives accurate results. This threshold is set by y*C being representable as a float64 without error where y is given by y = floor(x * (4 / Pi)) and C is the leading partial terms of 4/Pi. Since the leading terms (PI4A and PI4B in sin.go) have 30 and 32 trailing zero bits, y should have less than 30 significant bits. \n\n```\ny < 1<<30  -> floor(x*4/Pi) < 1<<30 -> x < (1<<30 - 1) * Pi/4\n\n```\nSo, conservatively we can take x < 1<<29. Above this threshold Payne-Hanek range reduction must be used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ReduceThreshold",
              "documentation": {
                "identifier": "ReduceThreshold",
                "newPage": false,
                "searchKey": "math.ReduceThreshold",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ReduceThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ReduceThreshold = reduceThreshold\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/math#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math#useFMA",
              "documentation": {
                "identifier": "useFMA",
                "newPage": false,
                "searchKey": "math.useFMA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var useFMA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar useFMA = cpu.X86.HasAVX && cpu.X86.HasFMA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_gamP",
              "documentation": {
                "identifier": "_gamP",
                "newPage": false,
                "searchKey": "math._gamP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _gamP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _gamP = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_gamQ",
              "documentation": {
                "identifier": "_gamQ",
                "newPage": false,
                "searchKey": "math._gamQ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _gamQ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _gamQ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_gamS",
              "documentation": {
                "identifier": "_gamS",
                "newPage": false,
                "searchKey": "math._gamS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _gamS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _gamS = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0R8",
              "documentation": {
                "identifier": "p0R8",
                "newPage": false,
                "searchKey": "math.p0R8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0R8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0R8 = ...\n```\n\nfor x in [inf, 8]=1/[0,0.125] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0S8",
              "documentation": {
                "identifier": "p0S8",
                "newPage": false,
                "searchKey": "math.p0S8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0S8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0S8 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0R5",
              "documentation": {
                "identifier": "p0R5",
                "newPage": false,
                "searchKey": "math.p0R5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0R5 = ...\n```\n\nfor x in [8,4.5454]=1/[0.125,0.22001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0S5",
              "documentation": {
                "identifier": "p0S5",
                "newPage": false,
                "searchKey": "math.p0S5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0S5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0S5 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0R3",
              "documentation": {
                "identifier": "p0R3",
                "newPage": false,
                "searchKey": "math.p0R3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0R3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0R3 = ...\n```\n\nfor x in [4.547,2.8571]=1/[0.2199,0.35001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0S3",
              "documentation": {
                "identifier": "p0S3",
                "newPage": false,
                "searchKey": "math.p0S3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0S3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0S3 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0R2",
              "documentation": {
                "identifier": "p0R2",
                "newPage": false,
                "searchKey": "math.p0R2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0R2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0R2 = ...\n```\n\nfor x in [2.8570,2]=1/[0.3499,0.5] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p0S2",
              "documentation": {
                "identifier": "p0S2",
                "newPage": false,
                "searchKey": "math.p0S2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p0S2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p0S2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0R8",
              "documentation": {
                "identifier": "q0R8",
                "newPage": false,
                "searchKey": "math.q0R8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0R8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0R8 = ...\n```\n\nfor x in [inf, 8]=1/[0,0.125] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0S8",
              "documentation": {
                "identifier": "q0S8",
                "newPage": false,
                "searchKey": "math.q0S8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0S8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0S8 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0R5",
              "documentation": {
                "identifier": "q0R5",
                "newPage": false,
                "searchKey": "math.q0R5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0R5 = ...\n```\n\nfor x in [8,4.5454]=1/[0.125,0.22001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0S5",
              "documentation": {
                "identifier": "q0S5",
                "newPage": false,
                "searchKey": "math.q0S5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0S5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0S5 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0R3",
              "documentation": {
                "identifier": "q0R3",
                "newPage": false,
                "searchKey": "math.q0R3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0R3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0R3 = ...\n```\n\nfor x in [4.547,2.8571]=1/[0.2199,0.35001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0S3",
              "documentation": {
                "identifier": "q0S3",
                "newPage": false,
                "searchKey": "math.q0S3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0S3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0S3 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0R2",
              "documentation": {
                "identifier": "q0R2",
                "newPage": false,
                "searchKey": "math.q0R2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0R2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0R2 = ...\n```\n\nfor x in [2.8570,2]=1/[0.3499,0.5] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q0S2",
              "documentation": {
                "identifier": "q0S2",
                "newPage": false,
                "searchKey": "math.q0S2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q0S2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q0S2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1R8",
              "documentation": {
                "identifier": "p1R8",
                "newPage": false,
                "searchKey": "math.p1R8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1R8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1R8 = ...\n```\n\nfor x in [inf, 8]=1/[0,0.125] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1S8",
              "documentation": {
                "identifier": "p1S8",
                "newPage": false,
                "searchKey": "math.p1S8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1S8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1S8 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1R5",
              "documentation": {
                "identifier": "p1R5",
                "newPage": false,
                "searchKey": "math.p1R5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1R5 = ...\n```\n\nfor x in [8,4.5454] = 1/[0.125,0.22001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1S5",
              "documentation": {
                "identifier": "p1S5",
                "newPage": false,
                "searchKey": "math.p1S5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1S5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1S5 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1R3",
              "documentation": {
                "identifier": "p1R3",
                "newPage": false,
                "searchKey": "math.p1R3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1R3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1R3 = ...\n```\n\nfor x in[4.5453,2.8571] = 1/[0.2199,0.35001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1S3",
              "documentation": {
                "identifier": "p1S3",
                "newPage": false,
                "searchKey": "math.p1S3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1S3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1S3 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1R2",
              "documentation": {
                "identifier": "p1R2",
                "newPage": false,
                "searchKey": "math.p1R2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1R2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1R2 = ...\n```\n\nfor x in [2.8570,2] = 1/[0.3499,0.5] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#p1S2",
              "documentation": {
                "identifier": "p1S2",
                "newPage": false,
                "searchKey": "math.p1S2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p1S2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p1S2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1R8",
              "documentation": {
                "identifier": "q1R8",
                "newPage": false,
                "searchKey": "math.q1R8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1R8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1R8 = ...\n```\n\nfor x in [inf, 8] = 1/[0,0.125] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1S8",
              "documentation": {
                "identifier": "q1S8",
                "newPage": false,
                "searchKey": "math.q1S8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1S8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1S8 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1R5",
              "documentation": {
                "identifier": "q1R5",
                "newPage": false,
                "searchKey": "math.q1R5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1R5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1R5 = ...\n```\n\nfor x in [8,4.5454] = 1/[0.125,0.22001] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1S5",
              "documentation": {
                "identifier": "q1S5",
                "newPage": false,
                "searchKey": "math.q1S5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1S5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1S5 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1R3",
              "documentation": {
                "identifier": "q1R3",
                "newPage": false,
                "searchKey": "math.q1R3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1R3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1R3 = ...\n```\n\nfor x in [4.5454,2.8571] = 1/[0.2199,0.35001] ??? \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1S3",
              "documentation": {
                "identifier": "q1S3",
                "newPage": false,
                "searchKey": "math.q1S3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1S3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1S3 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1R2",
              "documentation": {
                "identifier": "q1R2",
                "newPage": false,
                "searchKey": "math.q1R2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1R2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1R2 = ...\n```\n\nfor x in [2.8570,2] = 1/[0.3499,0.5] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#q1S2",
              "documentation": {
                "identifier": "q1S2",
                "newPage": false,
                "searchKey": "math.q1S2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var q1S2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar q1S2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamA",
              "documentation": {
                "identifier": "_lgamA",
                "newPage": false,
                "searchKey": "math._lgamA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamA = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamR",
              "documentation": {
                "identifier": "_lgamR",
                "newPage": false,
                "searchKey": "math._lgamR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamR = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamS",
              "documentation": {
                "identifier": "_lgamS",
                "newPage": false,
                "searchKey": "math._lgamS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamS = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamT",
              "documentation": {
                "identifier": "_lgamT",
                "newPage": false,
                "searchKey": "math._lgamT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamT = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamU",
              "documentation": {
                "identifier": "_lgamU",
                "newPage": false,
                "searchKey": "math._lgamU",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamU"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamU = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamV",
              "documentation": {
                "identifier": "_lgamV",
                "newPage": false,
                "searchKey": "math._lgamV",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamV"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamV = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_lgamW",
              "documentation": {
                "identifier": "_lgamW",
                "newPage": false,
                "searchKey": "math._lgamW",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _lgamW"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _lgamW = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pow10tab",
              "documentation": {
                "identifier": "pow10tab",
                "newPage": false,
                "searchKey": "math.pow10tab",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pow10tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pow10tab = ...\n```\n\npow10tab stores the pre-computed values 10**i for i < 32. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pow10postab32",
              "documentation": {
                "identifier": "pow10postab32",
                "newPage": false,
                "searchKey": "math.pow10postab32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pow10postab32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pow10postab32 = ...\n```\n\npow10postab32 stores the pre-computed value for 10**(i*32) at index i. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pow10negtab32",
              "documentation": {
                "identifier": "pow10negtab32",
                "newPage": false,
                "searchKey": "math.pow10negtab32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pow10negtab32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pow10negtab32 = ...\n```\n\npow10negtab32 stores the pre-computed value for 10**(-i*32) at index i. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_sin",
              "documentation": {
                "identifier": "_sin",
                "newPage": false,
                "searchKey": "math._sin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _sin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _sin = ...\n```\n\nsin coefficients \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_cos",
              "documentation": {
                "identifier": "_cos",
                "newPage": false,
                "searchKey": "math._cos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _cos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _cos = ...\n```\n\ncos coefficients \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_tanP",
              "documentation": {
                "identifier": "_tanP",
                "newPage": false,
                "searchKey": "math._tanP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _tanP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _tanP = ...\n```\n\ntan coefficients \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#_tanQ",
              "documentation": {
                "identifier": "_tanQ",
                "newPage": false,
                "searchKey": "math._tanQ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var _tanQ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _tanQ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#tanhP",
              "documentation": {
                "identifier": "tanhP",
                "newPage": false,
                "searchKey": "math.tanhP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tanhP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tanhP = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#tanhQ",
              "documentation": {
                "identifier": "tanhQ",
                "newPage": false,
                "searchKey": "math.tanhQ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tanhQ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tanhQ = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#mPi4",
              "documentation": {
                "identifier": "mPi4",
                "newPage": false,
                "searchKey": "math.mPi4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mPi4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mPi4 = ...\n```\n\nmPi4 is the binary digits of 4/pi as a uint64 array, that is, 4/pi = Sum mPi4[i]*2^(-64*i) 19 64-bit digits and the leading one bit give 1217 bits of precision to handle the largest possible float64 exponent. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ExpGo",
              "documentation": {
                "identifier": "ExpGo",
                "newPage": false,
                "searchKey": "math.ExpGo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ExpGo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ExpGo = exp\n```\n\nExport internal functions for testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Exp2Go",
              "documentation": {
                "identifier": "Exp2Go",
                "newPage": false,
                "searchKey": "math.Exp2Go",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var Exp2Go"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Exp2Go = exp2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#HypotGo",
              "documentation": {
                "identifier": "HypotGo",
                "newPage": false,
                "searchKey": "math.HypotGo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var HypotGo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar HypotGo = hypot\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#SqrtGo",
              "documentation": {
                "identifier": "SqrtGo",
                "newPage": false,
                "searchKey": "math.SqrtGo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var SqrtGo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SqrtGo = sqrt\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#TrigReduce",
              "documentation": {
                "identifier": "TrigReduce",
                "newPage": false,
                "searchKey": "math.TrigReduce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var TrigReduce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar TrigReduce = trigReduce\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/math#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/math#Abs",
              "documentation": {
                "identifier": "Abs",
                "newPage": false,
                "searchKey": "math.Abs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Abs(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Abs(x float64) float64\n```\n\nAbs returns the absolute value of x. \n\nSpecial cases are: \n\n```\nAbs(±Inf) = +Inf\nAbs(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Acosh",
              "documentation": {
                "identifier": "Acosh",
                "newPage": false,
                "searchKey": "math.Acosh",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Acosh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Acosh(x float64) float64\n```\n\nAcosh returns the inverse hyperbolic cosine of x. \n\nSpecial cases are: \n\n```\nAcosh(+Inf) = +Inf\nAcosh(x) = NaN if x < 1\nAcosh(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#acosh",
              "documentation": {
                "identifier": "acosh",
                "newPage": false,
                "searchKey": "math.acosh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func acosh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc acosh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Asin",
              "documentation": {
                "identifier": "Asin",
                "newPage": false,
                "searchKey": "math.Asin",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Asin(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Asin(x float64) float64\n```\n\nAsin returns the arcsine, in radians, of x. \n\nSpecial cases are: \n\n```\nAsin(±0) = ±0\nAsin(x) = NaN if x < -1 or x > 1\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#asin",
              "documentation": {
                "identifier": "asin",
                "newPage": false,
                "searchKey": "math.asin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func asin(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asin(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Acos",
              "documentation": {
                "identifier": "Acos",
                "newPage": false,
                "searchKey": "math.Acos",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Acos(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Acos(x float64) float64\n```\n\nAcos returns the arccosine, in radians, of x. \n\nSpecial case is: \n\n```\nAcos(x) = NaN if x < -1 or x > 1\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#acos",
              "documentation": {
                "identifier": "acos",
                "newPage": false,
                "searchKey": "math.acos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func acos(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc acos(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Asinh",
              "documentation": {
                "identifier": "Asinh",
                "newPage": false,
                "searchKey": "math.Asinh",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Asinh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Asinh(x float64) float64\n```\n\nAsinh returns the inverse hyperbolic sine of x. \n\nSpecial cases are: \n\n```\nAsinh(±0) = ±0\nAsinh(±Inf) = ±Inf\nAsinh(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#asinh",
              "documentation": {
                "identifier": "asinh",
                "newPage": false,
                "searchKey": "math.asinh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func asinh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asinh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#xatan",
              "documentation": {
                "identifier": "xatan",
                "newPage": false,
                "searchKey": "math.xatan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func xatan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc xatan(x float64) float64\n```\n\nxatan evaluates a series valid in the range [0, 0.66]. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#satan",
              "documentation": {
                "identifier": "satan",
                "newPage": false,
                "searchKey": "math.satan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func satan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc satan(x float64) float64\n```\n\nsatan reduces its argument (known to be positive) to the range [0, 0.66] and calls xatan. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Atan",
              "documentation": {
                "identifier": "Atan",
                "newPage": false,
                "searchKey": "math.Atan",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Atan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Atan(x float64) float64\n```\n\nAtan returns the arctangent, in radians, of x. \n\nSpecial cases are: \n\n```\nAtan(±0) = ±0\nAtan(±Inf) = ±Pi/2\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#atan",
              "documentation": {
                "identifier": "atan",
                "newPage": false,
                "searchKey": "math.atan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func atan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc atan(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Atan2",
              "documentation": {
                "identifier": "Atan2",
                "newPage": false,
                "searchKey": "math.Atan2",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Atan2(y, x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Atan2(y, x float64) float64\n```\n\nAtan2 returns the arc tangent of y/x, using the signs of the two to determine the quadrant of the return value. \n\nSpecial cases are (in order): \n\n```\nAtan2(y, NaN) = NaN\nAtan2(NaN, x) = NaN\nAtan2(+0, x>=0) = +0\nAtan2(-0, x>=0) = -0\nAtan2(+0, x<=-0) = +Pi\nAtan2(-0, x<=-0) = -Pi\nAtan2(y>0, 0) = +Pi/2\nAtan2(y<0, 0) = -Pi/2\nAtan2(+Inf, +Inf) = +Pi/4\nAtan2(-Inf, +Inf) = -Pi/4\nAtan2(+Inf, -Inf) = 3Pi/4\nAtan2(-Inf, -Inf) = -3Pi/4\nAtan2(y, +Inf) = 0\nAtan2(y>0, -Inf) = +Pi\nAtan2(y<0, -Inf) = -Pi\nAtan2(+Inf, x) = +Pi/2\nAtan2(-Inf, x) = -Pi/2\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#atan2",
              "documentation": {
                "identifier": "atan2",
                "newPage": false,
                "searchKey": "math.atan2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func atan2(y, x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc atan2(y, x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Atanh",
              "documentation": {
                "identifier": "Atanh",
                "newPage": false,
                "searchKey": "math.Atanh",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Atanh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Atanh(x float64) float64\n```\n\nAtanh returns the inverse hyperbolic tangent of x. \n\nSpecial cases are: \n\n```\nAtanh(1) = +Inf\nAtanh(±0) = ±0\nAtanh(-1) = -Inf\nAtanh(x) = NaN if x < -1 or x > 1\nAtanh(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#atanh",
              "documentation": {
                "identifier": "atanh",
                "newPage": false,
                "searchKey": "math.atanh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func atanh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc atanh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Inf",
              "documentation": {
                "identifier": "Inf",
                "newPage": false,
                "searchKey": "math.Inf",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Inf(sign int) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Inf(sign int) float64\n```\n\nInf returns positive infinity if sign >= 0, negative infinity if sign < 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#NaN",
              "documentation": {
                "identifier": "NaN",
                "newPage": false,
                "searchKey": "math.NaN",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NaN() float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NaN() float64\n```\n\nNaN returns an IEEE 754 `not-a-number' value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#IsNaN",
              "documentation": {
                "identifier": "IsNaN",
                "newPage": false,
                "searchKey": "math.IsNaN",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsNaN(f float64) (is bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsNaN(f float64) (is bool)\n```\n\nIsNaN reports whether f is an IEEE 754 `not-a-number' value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#IsInf",
              "documentation": {
                "identifier": "IsInf",
                "newPage": false,
                "searchKey": "math.IsInf",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsInf(f float64, sign int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsInf(f float64, sign int) bool\n```\n\nIsInf reports whether f is an infinity, according to sign. If sign > 0, IsInf reports whether f is positive infinity. If sign < 0, IsInf reports whether f is negative infinity. If sign == 0, IsInf reports whether f is either infinity. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#normalize",
              "documentation": {
                "identifier": "normalize",
                "newPage": false,
                "searchKey": "math.normalize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func normalize(x float64) (y float64, exp int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc normalize(x float64) (y float64, exp int)\n```\n\nnormalize returns a normal number y and exponent exp satisfying x == y × 2**exp. It assumes x is finite and non-zero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Cbrt",
              "documentation": {
                "identifier": "Cbrt",
                "newPage": false,
                "searchKey": "math.Cbrt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Cbrt(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Cbrt(x float64) float64\n```\n\nCbrt returns the cube root of x. \n\nSpecial cases are: \n\n```\nCbrt(±0) = ±0\nCbrt(±Inf) = ±Inf\nCbrt(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#cbrt",
              "documentation": {
                "identifier": "cbrt",
                "newPage": false,
                "searchKey": "math.cbrt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func cbrt(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cbrt(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Copysign",
              "documentation": {
                "identifier": "Copysign",
                "newPage": false,
                "searchKey": "math.Copysign",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Copysign(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Copysign(x, y float64) float64\n```\n\nCopysign returns a value with the magnitude of x and the sign of y. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Dim",
              "documentation": {
                "identifier": "Dim",
                "newPage": false,
                "searchKey": "math.Dim",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Dim(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Dim(x, y float64) float64\n```\n\nDim returns the maximum of x-y or 0. \n\nSpecial cases are: \n\n```\nDim(+Inf, +Inf) = NaN\nDim(-Inf, -Inf) = NaN\nDim(x, NaN) = Dim(NaN, x) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Max",
              "documentation": {
                "identifier": "Max",
                "newPage": false,
                "searchKey": "math.Max",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Max(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Max(x, y float64) float64\n```\n\nMax returns the larger of x or y. \n\nSpecial cases are: \n\n```\nMax(x, +Inf) = Max(+Inf, x) = +Inf\nMax(x, NaN) = Max(NaN, x) = NaN\nMax(+0, ±0) = Max(±0, +0) = +0\nMax(-0, -0) = -0\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#max",
              "documentation": {
                "identifier": "max",
                "newPage": false,
                "searchKey": "math.max",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func max(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc max(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Min",
              "documentation": {
                "identifier": "Min",
                "newPage": false,
                "searchKey": "math.Min",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Min(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Min(x, y float64) float64\n```\n\nMin returns the smaller of x or y. \n\nSpecial cases are: \n\n```\nMin(x, -Inf) = Min(-Inf, x) = -Inf\nMin(x, NaN) = Min(NaN, x) = NaN\nMin(-0, ±0) = Min(±0, -0) = -0\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#min",
              "documentation": {
                "identifier": "min",
                "newPage": false,
                "searchKey": "math.min",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func min(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc min(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archMax",
              "documentation": {
                "identifier": "archMax",
                "newPage": false,
                "searchKey": "math.archMax",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archMax(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archMax(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archMin",
              "documentation": {
                "identifier": "archMin",
                "newPage": false,
                "searchKey": "math.archMin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archMin(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archMin(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Erf",
              "documentation": {
                "identifier": "Erf",
                "newPage": false,
                "searchKey": "math.Erf",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Erf(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Erf(x float64) float64\n```\n\nErf returns the error function of x. \n\nSpecial cases are: \n\n```\nErf(+Inf) = 1\nErf(-Inf) = -1\nErf(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#erf",
              "documentation": {
                "identifier": "erf",
                "newPage": false,
                "searchKey": "math.erf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func erf(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc erf(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Erfc",
              "documentation": {
                "identifier": "Erfc",
                "newPage": false,
                "searchKey": "math.Erfc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Erfc(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Erfc(x float64) float64\n```\n\nErfc returns the complementary error function of x. \n\nSpecial cases are: \n\n```\nErfc(+Inf) = 0\nErfc(-Inf) = 2\nErfc(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#erfc",
              "documentation": {
                "identifier": "erfc",
                "newPage": false,
                "searchKey": "math.erfc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func erfc(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc erfc(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Erfinv",
              "documentation": {
                "identifier": "Erfinv",
                "newPage": false,
                "searchKey": "math.Erfinv",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Erfinv(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Erfinv(x float64) float64\n```\n\nErfinv returns the inverse error function of x. \n\nSpecial cases are: \n\n```\nErfinv(1) = +Inf\nErfinv(-1) = -Inf\nErfinv(x) = NaN if x < -1 or x > 1\nErfinv(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Erfcinv",
              "documentation": {
                "identifier": "Erfcinv",
                "newPage": false,
                "searchKey": "math.Erfcinv",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Erfcinv(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Erfcinv(x float64) float64\n```\n\nErfcinv returns the inverse of Erfc(x). \n\nSpecial cases are: \n\n```\nErfcinv(0) = +Inf\nErfcinv(2) = -Inf\nErfcinv(x) = NaN if x < 0 or x > 2\nErfcinv(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Exp",
              "documentation": {
                "identifier": "Exp",
                "newPage": false,
                "searchKey": "math.Exp",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Exp(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Exp(x float64) float64\n```\n\nExp returns e**x, the base-e exponential of x. \n\nSpecial cases are: \n\n```\nExp(+Inf) = +Inf\nExp(NaN) = NaN\n\n```\nVery large values overflow to 0 or +Inf. Very small values underflow to 1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#exp",
              "documentation": {
                "identifier": "exp",
                "newPage": false,
                "searchKey": "math.exp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func exp(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc exp(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Exp2",
              "documentation": {
                "identifier": "Exp2",
                "newPage": false,
                "searchKey": "math.Exp2",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Exp2(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Exp2(x float64) float64\n```\n\nExp2 returns 2**x, the base-2 exponential of x. \n\nSpecial cases are the same as Exp. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#exp2",
              "documentation": {
                "identifier": "exp2",
                "newPage": false,
                "searchKey": "math.exp2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func exp2(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc exp2(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#expmulti",
              "documentation": {
                "identifier": "expmulti",
                "newPage": false,
                "searchKey": "math.expmulti",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expmulti(hi, lo float64, k int) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expmulti(hi, lo float64, k int) float64\n```\n\nexp1 returns e**r × 2**k where r = hi - lo and |r| ≤ ln(2)/2. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archExp2",
              "documentation": {
                "identifier": "archExp2",
                "newPage": false,
                "searchKey": "math.archExp2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archExp2(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archExp2(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archExp",
              "documentation": {
                "identifier": "archExp",
                "newPage": false,
                "searchKey": "math.archExp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archExp(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archExp(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Expm1",
              "documentation": {
                "identifier": "Expm1",
                "newPage": false,
                "searchKey": "math.Expm1",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Expm1(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Expm1(x float64) float64\n```\n\nExpm1 returns e**x - 1, the base-e exponential of x minus 1. It is more accurate than Exp(x) - 1 when x is near zero. \n\nSpecial cases are: \n\n```\nExpm1(+Inf) = +Inf\nExpm1(-Inf) = -1\nExpm1(NaN) = NaN\n\n```\nVery large values overflow to -1 or +Inf. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#expm1",
              "documentation": {
                "identifier": "expm1",
                "newPage": false,
                "searchKey": "math.expm1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expm1(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expm1(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Floor",
              "documentation": {
                "identifier": "Floor",
                "newPage": false,
                "searchKey": "math.Floor",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Floor(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Floor(x float64) float64\n```\n\nFloor returns the greatest integer value less than or equal to x. \n\nSpecial cases are: \n\n```\nFloor(±0) = ±0\nFloor(±Inf) = ±Inf\nFloor(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#floor",
              "documentation": {
                "identifier": "floor",
                "newPage": false,
                "searchKey": "math.floor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func floor(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc floor(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Ceil",
              "documentation": {
                "identifier": "Ceil",
                "newPage": false,
                "searchKey": "math.Ceil",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Ceil(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Ceil(x float64) float64\n```\n\nCeil returns the least integer value greater than or equal to x. \n\nSpecial cases are: \n\n```\nCeil(±0) = ±0\nCeil(±Inf) = ±Inf\nCeil(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ceil",
              "documentation": {
                "identifier": "ceil",
                "newPage": false,
                "searchKey": "math.ceil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ceil(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ceil(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Trunc",
              "documentation": {
                "identifier": "Trunc",
                "newPage": false,
                "searchKey": "math.Trunc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Trunc(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Trunc(x float64) float64\n```\n\nTrunc returns the integer value of x. \n\nSpecial cases are: \n\n```\nTrunc(±0) = ±0\nTrunc(±Inf) = ±Inf\nTrunc(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#trunc",
              "documentation": {
                "identifier": "trunc",
                "newPage": false,
                "searchKey": "math.trunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func trunc(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trunc(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Round",
              "documentation": {
                "identifier": "Round",
                "newPage": false,
                "searchKey": "math.Round",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Round(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Round(x float64) float64\n```\n\nRound returns the nearest integer, rounding half away from zero. \n\nSpecial cases are: \n\n```\nRound(±0) = ±0\nRound(±Inf) = ±Inf\nRound(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#RoundToEven",
              "documentation": {
                "identifier": "RoundToEven",
                "newPage": false,
                "searchKey": "math.RoundToEven",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RoundToEven(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RoundToEven(x float64) float64\n```\n\nRoundToEven returns the nearest integer, rounding ties to even. \n\nSpecial cases are: \n\n```\nRoundToEven(±0) = ±0\nRoundToEven(±Inf) = ±Inf\nRoundToEven(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archFloor",
              "documentation": {
                "identifier": "archFloor",
                "newPage": false,
                "searchKey": "math.archFloor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archFloor(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archFloor(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archCeil",
              "documentation": {
                "identifier": "archCeil",
                "newPage": false,
                "searchKey": "math.archCeil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archCeil(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archCeil(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archTrunc",
              "documentation": {
                "identifier": "archTrunc",
                "newPage": false,
                "searchKey": "math.archTrunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archTrunc(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archTrunc(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#zero",
              "documentation": {
                "identifier": "zero",
                "newPage": false,
                "searchKey": "math.zero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func zero(x uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc zero(x uint64) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#nonzero",
              "documentation": {
                "identifier": "nonzero",
                "newPage": false,
                "searchKey": "math.nonzero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nonzero(x uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nonzero(x uint64) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#shl",
              "documentation": {
                "identifier": "shl",
                "newPage": false,
                "searchKey": "math.shl",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func shl(u1, u2 uint64, n uint) (r1, r2 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shl(u1, u2 uint64, n uint) (r1, r2 uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#shr",
              "documentation": {
                "identifier": "shr",
                "newPage": false,
                "searchKey": "math.shr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func shr(u1, u2 uint64, n uint) (r1, r2 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shr(u1, u2 uint64, n uint) (r1, r2 uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#shrcompress",
              "documentation": {
                "identifier": "shrcompress",
                "newPage": false,
                "searchKey": "math.shrcompress",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func shrcompress(u1, u2 uint64, n uint) (r1, r2 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shrcompress(u1, u2 uint64, n uint) (r1, r2 uint64)\n```\n\nshrcompress compresses the bottom n+1 bits of the two-word value into a single bit. the result is equal to the value shifted to the right by n, except the result's 0th bit is set to the bitwise OR of the bottom n+1 bits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#lz",
              "documentation": {
                "identifier": "lz",
                "newPage": false,
                "searchKey": "math.lz",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func lz(u1, u2 uint64) (l int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lz(u1, u2 uint64) (l int32)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#split",
              "documentation": {
                "identifier": "split",
                "newPage": false,
                "searchKey": "math.split",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func split(b uint64) (sign uint32, exp int32, mantissa uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc split(b uint64) (sign uint32, exp int32, mantissa uint64)\n```\n\nsplit splits b into sign, biased exponent, and mantissa. It adds the implicit 1 bit to the mantissa for normal values, and normalizes subnormal values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#FMA",
              "documentation": {
                "identifier": "FMA",
                "newPage": false,
                "searchKey": "math.FMA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FMA(x, y, z float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FMA(x, y, z float64) float64\n```\n\nFMA returns x * y + z, computed with only one rounding. (That is, FMA returns the fused multiply-add of x, y, and z.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Frexp",
              "documentation": {
                "identifier": "Frexp",
                "newPage": false,
                "searchKey": "math.Frexp",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Frexp(f float64) (frac float64, exp int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Frexp(f float64) (frac float64, exp int)\n```\n\nFrexp breaks f into a normalized fraction and an integral power of two. It returns frac and exp satisfying f == frac × 2**exp, with the absolute value of frac in the interval [½, 1). \n\nSpecial cases are: \n\n```\nFrexp(±0) = ±0, 0\nFrexp(±Inf) = ±Inf, 0\nFrexp(NaN) = NaN, 0\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#frexp",
              "documentation": {
                "identifier": "frexp",
                "newPage": false,
                "searchKey": "math.frexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func frexp(f float64) (frac float64, exp int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc frexp(f float64) (frac float64, exp int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#stirling",
              "documentation": {
                "identifier": "stirling",
                "newPage": false,
                "searchKey": "math.stirling",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stirling(x float64) (float64, float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stirling(x float64) (float64, float64)\n```\n\nGamma function computed by Stirling's formula. The pair of results must be multiplied together to get the actual answer. The multiplication is left to the caller so that, if careful, the caller can avoid infinity for 172 <= x <= 180. The polynomial is valid for 33 <= x <= 172; larger values are only used in reciprocal and produce denormalized floats. The lower precision there masks any imprecision in the polynomial. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Gamma",
              "documentation": {
                "identifier": "Gamma",
                "newPage": false,
                "searchKey": "math.Gamma",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Gamma(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Gamma(x float64) float64\n```\n\nGamma returns the Gamma function of x. \n\nSpecial cases are: \n\n```\nGamma(+Inf) = +Inf\nGamma(+0) = +Inf\nGamma(-0) = -Inf\nGamma(x) = NaN for integer x < 0\nGamma(-Inf) = NaN\nGamma(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#isNegInt",
              "documentation": {
                "identifier": "isNegInt",
                "newPage": false,
                "searchKey": "math.isNegInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isNegInt(x float64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isNegInt(x float64) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Hypot",
              "documentation": {
                "identifier": "Hypot",
                "newPage": false,
                "searchKey": "math.Hypot",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Hypot(p, q float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Hypot(p, q float64) float64\n```\n\nHypot returns Sqrt(p*p + q*q), taking care to avoid unnecessary overflow and underflow. \n\nSpecial cases are: \n\n```\nHypot(±Inf, q) = +Inf\nHypot(p, ±Inf) = +Inf\nHypot(NaN, q) = NaN\nHypot(p, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#hypot",
              "documentation": {
                "identifier": "hypot",
                "newPage": false,
                "searchKey": "math.hypot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hypot(p, q float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hypot(p, q float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archHypot",
              "documentation": {
                "identifier": "archHypot",
                "newPage": false,
                "searchKey": "math.archHypot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archHypot(p, q float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archHypot(p, q float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#J0",
              "documentation": {
                "identifier": "J0",
                "newPage": false,
                "searchKey": "math.J0",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func J0(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc J0(x float64) float64\n```\n\nJ0 returns the order-zero Bessel function of the first kind. \n\nSpecial cases are: \n\n```\nJ0(±Inf) = 0\nJ0(0) = 1\nJ0(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Y0",
              "documentation": {
                "identifier": "Y0",
                "newPage": false,
                "searchKey": "math.Y0",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Y0(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Y0(x float64) float64\n```\n\nY0 returns the order-zero Bessel function of the second kind. \n\nSpecial cases are: \n\n```\nY0(+Inf) = 0\nY0(0) = -Inf\nY0(x < 0) = NaN\nY0(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pzero",
              "documentation": {
                "identifier": "pzero",
                "newPage": false,
                "searchKey": "math.pzero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pzero(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pzero(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qzero",
              "documentation": {
                "identifier": "qzero",
                "newPage": false,
                "searchKey": "math.qzero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func qzero(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc qzero(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#J1",
              "documentation": {
                "identifier": "J1",
                "newPage": false,
                "searchKey": "math.J1",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func J1(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc J1(x float64) float64\n```\n\nJ1 returns the order-one Bessel function of the first kind. \n\nSpecial cases are: \n\n```\nJ1(±Inf) = 0\nJ1(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Y1",
              "documentation": {
                "identifier": "Y1",
                "newPage": false,
                "searchKey": "math.Y1",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Y1(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Y1(x float64) float64\n```\n\nY1 returns the order-one Bessel function of the second kind. \n\nSpecial cases are: \n\n```\nY1(+Inf) = 0\nY1(0) = -Inf\nY1(x < 0) = NaN\nY1(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pone",
              "documentation": {
                "identifier": "pone",
                "newPage": false,
                "searchKey": "math.pone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pone(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pone(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#qone",
              "documentation": {
                "identifier": "qone",
                "newPage": false,
                "searchKey": "math.qone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func qone(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc qone(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Jn",
              "documentation": {
                "identifier": "Jn",
                "newPage": false,
                "searchKey": "math.Jn",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Jn(n int, x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Jn(n int, x float64) float64\n```\n\nJn returns the order-n Bessel function of the first kind. \n\nSpecial cases are: \n\n```\nJn(n, ±Inf) = 0\nJn(n, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Yn",
              "documentation": {
                "identifier": "Yn",
                "newPage": false,
                "searchKey": "math.Yn",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Yn(n int, x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Yn(n int, x float64) float64\n```\n\nYn returns the order-n Bessel function of the second kind. \n\nSpecial cases are: \n\n```\nYn(n, +Inf) = 0\nYn(n ≥ 0, 0) = -Inf\nYn(n < 0, 0) = +Inf if n is odd, -Inf if n is even\nYn(n, x < 0) = NaN\nYn(n, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Ldexp",
              "documentation": {
                "identifier": "Ldexp",
                "newPage": false,
                "searchKey": "math.Ldexp",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Ldexp(frac float64, exp int) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Ldexp(frac float64, exp int) float64\n```\n\nLdexp is the inverse of Frexp. It returns frac × 2**exp. \n\nSpecial cases are: \n\n```\nLdexp(±0, exp) = ±0\nLdexp(±Inf, exp) = ±Inf\nLdexp(NaN, exp) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ldexp",
              "documentation": {
                "identifier": "ldexp",
                "newPage": false,
                "searchKey": "math.ldexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ldexp(frac float64, exp int) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ldexp(frac float64, exp int) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Lgamma",
              "documentation": {
                "identifier": "Lgamma",
                "newPage": false,
                "searchKey": "math.Lgamma",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Lgamma(x float64) (lgamma float64, sign int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Lgamma(x float64) (lgamma float64, sign int)\n```\n\nLgamma returns the natural logarithm and sign (-1 or +1) of Gamma(x). \n\nSpecial cases are: \n\n```\nLgamma(+Inf) = +Inf\nLgamma(0) = +Inf\nLgamma(-integer) = +Inf\nLgamma(-Inf) = -Inf\nLgamma(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sinPi",
              "documentation": {
                "identifier": "sinPi",
                "newPage": false,
                "searchKey": "math.sinPi",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sinPi(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sinPi(x float64) float64\n```\n\nsinPi(x) is a helper function for negative x \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Log",
              "documentation": {
                "identifier": "Log",
                "newPage": false,
                "searchKey": "math.Log",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Log(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Log(x float64) float64\n```\n\nLog returns the natural logarithm of x. \n\nSpecial cases are: \n\n```\nLog(+Inf) = +Inf\nLog(0) = -Inf\nLog(x < 0) = NaN\nLog(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#log",
              "documentation": {
                "identifier": "log",
                "newPage": false,
                "searchKey": "math.log",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func log(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc log(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Log10",
              "documentation": {
                "identifier": "Log10",
                "newPage": false,
                "searchKey": "math.Log10",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Log10(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Log10(x float64) float64\n```\n\nLog10 returns the decimal logarithm of x. The special cases are the same as for Log. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#log10",
              "documentation": {
                "identifier": "log10",
                "newPage": false,
                "searchKey": "math.log10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func log10(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc log10(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Log2",
              "documentation": {
                "identifier": "Log2",
                "newPage": false,
                "searchKey": "math.Log2",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Log2(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Log2(x float64) float64\n```\n\nLog2 returns the binary logarithm of x. The special cases are the same as for Log. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#log2",
              "documentation": {
                "identifier": "log2",
                "newPage": false,
                "searchKey": "math.log2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func log2(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc log2(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Log1p",
              "documentation": {
                "identifier": "Log1p",
                "newPage": false,
                "searchKey": "math.Log1p",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Log1p(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Log1p(x float64) float64\n```\n\nLog1p returns the natural logarithm of 1 plus its argument x. It is more accurate than Log(1 + x) when x is near zero. \n\nSpecial cases are: \n\n```\nLog1p(+Inf) = +Inf\nLog1p(±0) = ±0\nLog1p(-1) = -Inf\nLog1p(x < -1) = NaN\nLog1p(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#log1p",
              "documentation": {
                "identifier": "log1p",
                "newPage": false,
                "searchKey": "math.log1p",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func log1p(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc log1p(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archLog",
              "documentation": {
                "identifier": "archLog",
                "newPage": false,
                "searchKey": "math.archLog",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archLog(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archLog(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Logb",
              "documentation": {
                "identifier": "Logb",
                "newPage": false,
                "searchKey": "math.Logb",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Logb(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Logb(x float64) float64\n```\n\nLogb returns the binary exponent of x. \n\nSpecial cases are: \n\n```\nLogb(±Inf) = +Inf\nLogb(0) = -Inf\nLogb(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Ilogb",
              "documentation": {
                "identifier": "Ilogb",
                "newPage": false,
                "searchKey": "math.Ilogb",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Ilogb(x float64) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Ilogb(x float64) int\n```\n\nIlogb returns the binary exponent of x as an integer. \n\nSpecial cases are: \n\n```\nIlogb(±Inf) = MaxInt32\nIlogb(0) = MinInt32\nIlogb(NaN) = MaxInt32\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#ilogb",
              "documentation": {
                "identifier": "ilogb",
                "newPage": false,
                "searchKey": "math.ilogb",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ilogb(x float64) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ilogb(x float64) int\n```\n\nlogb returns the binary exponent of x. It assumes x is finite and non-zero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Mod",
              "documentation": {
                "identifier": "Mod",
                "newPage": false,
                "searchKey": "math.Mod",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Mod(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Mod(x, y float64) float64\n```\n\nMod returns the floating-point remainder of x/y. The magnitude of the result is less than y and its sign agrees with that of x. \n\nSpecial cases are: \n\n```\nMod(±Inf, y) = NaN\nMod(NaN, y) = NaN\nMod(x, 0) = NaN\nMod(x, ±Inf) = x\nMod(x, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#mod",
              "documentation": {
                "identifier": "mod",
                "newPage": false,
                "searchKey": "math.mod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mod(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mod(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Modf",
              "documentation": {
                "identifier": "Modf",
                "newPage": false,
                "searchKey": "math.Modf",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Modf(f float64) (int float64, frac float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Modf(f float64) (int float64, frac float64)\n```\n\nModf returns integer and fractional floating-point numbers that sum to f. Both values have the same sign as f. \n\nSpecial cases are: \n\n```\nModf(±Inf) = ±Inf, NaN\nModf(NaN) = NaN, NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#modf",
              "documentation": {
                "identifier": "modf",
                "newPage": false,
                "searchKey": "math.modf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func modf(f float64) (int float64, frac float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc modf(f float64) (int float64, frac float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archModf",
              "documentation": {
                "identifier": "archModf",
                "newPage": false,
                "searchKey": "math.archModf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archModf(f float64) (int float64, frac float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archModf(f float64) (int float64, frac float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Nextafter32",
              "documentation": {
                "identifier": "Nextafter32",
                "newPage": false,
                "searchKey": "math.Nextafter32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Nextafter32(x, y float32) (r float32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Nextafter32(x, y float32) (r float32)\n```\n\nNextafter32 returns the next representable float32 value after x towards y. \n\nSpecial cases are: \n\n```\nNextafter32(x, x)   = x\nNextafter32(NaN, y) = NaN\nNextafter32(x, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Nextafter",
              "documentation": {
                "identifier": "Nextafter",
                "newPage": false,
                "searchKey": "math.Nextafter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Nextafter(x, y float64) (r float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Nextafter(x, y float64) (r float64)\n```\n\nNextafter returns the next representable float64 value after x towards y. \n\nSpecial cases are: \n\n```\nNextafter(x, x)   = x\nNextafter(NaN, y) = NaN\nNextafter(x, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#isOddInt",
              "documentation": {
                "identifier": "isOddInt",
                "newPage": false,
                "searchKey": "math.isOddInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isOddInt(x float64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isOddInt(x float64) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Pow",
              "documentation": {
                "identifier": "Pow",
                "newPage": false,
                "searchKey": "math.Pow",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Pow(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Pow(x, y float64) float64\n```\n\nPow returns x**y, the base-x exponential of y. \n\nSpecial cases are (in order): \n\n```\nPow(x, ±0) = 1 for any x\nPow(1, y) = 1 for any y\nPow(x, 1) = x for any x\nPow(NaN, y) = NaN\nPow(x, NaN) = NaN\nPow(±0, y) = ±Inf for y an odd integer < 0\nPow(±0, -Inf) = +Inf\nPow(±0, +Inf) = +0\nPow(±0, y) = +Inf for finite y < 0 and not an odd integer\nPow(±0, y) = ±0 for y an odd integer > 0\nPow(±0, y) = +0 for finite y > 0 and not an odd integer\nPow(-1, ±Inf) = 1\nPow(x, +Inf) = +Inf for |x| > 1\nPow(x, -Inf) = +0 for |x| > 1\nPow(x, +Inf) = +0 for |x| < 1\nPow(x, -Inf) = +Inf for |x| < 1\nPow(+Inf, y) = +Inf for y > 0\nPow(+Inf, y) = +0 for y < 0\nPow(-Inf, y) = Pow(-0, -y)\nPow(x, y) = NaN for finite x < 0 and finite non-integer y\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#pow",
              "documentation": {
                "identifier": "pow",
                "newPage": false,
                "searchKey": "math.pow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pow(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pow(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Pow10",
              "documentation": {
                "identifier": "Pow10",
                "newPage": false,
                "searchKey": "math.Pow10",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Pow10(n int) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Pow10(n int) float64\n```\n\nPow10 returns 10**n, the base-10 exponential of n. \n\nSpecial cases are: \n\n```\nPow10(n) =    0 for n < -323\nPow10(n) = +Inf for n > 308\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Remainder",
              "documentation": {
                "identifier": "Remainder",
                "newPage": false,
                "searchKey": "math.Remainder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Remainder(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Remainder(x, y float64) float64\n```\n\nRemainder returns the IEEE 754 floating-point remainder of x/y. \n\nSpecial cases are: \n\n```\nRemainder(±Inf, y) = NaN\nRemainder(NaN, y) = NaN\nRemainder(x, 0) = NaN\nRemainder(x, ±Inf) = x\nRemainder(x, NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#remainder",
              "documentation": {
                "identifier": "remainder",
                "newPage": false,
                "searchKey": "math.remainder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func remainder(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc remainder(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Signbit",
              "documentation": {
                "identifier": "Signbit",
                "newPage": false,
                "searchKey": "math.Signbit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Signbit(x float64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Signbit(x float64) bool\n```\n\nSignbit reports whether x is negative or negative zero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Cos",
              "documentation": {
                "identifier": "Cos",
                "newPage": false,
                "searchKey": "math.Cos",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Cos(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Cos(x float64) float64\n```\n\nCos returns the cosine of the radian argument x. \n\nSpecial cases are: \n\n```\nCos(±Inf) = NaN\nCos(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#cos",
              "documentation": {
                "identifier": "cos",
                "newPage": false,
                "searchKey": "math.cos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func cos(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cos(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Sin",
              "documentation": {
                "identifier": "Sin",
                "newPage": false,
                "searchKey": "math.Sin",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sin(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sin(x float64) float64\n```\n\nSin returns the sine of the radian argument x. \n\nSpecial cases are: \n\n```\nSin(±0) = ±0\nSin(±Inf) = NaN\nSin(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sin",
              "documentation": {
                "identifier": "sin",
                "newPage": false,
                "searchKey": "math.sin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sin(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sin(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Sincos",
              "documentation": {
                "identifier": "Sincos",
                "newPage": false,
                "searchKey": "math.Sincos",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sincos(x float64) (sin, cos float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sincos(x float64) (sin, cos float64)\n```\n\nSincos returns Sin(x), Cos(x). \n\nSpecial cases are: \n\n```\nSincos(±0) = ±0, 1\nSincos(±Inf) = NaN, NaN\nSincos(NaN) = NaN, NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Sinh",
              "documentation": {
                "identifier": "Sinh",
                "newPage": false,
                "searchKey": "math.Sinh",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sinh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sinh(x float64) float64\n```\n\nSinh returns the hyperbolic sine of x. \n\nSpecial cases are: \n\n```\nSinh(±0) = ±0\nSinh(±Inf) = ±Inf\nSinh(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sinh",
              "documentation": {
                "identifier": "sinh",
                "newPage": false,
                "searchKey": "math.sinh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sinh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sinh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Cosh",
              "documentation": {
                "identifier": "Cosh",
                "newPage": false,
                "searchKey": "math.Cosh",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Cosh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Cosh(x float64) float64\n```\n\nCosh returns the hyperbolic cosine of x. \n\nSpecial cases are: \n\n```\nCosh(±0) = 1\nCosh(±Inf) = +Inf\nCosh(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#cosh",
              "documentation": {
                "identifier": "cosh",
                "newPage": false,
                "searchKey": "math.cosh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func cosh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cosh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Sqrt",
              "documentation": {
                "identifier": "Sqrt",
                "newPage": false,
                "searchKey": "math.Sqrt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sqrt(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sqrt(x float64) float64\n```\n\nSqrt returns the square root of x. \n\nSpecial cases are: \n\n```\nSqrt(+Inf) = +Inf\nSqrt(±0) = ±0\nSqrt(x < 0) = NaN\nSqrt(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#sqrt",
              "documentation": {
                "identifier": "sqrt",
                "newPage": false,
                "searchKey": "math.sqrt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sqrt(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sqrt(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archSqrt",
              "documentation": {
                "identifier": "archSqrt",
                "newPage": false,
                "searchKey": "math.archSqrt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archSqrt(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archSqrt(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAcos",
              "documentation": {
                "identifier": "archAcos",
                "newPage": false,
                "searchKey": "math.archAcos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAcos(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAcos(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAcosh",
              "documentation": {
                "identifier": "archAcosh",
                "newPage": false,
                "searchKey": "math.archAcosh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAcosh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAcosh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAsin",
              "documentation": {
                "identifier": "archAsin",
                "newPage": false,
                "searchKey": "math.archAsin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAsin(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAsin(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAsinh",
              "documentation": {
                "identifier": "archAsinh",
                "newPage": false,
                "searchKey": "math.archAsinh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAsinh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAsinh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAtan",
              "documentation": {
                "identifier": "archAtan",
                "newPage": false,
                "searchKey": "math.archAtan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAtan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAtan(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAtan2",
              "documentation": {
                "identifier": "archAtan2",
                "newPage": false,
                "searchKey": "math.archAtan2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAtan2(y, x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAtan2(y, x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archAtanh",
              "documentation": {
                "identifier": "archAtanh",
                "newPage": false,
                "searchKey": "math.archAtanh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAtanh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAtanh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archCbrt",
              "documentation": {
                "identifier": "archCbrt",
                "newPage": false,
                "searchKey": "math.archCbrt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archCbrt(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archCbrt(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archCos",
              "documentation": {
                "identifier": "archCos",
                "newPage": false,
                "searchKey": "math.archCos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archCos(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archCos(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archCosh",
              "documentation": {
                "identifier": "archCosh",
                "newPage": false,
                "searchKey": "math.archCosh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archCosh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archCosh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archErf",
              "documentation": {
                "identifier": "archErf",
                "newPage": false,
                "searchKey": "math.archErf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archErf(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archErf(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archErfc",
              "documentation": {
                "identifier": "archErfc",
                "newPage": false,
                "searchKey": "math.archErfc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archErfc(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archErfc(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archExpm1",
              "documentation": {
                "identifier": "archExpm1",
                "newPage": false,
                "searchKey": "math.archExpm1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archExpm1(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archExpm1(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archFrexp",
              "documentation": {
                "identifier": "archFrexp",
                "newPage": false,
                "searchKey": "math.archFrexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archFrexp(x float64) (float64, int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archFrexp(x float64) (float64, int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archLdexp",
              "documentation": {
                "identifier": "archLdexp",
                "newPage": false,
                "searchKey": "math.archLdexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archLdexp(frac float64, exp int) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archLdexp(frac float64, exp int) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archLog10",
              "documentation": {
                "identifier": "archLog10",
                "newPage": false,
                "searchKey": "math.archLog10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archLog10(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archLog10(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archLog2",
              "documentation": {
                "identifier": "archLog2",
                "newPage": false,
                "searchKey": "math.archLog2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archLog2(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archLog2(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archLog1p",
              "documentation": {
                "identifier": "archLog1p",
                "newPage": false,
                "searchKey": "math.archLog1p",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archLog1p(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archLog1p(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archMod",
              "documentation": {
                "identifier": "archMod",
                "newPage": false,
                "searchKey": "math.archMod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archMod(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archMod(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archPow",
              "documentation": {
                "identifier": "archPow",
                "newPage": false,
                "searchKey": "math.archPow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archPow(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archPow(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archRemainder",
              "documentation": {
                "identifier": "archRemainder",
                "newPage": false,
                "searchKey": "math.archRemainder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archRemainder(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archRemainder(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archSin",
              "documentation": {
                "identifier": "archSin",
                "newPage": false,
                "searchKey": "math.archSin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archSin(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archSin(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archSinh",
              "documentation": {
                "identifier": "archSinh",
                "newPage": false,
                "searchKey": "math.archSinh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archSinh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archSinh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archTan",
              "documentation": {
                "identifier": "archTan",
                "newPage": false,
                "searchKey": "math.archTan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archTan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archTan(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#archTanh",
              "documentation": {
                "identifier": "archTanh",
                "newPage": false,
                "searchKey": "math.archTanh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func archTanh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archTanh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Tan",
              "documentation": {
                "identifier": "Tan",
                "newPage": false,
                "searchKey": "math.Tan",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Tan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Tan(x float64) float64\n```\n\nTan returns the tangent of the radian argument x. \n\nSpecial cases are: \n\n```\nTan(±0) = ±0\nTan(±Inf) = NaN\nTan(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#tan",
              "documentation": {
                "identifier": "tan",
                "newPage": false,
                "searchKey": "math.tan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func tan(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tan(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Tanh",
              "documentation": {
                "identifier": "Tanh",
                "newPage": false,
                "searchKey": "math.Tanh",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Tanh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Tanh(x float64) float64\n```\n\nTanh returns the hyperbolic tangent of x. \n\nSpecial cases are: \n\n```\nTanh(±0) = ±0\nTanh(±Inf) = ±1\nTanh(NaN) = NaN\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#tanh",
              "documentation": {
                "identifier": "tanh",
                "newPage": false,
                "searchKey": "math.tanh",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func tanh(x float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tanh(x float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#trigReduce",
              "documentation": {
                "identifier": "trigReduce",
                "newPage": false,
                "searchKey": "math.trigReduce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func trigReduce(x float64) (j uint64, z float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trigReduce(x float64) (j uint64, z float64)\n```\n\ntrigReduce implements Payne-Hanek range reduction by Pi/4 for x > 0. It returns the integer part mod 8 (j) and the fractional part (z) of x / (Pi/4). The implementation is based on: \"ARGUMENT REDUCTION FOR HUGE ARGUMENTS: Good to the Last Bit\" K. C. Ng et al, March 24, 1992 The simulated multi-precision calculation of x*B uses 64-bit integer arithmetic. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Float32bits",
              "documentation": {
                "identifier": "Float32bits",
                "newPage": false,
                "searchKey": "math.Float32bits",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float32bits(f float32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float32bits(f float32) uint32\n```\n\nFloat32bits returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position. Float32bits(Float32frombits(x)) == x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Float32frombits",
              "documentation": {
                "identifier": "Float32frombits",
                "newPage": false,
                "searchKey": "math.Float32frombits",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float32frombits(b uint32) float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float32frombits(b uint32) float32\n```\n\nFloat32frombits returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. Float32frombits(Float32bits(x)) == x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Float64bits",
              "documentation": {
                "identifier": "Float64bits",
                "newPage": false,
                "searchKey": "math.Float64bits",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float64bits(f float64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float64bits(f float64) uint64\n```\n\nFloat64bits returns the IEEE 754 binary representation of f, with the sign bit of f and the result in the same bit position, and Float64bits(Float64frombits(x)) == x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/math#Float64frombits",
              "documentation": {
                "identifier": "Float64frombits",
                "newPage": false,
                "searchKey": "math.Float64frombits",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float64frombits(b uint64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float64frombits(b uint64) float64\n```\n\nFloat64frombits returns the floating-point number corresponding to the IEEE 754 binary representation b, with the sign bit of b and the result in the same bit position. Float64frombits(Float64bits(x)) == x. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/std/math/big"
    },
    {
      "pathID": "/std/math/big_test"
    },
    {
      "pathID": "/std/math/bits"
    },
    {
      "pathID": "/std/math/bits_test"
    },
    {
      "pathID": "/std/math/cmplx"
    },
    {
      "pathID": "/std/math/cmplx_test"
    },
    {
      "pathID": "/std/math/rand"
    },
    {
      "pathID": "/std/math/rand_test"
    }
  ]
}
