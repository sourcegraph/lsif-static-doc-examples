{
  "pathID": "/std/os/exec_test",
  "documentation": {
    "identifier": "exec_test",
    "newPage": true,
    "searchKey": "std/os/exec_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package exec_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/std/os/exec_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/os/exec_test#stdinCloseTestString",
              "documentation": {
                "identifier": "stdinCloseTestString",
                "newPage": false,
                "searchKey": "exec_test.stdinCloseTestString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const stdinCloseTestString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stdinCloseTestString = \"Some test string.\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/os/exec_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/os/exec_test#haveUnexpectedFDs",
              "documentation": {
                "identifier": "haveUnexpectedFDs",
                "newPage": false,
                "searchKey": "exec_test.haveUnexpectedFDs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var haveUnexpectedFDs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar haveUnexpectedFDs bool\n```\n\nhaveUnexpectedFDs is set at init time to report whether any file descriptors were open at program start. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#unfinalizedFiles",
              "documentation": {
                "identifier": "unfinalizedFiles",
                "newPage": false,
                "searchKey": "exec_test.unfinalizedFiles",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unfinalizedFiles"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unfinalizedFiles []*os.File\n```\n\nunfinalizedFiles holds files that should not be finalized, because that would close the associated file descriptor, which we don't want to do. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/os/exec_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/os/exec_test#delayedInfiniteReader",
              "documentation": {
                "identifier": "delayedInfiniteReader",
                "newPage": false,
                "searchKey": "exec_test.delayedInfiniteReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type delayedInfiniteReader struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype delayedInfiniteReader struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/os/exec_test#delayedInfiniteReader.Read",
                    "documentation": {
                      "identifier": "delayedInfiniteReader.Read",
                      "newPage": false,
                      "searchKey": "exec_test.delayedInfiniteReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (delayedInfiniteReader) Read(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (delayedInfiniteReader) Read(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#badWriter",
              "documentation": {
                "identifier": "badWriter",
                "newPage": false,
                "searchKey": "exec_test.badWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type badWriter struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badWriter struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/os/exec_test#badWriter.Write",
                    "documentation": {
                      "identifier": "badWriter.Write",
                      "newPage": false,
                      "searchKey": "exec_test.badWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *badWriter) Write(data []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *badWriter) Write(data []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/os/exec_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleLookPath",
              "documentation": {
                "identifier": "ExampleLookPath",
                "newPage": false,
                "searchKey": "exec_test.ExampleLookPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLookPath()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLookPath()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCommand",
              "documentation": {
                "identifier": "ExampleCommand",
                "newPage": false,
                "searchKey": "exec_test.ExampleCommand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCommand()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCommand()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCommand_environment",
              "documentation": {
                "identifier": "ExampleCommand_environment",
                "newPage": false,
                "searchKey": "exec_test.ExampleCommand_environment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCommand_environment()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCommand_environment()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_Output",
              "documentation": {
                "identifier": "ExampleCmd_Output",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_Output",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_Output()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_Output()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_Run",
              "documentation": {
                "identifier": "ExampleCmd_Run",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_Run",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_Run()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_Run()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_Start",
              "documentation": {
                "identifier": "ExampleCmd_Start",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_Start",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_Start()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_Start()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_StdoutPipe",
              "documentation": {
                "identifier": "ExampleCmd_StdoutPipe",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_StdoutPipe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_StdoutPipe()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_StdoutPipe()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_StdinPipe",
              "documentation": {
                "identifier": "ExampleCmd_StdinPipe",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_StdinPipe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_StdinPipe()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_StdinPipe()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_StderrPipe",
              "documentation": {
                "identifier": "ExampleCmd_StderrPipe",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_StderrPipe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_StderrPipe()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_StderrPipe()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCmd_CombinedOutput",
              "documentation": {
                "identifier": "ExampleCmd_CombinedOutput",
                "newPage": false,
                "searchKey": "exec_test.ExampleCmd_CombinedOutput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCmd_CombinedOutput()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCmd_CombinedOutput()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#ExampleCommandContext",
              "documentation": {
                "identifier": "ExampleCommandContext",
                "newPage": false,
                "searchKey": "exec_test.ExampleCommandContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCommandContext()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCommandContext()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestCredentialNoSetGroups",
              "documentation": {
                "identifier": "TestCredentialNoSetGroups",
                "newPage": false,
                "searchKey": "exec_test.TestCredentialNoSetGroups",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCredentialNoSetGroups(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCredentialNoSetGroups(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestWaitid",
              "documentation": {
                "identifier": "TestWaitid",
                "newPage": false,
                "searchKey": "exec_test.TestWaitid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitid(t *testing.T)\n```\n\nFor issue #19314: make sure that SIGSTOP does not cause the process to appear done. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "exec_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#helperCommandContext",
              "documentation": {
                "identifier": "helperCommandContext",
                "newPage": false,
                "searchKey": "exec_test.helperCommandContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func helperCommandContext(t *testing.T, ctx context.Context, s ...string) (cmd *exec.Cmd)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc helperCommandContext(t *testing.T, ctx context.Context, s ...string) (cmd *exec.Cmd)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#helperCommand",
              "documentation": {
                "identifier": "helperCommand",
                "newPage": false,
                "searchKey": "exec_test.helperCommand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func helperCommand(t *testing.T, s ...string) *exec.Cmd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc helperCommand(t *testing.T, s ...string) *exec.Cmd\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestEcho",
              "documentation": {
                "identifier": "TestEcho",
                "newPage": false,
                "searchKey": "exec_test.TestEcho",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEcho(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEcho(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestCommandRelativeName",
              "documentation": {
                "identifier": "TestCommandRelativeName",
                "newPage": false,
                "searchKey": "exec_test.TestCommandRelativeName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCommandRelativeName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCommandRelativeName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestCatStdin",
              "documentation": {
                "identifier": "TestCatStdin",
                "newPage": false,
                "searchKey": "exec_test.TestCatStdin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCatStdin(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCatStdin(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestEchoFileRace",
              "documentation": {
                "identifier": "TestEchoFileRace",
                "newPage": false,
                "searchKey": "exec_test.TestEchoFileRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEchoFileRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEchoFileRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestCatGoodAndBadFile",
              "documentation": {
                "identifier": "TestCatGoodAndBadFile",
                "newPage": false,
                "searchKey": "exec_test.TestCatGoodAndBadFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCatGoodAndBadFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCatGoodAndBadFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestNoExistExecutable",
              "documentation": {
                "identifier": "TestNoExistExecutable",
                "newPage": false,
                "searchKey": "exec_test.TestNoExistExecutable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoExistExecutable(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoExistExecutable(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestExitStatus",
              "documentation": {
                "identifier": "TestExitStatus",
                "newPage": false,
                "searchKey": "exec_test.TestExitStatus",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExitStatus(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExitStatus(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestExitCode",
              "documentation": {
                "identifier": "TestExitCode",
                "newPage": false,
                "searchKey": "exec_test.TestExitCode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExitCode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExitCode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestPipes",
              "documentation": {
                "identifier": "TestPipes",
                "newPage": false,
                "searchKey": "exec_test.TestPipes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPipes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPipes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestStdinClose",
              "documentation": {
                "identifier": "TestStdinClose",
                "newPage": false,
                "searchKey": "exec_test.TestStdinClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStdinClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStdinClose(t *testing.T)\n```\n\nIssue 6270. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestStdinCloseRace",
              "documentation": {
                "identifier": "TestStdinCloseRace",
                "newPage": false,
                "searchKey": "exec_test.TestStdinCloseRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStdinCloseRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStdinCloseRace(t *testing.T)\n```\n\nIssue 17647. It used to be the case that TestStdinClose, above, would fail when run under the race detector. This test is a variant of TestStdinClose that also used to fail when run under the race detector. This test is run by cmd/dist under the race detector to verify that the race detector no longer reports any problems. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestPipeLookPathLeak",
              "documentation": {
                "identifier": "TestPipeLookPathLeak",
                "newPage": false,
                "searchKey": "exec_test.TestPipeLookPathLeak",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPipeLookPathLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPipeLookPathLeak(t *testing.T)\n```\n\nIssue 5071 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#numOpenFDsAndroid",
              "documentation": {
                "identifier": "numOpenFDsAndroid",
                "newPage": false,
                "searchKey": "exec_test.numOpenFDsAndroid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func numOpenFDsAndroid(t *testing.T) (n int, lsof []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc numOpenFDsAndroid(t *testing.T) (n int, lsof []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestExtraFilesFDShuffle",
              "documentation": {
                "identifier": "TestExtraFilesFDShuffle",
                "newPage": false,
                "searchKey": "exec_test.TestExtraFilesFDShuffle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExtraFilesFDShuffle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExtraFilesFDShuffle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestExtraFiles",
              "documentation": {
                "identifier": "TestExtraFiles",
                "newPage": false,
                "searchKey": "exec_test.TestExtraFiles",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExtraFiles(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExtraFiles(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestExtraFilesRace",
              "documentation": {
                "identifier": "TestExtraFilesRace",
                "newPage": false,
                "searchKey": "exec_test.TestExtraFilesRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExtraFilesRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExtraFilesRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestHelperProcess",
              "documentation": {
                "identifier": "TestHelperProcess",
                "newPage": false,
                "searchKey": "exec_test.TestHelperProcess",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHelperProcess(*testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHelperProcess(*testing.T)\n```\n\nTestHelperProcess isn't a real test. It's used as a helper process for TestParameterRun. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestIgnorePipeErrorOnSuccess",
              "documentation": {
                "identifier": "TestIgnorePipeErrorOnSuccess",
                "newPage": false,
                "searchKey": "exec_test.TestIgnorePipeErrorOnSuccess",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIgnorePipeErrorOnSuccess(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIgnorePipeErrorOnSuccess(t *testing.T)\n```\n\nIssue 9173: ignore stdin pipe writes if the program completes successfully. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestClosePipeOnCopyError",
              "documentation": {
                "identifier": "TestClosePipeOnCopyError",
                "newPage": false,
                "searchKey": "exec_test.TestClosePipeOnCopyError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClosePipeOnCopyError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClosePipeOnCopyError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestOutputStderrCapture",
              "documentation": {
                "identifier": "TestOutputStderrCapture",
                "newPage": false,
                "searchKey": "exec_test.TestOutputStderrCapture",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOutputStderrCapture(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOutputStderrCapture(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestContext",
              "documentation": {
                "identifier": "TestContext",
                "newPage": false,
                "searchKey": "exec_test.TestContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestContextCancel",
              "documentation": {
                "identifier": "TestContextCancel",
                "newPage": false,
                "searchKey": "exec_test.TestContextCancel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContextCancel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContextCancel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestDedupEnvEcho",
              "documentation": {
                "identifier": "TestDedupEnvEcho",
                "newPage": false,
                "searchKey": "exec_test.TestDedupEnvEcho",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDedupEnvEcho(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDedupEnvEcho(t *testing.T)\n```\n\ntest that environment variables are de-duped. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestString",
              "documentation": {
                "identifier": "TestString",
                "newPage": false,
                "searchKey": "exec_test.TestString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestStringPathNotResolved",
              "documentation": {
                "identifier": "TestStringPathNotResolved",
                "newPage": false,
                "searchKey": "exec_test.TestStringPathNotResolved",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringPathNotResolved(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringPathNotResolved(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/os/exec_test#TestChildCriticalEnv",
              "documentation": {
                "identifier": "TestChildCriticalEnv",
                "newPage": false,
                "searchKey": "exec_test.TestChildCriticalEnv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChildCriticalEnv(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChildCriticalEnv(t *testing.T)\n```\n\nstart a child process without the user code explicitly starting with a copy of the parent's. (The Windows SYSTEMROOT issue: Issue 25210) \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
