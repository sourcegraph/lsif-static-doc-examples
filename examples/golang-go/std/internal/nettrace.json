{
  "pathID": "/std/internal/nettrace",
  "documentation": {
    "identifier": "nettrace",
    "newPage": true,
    "searchKey": "std/internal/nettrace",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package nettrace"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package nettrace contains internal hooks for tracing activity in the net package. This package is purely internal for use by the net/http/httptrace package and has no stable API exposed to end users. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/internal/nettrace#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/internal/nettrace#TraceKey",
              "documentation": {
                "identifier": "TraceKey",
                "newPage": false,
                "searchKey": "nettrace.TraceKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TraceKey struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TraceKey struct{}\n```\n\nTraceKey is a context.Context Value key. Its associated value should be a *Trace struct. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/nettrace#LookupIPAltResolverKey",
              "documentation": {
                "identifier": "LookupIPAltResolverKey",
                "newPage": false,
                "searchKey": "nettrace.LookupIPAltResolverKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LookupIPAltResolverKey struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LookupIPAltResolverKey struct{}\n```\n\nLookupIPAltResolverKey is a context.Context Value key used by tests to specify an alternate resolver func. It is not exposed to outsider users. (But see issue 12503) The value should be the same type as lookupIP: \n\n```\nfunc lookupIP(ctx context.Context, host string) ([]IPAddr, error)\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/nettrace#Trace",
              "documentation": {
                "identifier": "Trace",
                "newPage": false,
                "searchKey": "nettrace.Trace",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Trace struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Trace struct {\n\t// DNSStart is called with the hostname of a DNS lookup\n\t// before it begins.\n\tDNSStart func(name string)\n\n\t// DNSDone is called after a DNS lookup completes (or fails).\n\t// The coalesced parameter is whether singleflight de-dupped\n\t// the call. The addrs are of type net.IPAddr but can't\n\t// actually be for circular dependency reasons.\n\tDNSDone func(netIPs []interface{}, coalesced bool, err error)\n\n\t// ConnectStart is called before a Dial, excluding Dials made\n\t// during DNS lookups. In the case of DualStack (Happy Eyeballs)\n\t// dialing, this may be called multiple times, from multiple\n\t// goroutines.\n\tConnectStart func(network, addr string)\n\n\t// ConnectStart is called after a Dial with the results, excluding\n\t// Dials made during DNS lookups. It may also be called multiple\n\t// times, like ConnectStart.\n\tConnectDone func(network, addr string, err error)\n}\n```\n\nTrace contains a set of hooks for tracing events within the net package. Any specific hook may be nil. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
