{
  "pathID": "/std/internal/profile",
  "documentation": {
    "identifier": "profile",
    "newPage": true,
    "searchKey": "std/internal/profile",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package profile"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package profile provides a representation of github.com/google/pprof/proto/profile.proto and methods to encode/decode/merge profiles in this format. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/internal/profile#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/internal/profile#unrecognizedSection",
              "documentation": {
                "identifier": "unrecognizedSection",
                "newPage": false,
                "searchKey": "profile.unrecognizedSection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const unrecognizedSection"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst unrecognizedSection sectionType = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#memoryMapSection",
              "documentation": {
                "identifier": "memoryMapSection",
                "newPage": false,
                "searchKey": "profile.memoryMapSection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const memoryMapSection"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst memoryMapSection\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/internal/profile#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/internal/profile#profileDecoder",
              "documentation": {
                "identifier": "profileDecoder",
                "newPage": false,
                "searchKey": "profile.profileDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var profileDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar profileDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#valueTypeDecoder",
              "documentation": {
                "identifier": "valueTypeDecoder",
                "newPage": false,
                "searchKey": "profile.valueTypeDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var valueTypeDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar valueTypeDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#sampleDecoder",
              "documentation": {
                "identifier": "sampleDecoder",
                "newPage": false,
                "searchKey": "profile.sampleDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sampleDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sampleDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#labelDecoder",
              "documentation": {
                "identifier": "labelDecoder",
                "newPage": false,
                "searchKey": "profile.labelDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var labelDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar labelDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#mappingDecoder",
              "documentation": {
                "identifier": "mappingDecoder",
                "newPage": false,
                "searchKey": "profile.mappingDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mappingDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mappingDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#locationDecoder",
              "documentation": {
                "identifier": "locationDecoder",
                "newPage": false,
                "searchKey": "profile.locationDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var locationDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar locationDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#lineDecoder",
              "documentation": {
                "identifier": "lineDecoder",
                "newPage": false,
                "searchKey": "profile.lineDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var lineDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lineDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#functionDecoder",
              "documentation": {
                "identifier": "functionDecoder",
                "newPage": false,
                "searchKey": "profile.functionDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var functionDecoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar functionDecoder = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#countStartRE",
              "documentation": {
                "identifier": "countStartRE",
                "newPage": false,
                "searchKey": "profile.countStartRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countStartRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countStartRE = regexp.MustCompile(`\\A(\\w+) profile: total \\d+\\n\\z`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#countRE",
              "documentation": {
                "identifier": "countRE",
                "newPage": false,
                "searchKey": "profile.countRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var countRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar countRE = regexp.MustCompile(`\\A(\\d+) @(( 0x[0-9a-f]+)+)\\n\\z`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#heapHeaderRE",
              "documentation": {
                "identifier": "heapHeaderRE",
                "newPage": false,
                "searchKey": "profile.heapHeaderRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapHeaderRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapHeaderRE = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#heapSampleRE",
              "documentation": {
                "identifier": "heapSampleRE",
                "newPage": false,
                "searchKey": "profile.heapSampleRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapSampleRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapSampleRE = regexp.MustCompile(`(-?\\d+): *(-?\\d+) *\\[ *(\\d+): *(\\d+) *] @([ x0-9a-f]*)`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#contentionSampleRE",
              "documentation": {
                "identifier": "contentionSampleRE",
                "newPage": false,
                "searchKey": "profile.contentionSampleRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var contentionSampleRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar contentionSampleRE = regexp.MustCompile(`(\\d+) *(\\d+) @([ x0-9a-f]*)`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#hexNumberRE",
              "documentation": {
                "identifier": "hexNumberRE",
                "newPage": false,
                "searchKey": "profile.hexNumberRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var hexNumberRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hexNumberRE = regexp.MustCompile(`0x[0-9a-f]+`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#growthHeaderRE",
              "documentation": {
                "identifier": "growthHeaderRE",
                "newPage": false,
                "searchKey": "profile.growthHeaderRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var growthHeaderRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar growthHeaderRE = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#fragmentationHeaderRE",
              "documentation": {
                "identifier": "fragmentationHeaderRE",
                "newPage": false,
                "searchKey": "profile.fragmentationHeaderRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fragmentationHeaderRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fragmentationHeaderRE = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#threadzStartRE",
              "documentation": {
                "identifier": "threadzStartRE",
                "newPage": false,
                "searchKey": "profile.threadzStartRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var threadzStartRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar threadzStartRE = regexp.MustCompile(`--- threadz \\d+ ---`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#threadStartRE",
              "documentation": {
                "identifier": "threadStartRE",
                "newPage": false,
                "searchKey": "profile.threadStartRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var threadStartRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar threadStartRE = regexp.MustCompile(`--- Thread ([[:xdigit:]]+) \\(name: (.*)/(\\d+)\\) stack: ---`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#procMapsRE",
              "documentation": {
                "identifier": "procMapsRE",
                "newPage": false,
                "searchKey": "profile.procMapsRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var procMapsRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar procMapsRE = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#briefMapsRE",
              "documentation": {
                "identifier": "briefMapsRE",
                "newPage": false,
                "searchKey": "profile.briefMapsRE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var briefMapsRE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar briefMapsRE = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#LegacyHeapAllocated",
              "documentation": {
                "identifier": "LegacyHeapAllocated",
                "newPage": false,
                "searchKey": "profile.LegacyHeapAllocated",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var LegacyHeapAllocated"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar LegacyHeapAllocated bool\n```\n\nLegacyHeapAllocated instructs the heapz parsers to use the allocated memory stats instead of the default in-use memory. Note that tcmalloc doesn't provide all allocated memory, only in-use stats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#cpuInts",
              "documentation": {
                "identifier": "cpuInts",
                "newPage": false,
                "searchKey": "profile.cpuInts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cpuInts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cpuInts = []func([]byte) (uint64, []byte){\n\tget32l,\n\tget32b,\n\tget64l,\n\tget64b,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#memoryMapTriggers",
              "documentation": {
                "identifier": "memoryMapTriggers",
                "newPage": false,
                "searchKey": "profile.memoryMapTriggers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var memoryMapTriggers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar memoryMapTriggers = []string{\n\t\"--- Memory map: ---\",\n\t\"MAPPED_LIBRARIES:\",\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#heapzSampleTypes",
              "documentation": {
                "identifier": "heapzSampleTypes",
                "newPage": false,
                "searchKey": "profile.heapzSampleTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapzSampleTypes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapzSampleTypes = []string{\"allocations\", \"size\"} // early Go pprof profiles\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#heapzInUseSampleTypes",
              "documentation": {
                "identifier": "heapzInUseSampleTypes",
                "newPage": false,
                "searchKey": "profile.heapzInUseSampleTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapzInUseSampleTypes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapzInUseSampleTypes = []string{\"inuse_objects\", \"inuse_space\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#heapzAllocSampleTypes",
              "documentation": {
                "identifier": "heapzAllocSampleTypes",
                "newPage": false,
                "searchKey": "profile.heapzAllocSampleTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var heapzAllocSampleTypes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar heapzAllocSampleTypes = []string{\"alloc_objects\", \"alloc_space\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#contentionzSampleTypes",
              "documentation": {
                "identifier": "contentionzSampleTypes",
                "newPage": false,
                "searchKey": "profile.contentionzSampleTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var contentionzSampleTypes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar contentionzSampleTypes = []string{\"contentions\", \"delay\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#allocRxStr",
              "documentation": {
                "identifier": "allocRxStr",
                "newPage": false,
                "searchKey": "profile.allocRxStr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allocRxStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allocRxStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#allocSkipRxStr",
              "documentation": {
                "identifier": "allocSkipRxStr",
                "newPage": false,
                "searchKey": "profile.allocSkipRxStr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allocSkipRxStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allocSkipRxStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#cpuProfilerRxStr",
              "documentation": {
                "identifier": "cpuProfilerRxStr",
                "newPage": false,
                "searchKey": "profile.cpuProfilerRxStr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cpuProfilerRxStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cpuProfilerRxStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#lockRxStr",
              "documentation": {
                "identifier": "lockRxStr",
                "newPage": false,
                "searchKey": "profile.lockRxStr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var lockRxStr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lockRxStr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#errUnrecognized",
              "documentation": {
                "identifier": "errUnrecognized",
                "newPage": false,
                "searchKey": "profile.errUnrecognized",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errUnrecognized"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errUnrecognized = fmt.Errorf(\"unrecognized profile format\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#errMalformed",
              "documentation": {
                "identifier": "errMalformed",
                "newPage": false,
                "searchKey": "profile.errMalformed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errMalformed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errMalformed = fmt.Errorf(\"malformed profile format\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#libRx",
              "documentation": {
                "identifier": "libRx",
                "newPage": false,
                "searchKey": "profile.libRx",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var libRx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar libRx = regexp.MustCompile(`([.]so$|[.]so[._][0-9]+)`)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/internal/profile#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/internal/profile#TagMatch",
              "documentation": {
                "identifier": "TagMatch",
                "newPage": false,
                "searchKey": "profile.TagMatch",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TagMatch func(key string, val string, nval int64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TagMatch func(key, val string, nval int64) bool\n```\n\nTagMatch selects tags for filtering \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#sectionType",
              "documentation": {
                "identifier": "sectionType",
                "newPage": false,
                "searchKey": "profile.sectionType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sectionType int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sectionType int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#sectionTrigger",
                    "documentation": {
                      "identifier": "sectionTrigger",
                      "newPage": false,
                      "searchKey": "profile.sectionTrigger",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func sectionTrigger(line string) sectionType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc sectionTrigger(line string) sectionType\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#profileMerger",
              "documentation": {
                "identifier": "profileMerger",
                "newPage": false,
                "searchKey": "profile.profileMerger",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type profileMerger struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype profileMerger struct {\n\tp *Profile\n\n\t// Memoization tables within a profile.\n\tlocationsByID map[uint64]*Location\n\tfunctionsByID map[uint64]*Function\n\tmappingsByID  map[uint64]mapInfo\n\n\t// Memoization tables for profile entities.\n\tsamples   map[sampleKey]*Sample\n\tlocations map[locationKey]*Location\n\tfunctions map[functionKey]*Function\n\tmappings  map[mappingKey]*Mapping\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#profileMerger.mapSample",
                    "documentation": {
                      "identifier": "profileMerger.mapSample",
                      "newPage": false,
                      "searchKey": "profile.profileMerger.mapSample",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pm *profileMerger) mapSample(src *Sample) *Sample"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pm *profileMerger) mapSample(src *Sample) *Sample\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#profileMerger.mapLocation",
                    "documentation": {
                      "identifier": "profileMerger.mapLocation",
                      "newPage": false,
                      "searchKey": "profile.profileMerger.mapLocation",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pm *profileMerger) mapLocation(src *Location) *Location"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pm *profileMerger) mapLocation(src *Location) *Location\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#profileMerger.mapMapping",
                    "documentation": {
                      "identifier": "profileMerger.mapMapping",
                      "newPage": false,
                      "searchKey": "profile.profileMerger.mapMapping",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pm *profileMerger) mapMapping(src *Mapping) mapInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pm *profileMerger) mapMapping(src *Mapping) mapInfo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#profileMerger.mapLine",
                    "documentation": {
                      "identifier": "profileMerger.mapLine",
                      "newPage": false,
                      "searchKey": "profile.profileMerger.mapLine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pm *profileMerger) mapLine(src Line) Line"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pm *profileMerger) mapLine(src Line) Line\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#profileMerger.mapFunction",
                    "documentation": {
                      "identifier": "profileMerger.mapFunction",
                      "newPage": false,
                      "searchKey": "profile.profileMerger.mapFunction",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pm *profileMerger) mapFunction(src *Function) *Function"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pm *profileMerger) mapFunction(src *Function) *Function\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#mapInfo",
              "documentation": {
                "identifier": "mapInfo",
                "newPage": false,
                "searchKey": "profile.mapInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapInfo struct {\n\tm      *Mapping\n\toffset int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#sampleKey",
              "documentation": {
                "identifier": "sampleKey",
                "newPage": false,
                "searchKey": "profile.sampleKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sampleKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sampleKey struct {\n\tlocations string\n\tlabels    string\n\tnumlabels string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#locationKey",
              "documentation": {
                "identifier": "locationKey",
                "newPage": false,
                "searchKey": "profile.locationKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type locationKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype locationKey struct {\n\taddr, mappingID uint64\n\tlines           string\n\tisFolded        bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#mappingKey",
              "documentation": {
                "identifier": "mappingKey",
                "newPage": false,
                "searchKey": "profile.mappingKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mappingKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mappingKey struct {\n\tsize, offset  uint64\n\tbuildIDOrFile string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#functionKey",
              "documentation": {
                "identifier": "functionKey",
                "newPage": false,
                "searchKey": "profile.functionKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type functionKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype functionKey struct {\n\tstartLine                  int64\n\tname, systemName, fileName string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Profile",
              "documentation": {
                "identifier": "Profile",
                "newPage": false,
                "searchKey": "profile.Profile",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Profile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Profile struct {\n\tSampleType        []*ValueType\n\tDefaultSampleType string\n\tSample            []*Sample\n\tMapping           []*Mapping\n\tLocation          []*Location\n\tFunction          []*Function\n\tComments          []string\n\n\tDropFrames string\n\tKeepFrames string\n\n\tTimeNanos     int64\n\tDurationNanos int64\n\tPeriodType    *ValueType\n\tPeriod        int64\n\n\tcommentX           []int64\n\tdropFramesX        int64\n\tkeepFramesX        int64\n\tstringTable        []string\n\tdefaultSampleTypeX int64\n}\n```\n\nProfile is an in-memory representation of profile.proto. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseGoCount",
                    "documentation": {
                      "identifier": "parseGoCount",
                      "newPage": false,
                      "searchKey": "profile.parseGoCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseGoCount(b []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseGoCount(b []byte) (*Profile, error)\n```\n\nparseGoCount parses a Go count profile (e.g., threadcreate or goroutine) and returns a new Profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#ParseTracebacks",
                    "documentation": {
                      "identifier": "ParseTracebacks",
                      "newPage": false,
                      "searchKey": "profile.ParseTracebacks",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseTracebacks(b []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseTracebacks(b []byte) (*Profile, error)\n```\n\nParseTracebacks parses a set of tracebacks and returns a newly populated profile. It will accept any text file and generate a Profile out of it with any hex addresses it can identify, including a process map if it can recognize one. Each sample will include a tag \"source\" with the addresses recognized in string format. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseCPU",
                    "documentation": {
                      "identifier": "parseCPU",
                      "newPage": false,
                      "searchKey": "profile.parseCPU",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseCPU(b []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseCPU(b []byte) (*Profile, error)\n```\n\nparseCPU parses a profilez legacy profile and returns a newly populated Profile. \n\nThe general format for profilez samples is a sequence of words in binary format. The first words are a header with the following data: \n\n```\n1st word -- 0\n2nd word -- 3\n3rd word -- 0 if a c++ application, 1 if a java application.\n4th word -- Sampling period (in microseconds).\n5th word -- Padding.\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#cpuProfile",
                    "documentation": {
                      "identifier": "cpuProfile",
                      "newPage": false,
                      "searchKey": "profile.cpuProfile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func cpuProfile(b []byte, period int64, parse func(b []byte) (uint64, []byte)) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc cpuProfile(b []byte, period int64, parse func(b []byte) (uint64, []byte)) (*Profile, error)\n```\n\ncpuProfile returns a new Profile from C++ profilez data. b is the profile bytes after the header, period is the profiling period, and parse is a function to parse 8-byte chunks from the profile in its native endianness. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseHeap",
                    "documentation": {
                      "identifier": "parseHeap",
                      "newPage": false,
                      "searchKey": "profile.parseHeap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseHeap(b []byte) (p *Profile, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseHeap(b []byte) (p *Profile, err error)\n```\n\nparseHeap parses a heapz legacy or a growthz profile and returns a newly populated Profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseContention",
                    "documentation": {
                      "identifier": "parseContention",
                      "newPage": false,
                      "searchKey": "profile.parseContention",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseContention(b []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseContention(b []byte) (*Profile, error)\n```\n\nparseContention parses a mutex or contention profile. There are 2 cases: \"--- contentionz \" for legacy C++ profiles (and backwards compatibility) \"--- mutex:\" or \"--- contention:\" for profiles generated by the Go runtime. This code converts the text output from runtime into a *Profile. (In the future the runtime might write a serialized Profile directly making this unnecessary.) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseCppContention",
                    "documentation": {
                      "identifier": "parseCppContention",
                      "newPage": false,
                      "searchKey": "profile.parseCppContention",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseCppContention(r *bytes.Buffer) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseCppContention(r *bytes.Buffer) (*Profile, error)\n```\n\nparseCppContention parses the output from synchronization_profiling.cc for backward compatibility, and the compatible (non-debug) block profile output from the Go runtime. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseThread",
                    "documentation": {
                      "identifier": "parseThread",
                      "newPage": false,
                      "searchKey": "profile.parseThread",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseThread(b []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseThread(b []byte) (*Profile, error)\n```\n\nparseThread parses a Threadz profile and returns a new Profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Merge",
                    "documentation": {
                      "identifier": "Merge",
                      "newPage": false,
                      "searchKey": "profile.Merge",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Merge(srcs []*Profile) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Merge(srcs []*Profile) (*Profile, error)\n```\n\nMerge merges all the profiles in profs into a single Profile. Returns a new profile independent of the input profiles. The merged profile is compacted to eliminate unused samples, locations, functions and mappings. Profiles must have identical profile sample and period types or the merge will fail. profile.Period of the resulting profile will be the maximum of all profiles, and profile.TimeNanos will be the earliest nonzero one. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#combineHeaders",
                    "documentation": {
                      "identifier": "combineHeaders",
                      "newPage": false,
                      "searchKey": "profile.combineHeaders",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func combineHeaders(srcs []*Profile) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc combineHeaders(srcs []*Profile) (*Profile, error)\n```\n\ncombineHeaders checks that all profiles can be merged and returns their combined profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Parse",
                    "documentation": {
                      "identifier": "Parse",
                      "newPage": false,
                      "searchKey": "profile.Parse",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Parse(r io.Reader) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Parse(r io.Reader) (*Profile, error)\n```\n\nParse parses a profile and checks for its validity. The input may be a gzip-compressed encoded protobuf or one of many legacy profile formats which may be unsupported in the future. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseLegacy",
                    "documentation": {
                      "identifier": "parseLegacy",
                      "newPage": false,
                      "searchKey": "profile.parseLegacy",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseLegacy(data []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseLegacy(data []byte) (*Profile, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseUncompressed",
                    "documentation": {
                      "identifier": "parseUncompressed",
                      "newPage": false,
                      "searchKey": "profile.parseUncompressed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseUncompressed(data []byte) (*Profile, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseUncompressed(data []byte) (*Profile, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.decoder",
                    "documentation": {
                      "identifier": "Profile.decoder",
                      "newPage": false,
                      "searchKey": "profile.Profile.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.preEncode",
                    "documentation": {
                      "identifier": "Profile.preEncode",
                      "newPage": false,
                      "searchKey": "profile.Profile.preEncode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) preEncode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) preEncode()\n```\n\npreEncode populates the unexported fields to be used by encode (with suffix X) from the corresponding exported fields. The exported fields are cleared up to facilitate testing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.encode",
                    "documentation": {
                      "identifier": "Profile.encode",
                      "newPage": false,
                      "searchKey": "profile.Profile.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.postDecode",
                    "documentation": {
                      "identifier": "Profile.postDecode",
                      "newPage": false,
                      "searchKey": "profile.Profile.postDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) postDecode() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) postDecode() error\n```\n\npostDecode takes the unexported fields populated by decode (with suffix X) and populates the corresponding exported fields. The unexported fields are cleared up to facilitate testing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.FilterSamplesByName",
                    "documentation": {
                      "identifier": "Profile.FilterSamplesByName",
                      "newPage": false,
                      "searchKey": "profile.Profile.FilterSamplesByName",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) FilterSamplesByName(focus, ignore, hide *regexp.Regexp) (fm, im, hm bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) FilterSamplesByName(focus, ignore, hide *regexp.Regexp) (fm, im, hm bool)\n```\n\nFilterSamplesByName filters the samples in a profile and only keeps samples where at least one frame matches focus but none match ignore. Returns true is the corresponding regexp matched at least one sample. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.FilterSamplesByTag",
                    "documentation": {
                      "identifier": "Profile.FilterSamplesByTag",
                      "newPage": false,
                      "searchKey": "profile.Profile.FilterSamplesByTag",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) FilterSamplesByTag(focus, ignore TagMatch) (fm, im bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) FilterSamplesByTag(focus, ignore TagMatch) (fm, im bool)\n```\n\nFilterSamplesByTag removes all samples from the profile, except those that match focus and do not match the ignore regular expression. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.remapLocationIDs",
                    "documentation": {
                      "identifier": "Profile.remapLocationIDs",
                      "newPage": false,
                      "searchKey": "profile.Profile.remapLocationIDs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) remapLocationIDs()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) remapLocationIDs()\n```\n\nremapLocationIDs ensures there is a location for each address referenced by a sample, and remaps the samples to point to the new location ids. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.remapFunctionIDs",
                    "documentation": {
                      "identifier": "Profile.remapFunctionIDs",
                      "newPage": false,
                      "searchKey": "profile.Profile.remapFunctionIDs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) remapFunctionIDs()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) remapFunctionIDs()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.remapMappingIDs",
                    "documentation": {
                      "identifier": "Profile.remapMappingIDs",
                      "newPage": false,
                      "searchKey": "profile.Profile.remapMappingIDs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) remapMappingIDs()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) remapMappingIDs()\n```\n\nremapMappingIDs matches location addresses with existing mappings and updates them appropriately. This is O(N*M), if this ever shows up as a bottleneck, evaluate sorting the mappings and doing a binary search, which would make it O(N*log(M)). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.ParseMemoryMap",
                    "documentation": {
                      "identifier": "Profile.ParseMemoryMap",
                      "newPage": false,
                      "searchKey": "profile.Profile.ParseMemoryMap",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) ParseMemoryMap(rd io.Reader) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) ParseMemoryMap(rd io.Reader) error\n```\n\nParseMemoryMap parses a memory map in the format of /proc/self/maps, and overrides the mappings in the current profile. It renumbers the samples and locations in the profile correspondingly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.addLegacyFrameInfo",
                    "documentation": {
                      "identifier": "Profile.addLegacyFrameInfo",
                      "newPage": false,
                      "searchKey": "profile.Profile.addLegacyFrameInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) addLegacyFrameInfo()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) addLegacyFrameInfo()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Normalize",
                    "documentation": {
                      "identifier": "Profile.Normalize",
                      "newPage": false,
                      "searchKey": "profile.Profile.Normalize",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Normalize(pb *Profile) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Normalize(pb *Profile) error\n```\n\nNormalize normalizes the source profile by multiplying each value in profile by the ratio of the sum of the base profile's values of that sample type to the sum of the source profile's value of that sample type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.compatible",
                    "documentation": {
                      "identifier": "Profile.compatible",
                      "newPage": false,
                      "searchKey": "profile.Profile.compatible",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) compatible(pb *Profile) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) compatible(pb *Profile) error\n```\n\ncompatible determines if two profiles can be compared/merged. returns nil if the profiles are compatible; otherwise an error with details on the incompatibility. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.setMain",
                    "documentation": {
                      "identifier": "Profile.setMain",
                      "newPage": false,
                      "searchKey": "profile.Profile.setMain",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) setMain()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) setMain()\n```\n\nsetMain scans Mapping entries and guesses which entry is main because legacy profiles don't obey the convention of putting main first. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Write",
                    "documentation": {
                      "identifier": "Profile.Write",
                      "newPage": false,
                      "searchKey": "profile.Profile.Write",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Write(w io.Writer) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Write(w io.Writer) error\n```\n\nWrite writes the profile as a gzip-compressed marshaled protobuf. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.CheckValid",
                    "documentation": {
                      "identifier": "Profile.CheckValid",
                      "newPage": false,
                      "searchKey": "profile.Profile.CheckValid",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) CheckValid() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) CheckValid() error\n```\n\nCheckValid tests whether the profile is valid. Checks include, but are not limited to: \n\n```\n- len(Profile.Sample[n].value) == len(Profile.value_unit)\n- Sample.id has a corresponding Profile.Location\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Aggregate",
                    "documentation": {
                      "identifier": "Profile.Aggregate",
                      "newPage": false,
                      "searchKey": "profile.Profile.Aggregate",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Aggregate(inlineFrame, function, filename, linenumber, address bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Aggregate(inlineFrame, function, filename, linenumber, address bool) error\n```\n\nAggregate merges the locations in the profile into equivalence classes preserving the request attributes. It also updates the samples to point to the merged locations. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.String",
                    "documentation": {
                      "identifier": "Profile.String",
                      "newPage": false,
                      "searchKey": "profile.Profile.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) String() string\n```\n\nPrint dumps a text representation of a profile. Intended mainly for debugging purposes. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Merge",
                    "documentation": {
                      "identifier": "Profile.Merge",
                      "newPage": false,
                      "searchKey": "profile.Profile.Merge",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Merge(pb *Profile, r float64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Merge(pb *Profile, r float64) error\n```\n\nMerge adds profile p adjusted by ratio r into profile p. Profiles must be compatible (same Type and SampleType). TODO(rsilvera): consider normalizing the profiles based on the total samples collected. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Compatible",
                    "documentation": {
                      "identifier": "Profile.Compatible",
                      "newPage": false,
                      "searchKey": "profile.Profile.Compatible",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Compatible(pb *Profile) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Compatible(pb *Profile) error\n```\n\nCompatible determines if two profiles can be compared/merged. returns nil if the profiles are compatible; otherwise an error with details on the incompatibility. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.HasFunctions",
                    "documentation": {
                      "identifier": "Profile.HasFunctions",
                      "newPage": false,
                      "searchKey": "profile.Profile.HasFunctions",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) HasFunctions() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) HasFunctions() bool\n```\n\nHasFunctions determines if all locations in this profile have symbolized function information. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.HasFileLines",
                    "documentation": {
                      "identifier": "Profile.HasFileLines",
                      "newPage": false,
                      "searchKey": "profile.Profile.HasFileLines",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) HasFileLines() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) HasFileLines() bool\n```\n\nHasFileLines determines if all locations in this profile have symbolized file and line number information. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Copy",
                    "documentation": {
                      "identifier": "Profile.Copy",
                      "newPage": false,
                      "searchKey": "profile.Profile.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Copy() *Profile"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Copy() *Profile\n```\n\nCopy makes a fully independent copy of a profile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Demangle",
                    "documentation": {
                      "identifier": "Profile.Demangle",
                      "newPage": false,
                      "searchKey": "profile.Profile.Demangle",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Demangle(d Demangler) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Demangle(d Demangler) error\n```\n\nDemangle attempts to demangle and optionally simplify any function names referenced in the profile. It works on a best-effort basis: it will silently preserve the original names in case of any errors. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Empty",
                    "documentation": {
                      "identifier": "Profile.Empty",
                      "newPage": false,
                      "searchKey": "profile.Profile.Empty",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Empty() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Empty() bool\n```\n\nEmpty reports whether the profile contains no samples. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Scale",
                    "documentation": {
                      "identifier": "Profile.Scale",
                      "newPage": false,
                      "searchKey": "profile.Profile.Scale",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Scale(ratio float64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Scale(ratio float64)\n```\n\nScale multiplies all sample values in a profile by a constant. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.ScaleN",
                    "documentation": {
                      "identifier": "Profile.ScaleN",
                      "newPage": false,
                      "searchKey": "profile.Profile.ScaleN",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) ScaleN(ratios []float64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) ScaleN(ratios []float64) error\n```\n\nScaleN multiplies each sample values in a sample by a different amount. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.Prune",
                    "documentation": {
                      "identifier": "Profile.Prune",
                      "newPage": false,
                      "searchKey": "profile.Profile.Prune",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) Prune(dropRx, keepRx *regexp.Regexp)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) Prune(dropRx, keepRx *regexp.Regexp)\n```\n\nPrune removes all nodes beneath a node matching dropRx, and not matching keepRx. If the root node of a Sample matches, the sample will have an empty stack. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Profile.RemoveUninteresting",
                    "documentation": {
                      "identifier": "Profile.RemoveUninteresting",
                      "newPage": false,
                      "searchKey": "profile.Profile.RemoveUninteresting",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Profile) RemoveUninteresting() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Profile) RemoveUninteresting() error\n```\n\nRemoveUninteresting prunes and elides profiles using built-in tables of uninteresting function names. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#ValueType",
              "documentation": {
                "identifier": "ValueType",
                "newPage": false,
                "searchKey": "profile.ValueType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValueType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValueType struct {\n\tType string // cpu, wall, inuse_space, etc\n\tUnit string // seconds, nanoseconds, bytes, etc\n\n\ttypeX int64\n\tunitX int64\n}\n```\n\nValueType corresponds to Profile.ValueType \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#ValueType.decoder",
                    "documentation": {
                      "identifier": "ValueType.decoder",
                      "newPage": false,
                      "searchKey": "profile.ValueType.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ValueType) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ValueType) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#ValueType.encode",
                    "documentation": {
                      "identifier": "ValueType.encode",
                      "newPage": false,
                      "searchKey": "profile.ValueType.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ValueType) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ValueType) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Sample",
              "documentation": {
                "identifier": "Sample",
                "newPage": false,
                "searchKey": "profile.Sample",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sample struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sample struct {\n\tLocation []*Location\n\tValue    []int64\n\tLabel    map[string][]string\n\tNumLabel map[string][]int64\n\tNumUnit  map[string][]string\n\n\tlocationIDX []uint64\n\tlabelX      []Label\n}\n```\n\nSample corresponds to Profile.Sample \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#Sample.decoder",
                    "documentation": {
                      "identifier": "Sample.decoder",
                      "newPage": false,
                      "searchKey": "profile.Sample.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Sample) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Sample) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Sample.encode",
                    "documentation": {
                      "identifier": "Sample.encode",
                      "newPage": false,
                      "searchKey": "profile.Sample.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Sample) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Sample) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Sample.key",
                    "documentation": {
                      "identifier": "Sample.key",
                      "newPage": false,
                      "searchKey": "profile.Sample.key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sample *Sample) key() sampleKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sample *Sample) key() sampleKey\n```\n\nkey generates sampleKey to be used as a key for maps. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Label",
              "documentation": {
                "identifier": "Label",
                "newPage": false,
                "searchKey": "profile.Label",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Label struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Label struct {\n\tkeyX int64\n\t// Exactly one of the two following values must be set\n\tstrX int64\n\tnumX int64 // Integer value for this label\n}\n```\n\nLabel corresponds to Profile.Label \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#Label.decoder",
                    "documentation": {
                      "identifier": "Label.decoder",
                      "newPage": false,
                      "searchKey": "profile.Label.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Label) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Label) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Label.encode",
                    "documentation": {
                      "identifier": "Label.encode",
                      "newPage": false,
                      "searchKey": "profile.Label.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Label) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Label) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Mapping",
              "documentation": {
                "identifier": "Mapping",
                "newPage": false,
                "searchKey": "profile.Mapping",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Mapping struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Mapping struct {\n\tID              uint64\n\tStart           uint64\n\tLimit           uint64\n\tOffset          uint64\n\tFile            string\n\tBuildID         string\n\tHasFunctions    bool\n\tHasFilenames    bool\n\tHasLineNumbers  bool\n\tHasInlineFrames bool\n\n\tfileX    int64\n\tbuildIDX int64\n}\n```\n\nMapping corresponds to Profile.Mapping \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#parseMappingEntry",
                    "documentation": {
                      "identifier": "parseMappingEntry",
                      "newPage": false,
                      "searchKey": "profile.parseMappingEntry",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseMappingEntry(l string) (*Mapping, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseMappingEntry(l string) (*Mapping, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Mapping.decoder",
                    "documentation": {
                      "identifier": "Mapping.decoder",
                      "newPage": false,
                      "searchKey": "profile.Mapping.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Mapping) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Mapping) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Mapping.encode",
                    "documentation": {
                      "identifier": "Mapping.encode",
                      "newPage": false,
                      "searchKey": "profile.Mapping.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Mapping) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Mapping) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Mapping.key",
                    "documentation": {
                      "identifier": "Mapping.key",
                      "newPage": false,
                      "searchKey": "profile.Mapping.key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *Mapping) key() mappingKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *Mapping) key() mappingKey\n```\n\nkey generates encoded strings of Mapping to be used as a key for maps. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Location",
              "documentation": {
                "identifier": "Location",
                "newPage": false,
                "searchKey": "profile.Location",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Location struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Location struct {\n\tID       uint64\n\tMapping  *Mapping\n\tAddress  uint64\n\tLine     []Line\n\tIsFolded bool\n\n\tmappingIDX uint64\n}\n```\n\nLocation corresponds to Profile.Location \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#Location.decoder",
                    "documentation": {
                      "identifier": "Location.decoder",
                      "newPage": false,
                      "searchKey": "profile.Location.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Location) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Location) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Location.encode",
                    "documentation": {
                      "identifier": "Location.encode",
                      "newPage": false,
                      "searchKey": "profile.Location.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Location) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Location) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Location.matchesName",
                    "documentation": {
                      "identifier": "Location.matchesName",
                      "newPage": false,
                      "searchKey": "profile.Location.matchesName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (loc *Location) matchesName(re *regexp.Regexp) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (loc *Location) matchesName(re *regexp.Regexp) bool\n```\n\nmatchesName reports whether the function name or file in the location matches the regular expression. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Location.unmatchedLines",
                    "documentation": {
                      "identifier": "Location.unmatchedLines",
                      "newPage": false,
                      "searchKey": "profile.Location.unmatchedLines",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (loc *Location) unmatchedLines(re *regexp.Regexp) []Line"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (loc *Location) unmatchedLines(re *regexp.Regexp) []Line\n```\n\nunmatchedLines returns the lines in the location that do not match the regular expression. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Location.key",
                    "documentation": {
                      "identifier": "Location.key",
                      "newPage": false,
                      "searchKey": "profile.Location.key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *Location) key() locationKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *Location) key() locationKey\n```\n\nkey generates locationKey to be used as a key for maps. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Line",
              "documentation": {
                "identifier": "Line",
                "newPage": false,
                "searchKey": "profile.Line",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Line struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Line struct {\n\tFunction *Function\n\tLine     int64\n\n\tfunctionIDX uint64\n}\n```\n\nLine corresponds to Profile.Line \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#Line.decoder",
                    "documentation": {
                      "identifier": "Line.decoder",
                      "newPage": false,
                      "searchKey": "profile.Line.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Line) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Line) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Line.encode",
                    "documentation": {
                      "identifier": "Line.encode",
                      "newPage": false,
                      "searchKey": "profile.Line.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Line) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Line) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Function",
              "documentation": {
                "identifier": "Function",
                "newPage": false,
                "searchKey": "profile.Function",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Function struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Function struct {\n\tID         uint64\n\tName       string\n\tSystemName string\n\tFilename   string\n\tStartLine  int64\n\n\tnameX       int64\n\tsystemNameX int64\n\tfilenameX   int64\n}\n```\n\nFunction corresponds to Profile.Function \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#Function.decoder",
                    "documentation": {
                      "identifier": "Function.decoder",
                      "newPage": false,
                      "searchKey": "profile.Function.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Function) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Function) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Function.encode",
                    "documentation": {
                      "identifier": "Function.encode",
                      "newPage": false,
                      "searchKey": "profile.Function.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Function) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Function) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#Function.key",
                    "documentation": {
                      "identifier": "Function.key",
                      "newPage": false,
                      "searchKey": "profile.Function.key",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *Function) key() functionKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *Function) key() functionKey\n```\n\nkey generates a struct to be used as a key for maps. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#Demangler",
              "documentation": {
                "identifier": "Demangler",
                "newPage": false,
                "searchKey": "profile.Demangler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Demangler func(name []string) (map[string]string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Demangler func(name []string) (map[string]string, error)\n```\n\nDemangler maps symbol names to a human-readable form. This may include C++ demangling and additional simplification. Names that are not demangled may be missing from the resulting map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#buffer",
              "documentation": {
                "identifier": "buffer",
                "newPage": false,
                "searchKey": "profile.buffer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type buffer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype buffer struct {\n\tfield int\n\ttyp   int\n\tu64   uint64\n\tdata  []byte\n\ttmp   [16]byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decoder",
              "documentation": {
                "identifier": "decoder",
                "newPage": false,
                "searchKey": "profile.decoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decoder func(*std/internal/profile.buffer, std/internal/profile.message) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decoder func(*buffer, message) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#message",
              "documentation": {
                "identifier": "message",
                "newPage": false,
                "searchKey": "profile.message",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type message interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype message interface {\n\tdecoder() []decoder\n\tencode(*buffer)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#packedInts",
              "documentation": {
                "identifier": "packedInts",
                "newPage": false,
                "searchKey": "profile.packedInts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type packedInts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype packedInts struct {\n\tuint64s []uint64\n\tint64s  []int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/internal/profile#packedInts.decoder",
                    "documentation": {
                      "identifier": "packedInts.decoder",
                      "newPage": false,
                      "searchKey": "profile.packedInts.decoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *packedInts) decoder() []decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *packedInts) decoder() []decoder\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/internal/profile#packedInts.encode",
                    "documentation": {
                      "identifier": "packedInts.encode",
                      "newPage": false,
                      "searchKey": "profile.packedInts.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *packedInts) encode(b *buffer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *packedInts) encode(b *buffer)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/internal/profile#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/internal/profile#addString",
              "documentation": {
                "identifier": "addString",
                "newPage": false,
                "searchKey": "profile.addString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addString(strings map[string]int, s string) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addString(strings map[string]int, s string) int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#getString",
              "documentation": {
                "identifier": "getString",
                "newPage": false,
                "searchKey": "profile.getString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getString(strings []string, strng *int64, err error) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getString(strings []string, strng *int64, err error) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#focusedAndNotIgnored",
              "documentation": {
                "identifier": "focusedAndNotIgnored",
                "newPage": false,
                "searchKey": "profile.focusedAndNotIgnored",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func focusedAndNotIgnored(locs []*Location, m map[uint64]bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc focusedAndNotIgnored(locs []*Location, m map[uint64]bool) bool\n```\n\nfocusedAndNotIgnored looks up a slice of ids against a map of focused/ignored locations. The map only contains locations that are explicitly focused or ignored. Returns whether there is at least one focused location but no ignored locations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#focusedSample",
              "documentation": {
                "identifier": "focusedSample",
                "newPage": false,
                "searchKey": "profile.focusedSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func focusedSample(s *Sample, focus, ignore TagMatch) (fm, im bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc focusedSample(s *Sample, focus, ignore TagMatch) (fm, im bool)\n```\n\nfocusedTag checks a sample against focus and ignore regexps. Returns whether the focus/ignore regexps match any tags \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#isSpaceOrComment",
              "documentation": {
                "identifier": "isSpaceOrComment",
                "newPage": false,
                "searchKey": "profile.isSpaceOrComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isSpaceOrComment(line string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isSpaceOrComment(line string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#get32l",
              "documentation": {
                "identifier": "get32l",
                "newPage": false,
                "searchKey": "profile.get32l",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func get32l(b []byte) (uint64, []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc get32l(b []byte) (uint64, []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#get32b",
              "documentation": {
                "identifier": "get32b",
                "newPage": false,
                "searchKey": "profile.get32b",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func get32b(b []byte) (uint64, []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc get32b(b []byte) (uint64, []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#get64l",
              "documentation": {
                "identifier": "get64l",
                "newPage": false,
                "searchKey": "profile.get64l",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func get64l(b []byte) (uint64, []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc get64l(b []byte) (uint64, []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#get64b",
              "documentation": {
                "identifier": "get64b",
                "newPage": false,
                "searchKey": "profile.get64b",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func get64b(b []byte) (uint64, []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc get64b(b []byte) (uint64, []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#addTracebackSample",
              "documentation": {
                "identifier": "addTracebackSample",
                "newPage": false,
                "searchKey": "profile.addTracebackSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addTracebackSample(l []*Location, s []string, p *Profile)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addTracebackSample(l []*Location, s []string, p *Profile)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#parseCPUSamples",
              "documentation": {
                "identifier": "parseCPUSamples",
                "newPage": false,
                "searchKey": "profile.parseCPUSamples",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseCPUSamples(b []byte, parse func(b []byte) (uint64, []byte), adjust bool, p *Profile) ([]byte, map[uint64]*Location, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseCPUSamples(b []byte, parse func(b []byte) (uint64, []byte), adjust bool, p *Profile) ([]byte, map[uint64]*Location, error)\n```\n\nparseCPUSamples parses a collection of profilez samples from a profile. \n\nprofilez samples are a repeated sequence of stack frames of the form: \n\n```\n1st word -- The number of times this stack was encountered.\n2nd word -- The size of the stack (StackSize).\n3rd word -- The first address on the stack.\n...\nStackSize + 2 -- The last address on the stack\n\n```\nThe last stack trace is of the form: \n\n```\n1st word -- 0\n2nd word -- 1\n3rd word -- 0\n\n```\nAddresses from stack traces may point to the next instruction after each call. Optionally adjust by -1 to land somewhere on the actual call (except for the leaf, which is not a call). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#parseHeapSample",
              "documentation": {
                "identifier": "parseHeapSample",
                "newPage": false,
                "searchKey": "profile.parseHeapSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseHeapSample(line string, rate int64, sampling string) (value []int64, blocksize int64, addrs []uint64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseHeapSample(line string, rate int64, sampling string) (value []int64, blocksize int64, addrs []uint64, err error)\n```\n\nparseHeapSample parses a single row from a heap profile into a new Sample. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#extractHexAddresses",
              "documentation": {
                "identifier": "extractHexAddresses",
                "newPage": false,
                "searchKey": "profile.extractHexAddresses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func extractHexAddresses(s string) ([]string, []uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc extractHexAddresses(s string) ([]string, []uint64)\n```\n\nextractHexAddresses extracts hex numbers from a string and returns them, together with their numeric value, in a slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#parseHexAddresses",
              "documentation": {
                "identifier": "parseHexAddresses",
                "newPage": false,
                "searchKey": "profile.parseHexAddresses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseHexAddresses(s string) []uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseHexAddresses(s string) []uint64\n```\n\nparseHexAddresses parses hex numbers from a string and returns them in a slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#scaleHeapSample",
              "documentation": {
                "identifier": "scaleHeapSample",
                "newPage": false,
                "searchKey": "profile.scaleHeapSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func scaleHeapSample(count, size, rate int64) (int64, int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scaleHeapSample(count, size, rate int64) (int64, int64)\n```\n\nscaleHeapSample adjusts the data from a heapz Sample to account for its probability of appearing in the collected data. heapz profiles are a sampling of the memory allocations requests in a program. We estimate the unsampled value by dividing each collected sample by its probability of appearing in the profile. heapz v2 profiles rely on a poisson process to determine which samples to collect, based on the desired average collection rate R. The probability of a sample of size S to appear in that profile is 1-exp(-S/R). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#parseContentionSample",
              "documentation": {
                "identifier": "parseContentionSample",
                "newPage": false,
                "searchKey": "profile.parseContentionSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseContentionSample(line string, period, cpuHz int64) (value []int64, addrs []uint64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseContentionSample(line string, period, cpuHz int64) (value []int64, addrs []uint64, err error)\n```\n\nparseContentionSample parses a single row from a contention profile into a new Sample. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#parseThreadSample",
              "documentation": {
                "identifier": "parseThreadSample",
                "newPage": false,
                "searchKey": "profile.parseThreadSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseThreadSample(b *bytes.Buffer) (nextl string, addrs []uint64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseThreadSample(b *bytes.Buffer) (nextl string, addrs []uint64, err error)\n```\n\nparseThreadSample parses a symbolized or unsymbolized stack trace. Returns the first line after the traceback, the sample (or nil if it hits a 'same-as-previous' marker) and an error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#parseAdditionalSections",
              "documentation": {
                "identifier": "parseAdditionalSections",
                "newPage": false,
                "searchKey": "profile.parseAdditionalSections",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseAdditionalSections(l string, b *bytes.Buffer, p *Profile) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseAdditionalSections(l string, b *bytes.Buffer, p *Profile) (err error)\n```\n\nparseAdditionalSections parses any additional sections in the profile, ignoring any unrecognized sections. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#isProfileType",
              "documentation": {
                "identifier": "isProfileType",
                "newPage": false,
                "searchKey": "profile.isProfileType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isProfileType(p *Profile, t []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isProfileType(p *Profile, t []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#isZeroSample",
              "documentation": {
                "identifier": "isZeroSample",
                "newPage": false,
                "searchKey": "profile.isZeroSample",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isZeroSample(s *Sample) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isZeroSample(s *Sample) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#equalValueType",
              "documentation": {
                "identifier": "equalValueType",
                "newPage": false,
                "searchKey": "profile.equalValueType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func equalValueType(st1, st2 *ValueType) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc equalValueType(st1, st2 *ValueType) bool\n```\n\nequalValueType returns true if the two value types are semantically equal. It ignores the internal fields used during encode/decode. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#compatibleValueTypes",
              "documentation": {
                "identifier": "compatibleValueTypes",
                "newPage": false,
                "searchKey": "profile.compatibleValueTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compatibleValueTypes(v1, v2 *ValueType) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compatibleValueTypes(v1, v2 *ValueType) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#marshal",
              "documentation": {
                "identifier": "marshal",
                "newPage": false,
                "searchKey": "profile.marshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshal(m message) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshal(m message) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeVarint",
              "documentation": {
                "identifier": "encodeVarint",
                "newPage": false,
                "searchKey": "profile.encodeVarint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeVarint(b *buffer, x uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeVarint(b *buffer, x uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeLength",
              "documentation": {
                "identifier": "encodeLength",
                "newPage": false,
                "searchKey": "profile.encodeLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeLength(b *buffer, tag int, len int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeLength(b *buffer, tag int, len int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeUint64",
              "documentation": {
                "identifier": "encodeUint64",
                "newPage": false,
                "searchKey": "profile.encodeUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeUint64(b *buffer, tag int, x uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeUint64(b *buffer, tag int, x uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeUint64s",
              "documentation": {
                "identifier": "encodeUint64s",
                "newPage": false,
                "searchKey": "profile.encodeUint64s",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeUint64s(b *buffer, tag int, x []uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeUint64s(b *buffer, tag int, x []uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeUint64Opt",
              "documentation": {
                "identifier": "encodeUint64Opt",
                "newPage": false,
                "searchKey": "profile.encodeUint64Opt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeUint64Opt(b *buffer, tag int, x uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeUint64Opt(b *buffer, tag int, x uint64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeInt64",
              "documentation": {
                "identifier": "encodeInt64",
                "newPage": false,
                "searchKey": "profile.encodeInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeInt64(b *buffer, tag int, x int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeInt64(b *buffer, tag int, x int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeInt64Opt",
              "documentation": {
                "identifier": "encodeInt64Opt",
                "newPage": false,
                "searchKey": "profile.encodeInt64Opt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeInt64Opt(b *buffer, tag int, x int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeInt64Opt(b *buffer, tag int, x int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeInt64s",
              "documentation": {
                "identifier": "encodeInt64s",
                "newPage": false,
                "searchKey": "profile.encodeInt64s",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeInt64s(b *buffer, tag int, x []int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeInt64s(b *buffer, tag int, x []int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeString",
              "documentation": {
                "identifier": "encodeString",
                "newPage": false,
                "searchKey": "profile.encodeString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeString(b *buffer, tag int, x string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeString(b *buffer, tag int, x string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeStrings",
              "documentation": {
                "identifier": "encodeStrings",
                "newPage": false,
                "searchKey": "profile.encodeStrings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeStrings(b *buffer, tag int, x []string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeStrings(b *buffer, tag int, x []string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeStringOpt",
              "documentation": {
                "identifier": "encodeStringOpt",
                "newPage": false,
                "searchKey": "profile.encodeStringOpt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeStringOpt(b *buffer, tag int, x string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeStringOpt(b *buffer, tag int, x string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeBool",
              "documentation": {
                "identifier": "encodeBool",
                "newPage": false,
                "searchKey": "profile.encodeBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeBool(b *buffer, tag int, x bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeBool(b *buffer, tag int, x bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeBoolOpt",
              "documentation": {
                "identifier": "encodeBoolOpt",
                "newPage": false,
                "searchKey": "profile.encodeBoolOpt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeBoolOpt(b *buffer, tag int, x bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeBoolOpt(b *buffer, tag int, x bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#encodeMessage",
              "documentation": {
                "identifier": "encodeMessage",
                "newPage": false,
                "searchKey": "profile.encodeMessage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeMessage(b *buffer, tag int, m message)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeMessage(b *buffer, tag int, m message)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#unmarshal",
              "documentation": {
                "identifier": "unmarshal",
                "newPage": false,
                "searchKey": "profile.unmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unmarshal(data []byte, m message) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unmarshal(data []byte, m message) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#le64",
              "documentation": {
                "identifier": "le64",
                "newPage": false,
                "searchKey": "profile.le64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func le64(p []byte) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc le64(p []byte) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#le32",
              "documentation": {
                "identifier": "le32",
                "newPage": false,
                "searchKey": "profile.le32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func le32(p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc le32(p []byte) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeVarint",
              "documentation": {
                "identifier": "decodeVarint",
                "newPage": false,
                "searchKey": "profile.decodeVarint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeVarint(data []byte) (uint64, []byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeVarint(data []byte) (uint64, []byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeField",
              "documentation": {
                "identifier": "decodeField",
                "newPage": false,
                "searchKey": "profile.decodeField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeField(b *buffer, data []byte) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeField(b *buffer, data []byte) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#checkType",
              "documentation": {
                "identifier": "checkType",
                "newPage": false,
                "searchKey": "profile.checkType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkType(b *buffer, typ int) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkType(b *buffer, typ int) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeMessage",
              "documentation": {
                "identifier": "decodeMessage",
                "newPage": false,
                "searchKey": "profile.decodeMessage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeMessage(b *buffer, m message) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeMessage(b *buffer, m message) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeInt64",
              "documentation": {
                "identifier": "decodeInt64",
                "newPage": false,
                "searchKey": "profile.decodeInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeInt64(b *buffer, x *int64) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeInt64(b *buffer, x *int64) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeInt64s",
              "documentation": {
                "identifier": "decodeInt64s",
                "newPage": false,
                "searchKey": "profile.decodeInt64s",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeInt64s(b *buffer, x *[]int64) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeInt64s(b *buffer, x *[]int64) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeUint64",
              "documentation": {
                "identifier": "decodeUint64",
                "newPage": false,
                "searchKey": "profile.decodeUint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeUint64(b *buffer, x *uint64) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeUint64(b *buffer, x *uint64) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeUint64s",
              "documentation": {
                "identifier": "decodeUint64s",
                "newPage": false,
                "searchKey": "profile.decodeUint64s",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeUint64s(b *buffer, x *[]uint64) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeUint64s(b *buffer, x *[]uint64) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeString",
              "documentation": {
                "identifier": "decodeString",
                "newPage": false,
                "searchKey": "profile.decodeString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeString(b *buffer, x *string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeString(b *buffer, x *string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeStrings",
              "documentation": {
                "identifier": "decodeStrings",
                "newPage": false,
                "searchKey": "profile.decodeStrings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeStrings(b *buffer, x *[]string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeStrings(b *buffer, x *[]string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#decodeBool",
              "documentation": {
                "identifier": "decodeBool",
                "newPage": false,
                "searchKey": "profile.decodeBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func decodeBool(b *buffer, x *bool) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decodeBool(b *buffer, x *bool) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#TestEmptyProfile",
              "documentation": {
                "identifier": "TestEmptyProfile",
                "newPage": false,
                "searchKey": "profile.TestEmptyProfile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#TestParseContention",
              "documentation": {
                "identifier": "TestParseContention",
                "newPage": false,
                "searchKey": "profile.TestParseContention",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseContention(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseContention(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/internal/profile#TestPackedEncoding",
              "documentation": {
                "identifier": "TestPackedEncoding",
                "newPage": false,
                "searchKey": "profile.TestPackedEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPackedEncoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPackedEncoding(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
