{
  "pathID": "/std/html/template_test",
  "documentation": {
    "identifier": "template_test",
    "newPage": true,
    "searchKey": "std/html/template_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package template_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/std/html/template_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/html/template_test#templateFile",
              "documentation": {
                "identifier": "templateFile",
                "newPage": false,
                "searchKey": "template_test.templateFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type templateFile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype templateFile struct {\n\tname     string\n\tcontents string\n}\n```\n\ntemplateFile defines the contents of a template to be stored in a file, for testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#testCase",
              "documentation": {
                "identifier": "testCase",
                "newPage": false,
                "searchKey": "template_test.testCase",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testCase struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testCase struct {\n\tt    *testing.T\n\troot *Template\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/html/template_test#newTestCase",
                    "documentation": {
                      "identifier": "newTestCase",
                      "newPage": false,
                      "searchKey": "template_test.newTestCase",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTestCase(t *testing.T) *testCase"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTestCase(t *testing.T) *testCase\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/html/template_test#testCase.lookup",
                    "documentation": {
                      "identifier": "testCase.lookup",
                      "newPage": false,
                      "searchKey": "template_test.testCase.lookup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testCase) lookup(name string) *Template"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testCase) lookup(name string) *Template\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/html/template_test#testCase.mustParse",
                    "documentation": {
                      "identifier": "testCase.mustParse",
                      "newPage": false,
                      "searchKey": "template_test.testCase.mustParse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testCase) mustParse(t *Template, text string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testCase) mustParse(t *Template, text string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/html/template_test#testCase.mustNotParse",
                    "documentation": {
                      "identifier": "testCase.mustNotParse",
                      "newPage": false,
                      "searchKey": "template_test.testCase.mustNotParse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testCase) mustNotParse(t *Template, text string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testCase) mustNotParse(t *Template, text string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/html/template_test#testCase.mustExecute",
                    "documentation": {
                      "identifier": "testCase.mustExecute",
                      "newPage": false,
                      "searchKey": "template_test.testCase.mustExecute",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testCase) mustExecute(t *Template, val interface{}, want string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testCase) mustExecute(t *Template, val interface{}, want string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/html/template_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/html/template_test#Example",
              "documentation": {
                "identifier": "Example",
                "newPage": false,
                "searchKey": "template_test.Example",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#Example_autoescaping",
              "documentation": {
                "identifier": "Example_autoescaping",
                "newPage": false,
                "searchKey": "template_test.Example_autoescaping",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example_autoescaping()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example_autoescaping()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#Example_escape",
              "documentation": {
                "identifier": "Example_escape",
                "newPage": false,
                "searchKey": "template_test.Example_escape",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example_escape()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example_escape()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#ExampleTemplate_Delims",
              "documentation": {
                "identifier": "ExampleTemplate_Delims",
                "newPage": false,
                "searchKey": "template_test.ExampleTemplate_Delims",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTemplate_Delims()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTemplate_Delims()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#ExampleTemplate_block",
              "documentation": {
                "identifier": "ExampleTemplate_block",
                "newPage": false,
                "searchKey": "template_test.ExampleTemplate_block",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTemplate_block()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTemplate_block()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#createTestDir",
              "documentation": {
                "identifier": "createTestDir",
                "newPage": false,
                "searchKey": "template_test.createTestDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func createTestDir(files []templateFile) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc createTestDir(files []templateFile) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#ExampleTemplate_glob",
              "documentation": {
                "identifier": "ExampleTemplate_glob",
                "newPage": false,
                "searchKey": "template_test.ExampleTemplate_glob",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTemplate_glob()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTemplate_glob()\n```\n\nHere we demonstrate loading a set of templates from a directory. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#ExampleTemplate_parsefiles",
              "documentation": {
                "identifier": "ExampleTemplate_parsefiles",
                "newPage": false,
                "searchKey": "template_test.ExampleTemplate_parsefiles",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTemplate_parsefiles()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTemplate_parsefiles()\n```\n\nHere we demonstrate loading a set of templates from files in different directories \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#ExampleTemplate_helpers",
              "documentation": {
                "identifier": "ExampleTemplate_helpers",
                "newPage": false,
                "searchKey": "template_test.ExampleTemplate_helpers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTemplate_helpers()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTemplate_helpers()\n```\n\nThis example demonstrates one way to share some templates and use them in different contexts. In this variant we add multiple driver templates by hand to an existing bundle of templates. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#ExampleTemplate_share",
              "documentation": {
                "identifier": "ExampleTemplate_share",
                "newPage": false,
                "searchKey": "template_test.ExampleTemplate_share",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTemplate_share()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTemplate_share()\n```\n\nThis example demonstrates how to use one group of driver templates with distinct sets of helper templates. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestTemplateClone",
              "documentation": {
                "identifier": "TestTemplateClone",
                "newPage": false,
                "searchKey": "template_test.TestTemplateClone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTemplateClone(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTemplateClone(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineNonEmptyAfterExecution",
              "documentation": {
                "identifier": "TestRedefineNonEmptyAfterExecution",
                "newPage": false,
                "searchKey": "template_test.TestRedefineNonEmptyAfterExecution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineNonEmptyAfterExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineNonEmptyAfterExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineEmptyAfterExecution",
              "documentation": {
                "identifier": "TestRedefineEmptyAfterExecution",
                "newPage": false,
                "searchKey": "template_test.TestRedefineEmptyAfterExecution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineEmptyAfterExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineEmptyAfterExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineAfterNonExecution",
              "documentation": {
                "identifier": "TestRedefineAfterNonExecution",
                "newPage": false,
                "searchKey": "template_test.TestRedefineAfterNonExecution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineAfterNonExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineAfterNonExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineAfterNamedExecution",
              "documentation": {
                "identifier": "TestRedefineAfterNamedExecution",
                "newPage": false,
                "searchKey": "template_test.TestRedefineAfterNamedExecution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineAfterNamedExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineAfterNamedExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineNestedByNameAfterExecution",
              "documentation": {
                "identifier": "TestRedefineNestedByNameAfterExecution",
                "newPage": false,
                "searchKey": "template_test.TestRedefineNestedByNameAfterExecution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineNestedByNameAfterExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineNestedByNameAfterExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineNestedByTemplateAfterExecution",
              "documentation": {
                "identifier": "TestRedefineNestedByTemplateAfterExecution",
                "newPage": false,
                "searchKey": "template_test.TestRedefineNestedByTemplateAfterExecution",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineNestedByTemplateAfterExecution(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineNestedByTemplateAfterExecution(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineSafety",
              "documentation": {
                "identifier": "TestRedefineSafety",
                "newPage": false,
                "searchKey": "template_test.TestRedefineSafety",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineSafety(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineSafety(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineTopUse",
              "documentation": {
                "identifier": "TestRedefineTopUse",
                "newPage": false,
                "searchKey": "template_test.TestRedefineTopUse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineTopUse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineTopUse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestRedefineOtherParsers",
              "documentation": {
                "identifier": "TestRedefineOtherParsers",
                "newPage": false,
                "searchKey": "template_test.TestRedefineOtherParsers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedefineOtherParsers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedefineOtherParsers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestNumbers",
              "documentation": {
                "identifier": "TestNumbers",
                "newPage": false,
                "searchKey": "template_test.TestNumbers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNumbers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNumbers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestStringsInScriptsWithJsonContentTypeAreCorrectlyEscaped",
              "documentation": {
                "identifier": "TestStringsInScriptsWithJsonContentTypeAreCorrectlyEscaped",
                "newPage": false,
                "searchKey": "template_test.TestStringsInScriptsWithJsonContentTypeAreCorrectlyEscaped",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringsInScriptsWithJsonContentTypeAreCorrectlyEscaped(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringsInScriptsWithJsonContentTypeAreCorrectlyEscaped(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/html/template_test#TestSkipEscapeComments",
              "documentation": {
                "identifier": "TestSkipEscapeComments",
                "newPage": false,
                "searchKey": "template_test.TestSkipEscapeComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSkipEscapeComments(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSkipEscapeComments(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
