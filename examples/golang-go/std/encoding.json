{
  "pathID": "/std/encoding",
  "documentation": {
    "identifier": "encoding",
    "newPage": true,
    "searchKey": "std/encoding",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package encoding"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package encoding defines interfaces shared by other packages that convert data to and from byte-level and textual representations. Packages that check for these interfaces include encoding/gob, encoding/json, and encoding/xml. As a result, implementing an interface once can make a type useful in multiple encodings. Standard types that implement these interfaces include time.Time and net.IP. The interfaces come in pairs that produce and consume encoded data. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/std/encoding#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/encoding#BinaryMarshaler",
              "documentation": {
                "identifier": "BinaryMarshaler",
                "newPage": false,
                "searchKey": "encoding.BinaryMarshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BinaryMarshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BinaryMarshaler interface {\n\tMarshalBinary() (data []byte, err error)\n}\n```\n\nBinaryMarshaler is the interface implemented by an object that can marshal itself into a binary form. \n\nMarshalBinary encodes the receiver into a binary form and returns the result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding#BinaryUnmarshaler",
              "documentation": {
                "identifier": "BinaryUnmarshaler",
                "newPage": false,
                "searchKey": "encoding.BinaryUnmarshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BinaryUnmarshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BinaryUnmarshaler interface {\n\tUnmarshalBinary(data []byte) error\n}\n```\n\nBinaryUnmarshaler is the interface implemented by an object that can unmarshal a binary representation of itself. \n\nUnmarshalBinary must be able to decode the form generated by MarshalBinary. UnmarshalBinary must copy the data if it wishes to retain the data after returning. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding#TextMarshaler",
              "documentation": {
                "identifier": "TextMarshaler",
                "newPage": false,
                "searchKey": "encoding.TextMarshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TextMarshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TextMarshaler interface {\n\tMarshalText() (text []byte, err error)\n}\n```\n\nTextMarshaler is the interface implemented by an object that can marshal itself into a textual form. \n\nMarshalText encodes the receiver into UTF-8-encoded text and returns the result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/encoding#TextUnmarshaler",
              "documentation": {
                "identifier": "TextUnmarshaler",
                "newPage": false,
                "searchKey": "encoding.TextUnmarshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TextUnmarshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TextUnmarshaler interface {\n\tUnmarshalText(text []byte) error\n}\n```\n\nTextUnmarshaler is the interface implemented by an object that can unmarshal a textual representation of itself. \n\nUnmarshalText must be able to decode the form generated by MarshalText. UnmarshalText must copy the text if it wishes to retain the text after returning. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/std/encoding/ascii85"
    },
    {
      "pathID": "/std/encoding/asn1"
    },
    {
      "pathID": "/std/encoding/base32"
    },
    {
      "pathID": "/std/encoding/base32_test"
    },
    {
      "pathID": "/std/encoding/base64"
    },
    {
      "pathID": "/std/encoding/base64_test"
    },
    {
      "pathID": "/std/encoding/binary"
    },
    {
      "pathID": "/std/encoding/binary_test"
    },
    {
      "pathID": "/std/encoding/csv"
    },
    {
      "pathID": "/std/encoding/csv_test"
    },
    {
      "pathID": "/std/encoding/gob"
    },
    {
      "pathID": "/std/encoding/gob_test"
    },
    {
      "pathID": "/std/encoding/hex"
    },
    {
      "pathID": "/std/encoding/hex_test"
    },
    {
      "pathID": "/std/encoding/json"
    },
    {
      "pathID": "/std/encoding/json_test"
    },
    {
      "pathID": "/std/encoding/pem"
    },
    {
      "pathID": "/std/encoding/pem_test"
    },
    {
      "pathID": "/std/encoding/xml"
    },
    {
      "pathID": "/std/encoding/xml_test"
    }
  ]
}
