{
  "pathID": "/std/sync_test",
  "documentation": {
    "identifier": "sync_test",
    "newPage": true,
    "searchKey": "std/sync_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package sync_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/std/sync_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync_test#opLoad",
              "documentation": {
                "identifier": "opLoad",
                "newPage": false,
                "searchKey": "sync_test.opLoad",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const opLoad"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opLoad = mapOp(\"Load\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#opStore",
              "documentation": {
                "identifier": "opStore",
                "newPage": false,
                "searchKey": "sync_test.opStore",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const opStore"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opStore = mapOp(\"Store\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#opLoadOrStore",
              "documentation": {
                "identifier": "opLoadOrStore",
                "newPage": false,
                "searchKey": "sync_test.opLoadOrStore",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const opLoadOrStore"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opLoadOrStore = mapOp(\"LoadOrStore\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#opLoadAndDelete",
              "documentation": {
                "identifier": "opLoadAndDelete",
                "newPage": false,
                "searchKey": "sync_test.opLoadAndDelete",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const opLoadAndDelete"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opLoadAndDelete = mapOp(\"LoadAndDelete\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#opDelete",
              "documentation": {
                "identifier": "opDelete",
                "newPage": false,
                "searchKey": "sync_test.opDelete",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDelete"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDelete = mapOp(\"Delete\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/sync_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync_test#bufPool",
              "documentation": {
                "identifier": "bufPool",
                "newPage": false,
                "searchKey": "sync_test.bufPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var bufPool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bufPool = sync.Pool{\n\tNew: func() interface{} {\n\n\t\treturn new(bytes.Buffer)\n\t},\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#http",
              "documentation": {
                "identifier": "http",
                "newPage": false,
                "searchKey": "sync_test.http",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var http"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar http httpPkg\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#mapOps",
              "documentation": {
                "identifier": "mapOps",
                "newPage": false,
                "searchKey": "sync_test.mapOps",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mapOps"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mapOps = [...]mapOp{opLoad, opStore, opLoadOrStore, opLoadAndDelete, opDelete}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#misuseTests",
              "documentation": {
                "identifier": "misuseTests",
                "newPage": false,
                "searchKey": "sync_test.misuseTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var misuseTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar misuseTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#globalSink",
              "documentation": {
                "identifier": "globalSink",
                "newPage": false,
                "searchKey": "sync_test.globalSink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var globalSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globalSink interface{}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/sync_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync_test#httpPkg",
              "documentation": {
                "identifier": "httpPkg",
                "newPage": false,
                "searchKey": "sync_test.httpPkg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type httpPkg struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype httpPkg struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/sync_test#httpPkg.Get",
                    "documentation": {
                      "identifier": "httpPkg.Get",
                      "newPage": false,
                      "searchKey": "sync_test.httpPkg.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (httpPkg) Get(url string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (httpPkg) Get(url string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#bench",
              "documentation": {
                "identifier": "bench",
                "newPage": false,
                "searchKey": "sync_test.bench",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type bench struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bench struct {\n\tsetup func(*testing.B, mapInterface)\n\tperG  func(b *testing.B, pb *testing.PB, i int, m mapInterface)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#mapInterface",
              "documentation": {
                "identifier": "mapInterface",
                "newPage": false,
                "searchKey": "sync_test.mapInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapInterface interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapInterface interface {\n\tLoad(interface{}) (interface{}, bool)\n\tStore(key, value interface{})\n\tLoadOrStore(key, value interface{}) (actual interface{}, loaded bool)\n\tLoadAndDelete(key interface{}) (value interface{}, loaded bool)\n\tDelete(interface{})\n\tRange(func(key, value interface{}) (shouldContinue bool))\n}\n```\n\nmapInterface is the interface Map implements. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#RWMutexMap",
              "documentation": {
                "identifier": "RWMutexMap",
                "newPage": false,
                "searchKey": "sync_test.RWMutexMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RWMutexMap struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RWMutexMap struct {\n\tmu    sync.RWMutex\n\tdirty map[interface{}]interface{}\n}\n```\n\nRWMutexMap is an implementation of mapInterface using a sync.RWMutex. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/sync_test#RWMutexMap.Load",
                    "documentation": {
                      "identifier": "RWMutexMap.Load",
                      "newPage": false,
                      "searchKey": "sync_test.RWMutexMap.Load",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RWMutexMap) Load(key interface{}) (value interface{}, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RWMutexMap) Load(key interface{}) (value interface{}, ok bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#RWMutexMap.Store",
                    "documentation": {
                      "identifier": "RWMutexMap.Store",
                      "newPage": false,
                      "searchKey": "sync_test.RWMutexMap.Store",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RWMutexMap) Store(key, value interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RWMutexMap) Store(key, value interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#RWMutexMap.LoadOrStore",
                    "documentation": {
                      "identifier": "RWMutexMap.LoadOrStore",
                      "newPage": false,
                      "searchKey": "sync_test.RWMutexMap.LoadOrStore",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RWMutexMap) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RWMutexMap) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#RWMutexMap.LoadAndDelete",
                    "documentation": {
                      "identifier": "RWMutexMap.LoadAndDelete",
                      "newPage": false,
                      "searchKey": "sync_test.RWMutexMap.LoadAndDelete",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RWMutexMap) LoadAndDelete(key interface{}) (value interface{}, loaded bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RWMutexMap) LoadAndDelete(key interface{}) (value interface{}, loaded bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#RWMutexMap.Delete",
                    "documentation": {
                      "identifier": "RWMutexMap.Delete",
                      "newPage": false,
                      "searchKey": "sync_test.RWMutexMap.Delete",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RWMutexMap) Delete(key interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RWMutexMap) Delete(key interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#RWMutexMap.Range",
                    "documentation": {
                      "identifier": "RWMutexMap.Range",
                      "newPage": false,
                      "searchKey": "sync_test.RWMutexMap.Range",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RWMutexMap) Range(f func(key, value interface{}) (shouldContinue bool))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RWMutexMap) Range(f func(key, value interface{}) (shouldContinue bool))\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#DeepCopyMap",
              "documentation": {
                "identifier": "DeepCopyMap",
                "newPage": false,
                "searchKey": "sync_test.DeepCopyMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeepCopyMap struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeepCopyMap struct {\n\tmu    sync.Mutex\n\tclean atomic.Value\n}\n```\n\nDeepCopyMap is an implementation of mapInterface using a Mutex and atomic.Value.  It makes deep copies of the map on every write to avoid acquiring the Mutex in Load. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.Load",
                    "documentation": {
                      "identifier": "DeepCopyMap.Load",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.Load",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) Load(key interface{}) (value interface{}, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) Load(key interface{}) (value interface{}, ok bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.Store",
                    "documentation": {
                      "identifier": "DeepCopyMap.Store",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.Store",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) Store(key, value interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) Store(key, value interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.LoadOrStore",
                    "documentation": {
                      "identifier": "DeepCopyMap.LoadOrStore",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.LoadOrStore",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) LoadOrStore(key, value interface{}) (actual interface{}, loaded bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.LoadAndDelete",
                    "documentation": {
                      "identifier": "DeepCopyMap.LoadAndDelete",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.LoadAndDelete",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) LoadAndDelete(key interface{}) (value interface{}, loaded bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) LoadAndDelete(key interface{}) (value interface{}, loaded bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.Delete",
                    "documentation": {
                      "identifier": "DeepCopyMap.Delete",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.Delete",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) Delete(key interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) Delete(key interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.Range",
                    "documentation": {
                      "identifier": "DeepCopyMap.Range",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.Range",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) Range(f func(key, value interface{}) (shouldContinue bool))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) Range(f func(key, value interface{}) (shouldContinue bool))\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#DeepCopyMap.dirty",
                    "documentation": {
                      "identifier": "DeepCopyMap.dirty",
                      "newPage": false,
                      "searchKey": "sync_test.DeepCopyMap.dirty",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *DeepCopyMap) dirty() map[interface{}]interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *DeepCopyMap) dirty() map[interface{}]interface{}\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#mapOp",
              "documentation": {
                "identifier": "mapOp",
                "newPage": false,
                "searchKey": "sync_test.mapOp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapOp string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapOp string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#mapCall",
              "documentation": {
                "identifier": "mapCall",
                "newPage": false,
                "searchKey": "sync_test.mapCall",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapCall struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapCall struct {\n\top   mapOp\n\tk, v interface{}\n}\n```\n\nmapCall is a quick.Generator for calls on mapInterface. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/sync_test#mapCall.apply",
                    "documentation": {
                      "identifier": "mapCall.apply",
                      "newPage": false,
                      "searchKey": "sync_test.mapCall.apply",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c mapCall) apply(m mapInterface) (interface{}, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c mapCall) apply(m mapInterface) (interface{}, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/std/sync_test#mapCall.Generate",
                    "documentation": {
                      "identifier": "mapCall.Generate",
                      "newPage": false,
                      "searchKey": "sync_test.mapCall.Generate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (mapCall) Generate(r *rand.Rand, size int) reflect.Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (mapCall) Generate(r *rand.Rand, size int) reflect.Value\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#mapResult",
              "documentation": {
                "identifier": "mapResult",
                "newPage": false,
                "searchKey": "sync_test.mapResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapResult struct {\n\tvalue interface{}\n\tok    bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#one",
              "documentation": {
                "identifier": "one",
                "newPage": false,
                "searchKey": "sync_test.one",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type one int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype one int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/std/sync_test#one.Increment",
                    "documentation": {
                      "identifier": "one.Increment",
                      "newPage": false,
                      "searchKey": "sync_test.one.Increment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *one) Increment()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *one) Increment()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/std/sync_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/std/sync_test#TestCondSignal",
              "documentation": {
                "identifier": "TestCondSignal",
                "newPage": false,
                "searchKey": "sync_test.TestCondSignal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCondSignal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCondSignal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestCondSignalGenerations",
              "documentation": {
                "identifier": "TestCondSignalGenerations",
                "newPage": false,
                "searchKey": "sync_test.TestCondSignalGenerations",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCondSignalGenerations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCondSignalGenerations(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestCondBroadcast",
              "documentation": {
                "identifier": "TestCondBroadcast",
                "newPage": false,
                "searchKey": "sync_test.TestCondBroadcast",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCondBroadcast(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCondBroadcast(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestRace",
              "documentation": {
                "identifier": "TestRace",
                "newPage": false,
                "searchKey": "sync_test.TestRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestCondSignalStealing",
              "documentation": {
                "identifier": "TestCondSignalStealing",
                "newPage": false,
                "searchKey": "sync_test.TestCondSignalStealing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCondSignalStealing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCondSignalStealing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestCondCopy",
              "documentation": {
                "identifier": "TestCondCopy",
                "newPage": false,
                "searchKey": "sync_test.TestCondCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCondCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCondCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkCond1",
              "documentation": {
                "identifier": "BenchmarkCond1",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkCond1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCond1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCond1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkCond2",
              "documentation": {
                "identifier": "BenchmarkCond2",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkCond2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCond2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCond2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkCond4",
              "documentation": {
                "identifier": "BenchmarkCond4",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkCond4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCond4(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCond4(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkCond8",
              "documentation": {
                "identifier": "BenchmarkCond8",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkCond8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCond8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCond8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkCond16",
              "documentation": {
                "identifier": "BenchmarkCond16",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkCond16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCond16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCond16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkCond32",
              "documentation": {
                "identifier": "BenchmarkCond32",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkCond32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCond32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCond32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchmarkCond",
              "documentation": {
                "identifier": "benchmarkCond",
                "newPage": false,
                "searchKey": "sync_test.benchmarkCond",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkCond(b *testing.B, waiters int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkCond(b *testing.B, waiters int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#timeNow",
              "documentation": {
                "identifier": "timeNow",
                "newPage": false,
                "searchKey": "sync_test.timeNow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func timeNow() time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timeNow() time.Time\n```\n\ntimeNow is a fake version of time.Now for tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#Log",
              "documentation": {
                "identifier": "Log",
                "newPage": false,
                "searchKey": "sync_test.Log",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Log(w io.Writer, key, val string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Log(w io.Writer, key, val string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#ExamplePool",
              "documentation": {
                "identifier": "ExamplePool",
                "newPage": false,
                "searchKey": "sync_test.ExamplePool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExamplePool()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExamplePool()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#ExampleWaitGroup",
              "documentation": {
                "identifier": "ExampleWaitGroup",
                "newPage": false,
                "searchKey": "sync_test.ExampleWaitGroup",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleWaitGroup()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleWaitGroup()\n```\n\nThis example fetches several URLs concurrently, using a WaitGroup to block until all the fetches are complete. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#ExampleOnce",
              "documentation": {
                "identifier": "ExampleOnce",
                "newPage": false,
                "searchKey": "sync_test.ExampleOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleOnce()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleOnce()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchMap",
              "documentation": {
                "identifier": "benchMap",
                "newPage": false,
                "searchKey": "sync_test.benchMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchMap(b *testing.B, bench bench)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchMap(b *testing.B, bench bench)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadMostlyHits",
              "documentation": {
                "identifier": "BenchmarkLoadMostlyHits",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadMostlyHits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadMostlyHits(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadMostlyHits(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadMostlyMisses",
              "documentation": {
                "identifier": "BenchmarkLoadMostlyMisses",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadMostlyMisses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadMostlyMisses(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadMostlyMisses(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadOrStoreBalanced",
              "documentation": {
                "identifier": "BenchmarkLoadOrStoreBalanced",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadOrStoreBalanced",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadOrStoreBalanced(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadOrStoreBalanced(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadOrStoreUnique",
              "documentation": {
                "identifier": "BenchmarkLoadOrStoreUnique",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadOrStoreUnique",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadOrStoreUnique(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadOrStoreUnique(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadOrStoreCollision",
              "documentation": {
                "identifier": "BenchmarkLoadOrStoreCollision",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadOrStoreCollision",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadOrStoreCollision(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadOrStoreCollision(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadAndDeleteBalanced",
              "documentation": {
                "identifier": "BenchmarkLoadAndDeleteBalanced",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadAndDeleteBalanced",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadAndDeleteBalanced(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadAndDeleteBalanced(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadAndDeleteUnique",
              "documentation": {
                "identifier": "BenchmarkLoadAndDeleteUnique",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadAndDeleteUnique",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadAndDeleteUnique(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadAndDeleteUnique(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkLoadAndDeleteCollision",
              "documentation": {
                "identifier": "BenchmarkLoadAndDeleteCollision",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkLoadAndDeleteCollision",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLoadAndDeleteCollision(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLoadAndDeleteCollision(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkRange",
              "documentation": {
                "identifier": "BenchmarkRange",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRange(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRange(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkAdversarialAlloc",
              "documentation": {
                "identifier": "BenchmarkAdversarialAlloc",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkAdversarialAlloc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdversarialAlloc(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdversarialAlloc(b *testing.B)\n```\n\nBenchmarkAdversarialAlloc tests performance when we store a new value immediately whenever the map is promoted to clean and otherwise load a unique, missing key. \n\nThis forces the Load calls to always acquire the map's mutex. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkAdversarialDelete",
              "documentation": {
                "identifier": "BenchmarkAdversarialDelete",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkAdversarialDelete",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdversarialDelete(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdversarialDelete(b *testing.B)\n```\n\nBenchmarkAdversarialDelete tests performance when we periodically delete one key and add a different one in a large map. \n\nThis forces the Load calls to always acquire the map's mutex and periodically makes a full copy of the map despite changing only one entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkDeleteCollision",
              "documentation": {
                "identifier": "BenchmarkDeleteCollision",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkDeleteCollision",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDeleteCollision(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDeleteCollision(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#randValue",
              "documentation": {
                "identifier": "randValue",
                "newPage": false,
                "searchKey": "sync_test.randValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func randValue(r *rand.Rand) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randValue(r *rand.Rand) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#applyCalls",
              "documentation": {
                "identifier": "applyCalls",
                "newPage": false,
                "searchKey": "sync_test.applyCalls",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyCalls(m mapInterface, calls []mapCall) (results []mapResult, final map[interface{}]interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyCalls(m mapInterface, calls []mapCall) (results []mapResult, final map[interface{}]interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#applyMap",
              "documentation": {
                "identifier": "applyMap",
                "newPage": false,
                "searchKey": "sync_test.applyMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyMap(calls []mapCall) ([]mapResult, map[interface{}]interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyMap(calls []mapCall) ([]mapResult, map[interface{}]interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#applyRWMutexMap",
              "documentation": {
                "identifier": "applyRWMutexMap",
                "newPage": false,
                "searchKey": "sync_test.applyRWMutexMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyRWMutexMap(calls []mapCall) ([]mapResult, map[interface{}]interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyRWMutexMap(calls []mapCall) ([]mapResult, map[interface{}]interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#applyDeepCopyMap",
              "documentation": {
                "identifier": "applyDeepCopyMap",
                "newPage": false,
                "searchKey": "sync_test.applyDeepCopyMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyDeepCopyMap(calls []mapCall) ([]mapResult, map[interface{}]interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyDeepCopyMap(calls []mapCall) ([]mapResult, map[interface{}]interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestMapMatchesRWMutex",
              "documentation": {
                "identifier": "TestMapMatchesRWMutex",
                "newPage": false,
                "searchKey": "sync_test.TestMapMatchesRWMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapMatchesRWMutex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapMatchesRWMutex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestMapMatchesDeepCopy",
              "documentation": {
                "identifier": "TestMapMatchesDeepCopy",
                "newPage": false,
                "searchKey": "sync_test.TestMapMatchesDeepCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapMatchesDeepCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapMatchesDeepCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestConcurrentRange",
              "documentation": {
                "identifier": "TestConcurrentRange",
                "newPage": false,
                "searchKey": "sync_test.TestConcurrentRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentRange(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentRange(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestIssue40999",
              "documentation": {
                "identifier": "TestIssue40999",
                "newPage": false,
                "searchKey": "sync_test.TestIssue40999",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue40999(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue40999(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#HammerSemaphore",
              "documentation": {
                "identifier": "HammerSemaphore",
                "newPage": false,
                "searchKey": "sync_test.HammerSemaphore",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HammerSemaphore(s *uint32, loops int, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HammerSemaphore(s *uint32, loops int, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestSemaphore",
              "documentation": {
                "identifier": "TestSemaphore",
                "newPage": false,
                "searchKey": "sync_test.TestSemaphore",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSemaphore(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSemaphore(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkUncontendedSemaphore",
              "documentation": {
                "identifier": "BenchmarkUncontendedSemaphore",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkUncontendedSemaphore",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUncontendedSemaphore(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUncontendedSemaphore(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkContendedSemaphore",
              "documentation": {
                "identifier": "BenchmarkContendedSemaphore",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkContendedSemaphore",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkContendedSemaphore(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkContendedSemaphore(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#HammerMutex",
              "documentation": {
                "identifier": "HammerMutex",
                "newPage": false,
                "searchKey": "sync_test.HammerMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HammerMutex(m *Mutex, loops int, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HammerMutex(m *Mutex, loops int, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestMutex",
              "documentation": {
                "identifier": "TestMutex",
                "newPage": false,
                "searchKey": "sync_test.TestMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "sync_test.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestMutexMisuse",
              "documentation": {
                "identifier": "TestMutexMisuse",
                "newPage": false,
                "searchKey": "sync_test.TestMutexMisuse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutexMisuse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutexMisuse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestMutexFairness",
              "documentation": {
                "identifier": "TestMutexFairness",
                "newPage": false,
                "searchKey": "sync_test.TestMutexFairness",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMutexFairness(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMutexFairness(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutexUncontended",
              "documentation": {
                "identifier": "BenchmarkMutexUncontended",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutexUncontended",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutexUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutexUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchmarkMutex",
              "documentation": {
                "identifier": "benchmarkMutex",
                "newPage": false,
                "searchKey": "sync_test.benchmarkMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMutex(b *testing.B, slack, work bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMutex(b *testing.B, slack, work bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutex",
              "documentation": {
                "identifier": "BenchmarkMutex",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutex(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutex(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutexSlack",
              "documentation": {
                "identifier": "BenchmarkMutexSlack",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutexSlack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutexSlack(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutexSlack(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutexWork",
              "documentation": {
                "identifier": "BenchmarkMutexWork",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutexWork",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutexWork(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutexWork(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutexWorkSlack",
              "documentation": {
                "identifier": "BenchmarkMutexWorkSlack",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutexWorkSlack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutexWorkSlack(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutexWorkSlack(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutexNoSpin",
              "documentation": {
                "identifier": "BenchmarkMutexNoSpin",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutexNoSpin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutexNoSpin(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutexNoSpin(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkMutexSpin",
              "documentation": {
                "identifier": "BenchmarkMutexSpin",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkMutexSpin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMutexSpin(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMutexSpin(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#run",
              "documentation": {
                "identifier": "run",
                "newPage": false,
                "searchKey": "sync_test.run",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func run(t *testing.T, once *Once, o *one, c chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc run(t *testing.T, once *Once, o *one, c chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestOnce",
              "documentation": {
                "identifier": "TestOnce",
                "newPage": false,
                "searchKey": "sync_test.TestOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOnce(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOnce(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestOncePanic",
              "documentation": {
                "identifier": "TestOncePanic",
                "newPage": false,
                "searchKey": "sync_test.TestOncePanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOncePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOncePanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkOnce",
              "documentation": {
                "identifier": "BenchmarkOnce",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkOnce(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkOnce(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPool",
              "documentation": {
                "identifier": "TestPool",
                "newPage": false,
                "searchKey": "sync_test.TestPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPool(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPoolNew",
              "documentation": {
                "identifier": "TestPoolNew",
                "newPage": false,
                "searchKey": "sync_test.TestPoolNew",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolNew(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolNew(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPoolGC",
              "documentation": {
                "identifier": "TestPoolGC",
                "newPage": false,
                "searchKey": "sync_test.TestPoolGC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolGC(t *testing.T)\n```\n\nTest that Pool does not hold pointers to previously cached resources. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPoolRelease",
              "documentation": {
                "identifier": "TestPoolRelease",
                "newPage": false,
                "searchKey": "sync_test.TestPoolRelease",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolRelease(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolRelease(t *testing.T)\n```\n\nTest that Pool releases resources on GC. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#testPool",
              "documentation": {
                "identifier": "testPool",
                "newPage": false,
                "searchKey": "sync_test.testPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPool(t *testing.T, drain bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPool(t *testing.T, drain bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPoolStress",
              "documentation": {
                "identifier": "TestPoolStress",
                "newPage": false,
                "searchKey": "sync_test.TestPoolStress",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolStress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolStress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPoolDequeue",
              "documentation": {
                "identifier": "TestPoolDequeue",
                "newPage": false,
                "searchKey": "sync_test.TestPoolDequeue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolDequeue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolDequeue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestPoolChain",
              "documentation": {
                "identifier": "TestPoolChain",
                "newPage": false,
                "searchKey": "sync_test.TestPoolChain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPoolChain(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPoolChain(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#testPoolDequeue",
              "documentation": {
                "identifier": "testPoolDequeue",
                "newPage": false,
                "searchKey": "sync_test.testPoolDequeue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPoolDequeue(t *testing.T, d PoolDequeue)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPoolDequeue(t *testing.T, d PoolDequeue)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkPool",
              "documentation": {
                "identifier": "BenchmarkPool",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPool(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPool(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkPoolOverflow",
              "documentation": {
                "identifier": "BenchmarkPoolOverflow",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkPoolOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPoolOverflow(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPoolOverflow(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkPoolSTW",
              "documentation": {
                "identifier": "BenchmarkPoolSTW",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkPoolSTW",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPoolSTW(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPoolSTW(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkPoolExpensiveNew",
              "documentation": {
                "identifier": "BenchmarkPoolExpensiveNew",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkPoolExpensiveNew",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPoolExpensiveNew(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPoolExpensiveNew(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkSemaUncontended",
              "documentation": {
                "identifier": "BenchmarkSemaUncontended",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkSemaUncontended",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSemaUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSemaUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchmarkSema",
              "documentation": {
                "identifier": "benchmarkSema",
                "newPage": false,
                "searchKey": "sync_test.benchmarkSema",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkSema(b *testing.B, block, work bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkSema(b *testing.B, block, work bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkSemaSyntNonblock",
              "documentation": {
                "identifier": "BenchmarkSemaSyntNonblock",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkSemaSyntNonblock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSemaSyntNonblock(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSemaSyntNonblock(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkSemaSyntBlock",
              "documentation": {
                "identifier": "BenchmarkSemaSyntBlock",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkSemaSyntBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSemaSyntBlock(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSemaSyntBlock(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkSemaWorkNonblock",
              "documentation": {
                "identifier": "BenchmarkSemaWorkNonblock",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkSemaWorkNonblock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSemaWorkNonblock(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSemaWorkNonblock(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkSemaWorkBlock",
              "documentation": {
                "identifier": "BenchmarkSemaWorkBlock",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkSemaWorkBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSemaWorkBlock(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSemaWorkBlock(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#parallelReader",
              "documentation": {
                "identifier": "parallelReader",
                "newPage": false,
                "searchKey": "sync_test.parallelReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parallelReader(m *RWMutex, clocked, cunlock, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parallelReader(m *RWMutex, clocked, cunlock, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#doTestParallelReaders",
              "documentation": {
                "identifier": "doTestParallelReaders",
                "newPage": false,
                "searchKey": "sync_test.doTestParallelReaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func doTestParallelReaders(numReaders, gomaxprocs int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doTestParallelReaders(numReaders, gomaxprocs int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestParallelReaders",
              "documentation": {
                "identifier": "TestParallelReaders",
                "newPage": false,
                "searchKey": "sync_test.TestParallelReaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParallelReaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParallelReaders(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#reader",
              "documentation": {
                "identifier": "reader",
                "newPage": false,
                "searchKey": "sync_test.reader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func reader(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reader(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#writer",
              "documentation": {
                "identifier": "writer",
                "newPage": false,
                "searchKey": "sync_test.writer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func writer(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writer(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#HammerRWMutex",
              "documentation": {
                "identifier": "HammerRWMutex",
                "newPage": false,
                "searchKey": "sync_test.HammerRWMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HammerRWMutex(gomaxprocs, numReaders, num_iterations int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HammerRWMutex(gomaxprocs, numReaders, num_iterations int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestRWMutex",
              "documentation": {
                "identifier": "TestRWMutex",
                "newPage": false,
                "searchKey": "sync_test.TestRWMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRWMutex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRWMutex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestRLocker",
              "documentation": {
                "identifier": "TestRLocker",
                "newPage": false,
                "searchKey": "sync_test.TestRLocker",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRLocker(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRLocker(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkRWMutexUncontended",
              "documentation": {
                "identifier": "BenchmarkRWMutexUncontended",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkRWMutexUncontended",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchmarkRWMutex",
              "documentation": {
                "identifier": "benchmarkRWMutex",
                "newPage": false,
                "searchKey": "sync_test.benchmarkRWMutex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkRWMutex(b *testing.B, localWork, writeRatio int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkRWMutex(b *testing.B, localWork, writeRatio int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkRWMutexWrite100",
              "documentation": {
                "identifier": "BenchmarkRWMutexWrite100",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkRWMutexWrite100",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWrite100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWrite100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkRWMutexWrite10",
              "documentation": {
                "identifier": "BenchmarkRWMutexWrite10",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkRWMutexWrite10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWrite10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWrite10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkRWMutexWorkWrite100",
              "documentation": {
                "identifier": "BenchmarkRWMutexWorkWrite100",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkRWMutexWorkWrite100",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWorkWrite100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWorkWrite100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkRWMutexWorkWrite10",
              "documentation": {
                "identifier": "BenchmarkRWMutexWorkWrite10",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkRWMutexWorkWrite10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWorkWrite10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWorkWrite10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#testWaitGroup",
              "documentation": {
                "identifier": "testWaitGroup",
                "newPage": false,
                "searchKey": "sync_test.testWaitGroup",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testWaitGroup(t *testing.T, wg1 *WaitGroup, wg2 *WaitGroup)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testWaitGroup(t *testing.T, wg1 *WaitGroup, wg2 *WaitGroup)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestWaitGroup",
              "documentation": {
                "identifier": "TestWaitGroup",
                "newPage": false,
                "searchKey": "sync_test.TestWaitGroup",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitGroup(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitGroup(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#knownRacy",
              "documentation": {
                "identifier": "knownRacy",
                "newPage": false,
                "searchKey": "sync_test.knownRacy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func knownRacy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc knownRacy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestWaitGroupMisuse",
              "documentation": {
                "identifier": "TestWaitGroupMisuse",
                "newPage": false,
                "searchKey": "sync_test.TestWaitGroupMisuse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitGroupMisuse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitGroupMisuse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#pollUntilEqual",
              "documentation": {
                "identifier": "pollUntilEqual",
                "newPage": false,
                "searchKey": "sync_test.pollUntilEqual",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pollUntilEqual(v *uint32, target uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pollUntilEqual(v *uint32, target uint32)\n```\n\npollUntilEqual blocks until v, loaded atomically, is equal to the target. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestWaitGroupMisuse2",
              "documentation": {
                "identifier": "TestWaitGroupMisuse2",
                "newPage": false,
                "searchKey": "sync_test.TestWaitGroupMisuse2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitGroupMisuse2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitGroupMisuse2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestWaitGroupMisuse3",
              "documentation": {
                "identifier": "TestWaitGroupMisuse3",
                "newPage": false,
                "searchKey": "sync_test.TestWaitGroupMisuse3",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitGroupMisuse3(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitGroupMisuse3(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestWaitGroupRace",
              "documentation": {
                "identifier": "TestWaitGroupRace",
                "newPage": false,
                "searchKey": "sync_test.TestWaitGroupRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitGroupRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitGroupRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#TestWaitGroupAlign",
              "documentation": {
                "identifier": "TestWaitGroupAlign",
                "newPage": false,
                "searchKey": "sync_test.TestWaitGroupAlign",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWaitGroupAlign(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWaitGroupAlign(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkWaitGroupUncontended",
              "documentation": {
                "identifier": "BenchmarkWaitGroupUncontended",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkWaitGroupUncontended",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWaitGroupUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWaitGroupUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchmarkWaitGroupAddDone",
              "documentation": {
                "identifier": "benchmarkWaitGroupAddDone",
                "newPage": false,
                "searchKey": "sync_test.benchmarkWaitGroupAddDone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkWaitGroupAddDone(b *testing.B, localWork int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkWaitGroupAddDone(b *testing.B, localWork int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkWaitGroupAddDone",
              "documentation": {
                "identifier": "BenchmarkWaitGroupAddDone",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkWaitGroupAddDone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWaitGroupAddDone(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWaitGroupAddDone(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkWaitGroupAddDoneWork",
              "documentation": {
                "identifier": "BenchmarkWaitGroupAddDoneWork",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkWaitGroupAddDoneWork",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWaitGroupAddDoneWork(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWaitGroupAddDoneWork(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#benchmarkWaitGroupWait",
              "documentation": {
                "identifier": "benchmarkWaitGroupWait",
                "newPage": false,
                "searchKey": "sync_test.benchmarkWaitGroupWait",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkWaitGroupWait(b *testing.B, localWork int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkWaitGroupWait(b *testing.B, localWork int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkWaitGroupWait",
              "documentation": {
                "identifier": "BenchmarkWaitGroupWait",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkWaitGroupWait",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWaitGroupWait(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWaitGroupWait(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkWaitGroupWaitWork",
              "documentation": {
                "identifier": "BenchmarkWaitGroupWaitWork",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkWaitGroupWaitWork",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWaitGroupWaitWork(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWaitGroupWaitWork(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/std/sync_test#BenchmarkWaitGroupActuallyWait",
              "documentation": {
                "identifier": "BenchmarkWaitGroupActuallyWait",
                "newPage": false,
                "searchKey": "sync_test.BenchmarkWaitGroupActuallyWait",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWaitGroupActuallyWait(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWaitGroupActuallyWait(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
