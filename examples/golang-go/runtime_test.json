{
  "pathID": "/runtime_test",
  "documentation": {
    "identifier": "runtime_test",
    "newPage": true,
    "searchKey": "runtime_test",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package runtime_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/runtime_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime_test#InfCallstackSource",
              "documentation": {
                "identifier": "InfCallstackSource",
                "newPage": false,
                "searchKey": "runtime_test.InfCallstackSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const InfCallstackSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst InfCallstackSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#N",
              "documentation": {
                "identifier": "N",
                "newPage": false,
                "searchKey": "runtime_test.N",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const N"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst N = 20\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#autotmpTypeSource",
              "documentation": {
                "identifier": "autotmpTypeSource",
                "newPage": false,
                "searchKey": "runtime_test.autotmpTypeSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const autotmpTypeSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst autotmpTypeSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#backtraceSource",
              "documentation": {
                "identifier": "backtraceSource",
                "newPage": false,
                "searchKey": "runtime_test.backtraceSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const backtraceSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst backtraceSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#constsSource",
              "documentation": {
                "identifier": "constsSource",
                "newPage": false,
                "searchKey": "runtime_test.constsSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const constsSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst constsSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#expectedLldbOutput",
              "documentation": {
                "identifier": "expectedLldbOutput",
                "newPage": false,
                "searchKey": "runtime_test.expectedLldbOutput",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const expectedLldbOutput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst expectedLldbOutput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hashSize",
              "documentation": {
                "identifier": "hashSize",
                "newPage": false,
                "searchKey": "runtime_test.hashSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const hashSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hashSize = 32 + int(^uintptr(0)>>63<<5)\n```\n\nsize of the hash output (32 or 64 bits) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#helloSource",
              "documentation": {
                "identifier": "helloSource",
                "newPage": false,
                "searchKey": "runtime_test.helloSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const helloSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst helloSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#intSize",
              "documentation": {
                "identifier": "intSize",
                "newPage": false,
                "searchKey": "runtime_test.intSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const intSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst intSize = 32 << (^uint(0) >> 63)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lldbHelloSource",
              "documentation": {
                "identifier": "lldbHelloSource",
                "newPage": false,
                "searchKey": "runtime_test.lldbHelloSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lldbHelloSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lldbHelloSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lldbScriptSource",
              "documentation": {
                "identifier": "lldbScriptSource",
                "newPage": false,
                "searchKey": "runtime_test.lldbScriptSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lldbScriptSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lldbScriptSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#objsize",
              "documentation": {
                "identifier": "objsize",
                "newPage": false,
                "searchKey": "runtime_test.objsize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const objsize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst objsize = 320\n```\n\nOne chunk must be exactly one sizeclass in size. It should be a sizeclass not used much by others, so we have a greater chance of finding adjacent ones. size class 19: 320 byte objects, 25 per page, 1 page alloc at a time \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#panicSource",
              "documentation": {
                "identifier": "panicSource",
                "newPage": false,
                "searchKey": "runtime_test.panicSource",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const panicSource"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst panicSource = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#size",
              "documentation": {
                "identifier": "size",
                "newPage": false,
                "searchKey": "runtime_test.size",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const size"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst size = 10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sizeNoStack",
              "documentation": {
                "identifier": "sizeNoStack",
                "newPage": false,
                "searchKey": "runtime_test.sizeNoStack",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const sizeNoStack"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sizeNoStack = 100\n```\n\nStrings and slices that don't escape and fit into tmpBuf are stack allocated, which defeats using AllocsPerRun to test other optimizations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#typePointer",
              "documentation": {
                "identifier": "typePointer",
                "newPage": false,
                "searchKey": "runtime_test.typePointer",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const typePointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst typePointer = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#typeScalar",
              "documentation": {
                "identifier": "typeScalar",
                "newPage": false,
                "searchKey": "runtime_test.typeScalar",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const typeScalar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst typeScalar = 0\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime_test#BoolSink",
              "documentation": {
                "identifier": "BoolSink",
                "newPage": false,
                "searchKey": "runtime_test.BoolSink",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BoolSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BoolSink bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Foo1",
              "documentation": {
                "identifier": "Foo1",
                "newPage": false,
                "searchKey": "runtime_test.Foo1",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Foo1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Foo1 = &Object1{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Foo2",
              "documentation": {
                "identifier": "Foo2",
                "newPage": false,
                "searchKey": "runtime_test.Foo2",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Foo2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Foo2 = &Object2{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#One",
              "documentation": {
                "identifier": "One",
                "newPage": false,
                "searchKey": "runtime_test.One",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var One"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar One = []int64{1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#SinkIntPointerSlice",
              "documentation": {
                "identifier": "SinkIntPointerSlice",
                "newPage": false,
                "searchKey": "runtime_test.SinkIntPointerSlice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SinkIntPointerSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SinkIntPointerSlice []*int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#SinkIntSlice",
              "documentation": {
                "identifier": "SinkIntSlice",
                "newPage": false,
                "searchKey": "runtime_test.SinkIntSlice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var SinkIntSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar SinkIntSlice []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#a",
              "documentation": {
                "identifier": "a",
                "newPage": false,
                "searchKey": "runtime_test.a",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var a"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar a bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#alwaysFalse",
              "documentation": {
                "identifier": "alwaysFalse",
                "newPage": false,
                "searchKey": "runtime_test.alwaysFalse",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var alwaysFalse"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar alwaysFalse = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#arenaCollisionSink",
              "documentation": {
                "identifier": "arenaCollisionSink",
                "newPage": false,
                "searchKey": "runtime_test.arenaCollisionSink",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var arenaCollisionSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar arenaCollisionSink []*acLink\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#arrayLit",
              "documentation": {
                "identifier": "arrayLit",
                "newPage": false,
                "searchKey": "runtime_test.arrayLit",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var arrayLit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar arrayLit = [...]int{lineNumber(),\n\tlineNumber(), lineNumber(),\n\tlineNumber(),\n} // 23\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#atoi32tests",
              "documentation": {
                "identifier": "atoi32tests",
                "newPage": false,
                "searchKey": "runtime_test.atoi32tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var atoi32tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atoi32tests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#atoi64tests",
              "documentation": {
                "identifier": "atoi64tests",
                "newPage": false,
                "searchKey": "runtime_test.atoi64tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var atoi64tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atoi64tests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#blackhole",
              "documentation": {
                "identifier": "blackhole",
                "newPage": false,
                "searchKey": "runtime_test.blackhole",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var blackhole"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar blackhole []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssBigStruct",
              "documentation": {
                "identifier": "bssBigStruct",
                "newPage": false,
                "searchKey": "runtime_test.bssBigStruct",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssBigStruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssBigStruct BigStruct\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssEface",
              "documentation": {
                "identifier": "bssEface",
                "newPage": false,
                "searchKey": "runtime_test.bssEface",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssEface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssEface interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssIface",
              "documentation": {
                "identifier": "bssIface",
                "newPage": false,
                "searchKey": "runtime_test.bssIface",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssIface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssIface Iface\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssPtr",
              "documentation": {
                "identifier": "bssPtr",
                "newPage": false,
                "searchKey": "runtime_test.bssPtr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssPtr Ptr\n```\n\nBSS \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssPtrScalar",
              "documentation": {
                "identifier": "bssPtrScalar",
                "newPage": false,
                "searchKey": "runtime_test.bssPtrScalar",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssPtrScalar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssPtrScalar PtrScalar\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssScalarPtr",
              "documentation": {
                "identifier": "bssScalarPtr",
                "newPage": false,
                "searchKey": "runtime_test.bssScalarPtr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssScalarPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssScalarPtr ScalarPtr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssSlice",
              "documentation": {
                "identifier": "bssSlice",
                "newPage": false,
                "searchKey": "runtime_test.bssSlice",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssSlice []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bssString",
              "documentation": {
                "identifier": "bssString",
                "newPage": false,
                "searchKey": "runtime_test.bssString",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bssString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bssString string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bufSizes",
              "documentation": {
                "identifier": "bufSizes",
                "newPage": false,
                "searchKey": "runtime_test.bufSizes",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bufSizes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bufSizes = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bufSizesOverlap",
              "documentation": {
                "identifier": "bufSizesOverlap",
                "newPage": false,
                "searchKey": "runtime_test.bufSizesOverlap",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bufSizesOverlap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bufSizesOverlap = []int{\n\t32, 64, 128, 256, 512, 1024, 2048, 4096,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#compLit",
              "documentation": {
                "identifier": "compLit",
                "newPage": false,
                "searchKey": "runtime_test.compLit",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var compLit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar compLit\n\n// 19\n = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#concurrentMapTest",
              "documentation": {
                "identifier": "concurrentMapTest",
                "newPage": false,
                "searchKey": "runtime_test.concurrentMapTest",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var concurrentMapTest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar concurrentMapTest = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataBigStruct",
              "documentation": {
                "identifier": "dataBigStruct",
                "newPage": false,
                "searchKey": "runtime_test.dataBigStruct",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataBigStruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataBigStruct = BigStruct{w: 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataEface",
              "documentation": {
                "identifier": "dataEface",
                "newPage": false,
                "searchKey": "runtime_test.dataEface",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataEface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataEface interface{} = 42\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataIface",
              "documentation": {
                "identifier": "dataIface",
                "newPage": false,
                "searchKey": "runtime_test.dataIface",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataIface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataIface Iface = IfaceImpl(42)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataPtr",
              "documentation": {
                "identifier": "dataPtr",
                "newPage": false,
                "searchKey": "runtime_test.dataPtr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataPtr = Ptr{new(byte)}\n```\n\nDATA \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataPtrScalar",
              "documentation": {
                "identifier": "dataPtrScalar",
                "newPage": false,
                "searchKey": "runtime_test.dataPtrScalar",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataPtrScalar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataPtrScalar = PtrScalar{w: 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataScalarPtr",
              "documentation": {
                "identifier": "dataScalarPtr",
                "newPage": false,
                "searchKey": "runtime_test.dataScalarPtr",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataScalarPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataScalarPtr = ScalarPtr{q: 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataSlice",
              "documentation": {
                "identifier": "dataSlice",
                "newPage": false,
                "searchKey": "runtime_test.dataSlice",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataSlice = []string{\"foo\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dataString",
              "documentation": {
                "identifier": "dataString",
                "newPage": false,
                "searchKey": "runtime_test.dataString",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dataString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dataString = \"foo\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dummy",
              "documentation": {
                "identifier": "dummy",
                "newPage": false,
                "searchKey": "runtime_test.dummy",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dummy"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dummy int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dummyTimeHistogram",
              "documentation": {
                "identifier": "dummyTimeHistogram",
                "newPage": false,
                "searchKey": "runtime_test.dummyTimeHistogram",
                "tags": [
                  "variable",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dummyTimeHistogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dummyTimeHistogram TimeHistogram\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#e",
              "documentation": {
                "identifier": "e",
                "newPage": false,
                "searchKey": "runtime_test.e",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var e"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar e interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#e_",
              "documentation": {
                "identifier": "e_",
                "newPage": false,
                "searchKey": "runtime_test.e_",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var e_"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar e_ interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#efaceCmp1",
              "documentation": {
                "identifier": "efaceCmp1",
                "newPage": false,
                "searchKey": "runtime_test.efaceCmp1",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var efaceCmp1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar efaceCmp1 interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#efaceCmp2",
              "documentation": {
                "identifier": "efaceCmp2",
                "newPage": false,
                "searchKey": "runtime_test.efaceCmp2",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var efaceCmp2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar efaceCmp2 interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#eight8",
              "documentation": {
                "identifier": "eight8",
                "newPage": false,
                "searchKey": "runtime_test.eight8",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var eight8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar eight8 uint8 = 8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#eight8I",
              "documentation": {
                "identifier": "eight8I",
                "newPage": false,
                "searchKey": "runtime_test.eight8I",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var eight8I"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar eight8I T8 = 8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#errf",
              "documentation": {
                "identifier": "errf",
                "newPage": false,
                "searchKey": "runtime_test.errf",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errf error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#escapeMe",
              "documentation": {
                "identifier": "escapeMe",
                "newPage": false,
                "searchKey": "runtime_test.escapeMe",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var escapeMe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escapeMe = func(x interface{}) {}\n```\n\nPass a value to escapeMe to force it to escape. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#escapeString",
              "documentation": {
                "identifier": "escapeString",
                "newPage": false,
                "searchKey": "runtime_test.escapeString",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var escapeString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escapeString string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#faultAddrs",
              "documentation": {
                "identifier": "faultAddrs",
                "newPage": false,
                "searchKey": "runtime_test.faultAddrs",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var faultAddrs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar faultAddrs = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#firstLine",
              "documentation": {
                "identifier": "firstLine",
                "newPage": false,
                "searchKey": "runtime_test.firstLine",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var firstLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar firstLine = lineNumber() // 0\n\n```\n\nDo not add/remove lines in this block without updating the line numbers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#flagQuick",
              "documentation": {
                "identifier": "flagQuick",
                "newPage": false,
                "searchKey": "runtime_test.flagQuick",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var flagQuick"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar flagQuick = flag.Bool(\"quick\", false, \"skip slow tests, for second run in all.bash\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#gcinfoSink",
              "documentation": {
                "identifier": "gcinfoSink",
                "newPage": false,
                "searchKey": "runtime_test.gcinfoSink",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gcinfoSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gcinfoSink interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#glob",
              "documentation": {
                "identifier": "glob",
                "newPage": false,
                "searchKey": "runtime_test.glob",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var glob"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar glob int = 3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#global",
              "documentation": {
                "identifier": "global",
                "newPage": false,
                "searchKey": "runtime_test.global",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var global"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar global interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#globint1",
              "documentation": {
                "identifier": "globint1",
                "newPage": false,
                "searchKey": "runtime_test.globint1",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var globint1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globint1, globint2, globint3 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#globint2",
              "documentation": {
                "identifier": "globint2",
                "newPage": false,
                "searchKey": "runtime_test.globint2",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var globint2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globint1, globint2, globint3 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#globint3",
              "documentation": {
                "identifier": "globint3",
                "newPage": false,
                "searchKey": "runtime_test.globint3",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var globint3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globint1, globint2, globint3 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#globstruct",
              "documentation": {
                "identifier": "globstruct",
                "newPage": false,
                "searchKey": "runtime_test.globstruct",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var globstruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globstruct struct {\n\ta, b, c, d, e, f, g, h, i int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hintGreaterThan8",
              "documentation": {
                "identifier": "hintGreaterThan8",
                "newPage": false,
                "searchKey": "runtime_test.hintGreaterThan8",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hintGreaterThan8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hintGreaterThan8 = 32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hintLessThan8",
              "documentation": {
                "identifier": "hintLessThan8",
                "newPage": false,
                "searchKey": "runtime_test.hintLessThan8",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hintLessThan8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hintLessThan8 = 7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hugeSink",
              "documentation": {
                "identifier": "hugeSink",
                "newPage": false,
                "searchKey": "runtime_test.hugeSink",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hugeSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hugeSink interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#i1",
              "documentation": {
                "identifier": "i1",
                "newPage": false,
                "searchKey": "runtime_test.i1",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var i1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar i1 I1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#i2",
              "documentation": {
                "identifier": "i2",
                "newPage": false,
                "searchKey": "runtime_test.i2",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var i2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar i2 I2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoEface",
              "documentation": {
                "identifier": "infoEface",
                "newPage": false,
                "searchKey": "runtime_test.infoEface",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoEface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoEface = []byte{typeScalar, typePointer}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoIface",
              "documentation": {
                "identifier": "infoIface",
                "newPage": false,
                "searchKey": "runtime_test.infoIface",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoIface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoIface = []byte{typeScalar, typePointer}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoPtr",
              "documentation": {
                "identifier": "infoPtr",
                "newPage": false,
                "searchKey": "runtime_test.infoPtr",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoPtr = []byte{typePointer}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoPtr10",
              "documentation": {
                "identifier": "infoPtr10",
                "newPage": false,
                "searchKey": "runtime_test.infoPtr10",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoPtr10"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoPtr10 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoPtrScalar",
              "documentation": {
                "identifier": "infoPtrScalar",
                "newPage": false,
                "searchKey": "runtime_test.infoPtrScalar",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoPtrScalar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoPtrScalar = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoScalarPtr",
              "documentation": {
                "identifier": "infoScalarPtr",
                "newPage": false,
                "searchKey": "runtime_test.infoScalarPtr",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoScalarPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoScalarPtr = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoScalarPtr4",
              "documentation": {
                "identifier": "infoScalarPtr4",
                "newPage": false,
                "searchKey": "runtime_test.infoScalarPtr4",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoScalarPtr4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoScalarPtr4 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoSlice",
              "documentation": {
                "identifier": "infoSlice",
                "newPage": false,
                "searchKey": "runtime_test.infoSlice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoSlice = []byte{typePointer, typeScalar, typeScalar}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoString",
              "documentation": {
                "identifier": "infoString",
                "newPage": false,
                "searchKey": "runtime_test.infoString",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var infoString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar infoString = []byte{typePointer, typeScalar}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#intLit",
              "documentation": {
                "identifier": "intLit",
                "newPage": false,
                "searchKey": "runtime_test.intLit",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var intLit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar intLit = lineNumber() +\n\tlineNumber() +\n\tlineNumber() // 36\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#l38",
              "documentation": {
                "identifier": "l38",
                "newPage": false,
                "searchKey": "runtime_test.l38",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var l38"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar l38, l39, l40 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#l39",
              "documentation": {
                "identifier": "l39",
                "newPage": false,
                "searchKey": "runtime_test.l39",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var l39"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar l38, l39, l40 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#l40",
              "documentation": {
                "identifier": "l40",
                "newPage": false,
                "searchKey": "runtime_test.l40",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var l40"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar l38, l39, l40 int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lineVar1",
              "documentation": {
                "identifier": "lineVar1",
                "newPage": false,
                "searchKey": "runtime_test.lineVar1",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lineVar1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lineVar1 = lineNumber() // 2\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lineVar2a",
              "documentation": {
                "identifier": "lineVar2a",
                "newPage": false,
                "searchKey": "runtime_test.lineVar2a",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lineVar2a"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lineVar2a, lineVar2b = lineNumber(), lineNumber() // 3\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lineVar2b",
              "documentation": {
                "identifier": "lineVar2b",
                "newPage": false,
                "searchKey": "runtime_test.lineVar2b",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lineVar2b"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lineVar2a, lineVar2b = lineNumber(), lineNumber() // 3\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#list",
              "documentation": {
                "identifier": "list",
                "newPage": false,
                "searchKey": "runtime_test.list",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var list"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar list []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lldbPath",
              "documentation": {
                "identifier": "lldbPath",
                "newPage": false,
                "searchKey": "runtime_test.lldbPath",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lldbPath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lldbPath string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#mallocSink",
              "documentation": {
                "identifier": "mallocSink",
                "newPage": false,
                "searchKey": "runtime_test.mallocSink",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mallocSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mallocSink uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#mapBucketTests",
              "documentation": {
                "identifier": "mapBucketTests",
                "newPage": false,
                "searchKey": "runtime_test.mapBucketTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mapBucketTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mapBucketTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#mapLit",
              "documentation": {
                "identifier": "mapLit",
                "newPage": false,
                "searchKey": "runtime_test.mapLit",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mapLit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mapLit\n\n// 33\n = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#mapSink",
              "documentation": {
                "identifier": "mapSink",
                "newPage": false,
                "searchKey": "runtime_test.mapSink",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mapSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mapSink map[int]int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#n",
              "documentation": {
                "identifier": "n",
                "newPage": false,
                "searchKey": "runtime_test.n",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var n"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar n = flag.Int(\"n\", 1000, \"number of goroutines\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nerr",
              "documentation": {
                "identifier": "nerr",
                "newPage": false,
                "searchKey": "runtime_test.nerr",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nerr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nerr int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nzbig",
              "documentation": {
                "identifier": "nzbig",
                "newPage": false,
                "searchKey": "runtime_test.nzbig",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nzbig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nzbig [512]byte = [512]byte{511: 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nzslice",
              "documentation": {
                "identifier": "nzslice",
                "newPage": false,
                "searchKey": "runtime_test.nzslice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nzslice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nzslice []byte = []byte(\"abc\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nzstr",
              "documentation": {
                "identifier": "nzstr",
                "newPage": false,
                "searchKey": "runtime_test.nzstr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nzstr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nzstr string = \"abc\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ok",
              "documentation": {
                "identifier": "ok",
                "newPage": false,
                "searchKey": "runtime_test.ok",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ok"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ok bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#one16",
              "documentation": {
                "identifier": "one16",
                "newPage": false,
                "searchKey": "runtime_test.one16",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var one16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar one16 uint16 = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#one32",
              "documentation": {
                "identifier": "one32",
                "newPage": false,
                "searchKey": "runtime_test.one32",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var one32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar one32 uint32 = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#one64",
              "documentation": {
                "identifier": "one64",
                "newPage": false,
                "searchKey": "runtime_test.one64",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var one64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar one64 uint64 = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#padData",
              "documentation": {
                "identifier": "padData",
                "newPage": false,
                "searchKey": "runtime_test.padData",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var padData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar padData [128]uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#pointerClassData",
              "documentation": {
                "identifier": "pointerClassData",
                "newPage": false,
                "searchKey": "runtime_test.pointerClassData",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pointerClassData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pointerClassData = 42\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#pointerClassSink",
              "documentation": {
                "identifier": "pointerClassSink",
                "newPage": false,
                "searchKey": "runtime_test.pointerClassSink",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pointerClassSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pointerClassSink *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#preempt",
              "documentation": {
                "identifier": "preempt",
                "newPage": false,
                "searchKey": "runtime_test.preempt",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var preempt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar preempt = ...\n```\n\nThe function is used to test preemption at split stack checks. Declaring a var avoids inlining at the call site. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#result",
              "documentation": {
                "identifier": "result",
                "newPage": false,
                "searchKey": "runtime_test.result",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var result"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar result complex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#s",
              "documentation": {
                "identifier": "s",
                "newPage": false,
                "searchKey": "runtime_test.s",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var s"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#s1Ptr",
              "documentation": {
                "identifier": "s1Ptr",
                "newPage": false,
                "searchKey": "runtime_test.s1Ptr",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var s1Ptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s1Ptr []uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#s2Ptr",
              "documentation": {
                "identifier": "s2Ptr",
                "newPage": false,
                "searchKey": "runtime_test.s2Ptr",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var s2Ptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s2Ptr [][2]uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#s3Ptr",
              "documentation": {
                "identifier": "s3Ptr",
                "newPage": false,
                "searchKey": "runtime_test.s3Ptr",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var s3Ptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s3Ptr [][3]uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#s4Ptr",
              "documentation": {
                "identifier": "s4Ptr",
                "newPage": false,
                "searchKey": "runtime_test.s4Ptr",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var s4Ptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s4Ptr [][4]uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sByte",
              "documentation": {
                "identifier": "sByte",
                "newPage": false,
                "searchKey": "runtime_test.sByte",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sByte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sByte []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#saveInt",
              "documentation": {
                "identifier": "saveInt",
                "newPage": false,
                "searchKey": "runtime_test.saveInt",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var saveInt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar saveInt uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sigquit",
              "documentation": {
                "identifier": "sigquit",
                "newPage": false,
                "searchKey": "runtime_test.sigquit",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sigquit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sigquit = syscall.SIGQUIT\n```\n\nsigquit is the signal to send to kill a hanging testdata program. Send SIGQUIT to get a stack trace. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sink",
              "documentation": {
                "identifier": "sink",
                "newPage": false,
                "searchKey": "runtime_test.sink",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sink uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sink32",
              "documentation": {
                "identifier": "sink32",
                "newPage": false,
                "searchKey": "runtime_test.sink32",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sink32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sink32 uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sinkAppend",
              "documentation": {
                "identifier": "sinkAppend",
                "newPage": false,
                "searchKey": "runtime_test.sinkAppend",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sinkAppend"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sinkAppend bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sinkInt",
              "documentation": {
                "identifier": "sinkInt",
                "newPage": false,
                "searchKey": "runtime_test.sinkInt",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sinkInt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sinkInt int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sliceLit",
              "documentation": {
                "identifier": "sliceLit",
                "newPage": false,
                "searchKey": "runtime_test.sliceLit",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sliceLit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sliceLit = []int{lineNumber(),\n\tlineNumber(), lineNumber(),\n\tlineNumber(),\n} // 27\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ss",
              "documentation": {
                "identifier": "ss",
                "newPage": false,
                "searchKey": "runtime_test.ss",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ss"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ss *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ssglobal",
              "documentation": {
                "identifier": "ssglobal",
                "newPage": false,
                "searchKey": "runtime_test.ssglobal",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ssglobal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ssglobal string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#stop",
              "documentation": {
                "identifier": "stop",
                "newPage": false,
                "searchKey": "runtime_test.stop",
                "tags": [
                  "variable",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var stop"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stop = make(chan bool, 1)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#stress",
              "documentation": {
                "identifier": "stress",
                "newPage": false,
                "searchKey": "runtime_test.stress",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var stress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stress []*MyNode\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#stringdata",
              "documentation": {
                "identifier": "stringdata",
                "newPage": false,
                "searchKey": "runtime_test.stringdata",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var stringdata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stringdata = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sysNanosleep",
              "documentation": {
                "identifier": "sysNanosleep",
                "newPage": false,
                "searchKey": "runtime_test.sysNanosleep",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sysNanosleep"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sysNanosleep func(d time.Duration)\n```\n\nsysNanosleep is defined by OS-specific files (such as runtime_linux_test.go) to sleep for the given duration. If nil, dependent tests are skipped. The implementation should invoke a blocking system call and not call time.Sleep, which would deschedule the goroutine. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testMemStatsCount",
              "documentation": {
                "identifier": "testMemStatsCount",
                "newPage": false,
                "searchKey": "runtime_test.testMemStatsCount",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testMemStatsCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testMemStatsCount int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testNonEscapingMapVariable",
              "documentation": {
                "identifier": "testNonEscapingMapVariable",
                "newPage": false,
                "searchKey": "runtime_test.testNonEscapingMapVariable",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testNonEscapingMapVariable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testNonEscapingMapVariable int = 8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTracebackArgsBuf",
              "documentation": {
                "identifier": "testTracebackArgsBuf",
                "newPage": false,
                "searchKey": "runtime_test.testTracebackArgsBuf",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testTracebackArgsBuf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testTracebackArgsBuf [1000]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testprog",
              "documentation": {
                "identifier": "testprog",
                "newPage": false,
                "searchKey": "runtime_test.testprog",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testprog"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testprog struct {\n\tsync.Mutex\n\tdir    string\n\ttarget map[string]buildexe\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#thousand16",
              "documentation": {
                "identifier": "thousand16",
                "newPage": false,
                "searchKey": "runtime_test.thousand16",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var thousand16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar thousand16 uint16 = 1000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#thousand32",
              "documentation": {
                "identifier": "thousand32",
                "newPage": false,
                "searchKey": "runtime_test.thousand32",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var thousand32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar thousand32 uint32 = 1000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#thousand64",
              "documentation": {
                "identifier": "thousand64",
                "newPage": false,
                "searchKey": "runtime_test.thousand64",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var thousand64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar thousand64 uint64 = 1000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tinyByteSink",
              "documentation": {
                "identifier": "tinyByteSink",
                "newPage": false,
                "searchKey": "runtime_test.tinyByteSink",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tinyByteSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tinyByteSink *byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tinyObj12Sink",
              "documentation": {
                "identifier": "tinyObj12Sink",
                "newPage": false,
                "searchKey": "runtime_test.tinyObj12Sink",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tinyObj12Sink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tinyObj12Sink *obj12\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tinyUint32Sink",
              "documentation": {
                "identifier": "tinyUint32Sink",
                "newPage": false,
                "searchKey": "runtime_test.tinyUint32Sink",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tinyUint32Sink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tinyUint32Sink *uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tl",
              "documentation": {
                "identifier": "tl",
                "newPage": false,
                "searchKey": "runtime_test.tl",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tl TL\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tm",
              "documentation": {
                "identifier": "tm",
                "newPage": false,
                "searchKey": "runtime_test.tm",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tm"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tm TM\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#toRemove",
              "documentation": {
                "identifier": "toRemove",
                "newPage": false,
                "searchKey": "runtime_test.toRemove",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var toRemove"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar toRemove []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ts",
              "documentation": {
                "identifier": "ts",
                "newPage": false,
                "searchKey": "runtime_test.ts",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ts TS\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#wg",
              "documentation": {
                "identifier": "wg",
                "newPage": false,
                "searchKey": "runtime_test.wg",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var wg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar wg sync.WaitGroup\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#workSink",
              "documentation": {
                "identifier": "workSink",
                "newPage": false,
                "searchKey": "runtime_test.workSink",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var workSink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar workSink = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#x",
              "documentation": {
                "identifier": "x",
                "newPage": false,
                "searchKey": "runtime_test.x",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#xsglobal",
              "documentation": {
                "identifier": "xsglobal",
                "newPage": false,
                "searchKey": "runtime_test.xsglobal",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var xsglobal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar xsglobal []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#yes",
              "documentation": {
                "identifier": "yes",
                "newPage": false,
                "searchKey": "runtime_test.yes",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var yes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar yes bool = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zero16",
              "documentation": {
                "identifier": "zero16",
                "newPage": false,
                "searchKey": "runtime_test.zero16",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zero16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zero16 uint16 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zero16I",
              "documentation": {
                "identifier": "zero16I",
                "newPage": false,
                "searchKey": "runtime_test.zero16I",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zero16I"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zero16I T16 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zero32",
              "documentation": {
                "identifier": "zero32",
                "newPage": false,
                "searchKey": "runtime_test.zero32",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zero32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zero32 uint32 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zero32I",
              "documentation": {
                "identifier": "zero32I",
                "newPage": false,
                "searchKey": "runtime_test.zero32I",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zero32I"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zero32I T32 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zero64",
              "documentation": {
                "identifier": "zero64",
                "newPage": false,
                "searchKey": "runtime_test.zero64",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zero64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zero64 uint64 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zero64I",
              "documentation": {
                "identifier": "zero64I",
                "newPage": false,
                "searchKey": "runtime_test.zero64I",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zero64I"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zero64I T64 = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zerobig",
              "documentation": {
                "identifier": "zerobig",
                "newPage": false,
                "searchKey": "runtime_test.zerobig",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zerobig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zerobig [512]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zeroslice",
              "documentation": {
                "identifier": "zeroslice",
                "newPage": false,
                "searchKey": "runtime_test.zeroslice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zeroslice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zeroslice []byte = nil\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zerosliceI",
              "documentation": {
                "identifier": "zerosliceI",
                "newPage": false,
                "searchKey": "runtime_test.zerosliceI",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zerosliceI"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zerosliceI Tslice = nil\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zerostr",
              "documentation": {
                "identifier": "zerostr",
                "newPage": false,
                "searchKey": "runtime_test.zerostr",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zerostr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zerostr string = \"\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#zerostrI",
              "documentation": {
                "identifier": "zerostrI",
                "newPage": false,
                "searchKey": "runtime_test.zerostrI",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var zerostrI"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar zerostrI Tstr = \"\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime_test#BigKey",
              "documentation": {
                "identifier": "BigKey",
                "newPage": false,
                "searchKey": "runtime_test.BigKey",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BigKey [3]int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BigKey [3]int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BigStruct",
              "documentation": {
                "identifier": "BigStruct",
                "newPage": false,
                "searchKey": "runtime_test.BigStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BigStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BigStruct struct {\n\tq *int\n\tw byte\n\te [17]byte\n\tr []byte\n\tt int\n\ty uint16\n\tu uint64\n\ti string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BigVal",
              "documentation": {
                "identifier": "BigVal",
                "newPage": false,
                "searchKey": "runtime_test.BigVal",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BigVal [3]int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BigVal [3]int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BytesKey",
              "documentation": {
                "identifier": "BytesKey",
                "newPage": false,
                "searchKey": "runtime_test.BytesKey",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BytesKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BytesKey struct {\n\tb []byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#BytesKey.bits",
                    "documentation": {
                      "identifier": "BytesKey.bits",
                      "newPage": false,
                      "searchKey": "runtime_test.BytesKey.bits",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BytesKey) bits() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BytesKey) bits() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#BytesKey.clear",
                    "documentation": {
                      "identifier": "BytesKey.clear",
                      "newPage": false,
                      "searchKey": "runtime_test.BytesKey.clear",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BytesKey) clear()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BytesKey) clear()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#BytesKey.flipBit",
                    "documentation": {
                      "identifier": "BytesKey.flipBit",
                      "newPage": false,
                      "searchKey": "runtime_test.BytesKey.flipBit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BytesKey) flipBit(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BytesKey) flipBit(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#BytesKey.hash",
                    "documentation": {
                      "identifier": "BytesKey.hash",
                      "newPage": false,
                      "searchKey": "runtime_test.BytesKey.hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BytesKey) hash() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BytesKey) hash() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#BytesKey.name",
                    "documentation": {
                      "identifier": "BytesKey.name",
                      "newPage": false,
                      "searchKey": "runtime_test.BytesKey.name",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BytesKey) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BytesKey) name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#BytesKey.random",
                    "documentation": {
                      "identifier": "BytesKey.random",
                      "newPage": false,
                      "searchKey": "runtime_test.BytesKey.random",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *BytesKey) random(r *rand.Rand)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *BytesKey) random(r *rand.Rand)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ComplexAlgKey",
              "documentation": {
                "identifier": "ComplexAlgKey",
                "newPage": false,
                "searchKey": "runtime_test.ComplexAlgKey",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ComplexAlgKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ComplexAlgKey struct {\n\ta, b, c int64\n\t_       int\n\td       int32\n\t_       int\n\te       string\n\t_       int\n\tf, g, h int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#EfaceKey",
              "documentation": {
                "identifier": "EfaceKey",
                "newPage": false,
                "searchKey": "runtime_test.EfaceKey",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EfaceKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EfaceKey struct {\n\ti interface{}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#EfaceKey.bits",
                    "documentation": {
                      "identifier": "EfaceKey.bits",
                      "newPage": false,
                      "searchKey": "runtime_test.EfaceKey.bits",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *EfaceKey) bits() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *EfaceKey) bits() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#EfaceKey.clear",
                    "documentation": {
                      "identifier": "EfaceKey.clear",
                      "newPage": false,
                      "searchKey": "runtime_test.EfaceKey.clear",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *EfaceKey) clear()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *EfaceKey) clear()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#EfaceKey.flipBit",
                    "documentation": {
                      "identifier": "EfaceKey.flipBit",
                      "newPage": false,
                      "searchKey": "runtime_test.EfaceKey.flipBit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *EfaceKey) flipBit(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *EfaceKey) flipBit(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#EfaceKey.hash",
                    "documentation": {
                      "identifier": "EfaceKey.hash",
                      "newPage": false,
                      "searchKey": "runtime_test.EfaceKey.hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *EfaceKey) hash() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *EfaceKey) hash() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#EfaceKey.name",
                    "documentation": {
                      "identifier": "EfaceKey.name",
                      "newPage": false,
                      "searchKey": "runtime_test.EfaceKey.name",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *EfaceKey) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *EfaceKey) name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#EfaceKey.random",
                    "documentation": {
                      "identifier": "EfaceKey.random",
                      "newPage": false,
                      "searchKey": "runtime_test.EfaceKey.random",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *EfaceKey) random(r *rand.Rand)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *EfaceKey) random(r *rand.Rand)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#FloatInt",
              "documentation": {
                "identifier": "FloatInt",
                "newPage": false,
                "searchKey": "runtime_test.FloatInt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FloatInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FloatInt struct {\n\tx float64\n\ty int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#HashSet",
              "documentation": {
                "identifier": "HashSet",
                "newPage": false,
                "searchKey": "runtime_test.HashSet",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HashSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HashSet struct {\n\tm map[uintptr]struct{} // set of hashes added\n\tn int                  // number of hashes added\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#newHashSet",
                    "documentation": {
                      "identifier": "newHashSet",
                      "newPage": false,
                      "searchKey": "runtime_test.newHashSet",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newHashSet() *HashSet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newHashSet() *HashSet\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#HashSet.add",
                    "documentation": {
                      "identifier": "HashSet.add",
                      "newPage": false,
                      "searchKey": "runtime_test.HashSet.add",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *HashSet) add(h uintptr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *HashSet) add(h uintptr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#HashSet.addB",
                    "documentation": {
                      "identifier": "HashSet.addB",
                      "newPage": false,
                      "searchKey": "runtime_test.HashSet.addB",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *HashSet) addB(x []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *HashSet) addB(x []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#HashSet.addS",
                    "documentation": {
                      "identifier": "HashSet.addS",
                      "newPage": false,
                      "searchKey": "runtime_test.HashSet.addS",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *HashSet) addS(x string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *HashSet) addS(x string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#HashSet.addS_seed",
                    "documentation": {
                      "identifier": "HashSet.addS_seed",
                      "newPage": false,
                      "searchKey": "runtime_test.HashSet.addS_seed",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *HashSet) addS_seed(x string, seed uintptr)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *HashSet) addS_seed(x string, seed uintptr)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#HashSet.check",
                    "documentation": {
                      "identifier": "HashSet.check",
                      "newPage": false,
                      "searchKey": "runtime_test.HashSet.check",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *HashSet) check(t *testing.T)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *HashSet) check(t *testing.T)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#I",
              "documentation": {
                "identifier": "I",
                "newPage": false,
                "searchKey": "runtime_test.I",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type I interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype I interface {\n\tM()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#I1",
              "documentation": {
                "identifier": "I1",
                "newPage": false,
                "searchKey": "runtime_test.I1",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type I1 interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype I1 interface {\n\tMethod1()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#I2",
              "documentation": {
                "identifier": "I2",
                "newPage": false,
                "searchKey": "runtime_test.I2",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type I2 interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype I2 interface {\n\tMethod1()\n\tMethod2()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Iface",
              "documentation": {
                "identifier": "Iface",
                "newPage": false,
                "searchKey": "runtime_test.Iface",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Iface interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Iface interface {\n\tf()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#IfaceImpl",
              "documentation": {
                "identifier": "IfaceImpl",
                "newPage": false,
                "searchKey": "runtime_test.IfaceImpl",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceImpl int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceImpl int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceImpl.f",
                    "documentation": {
                      "identifier": "IfaceImpl.f",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceImpl.f",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (IfaceImpl) f()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (IfaceImpl) f()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#IfaceKey",
              "documentation": {
                "identifier": "IfaceKey",
                "newPage": false,
                "searchKey": "runtime_test.IfaceKey",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceKey struct {\n\ti interface {\n\t\tF()\n\t}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceKey.bits",
                    "documentation": {
                      "identifier": "IfaceKey.bits",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceKey.bits",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *IfaceKey) bits() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *IfaceKey) bits() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceKey.clear",
                    "documentation": {
                      "identifier": "IfaceKey.clear",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceKey.clear",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *IfaceKey) clear()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *IfaceKey) clear()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceKey.flipBit",
                    "documentation": {
                      "identifier": "IfaceKey.flipBit",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceKey.flipBit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *IfaceKey) flipBit(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *IfaceKey) flipBit(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceKey.hash",
                    "documentation": {
                      "identifier": "IfaceKey.hash",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceKey.hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *IfaceKey) hash() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *IfaceKey) hash() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceKey.name",
                    "documentation": {
                      "identifier": "IfaceKey.name",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceKey.name",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *IfaceKey) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *IfaceKey) name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#IfaceKey.random",
                    "documentation": {
                      "identifier": "IfaceKey.random",
                      "newPage": false,
                      "searchKey": "runtime_test.IfaceKey.random",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *IfaceKey) random(r *rand.Rand)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *IfaceKey) random(r *rand.Rand)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Int32Key",
              "documentation": {
                "identifier": "Int32Key",
                "newPage": false,
                "searchKey": "runtime_test.Int32Key",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Int32Key struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Int32Key struct {\n\ti uint32\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#Int32Key.bits",
                    "documentation": {
                      "identifier": "Int32Key.bits",
                      "newPage": false,
                      "searchKey": "runtime_test.Int32Key.bits",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int32Key) bits() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int32Key) bits() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int32Key.clear",
                    "documentation": {
                      "identifier": "Int32Key.clear",
                      "newPage": false,
                      "searchKey": "runtime_test.Int32Key.clear",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int32Key) clear()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int32Key) clear()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int32Key.flipBit",
                    "documentation": {
                      "identifier": "Int32Key.flipBit",
                      "newPage": false,
                      "searchKey": "runtime_test.Int32Key.flipBit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int32Key) flipBit(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int32Key) flipBit(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int32Key.hash",
                    "documentation": {
                      "identifier": "Int32Key.hash",
                      "newPage": false,
                      "searchKey": "runtime_test.Int32Key.hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int32Key) hash() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int32Key) hash() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int32Key.name",
                    "documentation": {
                      "identifier": "Int32Key.name",
                      "newPage": false,
                      "searchKey": "runtime_test.Int32Key.name",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int32Key) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int32Key) name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int32Key.random",
                    "documentation": {
                      "identifier": "Int32Key.random",
                      "newPage": false,
                      "searchKey": "runtime_test.Int32Key.random",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int32Key) random(r *rand.Rand)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int32Key) random(r *rand.Rand)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Int64Key",
              "documentation": {
                "identifier": "Int64Key",
                "newPage": false,
                "searchKey": "runtime_test.Int64Key",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Int64Key struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Int64Key struct {\n\ti uint64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#Int64Key.bits",
                    "documentation": {
                      "identifier": "Int64Key.bits",
                      "newPage": false,
                      "searchKey": "runtime_test.Int64Key.bits",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int64Key) bits() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int64Key) bits() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int64Key.clear",
                    "documentation": {
                      "identifier": "Int64Key.clear",
                      "newPage": false,
                      "searchKey": "runtime_test.Int64Key.clear",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int64Key) clear()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int64Key) clear()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int64Key.flipBit",
                    "documentation": {
                      "identifier": "Int64Key.flipBit",
                      "newPage": false,
                      "searchKey": "runtime_test.Int64Key.flipBit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int64Key) flipBit(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int64Key) flipBit(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int64Key.hash",
                    "documentation": {
                      "identifier": "Int64Key.hash",
                      "newPage": false,
                      "searchKey": "runtime_test.Int64Key.hash",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int64Key) hash() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int64Key) hash() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int64Key.name",
                    "documentation": {
                      "identifier": "Int64Key.name",
                      "newPage": false,
                      "searchKey": "runtime_test.Int64Key.name",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int64Key) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int64Key) name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#Int64Key.random",
                    "documentation": {
                      "identifier": "Int64Key.random",
                      "newPage": false,
                      "searchKey": "runtime_test.Int64Key.random",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *Int64Key) random(r *rand.Rand)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *Int64Key) random(r *rand.Rand)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Key",
              "documentation": {
                "identifier": "Key",
                "newPage": false,
                "searchKey": "runtime_test.Key",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Key interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Key interface {\n\tclear()              // set bits all to 0\n\trandom(r *rand.Rand) // set key to something random\n\tbits() int           // how many bits key has\n\tflipBit(i int)       // flip bit i of the key\n\thash() uintptr       // hash the key\n\tname() string        // for error reporting\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#LargeStruct",
              "documentation": {
                "identifier": "LargeStruct",
                "newPage": false,
                "searchKey": "runtime_test.LargeStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LargeStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LargeStruct struct {\n\tx [16][]byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Matrix",
              "documentation": {
                "identifier": "Matrix",
                "newPage": false,
                "searchKey": "runtime_test.Matrix",
                "tags": [
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Matrix [][]float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Matrix [][]float64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#makeMatrix",
                    "documentation": {
                      "identifier": "makeMatrix",
                      "newPage": false,
                      "searchKey": "runtime_test.makeMatrix",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeMatrix(n int) Matrix"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeMatrix(n int) Matrix\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#MyNode",
              "documentation": {
                "identifier": "MyNode",
                "newPage": false,
                "searchKey": "runtime_test.MyNode",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyNode struct {\n\tLFNode\n\tdata int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#toMyNode",
                    "documentation": {
                      "identifier": "toMyNode",
                      "newPage": false,
                      "searchKey": "runtime_test.toMyNode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toMyNode(node *LFNode) *MyNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toMyNode(node *LFNode) *MyNode\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node1",
              "documentation": {
                "identifier": "Node1",
                "newPage": false,
                "searchKey": "runtime_test.Node1",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node1 struct {\n\tValue       [1]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node1024",
              "documentation": {
                "identifier": "Node1024",
                "newPage": false,
                "searchKey": "runtime_test.Node1024",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node1024 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node1024 struct {\n\tValue       [1024]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node124",
              "documentation": {
                "identifier": "Node124",
                "newPage": false,
                "searchKey": "runtime_test.Node124",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node124 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node124 struct {\n\tValue       [124]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node126",
              "documentation": {
                "identifier": "Node126",
                "newPage": false,
                "searchKey": "runtime_test.Node126",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node126 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node126 struct {\n\tValue       [126]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node128",
              "documentation": {
                "identifier": "Node128",
                "newPage": false,
                "searchKey": "runtime_test.Node128",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node128 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node128 struct {\n\tValue       [128]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node130",
              "documentation": {
                "identifier": "Node130",
                "newPage": false,
                "searchKey": "runtime_test.Node130",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node130 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node130 struct {\n\tValue       [130]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node64",
              "documentation": {
                "identifier": "Node64",
                "newPage": false,
                "searchKey": "runtime_test.Node64",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node64 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node64 struct {\n\tValue       [64]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node64Dead",
              "documentation": {
                "identifier": "Node64Dead",
                "newPage": false,
                "searchKey": "runtime_test.Node64Dead",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node64Dead struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node64Dead struct {\n\tLeft, Right *byte\n\tValue       [64]uintptr\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Node8",
              "documentation": {
                "identifier": "Node8",
                "newPage": false,
                "searchKey": "runtime_test.Node8",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node8 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node8 struct {\n\tValue       [8]uintptr\n\tLeft, Right *byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Object1",
              "documentation": {
                "identifier": "Object1",
                "newPage": false,
                "searchKey": "runtime_test.Object1",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Object1 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Object1 struct {\n\tSomething []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Object2",
              "documentation": {
                "identifier": "Object2",
                "newPage": false,
                "searchKey": "runtime_test.Object2",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Object2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Object2 struct {\n\tSomething byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Ptr",
              "documentation": {
                "identifier": "Ptr",
                "newPage": false,
                "searchKey": "runtime_test.Ptr",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ptr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ptr struct {\n\t*byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#PtrScalar",
              "documentation": {
                "identifier": "PtrScalar",
                "newPage": false,
                "searchKey": "runtime_test.PtrScalar",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PtrScalar struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PtrScalar struct {\n\tq *int\n\tw int\n\te *int\n\tr int\n\tt *int\n\ty int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ScalarPtr",
              "documentation": {
                "identifier": "ScalarPtr",
                "newPage": false,
                "searchKey": "runtime_test.ScalarPtr",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ScalarPtr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ScalarPtr struct {\n\tq int\n\tw *int\n\te int\n\tr *int\n\tt int\n\ty *int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#T16",
              "documentation": {
                "identifier": "T16",
                "newPage": false,
                "searchKey": "runtime_test.T16",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type T16 uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T16 uint16\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#T16.Method1",
                    "documentation": {
                      "identifier": "T16.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.T16.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (T16) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (T16) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#T32",
              "documentation": {
                "identifier": "T32",
                "newPage": false,
                "searchKey": "runtime_test.T32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type T32 uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T32 uint32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#T32.Method1",
                    "documentation": {
                      "identifier": "T32.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.T32.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (T32) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (T32) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#T64",
              "documentation": {
                "identifier": "T64",
                "newPage": false,
                "searchKey": "runtime_test.T64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type T64 uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T64 uint64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#T64.Method1",
                    "documentation": {
                      "identifier": "T64.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.T64.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (T64) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (T64) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#T8",
              "documentation": {
                "identifier": "T8",
                "newPage": false,
                "searchKey": "runtime_test.T8",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type T8 uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T8 uint8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#T8.Method1",
                    "documentation": {
                      "identifier": "T8.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.T8.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (T8) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (T8) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TL",
              "documentation": {
                "identifier": "TL",
                "newPage": false,
                "searchKey": "runtime_test.TL",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TL [2]uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TL [2]uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#TL.Method1",
                    "documentation": {
                      "identifier": "TL.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.TL.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (TL) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (TL) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#TL.Method2",
                    "documentation": {
                      "identifier": "TL.Method2",
                      "newPage": false,
                      "searchKey": "runtime_test.TL.Method2",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (TL) Method2()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (TL) Method2()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TM",
              "documentation": {
                "identifier": "TM",
                "newPage": false,
                "searchKey": "runtime_test.TM",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TM uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TM uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#TM.Method1",
                    "documentation": {
                      "identifier": "TM.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.TM.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (TM) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (TM) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#TM.Method2",
                    "documentation": {
                      "identifier": "TM.Method2",
                      "newPage": false,
                      "searchKey": "runtime_test.TM.Method2",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (TM) Method2()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (TM) Method2()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TS",
              "documentation": {
                "identifier": "TS",
                "newPage": false,
                "searchKey": "runtime_test.TS",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TS uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TS uint16\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#TS.Method1",
                    "documentation": {
                      "identifier": "TS.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.TS.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (TS) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (TS) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#TS.Method2",
                    "documentation": {
                      "identifier": "TS.Method2",
                      "newPage": false,
                      "searchKey": "runtime_test.TS.Method2",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (TS) Method2()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (TS) Method2()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Tint",
              "documentation": {
                "identifier": "Tint",
                "newPage": false,
                "searchKey": "runtime_test.Tint",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tint int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tint int // *Tint implements Tinter, interface{}\n\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#Tint.m",
                    "documentation": {
                      "identifier": "Tint.m",
                      "newPage": false,
                      "searchKey": "runtime_test.Tint.m",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tint) m()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tint) m()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Tinter",
              "documentation": {
                "identifier": "Tinter",
                "newPage": false,
                "searchKey": "runtime_test.Tinter",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tinter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tinter interface {\n\tm()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Tintptr",
              "documentation": {
                "identifier": "Tintptr",
                "newPage": false,
                "searchKey": "runtime_test.Tintptr",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tintptr *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tintptr *int // assignable to *int\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Tslice",
              "documentation": {
                "identifier": "Tslice",
                "newPage": false,
                "searchKey": "runtime_test.Tslice",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tslice []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tslice []byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#Tslice.Method1",
                    "documentation": {
                      "identifier": "Tslice.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.Tslice.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (Tslice) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (Tslice) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#Tstr",
              "documentation": {
                "identifier": "Tstr",
                "newPage": false,
                "searchKey": "runtime_test.Tstr",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tstr string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tstr string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#Tstr.Method1",
                    "documentation": {
                      "identifier": "Tstr.Method1",
                      "newPage": false,
                      "searchKey": "runtime_test.Tstr.Method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (Tstr) Method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (Tstr) Method1()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#acLink",
              "documentation": {
                "identifier": "acLink",
                "newPage": false,
                "searchKey": "runtime_test.acLink",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type acLink struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype acLink struct {\n\tx [1 << 20]byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#atoi32Test",
              "documentation": {
                "identifier": "atoi32Test",
                "newPage": false,
                "searchKey": "runtime_test.atoi32Test",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type atoi32Test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype atoi32Test struct {\n\tin  string\n\tout int32\n\tok  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#atoi64Test",
              "documentation": {
                "identifier": "atoi64Test",
                "newPage": false,
                "searchKey": "runtime_test.atoi64Test",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type atoi64Test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype atoi64Test struct {\n\tin  string\n\tout int64\n\tok  bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bigBuf",
              "documentation": {
                "identifier": "bigBuf",
                "newPage": false,
                "searchKey": "runtime_test.bigBuf",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bigBuf [4096]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bigBuf [4 * 1024]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bigStruct",
              "documentation": {
                "identifier": "bigStruct",
                "newPage": false,
                "searchKey": "runtime_test.bigStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bigStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bigStruct struct {\n\tx, y, z, w, p, q int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bigValue",
              "documentation": {
                "identifier": "bigValue",
                "newPage": false,
                "searchKey": "runtime_test.bigValue",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bigValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bigValue struct {\n\tfill uint64\n\tit   bool\n\tup   string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#buildexe",
              "documentation": {
                "identifier": "buildexe",
                "newPage": false,
                "searchKey": "runtime_test.buildexe",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type buildexe struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype buildexe struct {\n\texe string\n\terr error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#canString",
              "documentation": {
                "identifier": "canString",
                "newPage": false,
                "searchKey": "runtime_test.canString",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type canString int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype canString int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#canString.String",
                    "documentation": {
                      "identifier": "canString.String",
                      "newPage": false,
                      "searchKey": "runtime_test.canString.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c canString) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c canString) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#chunk",
              "documentation": {
                "identifier": "chunk",
                "newPage": false,
                "searchKey": "runtime_test.chunk",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type chunk [17]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype chunk [17]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#containsBigStruct",
              "documentation": {
                "identifier": "containsBigStruct",
                "newPage": false,
                "searchKey": "runtime_test.containsBigStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type containsBigStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype containsBigStruct struct {\n\telement bigStruct\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#sideeffect2",
                    "documentation": {
                      "identifier": "sideeffect2",
                      "newPage": false,
                      "searchKey": "runtime_test.sideeffect2",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func sideeffect2(in containsBigStruct) containsBigStruct"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc sideeffect2(in containsBigStruct) containsBigStruct\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#empty",
              "documentation": {
                "identifier": "empty",
                "newPage": false,
                "searchKey": "runtime_test.empty",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type empty struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype empty struct {\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fInter",
              "documentation": {
                "identifier": "fInter",
                "newPage": false,
                "searchKey": "runtime_test.fInter",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fInter uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fInter uint64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#fInter.F",
                    "documentation": {
                      "identifier": "fInter.F",
                      "newPage": false,
                      "searchKey": "runtime_test.fInter.F",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x fInter) F()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x fInter) F()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fakeTimeFrame",
              "documentation": {
                "identifier": "fakeTimeFrame",
                "newPage": false,
                "searchKey": "runtime_test.fakeTimeFrame",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeTimeFrame struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeTimeFrame struct {\n\ttime uint64\n\tdata string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#foo",
              "documentation": {
                "identifier": "foo",
                "newPage": false,
                "searchKey": "runtime_test.foo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type foo struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype foo struct {\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#foo.method1",
                    "documentation": {
                      "identifier": "foo.method1",
                      "newPage": false,
                      "searchKey": "runtime_test.foo.method1",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *foo) method1()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *foo) method1()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#foo.method2",
                    "documentation": {
                      "identifier": "foo.method2",
                      "newPage": false,
                      "searchKey": "runtime_test.foo.method2",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *foo) method2()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *foo) method2()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#myError",
              "documentation": {
                "identifier": "myError",
                "newPage": false,
                "searchKey": "runtime_test.myError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type myError struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype myError struct {\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#myError.Error",
                    "documentation": {
                      "identifier": "myError.Error",
                      "newPage": false,
                      "searchKey": "runtime_test.myError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (myError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (myError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nonSSAable",
              "documentation": {
                "identifier": "nonSSAable",
                "newPage": false,
                "searchKey": "runtime_test.nonSSAable",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nonSSAable [128]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nonSSAable [128]byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#mknonSSAable",
                    "documentation": {
                      "identifier": "mknonSSAable",
                      "newPage": false,
                      "searchKey": "runtime_test.mknonSSAable",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func mknonSSAable() nonSSAable"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc mknonSSAable() nonSSAable\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#obj12",
              "documentation": {
                "identifier": "obj12",
                "newPage": false,
                "searchKey": "runtime_test.obj12",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type obj12 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype obj12 struct {\n\ta uint64\n\tb uint32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#objtype",
              "documentation": {
                "identifier": "objtype",
                "newPage": false,
                "searchKey": "runtime_test.objtype",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type objtype [320]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype objtype [objsize]byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#adjStringChunk",
                    "documentation": {
                      "identifier": "adjStringChunk",
                      "newPage": false,
                      "searchKey": "runtime_test.adjStringChunk",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func adjStringChunk() (string, *objtype)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc adjStringChunk() (string, *objtype)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#point",
              "documentation": {
                "identifier": "point",
                "newPage": false,
                "searchKey": "runtime_test.point",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type point struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype point struct {\n\tx, y *int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#point.negate",
                    "documentation": {
                      "identifier": "point.negate",
                      "newPage": false,
                      "searchKey": "runtime_test.point.negate",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *point) negate()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *point) negate()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#response",
              "documentation": {
                "identifier": "response",
                "newPage": false,
                "searchKey": "runtime_test.response",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type response struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype response struct {\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#doRequest",
                    "documentation": {
                      "identifier": "doRequest",
                      "newPage": false,
                      "searchKey": "runtime_test.doRequest",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func doRequest(useSelect bool) (*response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc doRequest(useSelect bool) (*response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#struct0",
              "documentation": {
                "identifier": "struct0",
                "newPage": false,
                "searchKey": "runtime_test.struct0",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type struct0 struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype struct0 struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#struct24",
              "documentation": {
                "identifier": "struct24",
                "newPage": false,
                "searchKey": "runtime_test.struct24",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type struct24 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype struct24 struct{ a, b, c int64 }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#struct32",
              "documentation": {
                "identifier": "struct32",
                "newPage": false,
                "searchKey": "runtime_test.struct32",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type struct32 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype struct32 struct{ a, b, c, d int64 }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#struct40",
              "documentation": {
                "identifier": "struct40",
                "newPage": false,
                "searchKey": "runtime_test.struct40",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type struct40 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype struct40 struct{ a, b, c, d, e int64 }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#structWithMethod",
              "documentation": {
                "identifier": "structWithMethod",
                "newPage": false,
                "searchKey": "runtime_test.structWithMethod",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type structWithMethod struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structWithMethod struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#structWithMethod.caller",
                    "documentation": {
                      "identifier": "structWithMethod.caller",
                      "newPage": false,
                      "searchKey": "runtime_test.structWithMethod.caller",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s structWithMethod) caller() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s structWithMethod) caller() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#structWithMethod.callers",
                    "documentation": {
                      "identifier": "structWithMethod.callers",
                      "newPage": false,
                      "searchKey": "runtime_test.structWithMethod.callers",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s structWithMethod) callers() []uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s structWithMethod) callers() []uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#structWithMethod.nop",
                    "documentation": {
                      "identifier": "structWithMethod.nop",
                      "newPage": false,
                      "searchKey": "runtime_test.structWithMethod.nop",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s structWithMethod) nop()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s structWithMethod) nop()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/runtime_test#structWithMethod.stack",
                    "documentation": {
                      "identifier": "structWithMethod.stack",
                      "newPage": false,
                      "searchKey": "runtime_test.structWithMethod.stack",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s structWithMethod) stack() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s structWithMethod) stack() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#xtreeNode",
              "documentation": {
                "identifier": "xtreeNode",
                "newPage": false,
                "searchKey": "runtime_test.xtreeNode",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type xtreeNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype xtreeNode struct {\n\tl, r *xtreeNode\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/runtime_test#makeTree",
                    "documentation": {
                      "identifier": "makeTree",
                      "newPage": false,
                      "searchKey": "runtime_test.makeTree",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeTree(d int) *xtreeNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeTree(d int) *xtreeNode\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/runtime_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAlignedLoad",
              "documentation": {
                "identifier": "BenchmarkAlignedLoad",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAlignedLoad",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAlignedLoad(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAlignedLoad(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAllocation",
              "documentation": {
                "identifier": "BenchmarkAllocation",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAllocation",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAllocation(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAllocation(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppend",
              "documentation": {
                "identifier": "BenchmarkAppend",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppend",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppend(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppend(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendGrowByte",
              "documentation": {
                "identifier": "BenchmarkAppendGrowByte",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendGrowByte",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendGrowByte(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendGrowByte(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendGrowString",
              "documentation": {
                "identifier": "BenchmarkAppendGrowString",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendGrowString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendGrowString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendGrowString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendInPlace",
              "documentation": {
                "identifier": "BenchmarkAppendInPlace",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendInPlace",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendInPlace(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendInPlace(b *testing.B)\n```\n\nBenchmarkAppendInPlace tests the performance of append when the result is being written back to the same slice. In order for the in-place optimization to occur, the slice must be referred to by address; using a global is an easy way to trigger that. We test the \"grow\" and \"no grow\" paths separately, but not the \"normal\" (occasionally grow) path, because it is a blend of the other two. We use small numbers and small sizes in an attempt to avoid benchmarking memory allocation and copying. We use scalars instead of pointers in an attempt to avoid benchmarking the write barriers. We benchmark four common sizes (byte, pointer, string/interface, slice), and one larger size. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendSlice",
              "documentation": {
                "identifier": "BenchmarkAppendSlice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendSlice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendSliceLarge",
              "documentation": {
                "identifier": "BenchmarkAppendSliceLarge",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendSliceLarge",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendSliceLarge(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendSliceLarge(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendSpecialCase",
              "documentation": {
                "identifier": "BenchmarkAppendSpecialCase",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendSpecialCase",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendSpecialCase(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendSpecialCase(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAppendStr",
              "documentation": {
                "identifier": "BenchmarkAppendStr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAppendStr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAppendStr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAppendStr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkArrayEqual",
              "documentation": {
                "identifier": "BenchmarkArrayEqual",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkArrayEqual",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkArrayEqual(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkArrayEqual(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2E",
              "documentation": {
                "identifier": "BenchmarkAssertE2E",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2E",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2E(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2E(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2E2",
              "documentation": {
                "identifier": "BenchmarkAssertE2E2",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2E2",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2E2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2E2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2E2Blank",
              "documentation": {
                "identifier": "BenchmarkAssertE2E2Blank",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2E2Blank",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2E2Blank(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2E2Blank(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2I",
              "documentation": {
                "identifier": "BenchmarkAssertE2I",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2I",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2I(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2I(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2T",
              "documentation": {
                "identifier": "BenchmarkAssertE2T",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2T",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2T(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2T(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2T2",
              "documentation": {
                "identifier": "BenchmarkAssertE2T2",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2T2",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2T2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2T2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2T2Blank",
              "documentation": {
                "identifier": "BenchmarkAssertE2T2Blank",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2T2Blank",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2T2Blank(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2T2Blank(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertE2TLarge",
              "documentation": {
                "identifier": "BenchmarkAssertE2TLarge",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertE2TLarge",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertE2TLarge(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertE2TLarge(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertI2E",
              "documentation": {
                "identifier": "BenchmarkAssertI2E",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertI2E",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertI2E(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertI2E(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertI2E2",
              "documentation": {
                "identifier": "BenchmarkAssertI2E2",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertI2E2",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertI2E2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertI2E2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertI2E2Blank",
              "documentation": {
                "identifier": "BenchmarkAssertI2E2Blank",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertI2E2Blank",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertI2E2Blank(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertI2E2Blank(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertI2I",
              "documentation": {
                "identifier": "BenchmarkAssertI2I",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertI2I",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertI2I(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertI2I(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkAssertI2T",
              "documentation": {
                "identifier": "BenchmarkAssertI2T",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkAssertI2T",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAssertI2T(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAssertI2T(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkBigKeyMap",
              "documentation": {
                "identifier": "BenchmarkBigKeyMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkBigKeyMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkBigKeyMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkBigKeyMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkBigValMap",
              "documentation": {
                "identifier": "BenchmarkBigValMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkBigValMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkBigValMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkBigValMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkBulkWriteBarrier",
              "documentation": {
                "identifier": "BenchmarkBulkWriteBarrier",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkBulkWriteBarrier",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkBulkWriteBarrier(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkBulkWriteBarrier(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCallClosure",
              "documentation": {
                "identifier": "BenchmarkCallClosure",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCallClosure",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallClosure(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallClosure(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCallClosure1",
              "documentation": {
                "identifier": "BenchmarkCallClosure1",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCallClosure1",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallClosure1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallClosure1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCallClosure2",
              "documentation": {
                "identifier": "BenchmarkCallClosure2",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCallClosure2",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallClosure2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallClosure2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCallClosure3",
              "documentation": {
                "identifier": "BenchmarkCallClosure3",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCallClosure3",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallClosure3(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallClosure3(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCallClosure4",
              "documentation": {
                "identifier": "BenchmarkCallClosure4",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCallClosure4",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCallClosure4(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCallClosure4(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanClosed",
              "documentation": {
                "identifier": "BenchmarkChanClosed",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanClosed",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanClosed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanClosed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanContended",
              "documentation": {
                "identifier": "BenchmarkChanContended",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanContended",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanContended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanContended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanCreation",
              "documentation": {
                "identifier": "BenchmarkChanCreation",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanCreation",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanCreation(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanCreation(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanNonblocking",
              "documentation": {
                "identifier": "BenchmarkChanNonblocking",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanNonblocking",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanNonblocking(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanNonblocking(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanPopular",
              "documentation": {
                "identifier": "BenchmarkChanPopular",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanPopular",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanPopular(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanPopular(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanProdCons0",
              "documentation": {
                "identifier": "BenchmarkChanProdCons0",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanProdCons0",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanProdCons0(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanProdCons0(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanProdCons10",
              "documentation": {
                "identifier": "BenchmarkChanProdCons10",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanProdCons10",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanProdCons10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanProdCons10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanProdCons100",
              "documentation": {
                "identifier": "BenchmarkChanProdCons100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanProdCons100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanProdCons100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanProdCons100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanProdConsWork0",
              "documentation": {
                "identifier": "BenchmarkChanProdConsWork0",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanProdConsWork0",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanProdConsWork0(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanProdConsWork0(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanProdConsWork10",
              "documentation": {
                "identifier": "BenchmarkChanProdConsWork10",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanProdConsWork10",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanProdConsWork10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanProdConsWork10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanProdConsWork100",
              "documentation": {
                "identifier": "BenchmarkChanProdConsWork100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanProdConsWork100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanProdConsWork100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanProdConsWork100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanSem",
              "documentation": {
                "identifier": "BenchmarkChanSem",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanSem",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanSem(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanSem(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanSync",
              "documentation": {
                "identifier": "BenchmarkChanSync",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanSync",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanSync(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanSync(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanSyncWork",
              "documentation": {
                "identifier": "BenchmarkChanSyncWork",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanSyncWork",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanSyncWork(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanSyncWork(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkChanUncontended",
              "documentation": {
                "identifier": "BenchmarkChanUncontended",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkChanUncontended",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkChanUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkChanUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat1024",
              "documentation": {
                "identifier": "BenchmarkClearFat1024",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat1024",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat1024(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat1024(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat12",
              "documentation": {
                "identifier": "BenchmarkClearFat12",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat12",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat12(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat12(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat128",
              "documentation": {
                "identifier": "BenchmarkClearFat128",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat128",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat128(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat128(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat16",
              "documentation": {
                "identifier": "BenchmarkClearFat16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat24",
              "documentation": {
                "identifier": "BenchmarkClearFat24",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat24",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat24(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat24(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat256",
              "documentation": {
                "identifier": "BenchmarkClearFat256",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat256",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat256(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat256(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat32",
              "documentation": {
                "identifier": "BenchmarkClearFat32",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat32",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat40",
              "documentation": {
                "identifier": "BenchmarkClearFat40",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat40",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat40(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat40(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat48",
              "documentation": {
                "identifier": "BenchmarkClearFat48",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat48",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat48(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat48(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat512",
              "documentation": {
                "identifier": "BenchmarkClearFat512",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat512",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat512(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat512(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat56",
              "documentation": {
                "identifier": "BenchmarkClearFat56",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat56",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat56(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat56(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat64",
              "documentation": {
                "identifier": "BenchmarkClearFat64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClearFat8",
              "documentation": {
                "identifier": "BenchmarkClearFat8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClearFat8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClearFat8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClearFat8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkClosureCall",
              "documentation": {
                "identifier": "BenchmarkClosureCall",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkClosureCall",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClosureCall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClosureCall(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCompareStringBig",
              "documentation": {
                "identifier": "BenchmarkCompareStringBig",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCompareStringBig",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareStringBig(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareStringBig(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCompareStringBigUnaligned",
              "documentation": {
                "identifier": "BenchmarkCompareStringBigUnaligned",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCompareStringBigUnaligned",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareStringBigUnaligned(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareStringBigUnaligned(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCompareStringDifferentLength",
              "documentation": {
                "identifier": "BenchmarkCompareStringDifferentLength",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCompareStringDifferentLength",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareStringDifferentLength(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareStringDifferentLength(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCompareStringEqual",
              "documentation": {
                "identifier": "BenchmarkCompareStringEqual",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCompareStringEqual",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareStringEqual(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareStringEqual(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCompareStringIdentical",
              "documentation": {
                "identifier": "BenchmarkCompareStringIdentical",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCompareStringIdentical",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareStringIdentical(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareStringIdentical(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCompareStringSameLength",
              "documentation": {
                "identifier": "BenchmarkCompareStringSameLength",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCompareStringSameLength",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareStringSameLength(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareStringSameLength(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkComplex128DivDisInf",
              "documentation": {
                "identifier": "BenchmarkComplex128DivDisInf",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkComplex128DivDisInf",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkComplex128DivDisInf(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkComplex128DivDisInf(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkComplex128DivDisNaN",
              "documentation": {
                "identifier": "BenchmarkComplex128DivDisNaN",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkComplex128DivDisNaN",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkComplex128DivDisNaN(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkComplex128DivDisNaN(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkComplex128DivNisInf",
              "documentation": {
                "identifier": "BenchmarkComplex128DivNisInf",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkComplex128DivNisInf",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkComplex128DivNisInf(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkComplex128DivNisInf(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkComplex128DivNisNaN",
              "documentation": {
                "identifier": "BenchmarkComplex128DivNisNaN",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkComplex128DivNisNaN",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkComplex128DivNisNaN(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkComplex128DivNisNaN(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkComplex128DivNormal",
              "documentation": {
                "identifier": "BenchmarkComplex128DivNormal",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkComplex128DivNormal",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkComplex128DivNormal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkComplex128DivNormal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkComplexAlgMap",
              "documentation": {
                "identifier": "BenchmarkComplexAlgMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkComplexAlgMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkComplexAlgMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkComplexAlgMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConcatStringAndBytes",
              "documentation": {
                "identifier": "BenchmarkConcatStringAndBytes",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConcatStringAndBytes",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConcatStringAndBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConcatStringAndBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvI2E",
              "documentation": {
                "identifier": "BenchmarkConvI2E",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvI2E",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvI2E(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvI2E(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvI2I",
              "documentation": {
                "identifier": "BenchmarkConvI2I",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvI2I",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvI2I(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvI2I(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2EByteSized",
              "documentation": {
                "identifier": "BenchmarkConvT2EByteSized",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2EByteSized",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2EByteSized(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2EByteSized(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2ELarge",
              "documentation": {
                "identifier": "BenchmarkConvT2ELarge",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2ELarge",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2ELarge(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2ELarge(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2ESmall",
              "documentation": {
                "identifier": "BenchmarkConvT2ESmall",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2ESmall",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2ESmall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2ESmall(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2EUintptr",
              "documentation": {
                "identifier": "BenchmarkConvT2EUintptr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2EUintptr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2EUintptr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2EUintptr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2Ezero",
              "documentation": {
                "identifier": "BenchmarkConvT2Ezero",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2Ezero",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2Ezero(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2Ezero(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2ILarge",
              "documentation": {
                "identifier": "BenchmarkConvT2ILarge",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2ILarge",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2ILarge(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2ILarge(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2ISmall",
              "documentation": {
                "identifier": "BenchmarkConvT2ISmall",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2ISmall",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2ISmall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2ISmall(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkConvT2IUintptr",
              "documentation": {
                "identifier": "BenchmarkConvT2IUintptr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkConvT2IUintptr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkConvT2IUintptr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkConvT2IUintptr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopy",
              "documentation": {
                "identifier": "BenchmarkCopy",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopy",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopy(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopy(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat1024",
              "documentation": {
                "identifier": "BenchmarkCopyFat1024",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat1024",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat1024(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat1024(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat12",
              "documentation": {
                "identifier": "BenchmarkCopyFat12",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat12",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat12(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat12(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat128",
              "documentation": {
                "identifier": "BenchmarkCopyFat128",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat128",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat128(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat128(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat16",
              "documentation": {
                "identifier": "BenchmarkCopyFat16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat24",
              "documentation": {
                "identifier": "BenchmarkCopyFat24",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat24",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat24(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat24(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat256",
              "documentation": {
                "identifier": "BenchmarkCopyFat256",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat256",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat256(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat256(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat32",
              "documentation": {
                "identifier": "BenchmarkCopyFat32",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat32",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat512",
              "documentation": {
                "identifier": "BenchmarkCopyFat512",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat512",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat512(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat512(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat520",
              "documentation": {
                "identifier": "BenchmarkCopyFat520",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat520",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat520(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat520(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat64",
              "documentation": {
                "identifier": "BenchmarkCopyFat64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCopyFat8",
              "documentation": {
                "identifier": "BenchmarkCopyFat8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCopyFat8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCopyFat8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCopyFat8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCreateGoroutines",
              "documentation": {
                "identifier": "BenchmarkCreateGoroutines",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCreateGoroutines",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCreateGoroutines(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCreateGoroutines(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCreateGoroutinesCapture",
              "documentation": {
                "identifier": "BenchmarkCreateGoroutinesCapture",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCreateGoroutinesCapture",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCreateGoroutinesCapture(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCreateGoroutinesCapture(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCreateGoroutinesParallel",
              "documentation": {
                "identifier": "BenchmarkCreateGoroutinesParallel",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCreateGoroutinesParallel",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCreateGoroutinesParallel(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCreateGoroutinesParallel(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkCreateGoroutinesSingle",
              "documentation": {
                "identifier": "BenchmarkCreateGoroutinesSingle",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkCreateGoroutinesSingle",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCreateGoroutinesSingle(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCreateGoroutinesSingle(b *testing.B)\n```\n\nBenchmarkCreateGoroutinesSingle creates many goroutines, all from a single producer (the main benchmark goroutine). \n\nCompared to BenchmarkCreateGoroutines, this causes different behavior in the scheduler because Ms are much more likely to need to steal work from the main P rather than having work in the local run queue. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkDefer",
              "documentation": {
                "identifier": "BenchmarkDefer",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkDefer",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDefer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDefer(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkDefer10",
              "documentation": {
                "identifier": "BenchmarkDefer10",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkDefer10",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDefer10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDefer10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkDeferMany",
              "documentation": {
                "identifier": "BenchmarkDeferMany",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkDeferMany",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDeferMany(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDeferMany(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkEfaceCmpDiff",
              "documentation": {
                "identifier": "BenchmarkEfaceCmpDiff",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkEfaceCmpDiff",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEfaceCmpDiff(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEfaceCmpDiff(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkEfaceCmpDiffIndirect",
              "documentation": {
                "identifier": "BenchmarkEfaceCmpDiffIndirect",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkEfaceCmpDiffIndirect",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEfaceCmpDiffIndirect(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEfaceCmpDiffIndirect(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkEqEfaceConcrete",
              "documentation": {
                "identifier": "BenchmarkEqEfaceConcrete",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkEqEfaceConcrete",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEqEfaceConcrete(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEqEfaceConcrete(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkEqIfaceConcrete",
              "documentation": {
                "identifier": "BenchmarkEqIfaceConcrete",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkEqIfaceConcrete",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEqIfaceConcrete(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEqIfaceConcrete(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkExtendSlice",
              "documentation": {
                "identifier": "BenchmarkExtendSlice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkExtendSlice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkExtendSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkExtendSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkFastrand",
              "documentation": {
                "identifier": "BenchmarkFastrand",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkFastrand",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFastrand(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFastrand(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkFastrandHashiter",
              "documentation": {
                "identifier": "BenchmarkFastrandHashiter",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkFastrandHashiter",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFastrandHashiter(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFastrandHashiter(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkFastrandn",
              "documentation": {
                "identifier": "BenchmarkFastrandn",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkFastrandn",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFastrandn(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFastrandn(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkFinalizer",
              "documentation": {
                "identifier": "BenchmarkFinalizer",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkFinalizer",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFinalizer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFinalizer(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkFinalizerRun",
              "documentation": {
                "identifier": "BenchmarkFinalizerRun",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkFinalizerRun",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFinalizerRun(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFinalizerRun(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkFindBitRange64",
              "documentation": {
                "identifier": "BenchmarkFindBitRange64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkFindBitRange64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFindBitRange64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFindBitRange64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGoMapClear",
              "documentation": {
                "identifier": "BenchmarkGoMapClear",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGoMapClear",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGoMapClear(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGoMapClear(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGoMemclr",
              "documentation": {
                "identifier": "BenchmarkGoMemclr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGoMemclr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGoMemclr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGoMemclr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGoroutineBlocking",
              "documentation": {
                "identifier": "BenchmarkGoroutineBlocking",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGoroutineBlocking",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGoroutineBlocking(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGoroutineBlocking(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGoroutineForRange",
              "documentation": {
                "identifier": "BenchmarkGoroutineForRange",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGoroutineForRange",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGoroutineForRange(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGoroutineForRange(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGoroutineIdle",
              "documentation": {
                "identifier": "BenchmarkGoroutineIdle",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGoroutineIdle",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGoroutineIdle(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGoroutineIdle(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGoroutineSelect",
              "documentation": {
                "identifier": "BenchmarkGoroutineSelect",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGoroutineSelect",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGoroutineSelect(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGoroutineSelect(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkGrowSlice",
              "documentation": {
                "identifier": "BenchmarkGrowSlice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkGrowSlice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkGrowSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkGrowSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHash1024",
              "documentation": {
                "identifier": "BenchmarkHash1024",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHash1024",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash1024(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash1024(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHash16",
              "documentation": {
                "identifier": "BenchmarkHash16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHash16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHash5",
              "documentation": {
                "identifier": "BenchmarkHash5",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHash5",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash5(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash5(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHash64",
              "documentation": {
                "identifier": "BenchmarkHash64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHash64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHash65536",
              "documentation": {
                "identifier": "BenchmarkHash65536",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHash65536",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash65536(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash65536(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHashBytesSpeed",
              "documentation": {
                "identifier": "BenchmarkHashBytesSpeed",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHashBytesSpeed",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHashBytesSpeed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHashBytesSpeed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHashInt32Speed",
              "documentation": {
                "identifier": "BenchmarkHashInt32Speed",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHashInt32Speed",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHashInt32Speed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHashInt32Speed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHashInt64Speed",
              "documentation": {
                "identifier": "BenchmarkHashInt64Speed",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHashInt64Speed",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHashInt64Speed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHashInt64Speed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHashStringArraySpeed",
              "documentation": {
                "identifier": "BenchmarkHashStringArraySpeed",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHashStringArraySpeed",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHashStringArraySpeed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHashStringArraySpeed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkHashStringSpeed",
              "documentation": {
                "identifier": "BenchmarkHashStringSpeed",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkHashStringSpeed",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHashStringSpeed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHashStringSpeed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkIfaceCmp100",
              "documentation": {
                "identifier": "BenchmarkIfaceCmp100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkIfaceCmp100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIfaceCmp100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIfaceCmp100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkIfaceCmpNil100",
              "documentation": {
                "identifier": "BenchmarkIfaceCmpNil100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkIfaceCmpNil100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIfaceCmpNil100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIfaceCmpNil100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkIntMap",
              "documentation": {
                "identifier": "BenchmarkIntMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkIntMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIntMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIntMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkIssue18740",
              "documentation": {
                "identifier": "BenchmarkIssue18740",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkIssue18740",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIssue18740(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIssue18740(b *testing.B)\n```\n\nBenchmarkIssue18740 ensures that memmove uses 4 and 8 byte load/store to move 4 and 8 bytes. It used to do 2 2-byte load/stores, which leads to a pipeline stall when we try to read the result with one 4-byte load. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMSpanCountAlloc",
              "documentation": {
                "identifier": "BenchmarkMSpanCountAlloc",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMSpanCountAlloc",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMSpanCountAlloc(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMSpanCountAlloc(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMakeChan",
              "documentation": {
                "identifier": "BenchmarkMakeChan",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMakeChan",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMakeChan(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMakeChan(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMakeMap",
              "documentation": {
                "identifier": "BenchmarkMakeMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMakeMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMakeMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMakeMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMakeSlice",
              "documentation": {
                "identifier": "BenchmarkMakeSlice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMakeSlice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMakeSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMakeSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMakeSliceCopy",
              "documentation": {
                "identifier": "BenchmarkMakeSliceCopy",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMakeSliceCopy",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMakeSliceCopy(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMakeSliceCopy(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMalloc16",
              "documentation": {
                "identifier": "BenchmarkMalloc16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMalloc16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMalloc16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMalloc16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMalloc8",
              "documentation": {
                "identifier": "BenchmarkMalloc8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMalloc8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMalloc8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMalloc8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMallocLargeStruct",
              "documentation": {
                "identifier": "BenchmarkMallocLargeStruct",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMallocLargeStruct",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMallocLargeStruct(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMallocLargeStruct(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMallocTypeInfo16",
              "documentation": {
                "identifier": "BenchmarkMallocTypeInfo16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMallocTypeInfo16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMallocTypeInfo16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMallocTypeInfo16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMallocTypeInfo8",
              "documentation": {
                "identifier": "BenchmarkMallocTypeInfo8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMallocTypeInfo8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMallocTypeInfo8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMallocTypeInfo8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapAppendAssign",
              "documentation": {
                "identifier": "BenchmarkMapAppendAssign",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapAppendAssign",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapAppendAssign(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapAppendAssign(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapAssign",
              "documentation": {
                "identifier": "BenchmarkMapAssign",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapAssign",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapAssign(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapAssign(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapCycle",
              "documentation": {
                "identifier": "BenchmarkMapCycle",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapCycle",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapCycle(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapCycle(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapDelete",
              "documentation": {
                "identifier": "BenchmarkMapDelete",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapDelete",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapDelete(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapDelete(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapFirst",
              "documentation": {
                "identifier": "BenchmarkMapFirst",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapFirst",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapFirst(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapFirst(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapInterfacePtr",
              "documentation": {
                "identifier": "BenchmarkMapInterfacePtr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapInterfacePtr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapInterfacePtr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapInterfacePtr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapInterfaceString",
              "documentation": {
                "identifier": "BenchmarkMapInterfaceString",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapInterfaceString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapInterfaceString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapInterfaceString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapIter",
              "documentation": {
                "identifier": "BenchmarkMapIter",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapIter",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapIter(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapIter(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapIterEmpty",
              "documentation": {
                "identifier": "BenchmarkMapIterEmpty",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapIterEmpty",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapIterEmpty(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapIterEmpty(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapLast",
              "documentation": {
                "identifier": "BenchmarkMapLast",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapLast",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapLast(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapLast(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapMid",
              "documentation": {
                "identifier": "BenchmarkMapMid",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapMid",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapMid(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapMid(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapOperatorAssign",
              "documentation": {
                "identifier": "BenchmarkMapOperatorAssign",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapOperatorAssign",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapOperatorAssign(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapOperatorAssign(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapPop100",
              "documentation": {
                "identifier": "BenchmarkMapPop100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapPop100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapPop100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapPop100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapPop1000",
              "documentation": {
                "identifier": "BenchmarkMapPop1000",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapPop1000",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapPop1000(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapPop1000(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapPop10000",
              "documentation": {
                "identifier": "BenchmarkMapPop10000",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapPop10000",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapPop10000(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapPop10000(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapPopulate",
              "documentation": {
                "identifier": "BenchmarkMapPopulate",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapPopulate",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapPopulate(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapPopulate(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapStringConversion",
              "documentation": {
                "identifier": "BenchmarkMapStringConversion",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapStringConversion",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapStringConversion(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapStringConversion(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapStringKeysEight_16",
              "documentation": {
                "identifier": "BenchmarkMapStringKeysEight_16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapStringKeysEight_16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapStringKeysEight_16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapStringKeysEight_16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapStringKeysEight_1M",
              "documentation": {
                "identifier": "BenchmarkMapStringKeysEight_1M",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapStringKeysEight_1M",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapStringKeysEight_1M(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapStringKeysEight_1M(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapStringKeysEight_32",
              "documentation": {
                "identifier": "BenchmarkMapStringKeysEight_32",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapStringKeysEight_32",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapStringKeysEight_32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapStringKeysEight_32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMapStringKeysEight_64",
              "documentation": {
                "identifier": "BenchmarkMapStringKeysEight_64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMapStringKeysEight_64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMapStringKeysEight_64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMapStringKeysEight_64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMatmult",
              "documentation": {
                "identifier": "BenchmarkMatmult",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMatmult",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMatmult(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMatmult(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMegEmptyMap",
              "documentation": {
                "identifier": "BenchmarkMegEmptyMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMegEmptyMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMegEmptyMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMegEmptyMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMegEqMap",
              "documentation": {
                "identifier": "BenchmarkMegEqMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMegEqMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMegEqMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMegEqMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMegMap",
              "documentation": {
                "identifier": "BenchmarkMegMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMegMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMegMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMegMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMegOneMap",
              "documentation": {
                "identifier": "BenchmarkMegOneMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMegOneMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMegOneMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMegOneMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemclr",
              "documentation": {
                "identifier": "BenchmarkMemclr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemclr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemclr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemclr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemmove",
              "documentation": {
                "identifier": "BenchmarkMemmove",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemmove",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemmove(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemmove(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemmoveOverlap",
              "documentation": {
                "identifier": "BenchmarkMemmoveOverlap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemmoveOverlap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemmoveOverlap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemmoveOverlap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemmoveUnalignedDst",
              "documentation": {
                "identifier": "BenchmarkMemmoveUnalignedDst",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemmoveUnalignedDst",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemmoveUnalignedDst(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemmoveUnalignedDst(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemmoveUnalignedDstOverlap",
              "documentation": {
                "identifier": "BenchmarkMemmoveUnalignedDstOverlap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemmoveUnalignedDstOverlap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemmoveUnalignedDstOverlap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemmoveUnalignedDstOverlap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemmoveUnalignedSrc",
              "documentation": {
                "identifier": "BenchmarkMemmoveUnalignedSrc",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemmoveUnalignedSrc",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemmoveUnalignedSrc(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemmoveUnalignedSrc(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkMemmoveUnalignedSrcOverlap",
              "documentation": {
                "identifier": "BenchmarkMemmoveUnalignedSrcOverlap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkMemmoveUnalignedSrcOverlap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMemmoveUnalignedSrcOverlap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMemmoveUnalignedSrcOverlap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNeEfaceConcrete",
              "documentation": {
                "identifier": "BenchmarkNeEfaceConcrete",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNeEfaceConcrete",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNeEfaceConcrete(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNeEfaceConcrete(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNeIfaceConcrete",
              "documentation": {
                "identifier": "BenchmarkNeIfaceConcrete",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNeIfaceConcrete",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNeIfaceConcrete(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNeIfaceConcrete(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNetpollBreak",
              "documentation": {
                "identifier": "BenchmarkNetpollBreak",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNetpollBreak",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNetpollBreak(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNetpollBreak(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNewEmptyMap",
              "documentation": {
                "identifier": "BenchmarkNewEmptyMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNewEmptyMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNewEmptyMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNewEmptyMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNewEmptyMapHintGreaterThan8",
              "documentation": {
                "identifier": "BenchmarkNewEmptyMapHintGreaterThan8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNewEmptyMapHintGreaterThan8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNewEmptyMapHintGreaterThan8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNewEmptyMapHintGreaterThan8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNewEmptyMapHintLessThan8",
              "documentation": {
                "identifier": "BenchmarkNewEmptyMapHintLessThan8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNewEmptyMapHintLessThan8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNewEmptyMapHintLessThan8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNewEmptyMapHintLessThan8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkNewSmallMap",
              "documentation": {
                "identifier": "BenchmarkNewSmallMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkNewSmallMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNewSmallMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNewSmallMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkPallocBitsSummarize",
              "documentation": {
                "identifier": "BenchmarkPallocBitsSummarize",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkPallocBitsSummarize",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPallocBitsSummarize(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPallocBitsSummarize(b *testing.B)\n```\n\nBenchmarks how quickly we can summarize a PallocBits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkPanicRecover",
              "documentation": {
                "identifier": "BenchmarkPanicRecover",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkPanicRecover",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPanicRecover(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPanicRecover(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkPingPongHog",
              "documentation": {
                "identifier": "BenchmarkPingPongHog",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkPingPongHog",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPingPongHog(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPingPongHog(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRWMutexUncontended",
              "documentation": {
                "identifier": "BenchmarkRWMutexUncontended",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRWMutexUncontended",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRWMutexWorkWrite10",
              "documentation": {
                "identifier": "BenchmarkRWMutexWorkWrite10",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRWMutexWorkWrite10",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWorkWrite10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWorkWrite10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRWMutexWorkWrite100",
              "documentation": {
                "identifier": "BenchmarkRWMutexWorkWrite100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRWMutexWorkWrite100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWorkWrite100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWorkWrite100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRWMutexWrite10",
              "documentation": {
                "identifier": "BenchmarkRWMutexWrite10",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRWMutexWrite10",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWrite10(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWrite10(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRWMutexWrite100",
              "documentation": {
                "identifier": "BenchmarkRWMutexWrite100",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRWMutexWrite100",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRWMutexWrite100(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRWMutexWrite100(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkReadMemStats",
              "documentation": {
                "identifier": "BenchmarkReadMemStats",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkReadMemStats",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadMemStats(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadMemStats(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkReadMemStatsLatency",
              "documentation": {
                "identifier": "BenchmarkReadMemStatsLatency",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkReadMemStatsLatency",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadMemStatsLatency(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadMemStatsLatency(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkReadMetricsLatency",
              "documentation": {
                "identifier": "BenchmarkReadMetricsLatency",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkReadMetricsLatency",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadMetricsLatency(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadMetricsLatency(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRepeatedLookupStrMapKey1M",
              "documentation": {
                "identifier": "BenchmarkRepeatedLookupStrMapKey1M",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRepeatedLookupStrMapKey1M",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRepeatedLookupStrMapKey1M(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRepeatedLookupStrMapKey1M(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRepeatedLookupStrMapKey32",
              "documentation": {
                "identifier": "BenchmarkRepeatedLookupStrMapKey32",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRepeatedLookupStrMapKey32",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRepeatedLookupStrMapKey32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRepeatedLookupStrMapKey32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRuneCount",
              "documentation": {
                "identifier": "BenchmarkRuneCount",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRuneCount",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRuneCount(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRuneCount(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkRuneIterate",
              "documentation": {
                "identifier": "BenchmarkRuneIterate",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkRuneIterate",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRuneIterate(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRuneIterate(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSameLengthMap",
              "documentation": {
                "identifier": "BenchmarkSameLengthMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSameLengthMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSameLengthMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSameLengthMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkScanStackNoLocals",
              "documentation": {
                "identifier": "BenchmarkScanStackNoLocals",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkScanStackNoLocals",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkScanStackNoLocals(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkScanStackNoLocals(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSelectAsyncContended",
              "documentation": {
                "identifier": "BenchmarkSelectAsyncContended",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSelectAsyncContended",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSelectAsyncContended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSelectAsyncContended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSelectNonblock",
              "documentation": {
                "identifier": "BenchmarkSelectNonblock",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSelectNonblock",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSelectNonblock(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSelectNonblock(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSelectProdCons",
              "documentation": {
                "identifier": "BenchmarkSelectProdCons",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSelectProdCons",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSelectProdCons(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSelectProdCons(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSelectSyncContended",
              "documentation": {
                "identifier": "BenchmarkSelectSyncContended",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSelectSyncContended",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSelectSyncContended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSelectSyncContended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSelectUncontended",
              "documentation": {
                "identifier": "BenchmarkSelectUncontended",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSelectUncontended",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSelectUncontended(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSelectUncontended(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode1",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode1",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode1",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode1024",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode1024",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode1024",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode1024(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode1024(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode1024Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode1024Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode1024Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode1024Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode1024Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode124",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode124",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode124",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode124(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode124(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode124Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode124Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode124Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode124Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode124Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode126",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode126",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode126",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode126(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode126(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode126Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode126Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode126Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode126Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode126Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode128",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode128",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode128",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode128(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode128(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode128Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode128Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode128Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode128Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode128Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode130",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode130",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode130",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode130(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode130(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode130Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode130Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode130Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode130Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode130Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode1Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode1Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode1Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode1Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode1Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode64",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode64Dead",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode64Dead",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode64Dead",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode64Dead(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode64Dead(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode64DeadSlice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode64DeadSlice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode64DeadSlice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode64DeadSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode64DeadSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode64Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode64Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode64Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode64Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode64Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode8",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypeNode8Slice",
              "documentation": {
                "identifier": "BenchmarkSetTypeNode8Slice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypeNode8Slice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypeNode8Slice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypeNode8Slice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr126",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr126",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr126",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr126(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr126(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr128",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr128",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr128",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr128(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr128(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr16",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr16",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr16",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr16(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr16(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr32",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr32",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr32",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr64",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr64",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr64",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtr8",
              "documentation": {
                "identifier": "BenchmarkSetTypePtr8",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtr8",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtr8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtr8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSetTypePtrSlice",
              "documentation": {
                "identifier": "BenchmarkSetTypePtrSlice",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSetTypePtrSlice",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSetTypePtrSlice(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSetTypePtrSlice(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSliceByteToString",
              "documentation": {
                "identifier": "BenchmarkSliceByteToString",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSliceByteToString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSliceByteToString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSliceByteToString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSmallKeyMap",
              "documentation": {
                "identifier": "BenchmarkSmallKeyMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSmallKeyMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSmallKeyMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSmallKeyMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSmallStrMap",
              "documentation": {
                "identifier": "BenchmarkSmallStrMap",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSmallStrMap",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSmallStrMap(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSmallStrMap(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkStackCopy",
              "documentation": {
                "identifier": "BenchmarkStackCopy",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkStackCopy",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkStackCopy(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkStackCopy(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkStackCopyNoCache",
              "documentation": {
                "identifier": "BenchmarkStackCopyNoCache",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkStackCopyNoCache",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkStackCopyNoCache(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkStackCopyNoCache(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkStackCopyPtr",
              "documentation": {
                "identifier": "BenchmarkStackCopyPtr",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkStackCopyPtr",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkStackCopyPtr(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkStackCopyPtr(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkStackGrowth",
              "documentation": {
                "identifier": "BenchmarkStackGrowth",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkStackGrowth",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkStackGrowth(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkStackGrowth(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkStackGrowthDeep",
              "documentation": {
                "identifier": "BenchmarkStackGrowthDeep",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkStackGrowthDeep",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkStackGrowthDeep(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkStackGrowthDeep(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSyscall",
              "documentation": {
                "identifier": "BenchmarkSyscall",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSyscall",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSyscall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSyscall(b *testing.B)\n```\n\nSyscall tests split stack between Entersyscall and Exitsyscall under race detector. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSyscallExcess",
              "documentation": {
                "identifier": "BenchmarkSyscallExcess",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSyscallExcess",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSyscallExcess(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSyscallExcess(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSyscallExcessWork",
              "documentation": {
                "identifier": "BenchmarkSyscallExcessWork",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSyscallExcessWork",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSyscallExcessWork(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSyscallExcessWork(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkSyscallWork",
              "documentation": {
                "identifier": "BenchmarkSyscallWork",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkSyscallWork",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSyscallWork(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSyscallWork(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkUnalignedLoad",
              "documentation": {
                "identifier": "BenchmarkUnalignedLoad",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkUnalignedLoad",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnalignedLoad(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnalignedLoad(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkWakeupParallelSpinning",
              "documentation": {
                "identifier": "BenchmarkWakeupParallelSpinning",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkWakeupParallelSpinning",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWakeupParallelSpinning(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWakeupParallelSpinning(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkWakeupParallelSyscall",
              "documentation": {
                "identifier": "BenchmarkWakeupParallelSyscall",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkWakeupParallelSyscall",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWakeupParallelSyscall(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWakeupParallelSyscall(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#BenchmarkWriteBarrier",
              "documentation": {
                "identifier": "BenchmarkWriteBarrier",
                "newPage": false,
                "searchKey": "runtime_test.BenchmarkWriteBarrier",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWriteBarrier(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWriteBarrier(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ExampleFrames",
              "documentation": {
                "identifier": "ExampleFrames",
                "newPage": false,
                "searchKey": "runtime_test.ExampleFrames",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFrames()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFrames()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#HammerRWMutex",
              "documentation": {
                "identifier": "HammerRWMutex",
                "newPage": false,
                "searchKey": "runtime_test.HammerRWMutex",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HammerRWMutex(gomaxprocs, numReaders, num_iterations int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HammerRWMutex(gomaxprocs, numReaders, num_iterations int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAbort",
              "documentation": {
                "identifier": "TestAbort",
                "newPage": false,
                "searchKey": "runtime_test.TestAbort",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAbort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAbort(t *testing.T)\n```\n\nTest that runtime.abort does so. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAbortedPanic",
              "documentation": {
                "identifier": "TestAbortedPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestAbortedPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAbortedPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAbortedPanic(t *testing.T)\n```\n\nThis tests an extra recursive panic behavior that is only specified in the code. Suppose a first panic P1 happens and starts processing defer calls. If a second panic P2 happens while processing defer call D in frame F, then defer call processing is restarted (with some potentially new defer calls created by D or its callees). If the defer processing reaches the started defer call D again in the defer stack, then the original panic P1 is aborted and cannot continue panic processing or be recovered. If the panic P2 does a recover at some point, it will naturally remove the original panic P1 from the stack (since the original panic had to be in frame F or a descendant of F). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAddrRangesAdd",
              "documentation": {
                "identifier": "TestAddrRangesAdd",
                "newPage": false,
                "searchKey": "runtime_test.TestAddrRangesAdd",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddrRangesAdd(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddrRangesAdd(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAddrRangesFindSucc",
              "documentation": {
                "identifier": "TestAddrRangesFindSucc",
                "newPage": false,
                "searchKey": "runtime_test.TestAddrRangesFindSucc",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAddrRangesFindSucc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAddrRangesFindSucc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAlias",
              "documentation": {
                "identifier": "TestAlias",
                "newPage": false,
                "searchKey": "runtime_test.TestAlias",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAlias(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAlias(t *testing.T)\n```\n\nMaps aren't actually copied on assignment. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAppendGrowth",
              "documentation": {
                "identifier": "TestAppendGrowth",
                "newPage": false,
                "searchKey": "runtime_test.TestAppendGrowth",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAppendGrowth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAppendGrowth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAppendOverlap",
              "documentation": {
                "identifier": "TestAppendOverlap",
                "newPage": false,
                "searchKey": "runtime_test.TestAppendOverlap",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAppendOverlap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAppendOverlap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAppendSliceGrowth",
              "documentation": {
                "identifier": "TestAppendSliceGrowth",
                "newPage": false,
                "searchKey": "runtime_test.TestAppendSliceGrowth",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAppendSliceGrowth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAppendSliceGrowth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestArenaCollision",
              "documentation": {
                "identifier": "TestArenaCollision",
                "newPage": false,
                "searchKey": "runtime_test.TestArenaCollision",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArenaCollision(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArenaCollision(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestArrayHash",
              "documentation": {
                "identifier": "TestArrayHash",
                "newPage": false,
                "searchKey": "runtime_test.TestArrayHash",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArrayHash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArrayHash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAsyncPreempt",
              "documentation": {
                "identifier": "TestAsyncPreempt",
                "newPage": false,
                "searchKey": "runtime_test.TestAsyncPreempt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAsyncPreempt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAsyncPreempt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAtoi",
              "documentation": {
                "identifier": "TestAtoi",
                "newPage": false,
                "searchKey": "runtime_test.TestAtoi",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAtoi(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAtoi(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestAtoi32",
              "documentation": {
                "identifier": "TestAtoi32",
                "newPage": false,
                "searchKey": "runtime_test.TestAtoi32",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAtoi32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAtoi32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBadOpen",
              "documentation": {
                "identifier": "TestBadOpen",
                "newPage": false,
                "searchKey": "runtime_test.TestBadOpen",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadOpen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadOpen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBadTraceback",
              "documentation": {
                "identifier": "TestBadTraceback",
                "newPage": false,
                "searchKey": "runtime_test.TestBadTraceback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBigGOMAXPROCS",
              "documentation": {
                "identifier": "TestBigGOMAXPROCS",
                "newPage": false,
                "searchKey": "runtime_test.TestBigGOMAXPROCS",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBigGOMAXPROCS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBigGOMAXPROCS(t *testing.T)\n```\n\nTestBigGOMAXPROCS tests that setting GOMAXPROCS to a large value doesn't cause a crash at startup. See issue 38474. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBigItems",
              "documentation": {
                "identifier": "TestBigItems",
                "newPage": false,
                "searchKey": "runtime_test.TestBigItems",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBigItems(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBigItems(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBigStackCallbackCgo",
              "documentation": {
                "identifier": "TestBigStackCallbackCgo",
                "newPage": false,
                "searchKey": "runtime_test.TestBigStackCallbackCgo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBigStackCallbackCgo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBigStackCallbackCgo(t *testing.T)\n```\n\nTest that C code called via cgo can use large Windows thread stacks and call back in to Go without crashing. See issue #20975. \n\nSee also TestBigStackCallbackSyscall. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBlockLocked",
              "documentation": {
                "identifier": "TestBlockLocked",
                "newPage": false,
                "searchKey": "runtime_test.TestBlockLocked",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlockLocked(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlockLocked(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestBreakpoint",
              "documentation": {
                "identifier": "TestBreakpoint",
                "newPage": false,
                "searchKey": "runtime_test.TestBreakpoint",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBreakpoint(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBreakpoint(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCaller",
              "documentation": {
                "identifier": "TestCaller",
                "newPage": false,
                "searchKey": "runtime_test.TestCaller",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCaller(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCaller(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallers",
              "documentation": {
                "identifier": "TestCallers",
                "newPage": false,
                "searchKey": "runtime_test.TestCallers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersAbortedPanic",
              "documentation": {
                "identifier": "TestCallersAbortedPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersAbortedPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersAbortedPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersAbortedPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersAbortedPanic2",
              "documentation": {
                "identifier": "TestCallersAbortedPanic2",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersAbortedPanic2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersAbortedPanic2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersAbortedPanic2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersAfterRecovery",
              "documentation": {
                "identifier": "TestCallersAfterRecovery",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersAfterRecovery",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersAfterRecovery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersAfterRecovery(t *testing.T)\n```\n\nTest that a defer after a successful recovery looks like it is called directly from the function with the defers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersDeferNilFuncPanic",
              "documentation": {
                "identifier": "TestCallersDeferNilFuncPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersDeferNilFuncPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersDeferNilFuncPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersDeferNilFuncPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersDeferNilFuncPanicWithLoop",
              "documentation": {
                "identifier": "TestCallersDeferNilFuncPanicWithLoop",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersDeferNilFuncPanicWithLoop",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersDeferNilFuncPanicWithLoop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersDeferNilFuncPanicWithLoop(t *testing.T)\n```\n\nSame test, but forcing non-open-coded defer by putting the defer in a loop.  See issue #36050 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersDivZeroPanic",
              "documentation": {
                "identifier": "TestCallersDivZeroPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersDivZeroPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersDivZeroPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersDivZeroPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersDoublePanic",
              "documentation": {
                "identifier": "TestCallersDoublePanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersDoublePanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersDoublePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersDoublePanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersFromWrapper",
              "documentation": {
                "identifier": "TestCallersFromWrapper",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersFromWrapper",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersFromWrapper(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersFromWrapper(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersNilPointerPanic",
              "documentation": {
                "identifier": "TestCallersNilPointerPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersNilPointerPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersNilPointerPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersNilPointerPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCallersPanic",
              "documentation": {
                "identifier": "TestCallersPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCallersPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCallersPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCallersPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCatchPanic",
              "documentation": {
                "identifier": "TestCatchPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCatchPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCatchPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCatchPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoCCodeSIGPROF",
              "documentation": {
                "identifier": "TestCgoCCodeSIGPROF",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoCCodeSIGPROF",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoCCodeSIGPROF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoCCodeSIGPROF(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoCallbackGC",
              "documentation": {
                "identifier": "TestCgoCallbackGC",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoCallbackGC",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoCallbackGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoCallbackGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoCheckBytes",
              "documentation": {
                "identifier": "TestCgoCheckBytes",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoCheckBytes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoCheckBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoCheckBytes(t *testing.T)\n```\n\nTest for issue 14387. Test that the program that doesn't need any cgo pointer checking takes about the same amount of time with it as without it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoCrashHandler",
              "documentation": {
                "identifier": "TestCgoCrashHandler",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoCrashHandler",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoCrashHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoCrashHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoCrashTraceback",
              "documentation": {
                "identifier": "TestCgoCrashTraceback",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoCrashTraceback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoCrashTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoCrashTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoCrashTracebackGo",
              "documentation": {
                "identifier": "TestCgoCrashTracebackGo",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoCrashTracebackGo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoCrashTracebackGo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoCrashTracebackGo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoDLLImports",
              "documentation": {
                "identifier": "TestCgoDLLImports",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoDLLImports",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoDLLImports(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoDLLImports(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoExecSignalMask",
              "documentation": {
                "identifier": "TestCgoExecSignalMask",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoExecSignalMask",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoExecSignalMask(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoExecSignalMask(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoExternalThreadPanic",
              "documentation": {
                "identifier": "TestCgoExternalThreadPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoExternalThreadPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoExternalThreadPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoExternalThreadPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoExternalThreadSIGPROF",
              "documentation": {
                "identifier": "TestCgoExternalThreadSIGPROF",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoExternalThreadSIGPROF",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoExternalThreadSIGPROF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoExternalThreadSIGPROF(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoExternalThreadSignal",
              "documentation": {
                "identifier": "TestCgoExternalThreadSignal",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoExternalThreadSignal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoExternalThreadSignal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoExternalThreadSignal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoLockOSThreadExit",
              "documentation": {
                "identifier": "TestCgoLockOSThreadExit",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoLockOSThreadExit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoLockOSThreadExit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoLockOSThreadExit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoNumGoroutine",
              "documentation": {
                "identifier": "TestCgoNumGoroutine",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoNumGoroutine",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoNumGoroutine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoNumGoroutine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoPanicDeadlock",
              "documentation": {
                "identifier": "TestCgoPanicDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoPanicDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoPanicDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoPanicDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoPprof",
              "documentation": {
                "identifier": "TestCgoPprof",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoPprof",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoPprof(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoPprof(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoPprofPIE",
              "documentation": {
                "identifier": "TestCgoPprofPIE",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoPprofPIE",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoPprofPIE(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoPprofPIE(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoPprofThread",
              "documentation": {
                "identifier": "TestCgoPprofThread",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoPprofThread",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoPprofThread(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoPprofThread(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoPprofThreadNoTraceback",
              "documentation": {
                "identifier": "TestCgoPprofThreadNoTraceback",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoPprofThreadNoTraceback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoPprofThreadNoTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoPprofThreadNoTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoSignalDeadlock",
              "documentation": {
                "identifier": "TestCgoSignalDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoSignalDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoSignalDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoSignalDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoTraceback",
              "documentation": {
                "identifier": "TestCgoTraceback",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoTraceback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoTracebackContext",
              "documentation": {
                "identifier": "TestCgoTracebackContext",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoTracebackContext",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoTracebackContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoTracebackContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCgoTracebackSigpanic",
              "documentation": {
                "identifier": "TestCgoTracebackSigpanic",
                "newPage": false,
                "searchKey": "runtime_test.TestCgoTracebackSigpanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCgoTracebackSigpanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCgoTracebackSigpanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestChan",
              "documentation": {
                "identifier": "TestChan",
                "newPage": false,
                "searchKey": "runtime_test.TestChan",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChan(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestChanSendBarrier",
              "documentation": {
                "identifier": "TestChanSendBarrier",
                "newPage": false,
                "searchKey": "runtime_test.TestChanSendBarrier",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanSendBarrier(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanSendBarrier(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestChanSendInterface",
              "documentation": {
                "identifier": "TestChanSendInterface",
                "newPage": false,
                "searchKey": "runtime_test.TestChanSendInterface",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanSendInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanSendInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestChanSendSelectBarrier",
              "documentation": {
                "identifier": "TestChanSendSelectBarrier",
                "newPage": false,
                "searchKey": "runtime_test.TestChanSendSelectBarrier",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChanSendSelectBarrier(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChanSendSelectBarrier(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCheckPtr",
              "documentation": {
                "identifier": "TestCheckPtr",
                "newPage": false,
                "searchKey": "runtime_test.TestCheckPtr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCheckPtr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCheckPtr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCmpIfaceConcreteAlloc",
              "documentation": {
                "identifier": "TestCmpIfaceConcreteAlloc",
                "newPage": false,
                "searchKey": "runtime_test.TestCmpIfaceConcreteAlloc",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCmpIfaceConcreteAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCmpIfaceConcreteAlloc(t *testing.T)\n```\n\nIssue 9370 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCollisions",
              "documentation": {
                "identifier": "TestCollisions",
                "newPage": false,
                "searchKey": "runtime_test.TestCollisions",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCollisions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCollisions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCompareTempString",
              "documentation": {
                "identifier": "TestCompareTempString",
                "newPage": false,
                "searchKey": "runtime_test.TestCompareTempString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareTempString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareTempString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestConcurrentMapIterateWrite",
              "documentation": {
                "identifier": "TestConcurrentMapIterateWrite",
                "newPage": false,
                "searchKey": "runtime_test.TestConcurrentMapIterateWrite",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentMapIterateWrite(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentMapIterateWrite(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestConcurrentMapReadWrite",
              "documentation": {
                "identifier": "TestConcurrentMapReadWrite",
                "newPage": false,
                "searchKey": "runtime_test.TestConcurrentMapReadWrite",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentMapReadWrite(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentMapReadWrite(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestConcurrentMapWrites",
              "documentation": {
                "identifier": "TestConcurrentMapWrites",
                "newPage": false,
                "searchKey": "runtime_test.TestConcurrentMapWrites",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentMapWrites(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentMapWrites(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestConcurrentReadsAfterGrowth",
              "documentation": {
                "identifier": "TestConcurrentReadsAfterGrowth",
                "newPage": false,
                "searchKey": "runtime_test.TestConcurrentReadsAfterGrowth",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentReadsAfterGrowth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentReadsAfterGrowth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestConcurrentReadsAfterGrowthReflect",
              "documentation": {
                "identifier": "TestConcurrentReadsAfterGrowthReflect",
                "newPage": false,
                "searchKey": "runtime_test.TestConcurrentReadsAfterGrowthReflect",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentReadsAfterGrowthReflect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentReadsAfterGrowthReflect(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestConditionalDefers",
              "documentation": {
                "identifier": "TestConditionalDefers",
                "newPage": false,
                "searchKey": "runtime_test.TestConditionalDefers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConditionalDefers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConditionalDefers(t *testing.T)\n```\n\nMake sure that conditional open-coded defers are activated correctly and run in the correct order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCrashDumpsAllThreads",
              "documentation": {
                "identifier": "TestCrashDumpsAllThreads",
                "newPage": false,
                "searchKey": "runtime_test.TestCrashDumpsAllThreads",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCrashDumpsAllThreads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCrashDumpsAllThreads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestCrashHandler",
              "documentation": {
                "identifier": "TestCrashHandler",
                "newPage": false,
                "searchKey": "runtime_test.TestCrashHandler",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCrashHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCrashHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDebugLog",
              "documentation": {
                "identifier": "TestDebugLog",
                "newPage": false,
                "searchKey": "runtime_test.TestDebugLog",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugLog(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugLog(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDebugLogInterleaving",
              "documentation": {
                "identifier": "TestDebugLogInterleaving",
                "newPage": false,
                "searchKey": "runtime_test.TestDebugLogInterleaving",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugLogInterleaving(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugLogInterleaving(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDebugLogLongString",
              "documentation": {
                "identifier": "TestDebugLogLongString",
                "newPage": false,
                "searchKey": "runtime_test.TestDebugLogLongString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugLogLongString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugLogLongString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDebugLogSym",
              "documentation": {
                "identifier": "TestDebugLogSym",
                "newPage": false,
                "searchKey": "runtime_test.TestDebugLogSym",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugLogSym(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugLogSym(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDebugLogTypes",
              "documentation": {
                "identifier": "TestDebugLogTypes",
                "newPage": false,
                "searchKey": "runtime_test.TestDebugLogTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugLogTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugLogTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDebugLogWraparound",
              "documentation": {
                "identifier": "TestDebugLogWraparound",
                "newPage": false,
                "searchKey": "runtime_test.TestDebugLogWraparound",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDebugLogWraparound(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDebugLogWraparound(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferDeleteSlow",
              "documentation": {
                "identifier": "TestDeferDeleteSlow",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferDeleteSlow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferDeleteSlow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferDeleteSlow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferForFuncWithNoExit",
              "documentation": {
                "identifier": "TestDeferForFuncWithNoExit",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferForFuncWithNoExit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferForFuncWithNoExit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferForFuncWithNoExit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferHeapAndStack",
              "documentation": {
                "identifier": "TestDeferHeapAndStack",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferHeapAndStack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferHeapAndStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferHeapAndStack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferKeepAlive",
              "documentation": {
                "identifier": "TestDeferKeepAlive",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferKeepAlive",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferKeepAlive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferKeepAlive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferLeafSigpanic",
              "documentation": {
                "identifier": "TestDeferLeafSigpanic",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferLeafSigpanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferLeafSigpanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferLeafSigpanic(t *testing.T)\n```\n\nTestDeferLeafSigpanic tests defer matching around leaf functions that sigpanic. This is tricky because on LR machines the outer function and the inner function have the same SP, but it's critical that we match up the defer correctly to get the right liveness map. See issue #25499. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferLiveness",
              "documentation": {
                "identifier": "TestDeferLiveness",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferLiveness",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferLiveness(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferLiveness(t *testing.T)\n```\n\nTest that defer closure is correctly scanned when the stack is scanned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferPtrs",
              "documentation": {
                "identifier": "TestDeferPtrs",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferPtrs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferPtrs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferPtrs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferPtrsGoexit",
              "documentation": {
                "identifier": "TestDeferPtrsGoexit",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferPtrsGoexit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferPtrsGoexit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferPtrsGoexit(t *testing.T)\n```\n\nTestDeferPtrsGoexit is like TestDeferPtrs but exercises the possibility that the stack grows as part of starting the deferred function. It calls Goexit at various stack depths, forcing the deferred function (with >4kB of args) to be run at the bottom of the stack. The goal is to find a stack depth less than 4kB from the end of the stack. Each trial runs in a different goroutine so that an earlier stack growth does not invalidate a later attempt. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferPtrsPanic",
              "documentation": {
                "identifier": "TestDeferPtrsPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferPtrsPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferPtrsPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferPtrsPanic(t *testing.T)\n```\n\nTestDeferPtrsPanic is like TestDeferPtrsGoexit, but it's using panic instead of Goexit to run the Defers. Those two are different execution paths in the runtime. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDeferWithRepeatedRepanics",
              "documentation": {
                "identifier": "TestDeferWithRepeatedRepanics",
                "newPage": false,
                "searchKey": "runtime_test.TestDeferWithRepeatedRepanics",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeferWithRepeatedRepanics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeferWithRepeatedRepanics(t *testing.T)\n```\n\nTest case approximating issue #37664, where a recursive function (interpreter) may do repeated recovers/re-panics until it reaches the frame where the panic can actually be handled. The recurseFnPanicRec() function is testing that there are no stale defer structs on the defer chain after the interpreter() sequence, by writing a bunch of 0xffffffffs into several recursive stack frames, and then doing a single panic-recover which would invoke any such stale defer structs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDisappearingDefer",
              "documentation": {
                "identifier": "TestDisappearingDefer",
                "newPage": false,
                "searchKey": "runtime_test.TestDisappearingDefer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDisappearingDefer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDisappearingDefer(t *testing.T)\n```\n\nTest that there is no compile-time or run-time error if an open-coded defer call is removed by constant propagation and dead-code elimination. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestDoublePanic",
              "documentation": {
                "identifier": "TestDoublePanic",
                "newPage": false,
                "searchKey": "runtime_test.TestDoublePanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDoublePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDoublePanic(t *testing.T)\n```\n\nTest that panic message is not clobbered. See issue 30150. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestEINTR",
              "documentation": {
                "identifier": "TestEINTR",
                "newPage": false,
                "searchKey": "runtime_test.TestEINTR",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEINTR(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEINTR(t *testing.T)\n```\n\nTestEINTR tests that we handle EINTR correctly. See issue #20400 and friends. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestEmptyKeyAndValue",
              "documentation": {
                "identifier": "TestEmptyKeyAndValue",
                "newPage": false,
                "searchKey": "runtime_test.TestEmptyKeyAndValue",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyKeyAndValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyKeyAndValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestEmptySlice",
              "documentation": {
                "identifier": "TestEmptySlice",
                "newPage": false,
                "searchKey": "runtime_test.TestEmptySlice",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptySlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptySlice(t *testing.T)\n```\n\nMake sure an empty slice on the stack doesn't pin the next object in memory. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestEmptyString",
              "documentation": {
                "identifier": "TestEmptyString",
                "newPage": false,
                "searchKey": "runtime_test.TestEmptyString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyString(t *testing.T)\n```\n\nMake sure an empty string on the stack doesn't pin the next object in memory. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestEnsureDropM",
              "documentation": {
                "identifier": "TestEnsureDropM",
                "newPage": false,
                "searchKey": "runtime_test.TestEnsureDropM",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEnsureDropM(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEnsureDropM(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestEqString",
              "documentation": {
                "identifier": "TestEqString",
                "newPage": false,
                "searchKey": "runtime_test.TestEqString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEqString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEqString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFakeTime",
              "documentation": {
                "identifier": "TestFakeTime",
                "newPage": false,
                "searchKey": "runtime_test.TestFakeTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFakeTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFakeTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFastLog2",
              "documentation": {
                "identifier": "TestFastLog2",
                "newPage": false,
                "searchKey": "runtime_test.TestFastLog2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFastLog2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFastLog2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFillAligned",
              "documentation": {
                "identifier": "TestFillAligned",
                "newPage": false,
                "searchKey": "runtime_test.TestFillAligned",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFillAligned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFillAligned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFinalizerInterfaceBig",
              "documentation": {
                "identifier": "TestFinalizerInterfaceBig",
                "newPage": false,
                "searchKey": "runtime_test.TestFinalizerInterfaceBig",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFinalizerInterfaceBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFinalizerInterfaceBig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFinalizerOnGlobal",
              "documentation": {
                "identifier": "TestFinalizerOnGlobal",
                "newPage": false,
                "searchKey": "runtime_test.TestFinalizerOnGlobal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFinalizerOnGlobal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFinalizerOnGlobal(t *testing.T)\n```\n\nTest for issue 7656. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFinalizerType",
              "documentation": {
                "identifier": "TestFinalizerType",
                "newPage": false,
                "searchKey": "runtime_test.TestFinalizerType",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFinalizerType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFinalizerType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFinalizerZeroSizedStruct",
              "documentation": {
                "identifier": "TestFinalizerZeroSizedStruct",
                "newPage": false,
                "searchKey": "runtime_test.TestFinalizerZeroSizedStruct",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFinalizerZeroSizedStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFinalizerZeroSizedStruct(t *testing.T)\n```\n\nVerify we don't crash at least. golang.org/issue/6857 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFindBitRange64",
              "documentation": {
                "identifier": "TestFindBitRange64",
                "newPage": false,
                "searchKey": "runtime_test.TestFindBitRange64",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFindBitRange64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFindBitRange64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFixedGOROOT",
              "documentation": {
                "identifier": "TestFixedGOROOT",
                "newPage": false,
                "searchKey": "runtime_test.TestFixedGOROOT",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFixedGOROOT(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFixedGOROOT(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFloat64",
              "documentation": {
                "identifier": "TestFloat64",
                "newPage": false,
                "searchKey": "runtime_test.TestFloat64",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFloat64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFloat64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestFunctionAlignmentTraceback",
              "documentation": {
                "identifier": "TestFunctionAlignmentTraceback",
                "newPage": false,
                "searchKey": "runtime_test.TestFunctionAlignmentTraceback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFunctionAlignmentTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFunctionAlignmentTraceback(t *testing.T)\n```\n\nTest that CallersFrames handles PCs in the alignment region between functions (int 3 on amd64) without crashing. \n\nGo will never generate a stack trace containing such an address, as it is not a valid call site. However, the cgo traceback function passed to runtime.SetCgoTraceback may not be completely accurate and may incorrect provide PCs in Go code or the alignement region between functions. \n\nGo obviously doesn't easily expose the problematic PCs to running programs, so this test is a bit fragile. Some details: \n\n* tracebackFunc is our target function. We want to get a PC in the \n\n```\nalignment region following this function. This function also has other\nfunctions inlined into it to ensure it has an InlTree (this was the source\nof the bug in issue 44971).\n\n```\n* We acquire a PC in tracebackFunc, walking forwards until FuncForPC says \n\n```\nwe're in a new function. The last PC of the function according to FuncForPC\nshould be in the alignment region (assuming the function isn't already\nperfectly aligned).\n\n```\nThis is a regression test for issue 44971. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestG0StackOverflow",
              "documentation": {
                "identifier": "TestG0StackOverflow",
                "newPage": false,
                "searchKey": "runtime_test.TestG0StackOverflow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestG0StackOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestG0StackOverflow(t *testing.T)\n```\n\nTest that g0 stack overflows are handled gracefully. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCFairness",
              "documentation": {
                "identifier": "TestGCFairness",
                "newPage": false,
                "searchKey": "runtime_test.TestGCFairness",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCFairness(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCFairness(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCFairness2",
              "documentation": {
                "identifier": "TestGCFairness2",
                "newPage": false,
                "searchKey": "runtime_test.TestGCFairness2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCFairness2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCFairness2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCInfo",
              "documentation": {
                "identifier": "TestGCInfo",
                "newPage": false,
                "searchKey": "runtime_test.TestGCInfo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCInfo(t *testing.T)\n```\n\nTestGCInfo tests that various objects in heap, data and bss receive correct GC pointer type info. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCTestIsReachable",
              "documentation": {
                "identifier": "TestGCTestIsReachable",
                "newPage": false,
                "searchKey": "runtime_test.TestGCTestIsReachable",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCTestIsReachable(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCTestIsReachable(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCTestMoveStackOnNextCall",
              "documentation": {
                "identifier": "TestGCTestMoveStackOnNextCall",
                "newPage": false,
                "searchKey": "runtime_test.TestGCTestMoveStackOnNextCall",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCTestMoveStackOnNextCall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCTestMoveStackOnNextCall(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCTestMoveStackRepeatedly",
              "documentation": {
                "identifier": "TestGCTestMoveStackRepeatedly",
                "newPage": false,
                "searchKey": "runtime_test.TestGCTestMoveStackRepeatedly",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCTestMoveStackRepeatedly(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCTestMoveStackRepeatedly(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGCTestPointerClass",
              "documentation": {
                "identifier": "TestGCTestPointerClass",
                "newPage": false,
                "searchKey": "runtime_test.TestGCTestPointerClass",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGCTestPointerClass(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGCTestPointerClass(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcArraySlice",
              "documentation": {
                "identifier": "TestGcArraySlice",
                "newPage": false,
                "searchKey": "runtime_test.TestGcArraySlice",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcArraySlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcArraySlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcDeepNesting",
              "documentation": {
                "identifier": "TestGcDeepNesting",
                "newPage": false,
                "searchKey": "runtime_test.TestGcDeepNesting",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcDeepNesting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcDeepNesting(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcLastTime",
              "documentation": {
                "identifier": "TestGcLastTime",
                "newPage": false,
                "searchKey": "runtime_test.TestGcLastTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcLastTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcLastTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcMapIndirection",
              "documentation": {
                "identifier": "TestGcMapIndirection",
                "newPage": false,
                "searchKey": "runtime_test.TestGcMapIndirection",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcMapIndirection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcMapIndirection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcRescan",
              "documentation": {
                "identifier": "TestGcRescan",
                "newPage": false,
                "searchKey": "runtime_test.TestGcRescan",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcRescan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcRescan(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcSys",
              "documentation": {
                "identifier": "TestGcSys",
                "newPage": false,
                "searchKey": "runtime_test.TestGcSys",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcSys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcSys(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGcZombieReporting",
              "documentation": {
                "identifier": "TestGcZombieReporting",
                "newPage": false,
                "searchKey": "runtime_test.TestGcZombieReporting",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGcZombieReporting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGcZombieReporting(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbAutotmpTypes",
              "documentation": {
                "identifier": "TestGdbAutotmpTypes",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbAutotmpTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbAutotmpTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbAutotmpTypes(t *testing.T)\n```\n\nTestGdbAutotmpTypes ensures that types of autotmp variables appear in .debug_info See bug #17830. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbBacktrace",
              "documentation": {
                "identifier": "TestGdbBacktrace",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbBacktrace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbBacktrace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbBacktrace(t *testing.T)\n```\n\nTestGdbBacktrace tests that gdb can unwind the stack correctly using only the DWARF debug info. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbConst",
              "documentation": {
                "identifier": "TestGdbConst",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbConst",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbConst(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbConst(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbInfCallstack",
              "documentation": {
                "identifier": "TestGdbInfCallstack",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbInfCallstack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbInfCallstack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbInfCallstack(t *testing.T)\n```\n\nTestGdbInfCallstack tests that gdb can unwind the callstack of cgo programs on arm64 platforms without endless frames of function 'crossfunc1'. [https://golang.org/issue/37238](https://golang.org/issue/37238) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbPanic",
              "documentation": {
                "identifier": "TestGdbPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbPanic(t *testing.T)\n```\n\nTestGdbPanic tests that gdb can unwind the stack correctly from SIGABRTs from Go panics. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbPython",
              "documentation": {
                "identifier": "TestGdbPython",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbPython",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbPython(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbPython(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGdbPythonCgo",
              "documentation": {
                "identifier": "TestGdbPythonCgo",
                "newPage": false,
                "searchKey": "runtime_test.TestGdbPythonCgo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGdbPythonCgo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGdbPythonCgo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGetgThreadSwitch",
              "documentation": {
                "identifier": "TestGetgThreadSwitch",
                "newPage": false,
                "searchKey": "runtime_test.TestGetgThreadSwitch",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetgThreadSwitch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetgThreadSwitch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoNil",
              "documentation": {
                "identifier": "TestGoNil",
                "newPage": false,
                "searchKey": "runtime_test.TestGoNil",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoexitCrash",
              "documentation": {
                "identifier": "TestGoexitCrash",
                "newPage": false,
                "searchKey": "runtime_test.TestGoexitCrash",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoexitCrash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoexitCrash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoexitDeadlock",
              "documentation": {
                "identifier": "TestGoexitDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestGoexitDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoexitDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoexitDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoexitDefer",
              "documentation": {
                "identifier": "TestGoexitDefer",
                "newPage": false,
                "searchKey": "runtime_test.TestGoexitDefer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoexitDefer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoexitDefer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoexitInPanic",
              "documentation": {
                "identifier": "TestGoexitInPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestGoexitInPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoexitInPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoexitInPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoroutineParallelism",
              "documentation": {
                "identifier": "TestGoroutineParallelism",
                "newPage": false,
                "searchKey": "runtime_test.TestGoroutineParallelism",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoroutineParallelism(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoroutineParallelism(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoroutineParallelism2",
              "documentation": {
                "identifier": "TestGoroutineParallelism2",
                "newPage": false,
                "searchKey": "runtime_test.TestGoroutineParallelism2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoroutineParallelism2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoroutineParallelism2(t *testing.T)\n```\n\nTest that all runnable goroutines are scheduled at the same time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoroutineProfile",
              "documentation": {
                "identifier": "TestGoroutineProfile",
                "newPage": false,
                "searchKey": "runtime_test.TestGoroutineProfile",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoroutineProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoroutineProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGoroutineProfileTrivial",
              "documentation": {
                "identifier": "TestGoroutineProfileTrivial",
                "newPage": false,
                "searchKey": "runtime_test.TestGoroutineProfileTrivial",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoroutineProfileTrivial(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoroutineProfileTrivial(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGrowWithNaN",
              "documentation": {
                "identifier": "TestGrowWithNaN",
                "newPage": false,
                "searchKey": "runtime_test.TestGrowWithNaN",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGrowWithNaN(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGrowWithNaN(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestGrowWithNegativeZero",
              "documentation": {
                "identifier": "TestGrowWithNegativeZero",
                "newPage": false,
                "searchKey": "runtime_test.TestGrowWithNegativeZero",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGrowWithNegativeZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGrowWithNegativeZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestHmapSize",
              "documentation": {
                "identifier": "TestHmapSize",
                "newPage": false,
                "searchKey": "runtime_test.TestHmapSize",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHmapSize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHmapSize(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestHugeGCInfo",
              "documentation": {
                "identifier": "TestHugeGCInfo",
                "newPage": false,
                "searchKey": "runtime_test.TestHugeGCInfo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHugeGCInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHugeGCInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIgnoreBogusMapHint",
              "documentation": {
                "identifier": "TestIgnoreBogusMapHint",
                "newPage": false,
                "searchKey": "runtime_test.TestIgnoreBogusMapHint",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIgnoreBogusMapHint(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIgnoreBogusMapHint(t *testing.T)\n```\n\nTest that making a map with a large or invalid hint doesn't panic. (Issue 19926). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIncrementAfterBulkClearKeyStringValueInt",
              "documentation": {
                "identifier": "TestIncrementAfterBulkClearKeyStringValueInt",
                "newPage": false,
                "searchKey": "runtime_test.TestIncrementAfterBulkClearKeyStringValueInt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncrementAfterBulkClearKeyStringValueInt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncrementAfterBulkClearKeyStringValueInt(t *testing.T)\n```\n\nTestIncrementAfterBulkClearKeyStringValueInt tests that map bulk deletion (mapclear) still works as expected. Note that it was not affected by Issue 25936. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIncrementAfterDeleteKeyStringValueInt",
              "documentation": {
                "identifier": "TestIncrementAfterDeleteKeyStringValueInt",
                "newPage": false,
                "searchKey": "runtime_test.TestIncrementAfterDeleteKeyStringValueInt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncrementAfterDeleteKeyStringValueInt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncrementAfterDeleteKeyStringValueInt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIncrementAfterDeleteKeyValueString",
              "documentation": {
                "identifier": "TestIncrementAfterDeleteKeyValueString",
                "newPage": false,
                "searchKey": "runtime_test.TestIncrementAfterDeleteKeyValueString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncrementAfterDeleteKeyValueString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncrementAfterDeleteKeyValueString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIncrementAfterDeleteValueInt",
              "documentation": {
                "identifier": "TestIncrementAfterDeleteValueInt",
                "newPage": false,
                "searchKey": "runtime_test.TestIncrementAfterDeleteValueInt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncrementAfterDeleteValueInt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncrementAfterDeleteValueInt(t *testing.T)\n```\n\nTestIncrementAfterDeleteValueInt and other test Issue 25936. Value types int, int32, int64 are affected. Value type string works as expected. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIncrementAfterDeleteValueInt32",
              "documentation": {
                "identifier": "TestIncrementAfterDeleteValueInt32",
                "newPage": false,
                "searchKey": "runtime_test.TestIncrementAfterDeleteValueInt32",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncrementAfterDeleteValueInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncrementAfterDeleteValueInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIncrementAfterDeleteValueInt64",
              "documentation": {
                "identifier": "TestIncrementAfterDeleteValueInt64",
                "newPage": false,
                "searchKey": "runtime_test.TestIncrementAfterDeleteValueInt64",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncrementAfterDeleteValueInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncrementAfterDeleteValueInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestInitDeadlock",
              "documentation": {
                "identifier": "TestInitDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestInitDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInitDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInitDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIntString",
              "documentation": {
                "identifier": "TestIntString",
                "newPage": false,
                "searchKey": "runtime_test.TestIntString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIntStringAllocs",
              "documentation": {
                "identifier": "TestIntStringAllocs",
                "newPage": false,
                "searchKey": "runtime_test.TestIntStringAllocs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntStringAllocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntStringAllocs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIssue37688",
              "documentation": {
                "identifier": "TestIssue37688",
                "newPage": false,
                "searchKey": "runtime_test.TestIssue37688",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue37688(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue37688(t *testing.T)\n```\n\nTry to reproduce issue #37688, where a pointer to an open-coded defer struct is mistakenly held, and that struct keeps a pointer to a stack-allocated defer struct, and that stack-allocated struct gets overwritten or the stack gets moved, so a memory error happens on GC. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIssue43921",
              "documentation": {
                "identifier": "TestIssue43921",
                "newPage": false,
                "searchKey": "runtime_test.TestIssue43921",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue43921(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue43921(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIterGrowAndDelete",
              "documentation": {
                "identifier": "TestIterGrowAndDelete",
                "newPage": false,
                "searchKey": "runtime_test.TestIterGrowAndDelete",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIterGrowAndDelete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIterGrowAndDelete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestIterGrowWithGC",
              "documentation": {
                "identifier": "TestIterGrowWithGC",
                "newPage": false,
                "searchKey": "runtime_test.TestIterGrowWithGC",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIterGrowWithGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIterGrowWithGC(t *testing.T)\n```\n\nmake sure old bucket arrays don't get GCd while an iterator is still using them. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLFStack",
              "documentation": {
                "identifier": "TestLFStack",
                "newPage": false,
                "searchKey": "runtime_test.TestLFStack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLFStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLFStack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLFStackStress",
              "documentation": {
                "identifier": "TestLFStackStress",
                "newPage": false,
                "searchKey": "runtime_test.TestLFStackStress",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLFStackStress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLFStackStress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLargeStringConcat",
              "documentation": {
                "identifier": "TestLargeStringConcat",
                "newPage": false,
                "searchKey": "runtime_test.TestLargeStringConcat",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeStringConcat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeStringConcat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLineNumber",
              "documentation": {
                "identifier": "TestLineNumber",
                "newPage": false,
                "searchKey": "runtime_test.TestLineNumber",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineNumber(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineNumber(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLldbPython",
              "documentation": {
                "identifier": "TestLldbPython",
                "newPage": false,
                "searchKey": "runtime_test.TestLldbPython",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLldbPython(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLldbPython(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockOSThreadAvoidsStatePropagation",
              "documentation": {
                "identifier": "TestLockOSThreadAvoidsStatePropagation",
                "newPage": false,
                "searchKey": "runtime_test.TestLockOSThreadAvoidsStatePropagation",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockOSThreadAvoidsStatePropagation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockOSThreadAvoidsStatePropagation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockOSThreadExit",
              "documentation": {
                "identifier": "TestLockOSThreadExit",
                "newPage": false,
                "searchKey": "runtime_test.TestLockOSThreadExit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockOSThreadExit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockOSThreadExit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockOSThreadNesting",
              "documentation": {
                "identifier": "TestLockOSThreadNesting",
                "newPage": false,
                "searchKey": "runtime_test.TestLockOSThreadNesting",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockOSThreadNesting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockOSThreadNesting(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockOSThreadTemplateThreadRace",
              "documentation": {
                "identifier": "TestLockOSThreadTemplateThreadRace",
                "newPage": false,
                "searchKey": "runtime_test.TestLockOSThreadTemplateThreadRace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockOSThreadTemplateThreadRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockOSThreadTemplateThreadRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockRankPartialOrder",
              "documentation": {
                "identifier": "TestLockRankPartialOrder",
                "newPage": false,
                "searchKey": "runtime_test.TestLockRankPartialOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockRankPartialOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockRankPartialOrder(t *testing.T)\n```\n\nCheck that the partial order in lockPartialOrder fits within the total order determined by the order of the lockRank constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockRankPartialOrderSortedEntries",
              "documentation": {
                "identifier": "TestLockRankPartialOrderSortedEntries",
                "newPage": false,
                "searchKey": "runtime_test.TestLockRankPartialOrderSortedEntries",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockRankPartialOrderSortedEntries(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockRankPartialOrderSortedEntries(t *testing.T)\n```\n\nVerify that partial order lists are kept sorted. This is a purely cosemetic check to make manual reviews simpler. It does not affect correctness, unlike the above test. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockedDeadlock",
              "documentation": {
                "identifier": "TestLockedDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestLockedDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockedDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockedDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestLockedDeadlock2",
              "documentation": {
                "identifier": "TestLockedDeadlock2",
                "newPage": false,
                "searchKey": "runtime_test.TestLockedDeadlock2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLockedDeadlock2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLockedDeadlock2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "runtime_test.TestMain",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMainGoroutineID",
              "documentation": {
                "identifier": "TestMainGoroutineID",
                "newPage": false,
                "searchKey": "runtime_test.TestMainGoroutineID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMainGoroutineID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMainGoroutineID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMallocBitsPopcntRange",
              "documentation": {
                "identifier": "TestMallocBitsPopcntRange",
                "newPage": false,
                "searchKey": "runtime_test.TestMallocBitsPopcntRange",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMallocBitsPopcntRange(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMallocBitsPopcntRange(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapAppendAssignment",
              "documentation": {
                "identifier": "TestMapAppendAssignment",
                "newPage": false,
                "searchKey": "runtime_test.TestMapAppendAssignment",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapAppendAssignment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapAppendAssignment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapAssignmentNan",
              "documentation": {
                "identifier": "TestMapAssignmentNan",
                "newPage": false,
                "searchKey": "runtime_test.TestMapAssignmentNan",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapAssignmentNan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapAssignmentNan(t *testing.T)\n```\n\nnan is a good test because nan != nan, and nan has a randomized hash value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapBuckets",
              "documentation": {
                "identifier": "TestMapBuckets",
                "newPage": false,
                "searchKey": "runtime_test.TestMapBuckets",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapBuckets(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapBuckets(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapHugeZero",
              "documentation": {
                "identifier": "TestMapHugeZero",
                "newPage": false,
                "searchKey": "runtime_test.TestMapHugeZero",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapHugeZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapHugeZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapInterfaceKey",
              "documentation": {
                "identifier": "TestMapInterfaceKey",
                "newPage": false,
                "searchKey": "runtime_test.TestMapInterfaceKey",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapInterfaceKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapInterfaceKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapIterOrder",
              "documentation": {
                "identifier": "TestMapIterOrder",
                "newPage": false,
                "searchKey": "runtime_test.TestMapIterOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapIterOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapIterOrder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapLargeKeyNoPointer",
              "documentation": {
                "identifier": "TestMapLargeKeyNoPointer",
                "newPage": false,
                "searchKey": "runtime_test.TestMapLargeKeyNoPointer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapLargeKeyNoPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapLargeKeyNoPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapLargeValNoPointer",
              "documentation": {
                "identifier": "TestMapLargeValNoPointer",
                "newPage": false,
                "searchKey": "runtime_test.TestMapLargeValNoPointer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapLargeValNoPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapLargeValNoPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapNanGrowIterator",
              "documentation": {
                "identifier": "TestMapNanGrowIterator",
                "newPage": false,
                "searchKey": "runtime_test.TestMapNanGrowIterator",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapNanGrowIterator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapNanGrowIterator(t *testing.T)\n```\n\nTests whether the iterator returns the right elements when started in the middle of a grow, when the keys are NaNs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapOperatorAssignment",
              "documentation": {
                "identifier": "TestMapOperatorAssignment",
                "newPage": false,
                "searchKey": "runtime_test.TestMapOperatorAssignment",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapOperatorAssignment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapOperatorAssignment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapOperatorAssignmentNan",
              "documentation": {
                "identifier": "TestMapOperatorAssignmentNan",
                "newPage": false,
                "searchKey": "runtime_test.TestMapOperatorAssignmentNan",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapOperatorAssignmentNan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapOperatorAssignmentNan(t *testing.T)\n```\n\nnan is a good test because nan != nan, and nan has a randomized hash value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapSparseIterOrder",
              "documentation": {
                "identifier": "TestMapSparseIterOrder",
                "newPage": false,
                "searchKey": "runtime_test.TestMapSparseIterOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapSparseIterOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapSparseIterOrder(t *testing.T)\n```\n\nIssue 8410 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapStringBytesLookup",
              "documentation": {
                "identifier": "TestMapStringBytesLookup",
                "newPage": false,
                "searchKey": "runtime_test.TestMapStringBytesLookup",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapStringBytesLookup(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapStringBytesLookup(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMapTombstones",
              "documentation": {
                "identifier": "TestMapTombstones",
                "newPage": false,
                "searchKey": "runtime_test.TestMapTombstones",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapTombstones(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapTombstones(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemHash32Equality",
              "documentation": {
                "identifier": "TestMemHash32Equality",
                "newPage": false,
                "searchKey": "runtime_test.TestMemHash32Equality",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemHash32Equality(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemHash32Equality(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemHash64Equality",
              "documentation": {
                "identifier": "TestMemHash64Equality",
                "newPage": false,
                "searchKey": "runtime_test.TestMemHash64Equality",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemHash64Equality(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemHash64Equality(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemPprof",
              "documentation": {
                "identifier": "TestMemPprof",
                "newPage": false,
                "searchKey": "runtime_test.TestMemPprof",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemPprof(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemPprof(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemStats",
              "documentation": {
                "identifier": "TestMemStats",
                "newPage": false,
                "searchKey": "runtime_test.TestMemStats",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemStats(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemStats(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemclr",
              "documentation": {
                "identifier": "TestMemclr",
                "newPage": false,
                "searchKey": "runtime_test.TestMemclr",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemclr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemclr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemmove",
              "documentation": {
                "identifier": "TestMemmove",
                "newPage": false,
                "searchKey": "runtime_test.TestMemmove",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemmove(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemmove(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemmoveAlias",
              "documentation": {
                "identifier": "TestMemmoveAlias",
                "newPage": false,
                "searchKey": "runtime_test.TestMemmoveAlias",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemmoveAlias(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemmoveAlias(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemmoveAtomicity",
              "documentation": {
                "identifier": "TestMemmoveAtomicity",
                "newPage": false,
                "searchKey": "runtime_test.TestMemmoveAtomicity",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemmoveAtomicity(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemmoveAtomicity(t *testing.T)\n```\n\nEnsure that memmove writes pointers atomically, so the GC won't observe a partially updated pointer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemmoveLarge0x180000",
              "documentation": {
                "identifier": "TestMemmoveLarge0x180000",
                "newPage": false,
                "searchKey": "runtime_test.TestMemmoveLarge0x180000",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemmoveLarge0x180000(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemmoveLarge0x180000(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMemmoveOverlapLarge0x120000",
              "documentation": {
                "identifier": "TestMemmoveOverlapLarge0x120000",
                "newPage": false,
                "searchKey": "runtime_test.TestMemmoveOverlapLarge0x120000",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMemmoveOverlapLarge0x120000(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMemmoveOverlapLarge0x120000(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMmapErrorSign",
              "documentation": {
                "identifier": "TestMmapErrorSign",
                "newPage": false,
                "searchKey": "runtime_test.TestMmapErrorSign",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMmapErrorSign(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMmapErrorSign(t *testing.T)\n```\n\nTest that the error value returned by mmap is positive, as that is what the code in mem_bsd.go, mem_darwin.go, and mem_linux.go expects. See the uses of ENOMEM in sysMap in those files. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestMultiConsumer",
              "documentation": {
                "identifier": "TestMultiConsumer",
                "newPage": false,
                "searchKey": "runtime_test.TestMultiConsumer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultiConsumer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultiConsumer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNeedmDeadlock",
              "documentation": {
                "identifier": "TestNeedmDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestNeedmDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNeedmDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNeedmDeadlock(t *testing.T)\n```\n\nIssue #42207. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNegativeZero",
              "documentation": {
                "identifier": "TestNegativeZero",
                "newPage": false,
                "searchKey": "runtime_test.TestNegativeZero",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNegativeZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNegativeZero(t *testing.T)\n```\n\nnegative zero is a good test because: \n\n```\n1) 0 and -0 are equal, yet have distinct representations.\n2) 0 is represented as all zeros, -0 isn't.\n\n```\nI'm not sure the language spec actually requires this behavior, but it's what the current map implementation does. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNetpollBreak",
              "documentation": {
                "identifier": "TestNetpollBreak",
                "newPage": false,
                "searchKey": "runtime_test.TestNetpollBreak",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNetpollBreak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNetpollBreak(t *testing.T)\n```\n\nTestNetpollBreak tests that netpollBreak can break a netpoll. This test is not particularly safe since the call to netpoll will pick up any stray files that are ready, but it should work OK as long it is not run in parallel. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNetpollDeadlock",
              "documentation": {
                "identifier": "TestNetpollDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestNetpollDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNetpollDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNetpollDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNilName",
              "documentation": {
                "identifier": "TestNilName",
                "newPage": false,
                "searchKey": "runtime_test.TestNilName",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNoHelperGoroutines",
              "documentation": {
                "identifier": "TestNoHelperGoroutines",
                "newPage": false,
                "searchKey": "runtime_test.TestNoHelperGoroutines",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoHelperGoroutines(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoHelperGoroutines(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNoShrinkStackWhileParking",
              "documentation": {
                "identifier": "TestNoShrinkStackWhileParking",
                "newPage": false,
                "searchKey": "runtime_test.TestNoShrinkStackWhileParking",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoShrinkStackWhileParking(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoShrinkStackWhileParking(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonEscapingConvT2E",
              "documentation": {
                "identifier": "TestNonEscapingConvT2E",
                "newPage": false,
                "searchKey": "runtime_test.TestNonEscapingConvT2E",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonEscapingConvT2E(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonEscapingConvT2E(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonEscapingConvT2I",
              "documentation": {
                "identifier": "TestNonEscapingConvT2I",
                "newPage": false,
                "searchKey": "runtime_test.TestNonEscapingConvT2I",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonEscapingConvT2I(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonEscapingConvT2I(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonEscapingMap",
              "documentation": {
                "identifier": "TestNonEscapingMap",
                "newPage": false,
                "searchKey": "runtime_test.TestNonEscapingMap",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonEscapingMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonEscapingMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonOpenAndOpenDefers",
              "documentation": {
                "identifier": "TestNonOpenAndOpenDefers",
                "newPage": false,
                "searchKey": "runtime_test.TestNonOpenAndOpenDefers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonOpenAndOpenDefers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonOpenAndOpenDefers(t *testing.T)\n```\n\nTest a non-open-coded defer and an open-coded defer - make sure both defers run and call recover() \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonSSAableArgs",
              "documentation": {
                "identifier": "TestNonSSAableArgs",
                "newPage": false,
                "searchKey": "runtime_test.TestNonSSAableArgs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonSSAableArgs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonSSAableArgs(t *testing.T)\n```\n\nTest that nonSSAable arguments to defer are handled correctly and only evaluated once. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonblockRecvRace",
              "documentation": {
                "identifier": "TestNonblockRecvRace",
                "newPage": false,
                "searchKey": "runtime_test.TestNonblockRecvRace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonblockRecvRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonblockRecvRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonblockSelectRace",
              "documentation": {
                "identifier": "TestNonblockSelectRace",
                "newPage": false,
                "searchKey": "runtime_test.TestNonblockSelectRace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonblockSelectRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonblockSelectRace(t *testing.T)\n```\n\nThis test checks that select acts on the state of the channels at one moment in the execution, not over a smeared time window. In the test, one goroutine does: \n\n```\ncreate c1, c2\nmake c1 ready for receiving\ncreate second goroutine\nmake c2 ready for receiving\nmake c1 no longer ready for receiving (if possible)\n\n```\nThe second goroutine does a non-blocking select receiving from c1 and c2. From the time the second goroutine is created, at least one of c1 and c2 is always ready for receiving, so the select in the second goroutine must always receive from one or the other. It must never execute the default case. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonblockSelectRace2",
              "documentation": {
                "identifier": "TestNonblockSelectRace2",
                "newPage": false,
                "searchKey": "runtime_test.TestNonblockSelectRace2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonblockSelectRace2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonblockSelectRace2(t *testing.T)\n```\n\nSame as TestNonblockSelectRace, but close(c2) replaces c2 <- 1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNonblockingPipe",
              "documentation": {
                "identifier": "TestNonblockingPipe",
                "newPage": false,
                "searchKey": "runtime_test.TestNonblockingPipe",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonblockingPipe(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonblockingPipe(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestNumGoroutine",
              "documentation": {
                "identifier": "TestNumGoroutine",
                "newPage": false,
                "searchKey": "runtime_test.TestNumGoroutine",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNumGoroutine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNumGoroutine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestOpenAndNonOpenDefers",
              "documentation": {
                "identifier": "TestOpenAndNonOpenDefers",
                "newPage": false,
                "searchKey": "runtime_test.TestOpenAndNonOpenDefers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOpenAndNonOpenDefers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOpenAndNonOpenDefers(t *testing.T)\n```\n\nTest an open-coded defer and non-open-coded defer - make sure both defers run and call recover() \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAccounting",
              "documentation": {
                "identifier": "TestPageAccounting",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAccounting",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAccounting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAccounting(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocAlloc",
              "documentation": {
                "identifier": "TestPageAllocAlloc",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocAlloc",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocAlloc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocAllocAndFree",
              "documentation": {
                "identifier": "TestPageAllocAllocAndFree",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocAllocAndFree",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocAllocAndFree(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocAllocAndFree(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocAllocToCache",
              "documentation": {
                "identifier": "TestPageAllocAllocToCache",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocAllocToCache",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocAllocToCache(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocAllocToCache(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocExhaust",
              "documentation": {
                "identifier": "TestPageAllocExhaust",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocExhaust",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocExhaust(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocExhaust(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocFree",
              "documentation": {
                "identifier": "TestPageAllocFree",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocFree",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocFree(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocFree(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocGrow",
              "documentation": {
                "identifier": "TestPageAllocGrow",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocGrow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocGrow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocGrow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageAllocScavenge",
              "documentation": {
                "identifier": "TestPageAllocScavenge",
                "newPage": false,
                "searchKey": "runtime_test.TestPageAllocScavenge",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageAllocScavenge(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageAllocScavenge(t *testing.T)\n```\n\nTests end-to-end scavenging on a pageAlloc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageCacheAlloc",
              "documentation": {
                "identifier": "TestPageCacheAlloc",
                "newPage": false,
                "searchKey": "runtime_test.TestPageCacheAlloc",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageCacheAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageCacheAlloc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageCacheFlush",
              "documentation": {
                "identifier": "TestPageCacheFlush",
                "newPage": false,
                "searchKey": "runtime_test.TestPageCacheFlush",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageCacheFlush(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageCacheFlush(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPageCacheLeak",
              "documentation": {
                "identifier": "TestPageCacheLeak",
                "newPage": false,
                "searchKey": "runtime_test.TestPageCacheLeak",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPageCacheLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPageCacheLeak(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPallocBitsAlloc",
              "documentation": {
                "identifier": "TestPallocBitsAlloc",
                "newPage": false,
                "searchKey": "runtime_test.TestPallocBitsAlloc",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPallocBitsAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPallocBitsAlloc(t *testing.T)\n```\n\nEnsures page allocation works. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPallocBitsAllocRange",
              "documentation": {
                "identifier": "TestPallocBitsAllocRange",
                "newPage": false,
                "searchKey": "runtime_test.TestPallocBitsAllocRange",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPallocBitsAllocRange(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPallocBitsAllocRange(t *testing.T)\n```\n\nEnsures that PallocBits.AllocRange works, which is a fundamental method used for testing and initialization since it's used by makePallocBits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPallocBitsFree",
              "documentation": {
                "identifier": "TestPallocBitsFree",
                "newPage": false,
                "searchKey": "runtime_test.TestPallocBitsFree",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPallocBitsFree(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPallocBitsFree(t *testing.T)\n```\n\nEnsures page freeing works. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPallocBitsSummarize",
              "documentation": {
                "identifier": "TestPallocBitsSummarize",
                "newPage": false,
                "searchKey": "runtime_test.TestPallocBitsSummarize",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPallocBitsSummarize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPallocBitsSummarize(t *testing.T)\n```\n\nEnsures computing bit summaries works as expected. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPallocBitsSummarizeRandom",
              "documentation": {
                "identifier": "TestPallocBitsSummarizeRandom",
                "newPage": false,
                "searchKey": "runtime_test.TestPallocBitsSummarizeRandom",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPallocBitsSummarizeRandom(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPallocBitsSummarizeRandom(t *testing.T)\n```\n\nEnsures computing bit summaries works as expected by generating random bitmaps and checking against a reference implementation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPallocDataFindScavengeCandidate",
              "documentation": {
                "identifier": "TestPallocDataFindScavengeCandidate",
                "newPage": false,
                "searchKey": "runtime_test.TestPallocDataFindScavengeCandidate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPallocDataFindScavengeCandidate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPallocDataFindScavengeCandidate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicAfterGoexit",
              "documentation": {
                "identifier": "TestPanicAfterGoexit",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicAfterGoexit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicAfterGoexit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicAfterGoexit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicDeadlockGosched",
              "documentation": {
                "identifier": "TestPanicDeadlockGosched",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicDeadlockGosched",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicDeadlockGosched(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicDeadlockGosched(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicDeadlockSyscall",
              "documentation": {
                "identifier": "TestPanicDeadlockSyscall",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicDeadlockSyscall",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicDeadlockSyscall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicDeadlockSyscall(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicFar",
              "documentation": {
                "identifier": "TestPanicFar",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicFar",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicFar(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicFar(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicInlined",
              "documentation": {
                "identifier": "TestPanicInlined",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicInlined",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicInlined(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicInlined(t *testing.T)\n```\n\nTest for issue #10152. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicLoop",
              "documentation": {
                "identifier": "TestPanicLoop",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicLoop",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicLoop(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicLoop(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicRace",
              "documentation": {
                "identifier": "TestPanicRace",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicRace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicRace(t *testing.T)\n```\n\nTest for issues #3934 and #20018. We want to delay exiting until a panic print is complete. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicSystemstack",
              "documentation": {
                "identifier": "TestPanicSystemstack",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicSystemstack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicSystemstack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicSystemstack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicTraceback",
              "documentation": {
                "identifier": "TestPanicTraceback",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicTraceback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicTraceback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicTraceback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicUseStack",
              "documentation": {
                "identifier": "TestPanicUseStack",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicUseStack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicUseStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicUseStack(t *testing.T)\n```\n\nTestPanicUseStack checks that a chain of Panic structs on the stack are updated correctly if the stack grows during the deferred execution that happens as a result of the panic. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPanicWithDirectlyPrintableCustomTypes",
              "documentation": {
                "identifier": "TestPanicWithDirectlyPrintableCustomTypes",
                "newPage": false,
                "searchKey": "runtime_test.TestPanicWithDirectlyPrintableCustomTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanicWithDirectlyPrintableCustomTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanicWithDirectlyPrintableCustomTypes(t *testing.T)\n```\n\nTest that panics print out the underlying value when the underlying kind is directly printable. Issue: [https://golang.org/issues/37531](https://golang.org/issues/37531) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestParallelRWMutexReaders",
              "documentation": {
                "identifier": "TestParallelRWMutexReaders",
                "newPage": false,
                "searchKey": "runtime_test.TestParallelRWMutexReaders",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParallelRWMutexReaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParallelRWMutexReaders(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPeriodicGC",
              "documentation": {
                "identifier": "TestPeriodicGC",
                "newPage": false,
                "searchKey": "runtime_test.TestPeriodicGC",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPeriodicGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPeriodicGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPhysPageSize",
              "documentation": {
                "identifier": "TestPhysPageSize",
                "newPage": false,
                "searchKey": "runtime_test.TestPhysPageSize",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPhysPageSize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPhysPageSize(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPhysicalMemoryUtilization",
              "documentation": {
                "identifier": "TestPhysicalMemoryUtilization",
                "newPage": false,
                "searchKey": "runtime_test.TestPhysicalMemoryUtilization",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPhysicalMemoryUtilization(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPhysicalMemoryUtilization(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPingPongHog",
              "documentation": {
                "identifier": "TestPingPongHog",
                "newPage": false,
                "searchKey": "runtime_test.TestPingPongHog",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPingPongHog(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPingPongHog(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPreemptSplitBig",
              "documentation": {
                "identifier": "TestPreemptSplitBig",
                "newPage": false,
                "searchKey": "runtime_test.TestPreemptSplitBig",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPreemptSplitBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPreemptSplitBig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPreemption",
              "documentation": {
                "identifier": "TestPreemption",
                "newPage": false,
                "searchKey": "runtime_test.TestPreemption",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPreemption(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPreemption(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPreemptionAfterSyscall",
              "documentation": {
                "identifier": "TestPreemptionAfterSyscall",
                "newPage": false,
                "searchKey": "runtime_test.TestPreemptionAfterSyscall",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPreemptionAfterSyscall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPreemptionAfterSyscall(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPreemptionGC",
              "documentation": {
                "identifier": "TestPreemptionGC",
                "newPage": false,
                "searchKey": "runtime_test.TestPreemptionGC",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPreemptionGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPreemptionGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPrintGC",
              "documentation": {
                "identifier": "TestPrintGC",
                "newPage": false,
                "searchKey": "runtime_test.TestPrintGC",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrintGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrintGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestProfBuf",
              "documentation": {
                "identifier": "TestProfBuf",
                "newPage": false,
                "searchKey": "runtime_test.TestProfBuf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProfBuf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProfBuf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestPseudoRandomSend",
              "documentation": {
                "identifier": "TestPseudoRandomSend",
                "newPage": false,
                "searchKey": "runtime_test.TestPseudoRandomSend",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPseudoRandomSend(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPseudoRandomSend(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRWMutex",
              "documentation": {
                "identifier": "TestRWMutex",
                "newPage": false,
                "searchKey": "runtime_test.TestRWMutex",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRWMutex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRWMutex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRaceProf",
              "documentation": {
                "identifier": "TestRaceProf",
                "newPage": false,
                "searchKey": "runtime_test.TestRaceProf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRaceProf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRaceProf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRaceSignal",
              "documentation": {
                "identifier": "TestRaceSignal",
                "newPage": false,
                "searchKey": "runtime_test.TestRaceSignal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRaceSignal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRaceSignal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRangeStringCast",
              "documentation": {
                "identifier": "TestRangeStringCast",
                "newPage": false,
                "searchKey": "runtime_test.TestRangeStringCast",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRangeStringCast(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRangeStringCast(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestReadMemStats",
              "documentation": {
                "identifier": "TestReadMemStats",
                "newPage": false,
                "searchKey": "runtime_test.TestReadMemStats",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadMemStats(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadMemStats(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestReadMetrics",
              "documentation": {
                "identifier": "TestReadMetrics",
                "newPage": false,
                "searchKey": "runtime_test.TestReadMetrics",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadMetrics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadMetrics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestReadMetricsConsistency",
              "documentation": {
                "identifier": "TestReadMetricsConsistency",
                "newPage": false,
                "searchKey": "runtime_test.TestReadMetricsConsistency",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadMetricsConsistency(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadMetricsConsistency(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecoverBeforePanicAfterGoexit",
              "documentation": {
                "identifier": "TestRecoverBeforePanicAfterGoexit",
                "newPage": false,
                "searchKey": "runtime_test.TestRecoverBeforePanicAfterGoexit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecoverBeforePanicAfterGoexit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecoverBeforePanicAfterGoexit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecoverBeforePanicAfterGoexit2",
              "documentation": {
                "identifier": "TestRecoverBeforePanicAfterGoexit2",
                "newPage": false,
                "searchKey": "runtime_test.TestRecoverBeforePanicAfterGoexit2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecoverBeforePanicAfterGoexit2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecoverBeforePanicAfterGoexit2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecoverMatching",
              "documentation": {
                "identifier": "TestRecoverMatching",
                "newPage": false,
                "searchKey": "runtime_test.TestRecoverMatching",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecoverMatching(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecoverMatching(t *testing.T)\n```\n\nThis tests that recover() does not succeed unless it is called directly from a defer function that is directly called by the panic.  Here, we first call it from a defer function that is created by the defer function called directly by the panic.  In \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecoveredPanicAfterGoexit",
              "documentation": {
                "identifier": "TestRecoveredPanicAfterGoexit",
                "newPage": false,
                "searchKey": "runtime_test.TestRecoveredPanicAfterGoexit",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecoveredPanicAfterGoexit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecoveredPanicAfterGoexit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecursivePanic",
              "documentation": {
                "identifier": "TestRecursivePanic",
                "newPage": false,
                "searchKey": "runtime_test.TestRecursivePanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursivePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursivePanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecursivePanic2",
              "documentation": {
                "identifier": "TestRecursivePanic2",
                "newPage": false,
                "searchKey": "runtime_test.TestRecursivePanic2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursivePanic2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursivePanic2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecursivePanic3",
              "documentation": {
                "identifier": "TestRecursivePanic3",
                "newPage": false,
                "searchKey": "runtime_test.TestRecursivePanic3",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursivePanic3(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursivePanic3(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecursivePanic4",
              "documentation": {
                "identifier": "TestRecursivePanic4",
                "newPage": false,
                "searchKey": "runtime_test.TestRecursivePanic4",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursivePanic4(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursivePanic4(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRecursivePanic5",
              "documentation": {
                "identifier": "TestRecursivePanic5",
                "newPage": false,
                "searchKey": "runtime_test.TestRecursivePanic5",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRecursivePanic5(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRecursivePanic5(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRuntimePanic",
              "documentation": {
                "identifier": "TestRuntimePanic",
                "newPage": false,
                "searchKey": "runtime_test.TestRuntimePanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRuntimePanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRuntimePanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestRuntimePanicWithRuntimeError",
              "documentation": {
                "identifier": "TestRuntimePanicWithRuntimeError",
                "newPage": false,
                "searchKey": "runtime_test.TestRuntimePanicWithRuntimeError",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRuntimePanicWithRuntimeError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRuntimePanicWithRuntimeError(t *testing.T)\n```\n\nIssue 14965: Runtime panics should be of type runtime.Error \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestScavengedBitsCleared",
              "documentation": {
                "identifier": "TestScavengedBitsCleared",
                "newPage": false,
                "searchKey": "runtime_test.TestScavengedBitsCleared",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScavengedBitsCleared(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScavengedBitsCleared(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSchedLocalQueue",
              "documentation": {
                "identifier": "TestSchedLocalQueue",
                "newPage": false,
                "searchKey": "runtime_test.TestSchedLocalQueue",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchedLocalQueue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchedLocalQueue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSchedLocalQueueEmpty",
              "documentation": {
                "identifier": "TestSchedLocalQueueEmpty",
                "newPage": false,
                "searchKey": "runtime_test.TestSchedLocalQueueEmpty",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchedLocalQueueEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchedLocalQueueEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSchedLocalQueueSteal",
              "documentation": {
                "identifier": "TestSchedLocalQueueSteal",
                "newPage": false,
                "searchKey": "runtime_test.TestSchedLocalQueueSteal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSchedLocalQueueSteal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSchedLocalQueueSteal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSegv",
              "documentation": {
                "identifier": "TestSegv",
                "newPage": false,
                "searchKey": "runtime_test.TestSegv",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSegv(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSegv(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSelectDuplicateChannel",
              "documentation": {
                "identifier": "TestSelectDuplicateChannel",
                "newPage": false,
                "searchKey": "runtime_test.TestSelectDuplicateChannel",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectDuplicateChannel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectDuplicateChannel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSelectFairness",
              "documentation": {
                "identifier": "TestSelectFairness",
                "newPage": false,
                "searchKey": "runtime_test.TestSelectFairness",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectFairness(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectFairness(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSelectStackAdjust",
              "documentation": {
                "identifier": "TestSelectStackAdjust",
                "newPage": false,
                "searchKey": "runtime_test.TestSelectStackAdjust",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectStackAdjust(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectStackAdjust(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSelectStress",
              "documentation": {
                "identifier": "TestSelectStress",
                "newPage": false,
                "searchKey": "runtime_test.TestSelectStress",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectStress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectStress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSelfSelect",
              "documentation": {
                "identifier": "TestSelfSelect",
                "newPage": false,
                "searchKey": "runtime_test.TestSelfSelect",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelfSelect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelfSelect(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSemaHandoff",
              "documentation": {
                "identifier": "TestSemaHandoff",
                "newPage": false,
                "searchKey": "runtime_test.TestSemaHandoff",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSemaHandoff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSemaHandoff(t *testing.T)\n```\n\nTestSemaHandoff checks that when semrelease+handoff is requested, the G that releases the semaphore yields its P directly to the first waiter in line. See issue 33747 for discussion. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSemaHandoff1",
              "documentation": {
                "identifier": "TestSemaHandoff1",
                "newPage": false,
                "searchKey": "runtime_test.TestSemaHandoff1",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSemaHandoff1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSemaHandoff1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSemaHandoff2",
              "documentation": {
                "identifier": "TestSemaHandoff2",
                "newPage": false,
                "searchKey": "runtime_test.TestSemaHandoff2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSemaHandoff2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSemaHandoff2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSetNonblock",
              "documentation": {
                "identifier": "TestSetNonblock",
                "newPage": false,
                "searchKey": "runtime_test.TestSetNonblock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetNonblock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetNonblock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSetPanicOnFault",
              "documentation": {
                "identifier": "TestSetPanicOnFault",
                "newPage": false,
                "searchKey": "runtime_test.TestSetPanicOnFault",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetPanicOnFault(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetPanicOnFault(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestShrinkStackDuringBlockedSend",
              "documentation": {
                "identifier": "TestShrinkStackDuringBlockedSend",
                "newPage": false,
                "searchKey": "runtime_test.TestShrinkStackDuringBlockedSend",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestShrinkStackDuringBlockedSend(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestShrinkStackDuringBlockedSend(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSideEffectOrder",
              "documentation": {
                "identifier": "TestSideEffectOrder",
                "newPage": false,
                "searchKey": "runtime_test.TestSideEffectOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSideEffectOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSideEffectOrder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSigStackSwapping",
              "documentation": {
                "identifier": "TestSigStackSwapping",
                "newPage": false,
                "searchKey": "runtime_test.TestSigStackSwapping",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSigStackSwapping(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSigStackSwapping(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSignalDuringExec",
              "documentation": {
                "identifier": "TestSignalDuringExec",
                "newPage": false,
                "searchKey": "runtime_test.TestSignalDuringExec",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignalDuringExec(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignalDuringExec(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSignalExitStatus",
              "documentation": {
                "identifier": "TestSignalExitStatus",
                "newPage": false,
                "searchKey": "runtime_test.TestSignalExitStatus",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignalExitStatus(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignalExitStatus(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSignalIgnoreSIGTRAP",
              "documentation": {
                "identifier": "TestSignalIgnoreSIGTRAP",
                "newPage": false,
                "searchKey": "runtime_test.TestSignalIgnoreSIGTRAP",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignalIgnoreSIGTRAP(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignalIgnoreSIGTRAP(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSignalM",
              "documentation": {
                "identifier": "TestSignalM",
                "newPage": false,
                "searchKey": "runtime_test.TestSignalM",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignalM(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignalM(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSimpleDeadlock",
              "documentation": {
                "identifier": "TestSimpleDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestSimpleDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSimpleDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSimpleDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSingleBucketMapStringKeys_DupLen",
              "documentation": {
                "identifier": "TestSingleBucketMapStringKeys_DupLen",
                "newPage": false,
                "searchKey": "runtime_test.TestSingleBucketMapStringKeys_DupLen",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSingleBucketMapStringKeys_DupLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSingleBucketMapStringKeys_DupLen(t *testing.T)\n```\n\nTests a map with a single bucket, with same-lengthed short keys (\"quick keys\") as well as long keys. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSingleBucketMapStringKeys_NoDupLen",
              "documentation": {
                "identifier": "TestSingleBucketMapStringKeys_NoDupLen",
                "newPage": false,
                "searchKey": "runtime_test.TestSingleBucketMapStringKeys_NoDupLen",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSingleBucketMapStringKeys_NoDupLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSingleBucketMapStringKeys_NoDupLen(t *testing.T)\n```\n\nTests a map with a single bucket, with all keys having different lengths. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSizeof",
              "documentation": {
                "identifier": "TestSizeof",
                "newPage": false,
                "searchKey": "runtime_test.TestSizeof",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSizeof(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSizeof(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherAppendedZeros",
              "documentation": {
                "identifier": "TestSmhasherAppendedZeros",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherAppendedZeros",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherAppendedZeros(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherAppendedZeros(t *testing.T)\n```\n\na string plus adding zeros must make distinct hashes \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherAvalanche",
              "documentation": {
                "identifier": "TestSmhasherAvalanche",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherAvalanche",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherAvalanche(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherAvalanche(t *testing.T)\n```\n\nFlipping a single bit of a key should flip each output bit with 50% probability. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherCyclic",
              "documentation": {
                "identifier": "TestSmhasherCyclic",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherCyclic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherCyclic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherCyclic(t *testing.T)\n```\n\nTest strings with repeats, like \"abcdabcdabcdabcd...\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherPermutation",
              "documentation": {
                "identifier": "TestSmhasherPermutation",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherPermutation",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherPermutation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherPermutation(t *testing.T)\n```\n\nTest all possible combinations of n blocks from the set s. \"permutation\" is a bad name here, but it is what Smhasher uses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherSanity",
              "documentation": {
                "identifier": "TestSmhasherSanity",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherSanity",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSanity(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSanity(t *testing.T)\n```\n\nSanity checks. hash should not depend on values outside key. hash should not depend on alignment. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherSeed",
              "documentation": {
                "identifier": "TestSmhasherSeed",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherSeed",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSeed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSeed(t *testing.T)\n```\n\nMake sure different seed values generate different hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherSmallKeys",
              "documentation": {
                "identifier": "TestSmhasherSmallKeys",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherSmallKeys",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSmallKeys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSmallKeys(t *testing.T)\n```\n\nAll 0-3 byte strings have distinct hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherSparse",
              "documentation": {
                "identifier": "TestSmhasherSparse",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherSparse",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSparse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSparse(t *testing.T)\n```\n\nTest strings with only a few bits set \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherText",
              "documentation": {
                "identifier": "TestSmhasherText",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherText",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherText(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherText(t *testing.T)\n```\n\nAll keys of the form prefix + [A-Za-z0-9]*N + suffix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherTwoNonzero",
              "documentation": {
                "identifier": "TestSmhasherTwoNonzero",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherTwoNonzero",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherTwoNonzero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherTwoNonzero(t *testing.T)\n```\n\nStrings with up to two nonzero bytes all have distinct hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherWindowed",
              "documentation": {
                "identifier": "TestSmhasherWindowed",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherWindowed",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherWindowed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherWindowed(t *testing.T)\n```\n\nAll bit rotations of a set of distinct keys \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSmhasherZeros",
              "documentation": {
                "identifier": "TestSmhasherZeros",
                "newPage": false,
                "searchKey": "runtime_test.TestSmhasherZeros",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherZeros(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherZeros(t *testing.T)\n```\n\nDifferent length strings of all zeros have distinct hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestSpuriousWakeupsNeverHangSemasleep",
              "documentation": {
                "identifier": "TestSpuriousWakeupsNeverHangSemasleep",
                "newPage": false,
                "searchKey": "runtime_test.TestSpuriousWakeupsNeverHangSemasleep",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSpuriousWakeupsNeverHangSemasleep(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSpuriousWakeupsNeverHangSemasleep(t *testing.T)\n```\n\nIssue #27250. Spurious wakeups to pthread_cond_timedwait_relative_np shouldn't cause semasleep to retry with the same timeout which would cause indefinite spinning. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackAllOutput",
              "documentation": {
                "identifier": "TestStackAllOutput",
                "newPage": false,
                "searchKey": "runtime_test.TestStackAllOutput",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackAllOutput(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackAllOutput(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackCache",
              "documentation": {
                "identifier": "TestStackCache",
                "newPage": false,
                "searchKey": "runtime_test.TestStackCache",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackCache(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackCache(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackGrowth",
              "documentation": {
                "identifier": "TestStackGrowth",
                "newPage": false,
                "searchKey": "runtime_test.TestStackGrowth",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackGrowth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackGrowth(t *testing.T)\n```\n\nTest stack growing in different contexts. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackGrowthCallback",
              "documentation": {
                "identifier": "TestStackGrowthCallback",
                "newPage": false,
                "searchKey": "runtime_test.TestStackGrowthCallback",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackGrowthCallback(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackGrowthCallback(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackMem",
              "documentation": {
                "identifier": "TestStackMem",
                "newPage": false,
                "searchKey": "runtime_test.TestStackMem",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackMem(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackMem(t *testing.T)\n```\n\nTestStackMem measures per-thread stack segment cache behavior. The test consumed up to 500MB in the past. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackOutput",
              "documentation": {
                "identifier": "TestStackOutput",
                "newPage": false,
                "searchKey": "runtime_test.TestStackOutput",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackOutput(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackOutput(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackOverflow",
              "documentation": {
                "identifier": "TestStackOverflow",
                "newPage": false,
                "searchKey": "runtime_test.TestStackOverflow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackPanic",
              "documentation": {
                "identifier": "TestStackPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestStackPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackWrapperCaller",
              "documentation": {
                "identifier": "TestStackWrapperCaller",
                "newPage": false,
                "searchKey": "runtime_test.TestStackWrapperCaller",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackWrapperCaller(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackWrapperCaller(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackWrapperCallers",
              "documentation": {
                "identifier": "TestStackWrapperCallers",
                "newPage": false,
                "searchKey": "runtime_test.TestStackWrapperCallers",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackWrapperCallers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackWrapperCallers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackWrapperStack",
              "documentation": {
                "identifier": "TestStackWrapperStack",
                "newPage": false,
                "searchKey": "runtime_test.TestStackWrapperStack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackWrapperStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackWrapperStack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStackWrapperStackPanic",
              "documentation": {
                "identifier": "TestStackWrapperStackPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestStackWrapperStackPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStackWrapperStackPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStackWrapperStackPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStealOrder",
              "documentation": {
                "identifier": "TestStealOrder",
                "newPage": false,
                "searchKey": "runtime_test.TestStealOrder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStealOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStealOrder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStopCPUProfilingWithProfilerOff",
              "documentation": {
                "identifier": "TestStopCPUProfilingWithProfilerOff",
                "newPage": false,
                "searchKey": "runtime_test.TestStopCPUProfilingWithProfilerOff",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStopCPUProfilingWithProfilerOff(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStopCPUProfilingWithProfilerOff(t *testing.T)\n```\n\ngolang.org/issue/7063 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStopTheWorldDeadlock",
              "documentation": {
                "identifier": "TestStopTheWorldDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.TestStopTheWorldDeadlock",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStopTheWorldDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStopTheWorldDeadlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestString2Slice",
              "documentation": {
                "identifier": "TestString2Slice",
                "newPage": false,
                "searchKey": "runtime_test.TestString2Slice",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestString2Slice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestString2Slice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStringConcatenationAllocs",
              "documentation": {
                "identifier": "TestStringConcatenationAllocs",
                "newPage": false,
                "searchKey": "runtime_test.TestStringConcatenationAllocs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringConcatenationAllocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringConcatenationAllocs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStringIndexHaystack",
              "documentation": {
                "identifier": "TestStringIndexHaystack",
                "newPage": false,
                "searchKey": "runtime_test.TestStringIndexHaystack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringIndexHaystack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringIndexHaystack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStringIndexNeedle",
              "documentation": {
                "identifier": "TestStringIndexNeedle",
                "newPage": false,
                "searchKey": "runtime_test.TestStringIndexNeedle",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringIndexNeedle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringIndexNeedle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStringOnStack",
              "documentation": {
                "identifier": "TestStringOnStack",
                "newPage": false,
                "searchKey": "runtime_test.TestStringOnStack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringOnStack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringOnStack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStringW",
              "documentation": {
                "identifier": "TestStringW",
                "newPage": false,
                "searchKey": "runtime_test.TestStringW",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringW(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringW(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestStructHash",
              "documentation": {
                "identifier": "TestStructHash",
                "newPage": false,
                "searchKey": "runtime_test.TestStructHash",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructHash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructHash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestThreadExhaustion",
              "documentation": {
                "identifier": "TestThreadExhaustion",
                "newPage": false,
                "searchKey": "runtime_test.TestThreadExhaustion",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestThreadExhaustion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestThreadExhaustion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTimeHistogram",
              "documentation": {
                "identifier": "TestTimeHistogram",
                "newPage": false,
                "searchKey": "runtime_test.TestTimeHistogram",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeHistogram(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeHistogram(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTimePprof",
              "documentation": {
                "identifier": "TestTimePprof",
                "newPage": false,
                "searchKey": "runtime_test.TestTimePprof",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimePprof(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimePprof(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTimerFairness",
              "documentation": {
                "identifier": "TestTimerFairness",
                "newPage": false,
                "searchKey": "runtime_test.TestTimerFairness",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimerFairness(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimerFairness(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTimerFairness2",
              "documentation": {
                "identifier": "TestTimerFairness2",
                "newPage": false,
                "searchKey": "runtime_test.TestTimerFairness2",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimerFairness2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimerFairness2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTinyAlloc",
              "documentation": {
                "identifier": "TestTinyAlloc",
                "newPage": false,
                "searchKey": "runtime_test.TestTinyAlloc",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTinyAlloc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTinyAlloc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTinyAllocIssue37262",
              "documentation": {
                "identifier": "TestTinyAllocIssue37262",
                "newPage": false,
                "searchKey": "runtime_test.TestTinyAllocIssue37262",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTinyAllocIssue37262(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTinyAllocIssue37262(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTracebackAncestors",
              "documentation": {
                "identifier": "TestTracebackAncestors",
                "newPage": false,
                "searchKey": "runtime_test.TestTracebackAncestors",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTracebackAncestors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTracebackAncestors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTracebackArgs",
              "documentation": {
                "identifier": "TestTracebackArgs",
                "newPage": false,
                "searchKey": "runtime_test.TestTracebackArgs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTracebackArgs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTracebackArgs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTracebackInlineExcluded",
              "documentation": {
                "identifier": "TestTracebackInlineExcluded",
                "newPage": false,
                "searchKey": "runtime_test.TestTracebackInlineExcluded",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTracebackInlineExcluded(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTracebackInlineExcluded(t *testing.T)\n```\n\nTest that when F -> G is inlined and F is excluded from stack traces, G still appears. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTracebackSystemstack",
              "documentation": {
                "identifier": "TestTracebackSystemstack",
                "newPage": false,
                "searchKey": "runtime_test.TestTracebackSystemstack",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTracebackSystemstack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTracebackSystemstack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestTrailingZero",
              "documentation": {
                "identifier": "TestTrailingZero",
                "newPage": false,
                "searchKey": "runtime_test.TestTrailingZero",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailingZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailingZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestUnconditionalPanic",
              "documentation": {
                "identifier": "TestUnconditionalPanic",
                "newPage": false,
                "searchKey": "runtime_test.TestUnconditionalPanic",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnconditionalPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnconditionalPanic(t *testing.T)\n```\n\nMake sure open-coded defer exit code is not lost, even when there is an unconditional panic (hence no return from the function) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestUserForcedGC",
              "documentation": {
                "identifier": "TestUserForcedGC",
                "newPage": false,
                "searchKey": "runtime_test.TestUserForcedGC",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserForcedGC(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserForcedGC(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestVDSO",
              "documentation": {
                "identifier": "TestVDSO",
                "newPage": false,
                "searchKey": "runtime_test.TestVDSO",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVDSO(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVDSO(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestVersion",
              "documentation": {
                "identifier": "TestVersion",
                "newPage": false,
                "searchKey": "runtime_test.TestVersion",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVersion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVersion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestWindowsStackMemoryCgo",
              "documentation": {
                "identifier": "TestWindowsStackMemoryCgo",
                "newPage": false,
                "searchKey": "runtime_test.TestWindowsStackMemoryCgo",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWindowsStackMemoryCgo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWindowsStackMemoryCgo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestYieldLocked",
              "documentation": {
                "identifier": "TestYieldLocked",
                "newPage": false,
                "searchKey": "runtime_test.TestYieldLocked",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestYieldLocked(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestYieldLocked(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestYieldLockedProgress",
              "documentation": {
                "identifier": "TestYieldLockedProgress",
                "newPage": false,
                "searchKey": "runtime_test.TestYieldLockedProgress",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestYieldLockedProgress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestYieldLockedProgress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestYieldProgress",
              "documentation": {
                "identifier": "TestYieldProgress",
                "newPage": false,
                "searchKey": "runtime_test.TestYieldProgress",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestYieldProgress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestYieldProgress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#TestZeroConvT2x",
              "documentation": {
                "identifier": "TestZeroConvT2x",
                "newPage": false,
                "searchKey": "runtime_test.TestZeroConvT2x",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroConvT2x(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroConvT2x(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#add",
              "documentation": {
                "identifier": "add",
                "newPage": false,
                "searchKey": "runtime_test.add",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func add(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc add(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#addr1",
              "documentation": {
                "identifier": "addr1",
                "newPage": false,
                "searchKey": "runtime_test.addr1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addr1(x int) *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addr1(x int) *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#addr2",
              "documentation": {
                "identifier": "addr2",
                "newPage": false,
                "searchKey": "runtime_test.addr2",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func addr2() (x int, p *int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addr2() (x int, p *int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#adjChunks",
              "documentation": {
                "identifier": "adjChunks",
                "newPage": false,
                "searchKey": "runtime_test.adjChunks",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func adjChunks() (*objtype, *objtype)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc adjChunks() (*objtype, *objtype)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#applyGCLoad",
              "documentation": {
                "identifier": "applyGCLoad",
                "newPage": false,
                "searchKey": "runtime_test.applyGCLoad",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func applyGCLoad(b *testing.B) func()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc applyGCLoad(b *testing.B) func()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#avalancheTest1",
              "documentation": {
                "identifier": "avalancheTest1",
                "newPage": false,
                "searchKey": "runtime_test.avalancheTest1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func avalancheTest1(t *testing.T, k Key)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc avalancheTest1(t *testing.T, k Key)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchHelper",
              "documentation": {
                "identifier": "benchHelper",
                "newPage": false,
                "searchKey": "runtime_test.benchHelper",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchHelper(b *testing.B, n int, read func(chan struct{}))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchHelper(b *testing.B, n int, read func(chan struct{}))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchSetType",
              "documentation": {
                "identifier": "benchSetType",
                "newPage": false,
                "searchKey": "runtime_test.benchSetType",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchSetType(b *testing.B, x interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchSetType(b *testing.B, x interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkChanProdCons",
              "documentation": {
                "identifier": "benchmarkChanProdCons",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkChanProdCons",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkChanProdCons(b *testing.B, chanSize, localWork int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkChanProdCons(b *testing.B, chanSize, localWork int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkChanSync",
              "documentation": {
                "identifier": "benchmarkChanSync",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkChanSync",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkChanSync(b *testing.B, work int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkChanSync(b *testing.B, work int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkCreateGoroutines",
              "documentation": {
                "identifier": "benchmarkCreateGoroutines",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkCreateGoroutines",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkCreateGoroutines(b *testing.B, procs int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkCreateGoroutines(b *testing.B, procs int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkHash",
              "documentation": {
                "identifier": "benchmarkHash",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkHash",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkHash(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkHash(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapAppendAssignInt32",
              "documentation": {
                "identifier": "benchmarkMapAppendAssignInt32",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapAppendAssignInt32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapAppendAssignInt32(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapAppendAssignInt32(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapAppendAssignInt64",
              "documentation": {
                "identifier": "benchmarkMapAppendAssignInt64",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapAppendAssignInt64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapAppendAssignInt64(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapAppendAssignInt64(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapAppendAssignStr",
              "documentation": {
                "identifier": "benchmarkMapAppendAssignStr",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapAppendAssignStr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapAppendAssignStr(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapAppendAssignStr(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapAssignInt32",
              "documentation": {
                "identifier": "benchmarkMapAssignInt32",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapAssignInt32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapAssignInt32(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapAssignInt32(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapAssignInt64",
              "documentation": {
                "identifier": "benchmarkMapAssignInt64",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapAssignInt64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapAssignInt64(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapAssignInt64(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapAssignStr",
              "documentation": {
                "identifier": "benchmarkMapAssignStr",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapAssignStr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapAssignStr(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapAssignStr(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapDeleteInt32",
              "documentation": {
                "identifier": "benchmarkMapDeleteInt32",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapDeleteInt32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapDeleteInt32(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapDeleteInt32(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapDeleteInt64",
              "documentation": {
                "identifier": "benchmarkMapDeleteInt64",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapDeleteInt64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapDeleteInt64(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapDeleteInt64(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapDeletePointer",
              "documentation": {
                "identifier": "benchmarkMapDeletePointer",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapDeletePointer",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapDeletePointer(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapDeletePointer(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapDeleteStr",
              "documentation": {
                "identifier": "benchmarkMapDeleteStr",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapDeleteStr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapDeleteStr(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapDeleteStr(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapOperatorAssignInt32",
              "documentation": {
                "identifier": "benchmarkMapOperatorAssignInt32",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapOperatorAssignInt32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapOperatorAssignInt32(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapOperatorAssignInt32(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapOperatorAssignInt64",
              "documentation": {
                "identifier": "benchmarkMapOperatorAssignInt64",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapOperatorAssignInt64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapOperatorAssignInt64(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapOperatorAssignInt64(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapOperatorAssignStr",
              "documentation": {
                "identifier": "benchmarkMapOperatorAssignStr",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapOperatorAssignStr",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapOperatorAssignStr(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapOperatorAssignStr(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapPop",
              "documentation": {
                "identifier": "benchmarkMapPop",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapPop",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapPop(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapPop(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkMapStringKeysEight",
              "documentation": {
                "identifier": "benchmarkMapStringKeysEight",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkMapStringKeysEight",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkMapStringKeysEight(b *testing.B, keySize int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkMapStringKeysEight(b *testing.B, keySize int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkRWMutex",
              "documentation": {
                "identifier": "benchmarkRWMutex",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkRWMutex",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkRWMutex(b *testing.B, localWork, writeRatio int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkRWMutex(b *testing.B, localWork, writeRatio int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkRepeatedLookup",
              "documentation": {
                "identifier": "benchmarkRepeatedLookup",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkRepeatedLookup",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkRepeatedLookup(b *testing.B, lookupKeySize int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkRepeatedLookup(b *testing.B, lookupKeySize int)\n```\n\nAccessing the same keys in a row. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkSizes",
              "documentation": {
                "identifier": "benchmarkSizes",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkSizes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkSizes(b *testing.B, sizes []int, fn func(b *testing.B, n int))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkSizes(b *testing.B, sizes []int, fn func(b *testing.B, n int))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkStackGrowth",
              "documentation": {
                "identifier": "benchmarkStackGrowth",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkStackGrowth",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkStackGrowth(b *testing.B, rec int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkStackGrowth(b *testing.B, rec int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkSyscall",
              "documentation": {
                "identifier": "benchmarkSyscall",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkSyscall",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkSyscall(b *testing.B, work, excess int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkSyscall(b *testing.B, work, excess int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#benchmarkWakeupParallel",
              "documentation": {
                "identifier": "benchmarkWakeupParallel",
                "newPage": false,
                "searchKey": "runtime_test.benchmarkWakeupParallel",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkWakeupParallel(b *testing.B, spin func(time.Duration))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkWakeupParallel(b *testing.B, spin func(time.Duration))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#big",
              "documentation": {
                "identifier": "big",
                "newPage": false,
                "searchKey": "runtime_test.big",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func big(stop chan int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc big(stop chan int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#bigframe",
              "documentation": {
                "identifier": "bigframe",
                "newPage": false,
                "searchKey": "runtime_test.bigframe",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bigframe(stop chan int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bigframe(stop chan int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#buildTestProg",
              "documentation": {
                "identifier": "buildTestProg",
                "newPage": false,
                "searchKey": "runtime_test.buildTestProg",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func buildTestProg(t *testing.T, binary string, flags ...string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc buildTestProg(t *testing.T, binary string, flags ...string) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkCleanBacktrace",
              "documentation": {
                "identifier": "checkCleanBacktrace",
                "newPage": false,
                "searchKey": "runtime_test.checkCleanBacktrace",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkCleanBacktrace(t *testing.T, backtrace string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkCleanBacktrace(t *testing.T, backtrace string)\n```\n\ncheckCleanBacktrace checks that the given backtrace is well formed and does not contain any error messages from GDB. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkCloseonexec",
              "documentation": {
                "identifier": "checkCloseonexec",
                "newPage": false,
                "searchKey": "runtime_test.checkCloseonexec",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkCloseonexec(t *testing.T, fd int32, name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkCloseonexec(t *testing.T, fd int32, name string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkGdbEnvironment",
              "documentation": {
                "identifier": "checkGdbEnvironment",
                "newPage": false,
                "searchKey": "runtime_test.checkGdbEnvironment",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkGdbEnvironment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkGdbEnvironment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkGdbPython",
              "documentation": {
                "identifier": "checkGdbPython",
                "newPage": false,
                "searchKey": "runtime_test.checkGdbPython",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkGdbPython(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkGdbPython(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkGdbVersion",
              "documentation": {
                "identifier": "checkGdbVersion",
                "newPage": false,
                "searchKey": "runtime_test.checkGdbVersion",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkGdbVersion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkGdbVersion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkIsPipe",
              "documentation": {
                "identifier": "checkIsPipe",
                "newPage": false,
                "searchKey": "runtime_test.checkIsPipe",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkIsPipe(t *testing.T, r, w int32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkIsPipe(t *testing.T, r, w int32)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkLldbPython",
              "documentation": {
                "identifier": "checkLldbPython",
                "newPage": false,
                "searchKey": "runtime_test.checkLldbPython",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkLldbPython(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkLldbPython(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkNonblocking",
              "documentation": {
                "identifier": "checkNonblocking",
                "newPage": false,
                "searchKey": "runtime_test.checkNonblocking",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkNonblocking(t *testing.T, fd int32, name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkNonblocking(t *testing.T, fd int32, name string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkPageAlloc",
              "documentation": {
                "identifier": "checkPageAlloc",
                "newPage": false,
                "searchKey": "runtime_test.checkPageAlloc",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkPageAlloc(t *testing.T, want, got *PageAlloc)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkPageAlloc(t *testing.T, want, got *PageAlloc)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkPageCache",
              "documentation": {
                "identifier": "checkPageCache",
                "newPage": false,
                "searchKey": "runtime_test.checkPageCache",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkPageCache(t *testing.T, got, want PageCache)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkPageCache(t *testing.T, got, want PageCache)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkPallocBits",
              "documentation": {
                "identifier": "checkPallocBits",
                "newPage": false,
                "searchKey": "runtime_test.checkPallocBits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkPallocBits(t *testing.T, got, want *PallocBits) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkPallocBits(t *testing.T, got, want *PallocBits) bool\n```\n\nEnsures that got and want are the same, and if not, reports detailed diff information. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#checkPallocSum",
              "documentation": {
                "identifier": "checkPallocSum",
                "newPage": false,
                "searchKey": "runtime_test.checkPallocSum",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkPallocSum(t testing.TB, got, want PallocSum)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkPallocSum(t testing.TB, got, want PallocSum)\n```\n\nEnsures two packed summaries are identical, and reports a detailed description of the difference if they're not. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#cmpb",
              "documentation": {
                "identifier": "cmpb",
                "newPage": false,
                "searchKey": "runtime_test.cmpb",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cmpb(a, b []byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cmpb(a, b []byte) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#copybw",
              "documentation": {
                "identifier": "copybw",
                "newPage": false,
                "searchKey": "runtime_test.copybw",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func copybw(dst, src []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc copybw(dst, src []byte)\n```\n\nBackwards copy \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#copyref",
              "documentation": {
                "identifier": "copyref",
                "newPage": false,
                "searchKey": "runtime_test.copyref",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func copyref(dst, src []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc copyref(dst, src []byte)\n```\n\nForward copy. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count",
              "documentation": {
                "identifier": "count",
                "newPage": false,
                "searchKey": "runtime_test.count",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count1",
              "documentation": {
                "identifier": "count1",
                "newPage": false,
                "searchKey": "runtime_test.count1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count1(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count1(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count10",
              "documentation": {
                "identifier": "count10",
                "newPage": false,
                "searchKey": "runtime_test.count10",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count10(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count10(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count11",
              "documentation": {
                "identifier": "count11",
                "newPage": false,
                "searchKey": "runtime_test.count11",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count11(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count11(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count12",
              "documentation": {
                "identifier": "count12",
                "newPage": false,
                "searchKey": "runtime_test.count12",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count12(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count12(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count13",
              "documentation": {
                "identifier": "count13",
                "newPage": false,
                "searchKey": "runtime_test.count13",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count13(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count13(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count14",
              "documentation": {
                "identifier": "count14",
                "newPage": false,
                "searchKey": "runtime_test.count14",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count14(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count14(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count15",
              "documentation": {
                "identifier": "count15",
                "newPage": false,
                "searchKey": "runtime_test.count15",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count15(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count15(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count16",
              "documentation": {
                "identifier": "count16",
                "newPage": false,
                "searchKey": "runtime_test.count16",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count16(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count16(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count17",
              "documentation": {
                "identifier": "count17",
                "newPage": false,
                "searchKey": "runtime_test.count17",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count17(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count17(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count18",
              "documentation": {
                "identifier": "count18",
                "newPage": false,
                "searchKey": "runtime_test.count18",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count18(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count18(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count19",
              "documentation": {
                "identifier": "count19",
                "newPage": false,
                "searchKey": "runtime_test.count19",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count19(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count19(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count2",
              "documentation": {
                "identifier": "count2",
                "newPage": false,
                "searchKey": "runtime_test.count2",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count2(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count2(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count20",
              "documentation": {
                "identifier": "count20",
                "newPage": false,
                "searchKey": "runtime_test.count20",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count20(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count20(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count21",
              "documentation": {
                "identifier": "count21",
                "newPage": false,
                "searchKey": "runtime_test.count21",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count21(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count21(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count22",
              "documentation": {
                "identifier": "count22",
                "newPage": false,
                "searchKey": "runtime_test.count22",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count22(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count22(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count23",
              "documentation": {
                "identifier": "count23",
                "newPage": false,
                "searchKey": "runtime_test.count23",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count23(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count23(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count3",
              "documentation": {
                "identifier": "count3",
                "newPage": false,
                "searchKey": "runtime_test.count3",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count3(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count3(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count4",
              "documentation": {
                "identifier": "count4",
                "newPage": false,
                "searchKey": "runtime_test.count4",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count4(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count4(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count5",
              "documentation": {
                "identifier": "count5",
                "newPage": false,
                "searchKey": "runtime_test.count5",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count5(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count5(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count6",
              "documentation": {
                "identifier": "count6",
                "newPage": false,
                "searchKey": "runtime_test.count6",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count6(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count6(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count7",
              "documentation": {
                "identifier": "count7",
                "newPage": false,
                "searchKey": "runtime_test.count7",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count7(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count7(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count8",
              "documentation": {
                "identifier": "count8",
                "newPage": false,
                "searchKey": "runtime_test.count8",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count8(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count8(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#count9",
              "documentation": {
                "identifier": "count9",
                "newPage": false,
                "searchKey": "runtime_test.count9",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func count9(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc count9(n int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#countp",
              "documentation": {
                "identifier": "countp",
                "newPage": false,
                "searchKey": "runtime_test.countp",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countp(n *int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countp(n *int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#countpwg",
              "documentation": {
                "identifier": "countpwg",
                "newPage": false,
                "searchKey": "runtime_test.countpwg",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func countpwg(n *int, ready *sync.WaitGroup, teardown chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc countpwg(n *int, ready *sync.WaitGroup, teardown chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#defer1",
              "documentation": {
                "identifier": "defer1",
                "newPage": false,
                "searchKey": "runtime_test.defer1",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func defer1()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defer1()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#defer2",
              "documentation": {
                "identifier": "defer2",
                "newPage": false,
                "searchKey": "runtime_test.defer2",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func defer2()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defer2()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#defer3",
              "documentation": {
                "identifier": "defer3",
                "newPage": false,
                "searchKey": "runtime_test.defer3",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func defer3()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defer3()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#deferHeapAndStack",
              "documentation": {
                "identifier": "deferHeapAndStack",
                "newPage": false,
                "searchKey": "runtime_test.deferHeapAndStack",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deferHeapAndStack(n int) (r int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deferHeapAndStack(n int) (r int)\n```\n\ndeferHeapAndStack(n) computes 2*n \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#div",
              "documentation": {
                "identifier": "div",
                "newPage": false,
                "searchKey": "runtime_test.div",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func div(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc div(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#dlogCanonicalize",
              "documentation": {
                "identifier": "dlogCanonicalize",
                "newPage": false,
                "searchKey": "runtime_test.dlogCanonicalize",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func dlogCanonicalize(x string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dlogCanonicalize(x string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#doPanic",
              "documentation": {
                "identifier": "doPanic",
                "newPage": false,
                "searchKey": "runtime_test.doPanic",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func doPanic()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doPanic()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#doTestParallelReaders",
              "documentation": {
                "identifier": "doTestParallelReaders",
                "newPage": false,
                "searchKey": "runtime_test.doTestParallelReaders",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func doTestParallelReaders(numReaders int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doTestParallelReaders(numReaders int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#doWork",
              "documentation": {
                "identifier": "doWork",
                "newPage": false,
                "searchKey": "runtime_test.doWork",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func doWork(dur time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doWork(dur time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#eqstring_generic",
              "documentation": {
                "identifier": "eqstring_generic",
                "newPage": false,
                "searchKey": "runtime_test.eqstring_generic",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func eqstring_generic(s1, s2 string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc eqstring_generic(s1, s2 string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#err",
              "documentation": {
                "identifier": "err",
                "newPage": false,
                "searchKey": "runtime_test.err",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func err(t *testing.T, format string, args ...interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc err(t *testing.T, format string, args ...interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#errfn",
              "documentation": {
                "identifier": "errfn",
                "newPage": false,
                "searchKey": "runtime_test.errfn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func errfn() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc errfn() error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#errfn1",
              "documentation": {
                "identifier": "errfn1",
                "newPage": false,
                "searchKey": "runtime_test.errfn1",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func errfn1() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc errfn1() error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#escape",
              "documentation": {
                "identifier": "escape",
                "newPage": false,
                "searchKey": "runtime_test.escape",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func escape(p interface{}) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escape(p interface{}) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#expect",
              "documentation": {
                "identifier": "expect",
                "newPage": false,
                "searchKey": "runtime_test.expect",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func expect(t *testing.T, n int, err interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expect(t *testing.T, n int, err interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#f",
              "documentation": {
                "identifier": "f",
                "newPage": false,
                "searchKey": "runtime_test.f",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func f() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc f() int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#f1",
              "documentation": {
                "identifier": "f1",
                "newPage": false,
                "searchKey": "runtime_test.f1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func f1(pan bool) []uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc f1(pan bool) []uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#f2",
              "documentation": {
                "identifier": "f2",
                "newPage": false,
                "searchKey": "runtime_test.f2",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func f2(pan bool) []uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc f2(pan bool) []uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#f3",
              "documentation": {
                "identifier": "f3",
                "newPage": false,
                "searchKey": "runtime_test.f3",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func f3(pan bool) []uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc f3(pan bool) []uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fakeSyscall",
              "documentation": {
                "identifier": "fakeSyscall",
                "newPage": false,
                "searchKey": "runtime_test.fakeSyscall",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fakeSyscall(duration time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fakeSyscall(duration time.Duration)\n```\n\nfakeSyscall emulates a system call. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fcntl",
              "documentation": {
                "identifier": "fcntl",
                "newPage": false,
                "searchKey": "runtime_test.fcntl",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fcntl(fd uintptr, cmd int, arg uintptr) (uintptr, syscall.Errno)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fcntl(fd uintptr, cmd int, arg uintptr) (uintptr, syscall.Errno)\n```\n\nCall fcntl libc function rather than calling syscall. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#ff1",
              "documentation": {
                "identifier": "ff1",
                "newPage": false,
                "searchKey": "runtime_test.ff1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ff1(ap *foo, a, b, c, d, e, f, g, h, i int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ff1(ap *foo, a, b, c, d, e, f, g, h, i int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fin",
              "documentation": {
                "identifier": "fin",
                "newPage": false,
                "searchKey": "runtime_test.fin",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fin(v *int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fin(v *int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#findTrace",
              "documentation": {
                "identifier": "findTrace",
                "newPage": false,
                "searchKey": "runtime_test.findTrace",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findTrace(text, top string) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findTrace(text, top string) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fop",
              "documentation": {
                "identifier": "fop",
                "newPage": false,
                "searchKey": "runtime_test.fop",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fop(f func(x, y uint64) uint64) func(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fop(f func(x, y uint64) uint64) func(x, y float64) float64\n```\n\nturn uint64 op into float64 op \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fromMyNode",
              "documentation": {
                "identifier": "fromMyNode",
                "newPage": false,
                "searchKey": "runtime_test.fromMyNode",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fromMyNode(node *MyNode) *LFNode"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fromMyNode(node *MyNode) *LFNode\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#fromint64sw",
              "documentation": {
                "identifier": "fromint64sw",
                "newPage": false,
                "searchKey": "runtime_test.fromint64sw",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fromint64sw(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fromint64sw(f float64) float64\n```\n\nfloat64 -hw-> int64 -sw-> float64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#g2",
              "documentation": {
                "identifier": "g2",
                "newPage": false,
                "searchKey": "runtime_test.g2",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func g2()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc g2()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#g3",
              "documentation": {
                "identifier": "g3",
                "newPage": false,
                "searchKey": "runtime_test.g3",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func g3()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc g3()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#genPerm",
              "documentation": {
                "identifier": "genPerm",
                "newPage": false,
                "searchKey": "runtime_test.genPerm",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func genPerm(h *HashSet, b []byte, s []uint32, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc genPerm(h *HashSet, b []byte, s []uint32, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#growStack",
              "documentation": {
                "identifier": "growStack",
                "newPage": false,
                "searchKey": "runtime_test.growStack",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func growStack(progress *uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc growStack(progress *uint32)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#growStackIter",
              "documentation": {
                "identifier": "growStackIter",
                "newPage": false,
                "searchKey": "runtime_test.growStackIter",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func growStackIter(p *int, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc growStackIter(p *int, n int)\n```\n\nThis function is not an anonymous func, so that the compiler can do escape analysis and place x on stack (and subsequently stack growth update the pointer). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#growStackWithCallback",
              "documentation": {
                "identifier": "growStackWithCallback",
                "newPage": false,
                "searchKey": "runtime_test.growStackWithCallback",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func growStackWithCallback(cb func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc growStackWithCallback(cb func())\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#growing",
              "documentation": {
                "identifier": "growing",
                "newPage": false,
                "searchKey": "runtime_test.growing",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func growing(c chan int, done chan struct{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc growing(c chan int, done chan struct{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hwcmp",
              "documentation": {
                "identifier": "hwcmp",
                "newPage": false,
                "searchKey": "runtime_test.hwcmp",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hwcmp(f, g float64) (cmp int, isnan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hwcmp(f, g float64) (cmp int, isnan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hwint32",
              "documentation": {
                "identifier": "hwint32",
                "newPage": false,
                "searchKey": "runtime_test.hwint32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hwint32(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hwint32(f float64) float64\n```\n\nfloat64 -hw-> int32 -hw-> float64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#hwint64",
              "documentation": {
                "identifier": "hwint64",
                "newPage": false,
                "searchKey": "runtime_test.hwint64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hwint64(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hwint64(f float64) float64\n```\n\nfloat64 -hw-> int64 -hw-> float64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#infoBigStruct",
              "documentation": {
                "identifier": "infoBigStruct",
                "newPage": false,
                "searchKey": "runtime_test.infoBigStruct",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func infoBigStruct() []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc infoBigStruct() []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#init.crash_test.go",
              "documentation": {
                "identifier": "init.crash_test.go",
                "newPage": false,
                "searchKey": "runtime_test.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\nFor TestRuntimePanic: test a panic in the runtime package without involving the testing harness. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#init.crash_unix_test.go",
              "documentation": {
                "identifier": "init.crash_unix_test.go",
                "newPage": false,
                "searchKey": "runtime_test.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#init.crash_unix_test.go.0xc045da0c88",
              "documentation": {
                "identifier": "init.crash_unix_test.go.0xc045da0c88",
                "newPage": false,
                "searchKey": "runtime_test.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#init.netpoll_os_test.go",
              "documentation": {
                "identifier": "init.netpoll_os_test.go",
                "newPage": false,
                "searchKey": "runtime_test.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#init.runtime_test.go",
              "documentation": {
                "identifier": "init.runtime_test.go",
                "newPage": false,
                "searchKey": "runtime_test.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#inlined",
              "documentation": {
                "identifier": "inlined",
                "newPage": false,
                "searchKey": "runtime_test.inlined",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func inlined()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc inlined()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#interpreter",
              "documentation": {
                "identifier": "interpreter",
                "newPage": false,
                "searchKey": "runtime_test.interpreter",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func interpreter(level int, maxlevel int, rec int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc interpreter(level int, maxlevel int, rec int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#invertPallocBits",
              "documentation": {
                "identifier": "invertPallocBits",
                "newPage": false,
                "searchKey": "runtime_test.invertPallocBits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func invertPallocBits(b *PallocBits)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc invertPallocBits(b *PallocBits)\n```\n\nInverts every bit in the PallocBits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#isZeroed",
              "documentation": {
                "identifier": "isZeroed",
                "newPage": false,
                "searchKey": "runtime_test.isZeroed",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isZeroed(b []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isZeroed(b []byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#isZeroedR",
              "documentation": {
                "identifier": "isZeroedR",
                "newPage": false,
                "searchKey": "runtime_test.isZeroedR",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isZeroedR(r []rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isZeroedR(r []rune) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lastLine",
              "documentation": {
                "identifier": "lastLine",
                "newPage": false,
                "searchKey": "runtime_test.lastLine",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lastLine(src []byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lastLine(src []byte) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#lineNumber",
              "documentation": {
                "identifier": "lineNumber",
                "newPage": false,
                "searchKey": "runtime_test.lineNumber",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lineNumber() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lineNumber() int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#localWork",
              "documentation": {
                "identifier": "localWork",
                "newPage": false,
                "searchKey": "runtime_test.localWork",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func localWork(w int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc localWork(w int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#logDiff",
              "documentation": {
                "identifier": "logDiff",
                "newPage": false,
                "searchKey": "runtime_test.logDiff",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func logDiff(t *testing.T, prefix string, got, want reflect.Value)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc logDiff(t *testing.T, prefix string, got, want reflect.Value)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#makePallocBits",
              "documentation": {
                "identifier": "makePallocBits",
                "newPage": false,
                "searchKey": "runtime_test.makePallocBits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makePallocBits(s []BitRange) *PallocBits"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makePallocBits(s []BitRange) *PallocBits\n```\n\nmakePallocBits produces an initialized PallocBits by setting the ranges in s to 1 and the rest to zero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#makePallocData",
              "documentation": {
                "identifier": "makePallocData",
                "newPage": false,
                "searchKey": "runtime_test.makePallocData",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makePallocData(alloc, scavenged []BitRange) *PallocData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makePallocData(alloc, scavenged []BitRange) *PallocData\n```\n\nmakePallocData produces an initialized PallocData by setting the ranges of described in alloc and scavenge. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#matchLen",
              "documentation": {
                "identifier": "matchLen",
                "newPage": false,
                "searchKey": "runtime_test.matchLen",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchLen(a, b []byte, max int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchLen(a, b []byte, max int) int\n```\n\nReturns offset of difference \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#matmult",
              "documentation": {
                "identifier": "matmult",
                "newPage": false,
                "searchKey": "runtime_test.matmult",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matmult(done chan<- struct{}, A, B, C Matrix, i0, i1, j0, j1, k0, k1, threshold int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matmult(done chan<- struct{}, A, B, C Matrix, i0, i1, j0, j1, k0, k1, threshold int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#moveStack1",
              "documentation": {
                "identifier": "moveStack1",
                "newPage": false,
                "searchKey": "runtime_test.moveStack1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func moveStack1(x bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc moveStack1(x bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#moveStackCheck",
              "documentation": {
                "identifier": "moveStackCheck",
                "newPage": false,
                "searchKey": "runtime_test.moveStackCheck",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func moveStackCheck(t *testing.T, new *int, old uintptr) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc moveStackCheck(t *testing.T, new *int, old uintptr) bool\n```\n\nThis must not be inlined because the point is to force a stack growth check and move the stack. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#mul",
              "documentation": {
                "identifier": "mul",
                "newPage": false,
                "searchKey": "runtime_test.mul",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mul(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mul(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nextTrace",
              "documentation": {
                "identifier": "nextTrace",
                "newPage": false,
                "searchKey": "runtime_test.nextTrace",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nextTrace(lines []string) ([]string, []string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nextTrace(lines []string) ([]string, []string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#nonleaf",
              "documentation": {
                "identifier": "nonleaf",
                "newPage": false,
                "searchKey": "runtime_test.nonleaf",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func nonleaf(stop chan int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nonleaf(stop chan int) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#panicValue",
              "documentation": {
                "identifier": "panicValue",
                "newPage": false,
                "searchKey": "runtime_test.panicValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func panicValue(fn func()) (recovered interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc panicValue(fn func()) (recovered interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#parallelReader",
              "documentation": {
                "identifier": "parallelReader",
                "newPage": false,
                "searchKey": "runtime_test.parallelReader",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parallelReader(m *RWMutex, clocked chan bool, cunlock *uint32, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parallelReader(m *RWMutex, clocked chan bool, cunlock *uint32, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#parseFakeTime",
              "documentation": {
                "identifier": "parseFakeTime",
                "newPage": false,
                "searchKey": "runtime_test.parseFakeTime",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseFakeTime(x []byte) ([]fakeTimeFrame, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseFakeTime(x []byte) ([]fakeTimeFrame, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#permutation",
              "documentation": {
                "identifier": "permutation",
                "newPage": false,
                "searchKey": "runtime_test.permutation",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func permutation(t *testing.T, s []uint32, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc permutation(t *testing.T, s []uint32, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#perpetuumMobile",
              "documentation": {
                "identifier": "perpetuumMobile",
                "newPage": false,
                "searchKey": "runtime_test.perpetuumMobile",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func perpetuumMobile()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc perpetuumMobile()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#prepareAllMetricsSamples",
              "documentation": {
                "identifier": "prepareAllMetricsSamples",
                "newPage": false,
                "searchKey": "runtime_test.prepareAllMetricsSamples",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func prepareAllMetricsSamples() (map[string]metrics.Description, []metrics.Sample)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc prepareAllMetricsSamples() (map[string]metrics.Description, []metrics.Sample)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#randBytes",
              "documentation": {
                "identifier": "randBytes",
                "newPage": false,
                "searchKey": "runtime_test.randBytes",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func randBytes(r *rand.Rand, b []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randBytes(r *rand.Rand, b []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#reader",
              "documentation": {
                "identifier": "reader",
                "newPage": false,
                "searchKey": "runtime_test.reader",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func reader(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reader(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#rec1",
              "documentation": {
                "identifier": "rec1",
                "newPage": false,
                "searchKey": "runtime_test.rec1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rec1(max int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rec1(max int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#recordLines",
              "documentation": {
                "identifier": "recordLines",
                "newPage": false,
                "searchKey": "runtime_test.recordLines",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recordLines(a, b, c int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recordLines(a, b, c int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#recurseFn",
              "documentation": {
                "identifier": "recurseFn",
                "newPage": false,
                "searchKey": "runtime_test.recurseFn",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recurseFn(level int, maxlevel int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recurseFn(level int, maxlevel int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#recurseFnPanicRec",
              "documentation": {
                "identifier": "recurseFnPanicRec",
                "newPage": false,
                "searchKey": "runtime_test.recurseFnPanicRec",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func recurseFnPanicRec(level int, maxlevel int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc recurseFnPanicRec(level int, maxlevel int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#runBuiltTestProg",
              "documentation": {
                "identifier": "runBuiltTestProg",
                "newPage": false,
                "searchKey": "runtime_test.runBuiltTestProg",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runBuiltTestProg(t *testing.T, exe, name string, env ...string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runBuiltTestProg(t *testing.T, exe, name string, env ...string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#runTestProg",
              "documentation": {
                "identifier": "runTestProg",
                "newPage": false,
                "searchKey": "runtime_test.runTestProg",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runTestProg(t *testing.T, binary, name string, env ...string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runTestProg(t *testing.T, binary, name string, env ...string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#runWith",
              "documentation": {
                "identifier": "runWith",
                "newPage": false,
                "searchKey": "runtime_test.runWith",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runWith(f func(*testing.B, int), v ...int) func(*testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runWith(f func(*testing.B, int), v ...int) func(*testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#same",
              "documentation": {
                "identifier": "same",
                "newPage": false,
                "searchKey": "runtime_test.same",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func same(f, g float64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc same(f, g float64) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#set",
              "documentation": {
                "identifier": "set",
                "newPage": false,
                "searchKey": "runtime_test.set",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func set(p *int, x int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc set(p *int, x int)\n```\n\nTestDeferPtrs tests the adjustment of Defer's argument pointers (p aka &y) during a stack copy. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#setBig",
              "documentation": {
                "identifier": "setBig",
                "newPage": false,
                "searchKey": "runtime_test.setBig",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setBig(p *int, x int, b bigBuf)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setBig(p *int, x int, b bigBuf)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#setbits",
              "documentation": {
                "identifier": "setbits",
                "newPage": false,
                "searchKey": "runtime_test.setbits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setbits(h *HashSet, b []byte, i int, k int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setbits(h *HashSet, b []byte, i int, k int)\n```\n\nset up to k bits at index i and greater \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sideeffect",
              "documentation": {
                "identifier": "sideeffect",
                "newPage": false,
                "searchKey": "runtime_test.sideeffect",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sideeffect(n int64) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sideeffect(n int64) int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#skipDebugLog",
              "documentation": {
                "identifier": "skipDebugLog",
                "newPage": false,
                "searchKey": "runtime_test.skipDebugLog",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func skipDebugLog(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skipDebugLog(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#small",
              "documentation": {
                "identifier": "small",
                "newPage": false,
                "searchKey": "runtime_test.small",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func small(stop chan int, x *[8192]byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc small(stop chan int, x *[8192]byte) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sparse",
              "documentation": {
                "identifier": "sparse",
                "newPage": false,
                "searchKey": "runtime_test.sparse",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sparse(t *testing.T, n int, k int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sparse(t *testing.T, n int, k int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#stackGrowthRecursive",
              "documentation": {
                "identifier": "stackGrowthRecursive",
                "newPage": false,
                "searchKey": "runtime_test.stackGrowthRecursive",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stackGrowthRecursive(i int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stackGrowthRecursive(i int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#sub",
              "documentation": {
                "identifier": "sub",
                "newPage": false,
                "searchKey": "runtime_test.sub",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sub(x, y float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sub(x, y float64) float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#test",
              "documentation": {
                "identifier": "test",
                "newPage": false,
                "searchKey": "runtime_test.test",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func test(t *testing.T, op string, hw, sw func(float64, float64) float64, all []float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc test(t *testing.T, op string, hw, sw func(float64, float64) float64, all []float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testAssert",
              "documentation": {
                "identifier": "testAssert",
                "newPage": false,
                "searchKey": "runtime_test.testAssert",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAssert(x interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAssert(x interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testAssertVar",
              "documentation": {
                "identifier": "testAssertVar",
                "newPage": false,
                "searchKey": "runtime_test.testAssertVar",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAssertVar(x interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAssertVar(x interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testCallerBar",
              "documentation": {
                "identifier": "testCallerBar",
                "newPage": false,
                "searchKey": "runtime_test.testCallerBar",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCallerBar(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCallerBar(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testCallerFoo",
              "documentation": {
                "identifier": "testCallerFoo",
                "newPage": false,
                "searchKey": "runtime_test.testCallerFoo",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCallerFoo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCallerFoo(t *testing.T)\n```\n\nThese are marked noinline so that we can use FuncForPC in testCallerBar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testCallers",
              "documentation": {
                "identifier": "testCallers",
                "newPage": false,
                "searchKey": "runtime_test.testCallers",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCallers(t *testing.T, pcs []uintptr, pan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCallers(t *testing.T, pcs []uintptr, pan bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testCallersEqual",
              "documentation": {
                "identifier": "testCallersEqual",
                "newPage": false,
                "searchKey": "runtime_test.testCallersEqual",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCallersEqual(t *testing.T, pcs []uintptr, want []string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCallersEqual(t *testing.T, pcs []uintptr, want []string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testCgoPprof",
              "documentation": {
                "identifier": "testCgoPprof",
                "newPage": false,
                "searchKey": "runtime_test.testCgoPprof",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCgoPprof(t *testing.T, buildArg, runArg, top, bottom string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCgoPprof(t *testing.T, buildArg, runArg, top, bottom string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testChanSendBarrier",
              "documentation": {
                "identifier": "testChanSendBarrier",
                "newPage": false,
                "searchKey": "runtime_test.testChanSendBarrier",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testChanSendBarrier(useSelect bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testChanSendBarrier(useSelect bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testConcurrentReadsAfterGrowth",
              "documentation": {
                "identifier": "testConcurrentReadsAfterGrowth",
                "newPage": false,
                "searchKey": "runtime_test.testConcurrentReadsAfterGrowth",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testConcurrentReadsAfterGrowth(t *testing.T, useReflect bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testConcurrentReadsAfterGrowth(t *testing.T, useReflect bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testConditionalDefers",
              "documentation": {
                "identifier": "testConditionalDefers",
                "newPage": false,
                "searchKey": "runtime_test.testConditionalDefers",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testConditionalDefers(n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testConditionalDefers(n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testCrashHandler",
              "documentation": {
                "identifier": "testCrashHandler",
                "newPage": false,
                "searchKey": "runtime_test.testCrashHandler",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCrashHandler(t *testing.T, cgo bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCrashHandler(t *testing.T, cgo bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testDeadlock",
              "documentation": {
                "identifier": "testDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.testDeadlock",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testDeadlock(t *testing.T, name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testDeadlock(t *testing.T, name string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testDeferLeafSigpanic1",
              "documentation": {
                "identifier": "testDeferLeafSigpanic1",
                "newPage": false,
                "searchKey": "runtime_test.testDeferLeafSigpanic1",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testDeferLeafSigpanic1()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testDeferLeafSigpanic1()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testDeferPtrsGoexit",
              "documentation": {
                "identifier": "testDeferPtrsGoexit",
                "newPage": false,
                "searchKey": "runtime_test.testDeferPtrsGoexit",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testDeferPtrsGoexit(c chan int, i int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testDeferPtrsGoexit(c chan int, i int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testDeferPtrsPanic",
              "documentation": {
                "identifier": "testDeferPtrsPanic",
                "newPage": false,
                "searchKey": "runtime_test.testDeferPtrsPanic",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testDeferPtrsPanic(c chan int, i int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testDeferPtrsPanic(c chan int, i int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testGdbPython",
              "documentation": {
                "identifier": "testGdbPython",
                "newPage": false,
                "searchKey": "runtime_test.testGdbPython",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testGdbPython(t *testing.T, cgo bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testGdbPython(t *testing.T, cgo bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testGoroutineParallelism2",
              "documentation": {
                "identifier": "testGoroutineParallelism2",
                "newPage": false,
                "searchKey": "runtime_test.testGoroutineParallelism2",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testGoroutineParallelism2(t *testing.T, load, netpoll bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testGoroutineParallelism2(t *testing.T, load, netpoll bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testIfaceEqual",
              "documentation": {
                "identifier": "testIfaceEqual",
                "newPage": false,
                "searchKey": "runtime_test.testIfaceEqual",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testIfaceEqual(x interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testIfaceEqual(x interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testLockOSThreadExit",
              "documentation": {
                "identifier": "testLockOSThreadExit",
                "newPage": false,
                "searchKey": "runtime_test.testLockOSThreadExit",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testLockOSThreadExit(t *testing.T, prog string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testLockOSThreadExit(t *testing.T, prog string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testMapLookups",
              "documentation": {
                "identifier": "testMapLookups",
                "newPage": false,
                "searchKey": "runtime_test.testMapLookups",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMapLookups(t *testing.T, m map[string]string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMapLookups(t *testing.T, m map[string]string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testMapNan",
              "documentation": {
                "identifier": "testMapNan",
                "newPage": false,
                "searchKey": "runtime_test.testMapNan",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMapNan(t *testing.T, m map[float64]int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMapNan(t *testing.T, m map[float64]int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testOpen",
              "documentation": {
                "identifier": "testOpen",
                "newPage": false,
                "searchKey": "runtime_test.testOpen",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testOpen(t *testing.T, arg int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testOpen(t *testing.T, arg int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testOverlap",
              "documentation": {
                "identifier": "testOverlap",
                "newPage": false,
                "searchKey": "runtime_test.testOverlap",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testOverlap(t *testing.T, size int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testOverlap(t *testing.T, size int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testPanicDeadlock",
              "documentation": {
                "identifier": "testPanicDeadlock",
                "newPage": false,
                "searchKey": "runtime_test.testPanicDeadlock",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPanicDeadlock(t *testing.T, name string, want string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPanicDeadlock(t *testing.T, name string, want string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testPanicSystemstackInternal",
              "documentation": {
                "identifier": "testPanicSystemstackInternal",
                "newPage": false,
                "searchKey": "runtime_test.testPanicSystemstackInternal",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPanicSystemstackInternal()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPanicSystemstackInternal()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testPreemptionAfterSyscall",
              "documentation": {
                "identifier": "testPreemptionAfterSyscall",
                "newPage": false,
                "searchKey": "runtime_test.testPreemptionAfterSyscall",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testPreemptionAfterSyscall(t *testing.T, syscallDuration time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testPreemptionAfterSyscall(t *testing.T, syscallDuration time.Duration)\n```\n\nCheck that a goroutine will be preempted if it is calling short system calls. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testSemaHandoff",
              "documentation": {
                "identifier": "testSemaHandoff",
                "newPage": false,
                "searchKey": "runtime_test.testSemaHandoff",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testSemaHandoff() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testSemaHandoff() bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testSetPanicOnFault",
              "documentation": {
                "identifier": "testSetPanicOnFault",
                "newPage": false,
                "searchKey": "runtime_test.testSetPanicOnFault",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testSetPanicOnFault(t *testing.T, addr uintptr, nfault *int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testSetPanicOnFault(t *testing.T, addr uintptr, nfault *int)\n```\n\ntestSetPanicOnFault tests one potentially faulting address. It deliberately constructs and uses an invalid pointer, so mark it as nocheckptr. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testSize",
              "documentation": {
                "identifier": "testSize",
                "newPage": false,
                "searchKey": "runtime_test.testSize",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testSize(t *testing.T, size int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testSize(t *testing.T, size int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testStackWrapperPanic",
              "documentation": {
                "identifier": "testStackWrapperPanic",
                "newPage": false,
                "searchKey": "runtime_test.testStackWrapperPanic",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStackWrapperPanic(t *testing.T, cb func(), expect string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStackWrapperPanic(t *testing.T, cb func(), expect string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTracebackArgs1",
              "documentation": {
                "identifier": "testTracebackArgs1",
                "newPage": false,
                "searchKey": "runtime_test.testTracebackArgs1",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTracebackArgs1(a, b, c, d, e, f, g, h, i, j, k, l int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTracebackArgs1(a, b, c, d, e, f, g, h, i, j, k, l int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTracebackArgs2",
              "documentation": {
                "identifier": "testTracebackArgs2",
                "newPage": false,
                "searchKey": "runtime_test.testTracebackArgs2",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTracebackArgs2(a bool, b struct {..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTracebackArgs2(a bool, b struct {\n\ta, b, c int\n\tx       [2]int\n}, _ [0]int, d [3]byte) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTracebackArgs3",
              "documentation": {
                "identifier": "testTracebackArgs3",
                "newPage": false,
                "searchKey": "runtime_test.testTracebackArgs3",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTracebackArgs3(x [3]byte, a, b, c int, y [3]byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTracebackArgs3(x [3]byte, a, b, c int, y [3]byte) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTracebackArgs4",
              "documentation": {
                "identifier": "testTracebackArgs4",
                "newPage": false,
                "searchKey": "runtime_test.testTracebackArgs4",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTracebackArgs4(a bool, x [1][1][1][1][1][1][1][1][1][1]int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTracebackArgs4(a bool, x [1][1][1][1][1][1][1][1][1][1]int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTracebackArgs5",
              "documentation": {
                "identifier": "testTracebackArgs5",
                "newPage": false,
                "searchKey": "runtime_test.testTracebackArgs5",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTracebackArgs5(a bool, x struct {..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTracebackArgs5(a bool, x struct {\n\tx int\n\ty [0]int\n\tz [2][0]int\n}, _, _, _, _, _, _, _, _, _, _, _, _ [0]int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testTypeSwitch",
              "documentation": {
                "identifier": "testTypeSwitch",
                "newPage": false,
                "searchKey": "runtime_test.testTypeSwitch",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTypeSwitch(x interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTypeSwitch(x interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testYieldProgress",
              "documentation": {
                "identifier": "testYieldProgress",
                "newPage": false,
                "searchKey": "runtime_test.testYieldProgress",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testYieldProgress(locked bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testYieldProgress(locked bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testcmp",
              "documentation": {
                "identifier": "testcmp",
                "newPage": false,
                "searchKey": "runtime_test.testcmp",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testcmp(t *testing.T, f, g float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testcmp(t *testing.T, f, g float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#testu",
              "documentation": {
                "identifier": "testu",
                "newPage": false,
                "searchKey": "runtime_test.testu",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testu(t *testing.T, op string, hw, sw func(float64) float64, v float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testu(t *testing.T, op string, hw, sw func(float64) float64, v float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#text",
              "documentation": {
                "identifier": "text",
                "newPage": false,
                "searchKey": "runtime_test.text",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func text(t *testing.T, prefix, suffix string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc text(t *testing.T, prefix, suffix string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#to32sw",
              "documentation": {
                "identifier": "to32sw",
                "newPage": false,
                "searchKey": "runtime_test.to32sw",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func to32sw(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc to32sw(f float64) float64\n```\n\n64 -sw->32 -hw-> 64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#to64sw",
              "documentation": {
                "identifier": "to64sw",
                "newPage": false,
                "searchKey": "runtime_test.to64sw",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func to64sw(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc to64sw(f float64) float64\n```\n\n64 -hw->32 -sw-> 64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#toint64sw",
              "documentation": {
                "identifier": "toint64sw",
                "newPage": false,
                "searchKey": "runtime_test.toint64sw",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toint64sw(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toint64sw(f float64) float64\n```\n\nfloat64 -sw-> int64 -hw-> float64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tracebackExcluded",
              "documentation": {
                "identifier": "tracebackExcluded",
                "newPage": false,
                "searchKey": "runtime_test.tracebackExcluded",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func tracebackExcluded()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tracebackExcluded()\n```\n\ntracebackExcluded should be excluded from tracebacks. There are various ways this could come up. Linking it to a \"runtime.\" name is rather synthetic, but it's easy and reliable. See issue #42754 for one way this happened in real code. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tracebackFunc",
              "documentation": {
                "identifier": "tracebackFunc",
                "newPage": false,
                "searchKey": "runtime_test.tracebackFunc",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func tracebackFunc(t *testing.T) uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tracebackFunc(t *testing.T) uintptr\n```\n\nA function with an InlTree. Returns a PC within the function body. \n\nNo inline to ensure this complete function appears in output. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#tracebackNotExcluded",
              "documentation": {
                "identifier": "tracebackNotExcluded",
                "newPage": false,
                "searchKey": "runtime_test.tracebackNotExcluded",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func tracebackNotExcluded()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tracebackNotExcluded()\n```\n\ntracebackNotExcluded should be inlined into tracebackExcluded, but should not itself be excluded from the traceback. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#trimDead",
              "documentation": {
                "identifier": "trimDead",
                "newPage": false,
                "searchKey": "runtime_test.trimDead",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func trimDead(mask []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trimDead(mask []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#trunc32",
              "documentation": {
                "identifier": "trunc32",
                "newPage": false,
                "searchKey": "runtime_test.trunc32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func trunc32(f float64) float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trunc32(f float64) float64\n```\n\n64 -hw-> 32 -hw-> 64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#trythis",
              "documentation": {
                "identifier": "trythis",
                "newPage": false,
                "searchKey": "runtime_test.trythis",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func trythis()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trythis()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#twoNonZero",
              "documentation": {
                "identifier": "twoNonZero",
                "newPage": false,
                "searchKey": "runtime_test.twoNonZero",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func twoNonZero(h *HashSet, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc twoNonZero(h *HashSet, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#useStack",
              "documentation": {
                "identifier": "useStack",
                "newPage": false,
                "searchKey": "runtime_test.useStack",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func useStack(n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc useStack(n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#useStackAndCall",
              "documentation": {
                "identifier": "useStackAndCall",
                "newPage": false,
                "searchKey": "runtime_test.useStackAndCall",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func useStackAndCall(n int, f func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc useStackAndCall(n int, f func())\n```\n\nuse about n KB of stack and call f \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#validateAddrRanges",
              "documentation": {
                "identifier": "validateAddrRanges",
                "newPage": false,
                "searchKey": "runtime_test.validateAddrRanges",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateAddrRanges(t *testing.T, a *AddrRanges, want ...AddrRange)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateAddrRanges(t *testing.T, a *AddrRanges, want ...AddrRange)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#verifyGCInfo",
              "documentation": {
                "identifier": "verifyGCInfo",
                "newPage": false,
                "searchKey": "runtime_test.verifyGCInfo",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyGCInfo(t *testing.T, name string, p interface{}, mask0 []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyGCInfo(t *testing.T, name string, p interface{}, mask0 []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#warmupScheduler",
              "documentation": {
                "identifier": "warmupScheduler",
                "newPage": false,
                "searchKey": "runtime_test.warmupScheduler",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func warmupScheduler(targetThreadCount int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc warmupScheduler(targetThreadCount int)\n```\n\nwarmupScheduler ensures the scheduler has at least targetThreadCount threads in its thread pool. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#windowed",
              "documentation": {
                "identifier": "windowed",
                "newPage": false,
                "searchKey": "runtime_test.windowed",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func windowed(t *testing.T, k Key)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc windowed(t *testing.T, k Key)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#writeBarrierBenchmark",
              "documentation": {
                "identifier": "writeBarrierBenchmark",
                "newPage": false,
                "searchKey": "runtime_test.writeBarrierBenchmark",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeBarrierBenchmark(b *testing.B, f func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeBarrierBenchmark(b *testing.B, f func())\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/runtime_test#writer",
              "documentation": {
                "identifier": "writer",
                "newPage": false,
                "searchKey": "runtime_test.writer",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writer(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writer(rwm *RWMutex, num_iterations int, activity *int32, cdone chan bool)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
