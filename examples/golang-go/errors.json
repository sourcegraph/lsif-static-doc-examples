{
  "pathID": "/errors",
  "documentation": {
    "identifier": "errors",
    "newPage": true,
    "searchKey": "errors",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package errors"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package errors implements functions to manipulate errors. \n\nThe New function creates errors whose only content is a text message. \n\nThe Unwrap, Is and As functions work on errors that may wrap other errors. An error wraps another error if its type has the method \n\n```\nUnwrap() error\n\n```\nIf e.Unwrap() returns a non-nil error w, then we say that e wraps w. \n\nUnwrap unpacks wrapped errors. If its argument's type has an Unwrap method, it calls the method once. Otherwise, it returns nil. \n\nA simple way to create wrapped errors is to call fmt.Errorf and apply the %w verb to the error argument: \n\n```\nerrors.Unwrap(fmt.Errorf(\"... %w ...\", ..., err, ...))\n\n```\nreturns err. \n\nIs unwraps its first argument sequentially looking for an error that matches the second. It reports whether it finds a match. It should be used in preference to simple equality checks: \n\n```\nif errors.Is(err, fs.ErrExist)\n\n```\nis preferable to \n\n```\nif err == fs.ErrExist\n\n```\nbecause the former will succeed if err wraps fs.ErrExist. \n\nAs unwraps its first argument sequentially looking for an error that can be assigned to its second argument, which must be a pointer. If it succeeds, it performs the assignment and returns true. Otherwise, it returns false. The form \n\n```\nvar perr *fs.PathError\nif errors.As(err, &perr) {\n\tfmt.Println(perr.Path)\n}\n\n```\nis preferable to \n\n```\nif perr, ok := err.(*fs.PathError); ok {\n\tfmt.Println(perr.Path)\n}\n\n```\nbecause the former will succeed if err wraps an *fs.PathError. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/errors#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/errors#errorType",
              "documentation": {
                "identifier": "errorType",
                "newPage": false,
                "searchKey": "errors.errorType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errorType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errorType = reflectlite.TypeOf((*error)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/errors#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/errors#errorString",
              "documentation": {
                "identifier": "errorString",
                "newPage": false,
                "searchKey": "errors.errorString",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errorString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errorString struct {\n\ts string\n}\n```\n\nerrorString is a trivial implementation of error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/errors#errorString.Error",
                    "documentation": {
                      "identifier": "errorString.Error",
                      "newPage": false,
                      "searchKey": "errors.errorString.Error",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *errorString) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *errorString) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/errors#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/errors#New",
              "documentation": {
                "identifier": "New",
                "newPage": false,
                "searchKey": "errors.New",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func New(text string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc New(text string) error\n```\n\nNew returns an error that formats as the given text. Each call to New returns a distinct error value even if the text is identical. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors#Unwrap",
              "documentation": {
                "identifier": "Unwrap",
                "newPage": false,
                "searchKey": "errors.Unwrap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Unwrap(err error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Unwrap(err error) error\n```\n\nUnwrap returns the result of calling the Unwrap method on err, if err's type contains an Unwrap method returning error. Otherwise, Unwrap returns nil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors#Is",
              "documentation": {
                "identifier": "Is",
                "newPage": false,
                "searchKey": "errors.Is",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Is(err, target error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Is(err, target error) bool\n```\n\nIs reports whether any error in err's chain matches target. \n\nThe chain consists of err itself followed by the sequence of errors obtained by repeatedly calling Unwrap. \n\nAn error is considered to match a target if it is equal to that target or if it implements a method Is(error) bool such that Is(target) returns true. \n\nAn error type might provide an Is method so it can be treated as equivalent to an existing error. For example, if MyError defines \n\n```\nfunc (m MyError) Is(target error) bool { return target == fs.ErrExist }\n\n```\nthen Is(MyError{}, fs.ErrExist) returns true. See syscall.Errno.Is for an example in the standard library. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/errors#As",
              "documentation": {
                "identifier": "As",
                "newPage": false,
                "searchKey": "errors.As",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func As(err error, target interface{}) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc As(err error, target interface{}) bool\n```\n\nAs finds the first error in err's chain that matches target, and if so, sets target to that error value and returns true. Otherwise, it returns false. \n\nThe chain consists of err itself followed by the sequence of errors obtained by repeatedly calling Unwrap. \n\nAn error matches target if the error's concrete value is assignable to the value pointed to by target, or if the error has a method As(interface{}) bool such that As(target) returns true. In the latter case, the As method is responsible for setting target. \n\nAn error type might provide an As method so it can be treated as if it were a different error type. \n\nAs panics if target is not a non-nil pointer to either a type that implements error, or to any interface type. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
