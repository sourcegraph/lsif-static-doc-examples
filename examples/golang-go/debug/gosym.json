{
  "pathID": "/debug/gosym",
  "documentation": {
    "identifier": "gosym",
    "newPage": true,
    "searchKey": "debug/gosym",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package gosym"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package gosym implements access to the Go symbol and line number tables embedded in Go binaries generated by the gc compilers. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/debug/gosym#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/gosym#go116magic",
              "documentation": {
                "identifier": "go116magic",
                "newPage": false,
                "searchKey": "gosym.go116magic",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const go116magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst go116magic = 0xfffffffa\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#go12magic",
              "documentation": {
                "identifier": "go12magic",
                "newPage": false,
                "searchKey": "gosym.go12magic",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const go12magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst go12magic = 0xfffffffb\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#oldQuantum",
              "documentation": {
                "identifier": "oldQuantum",
                "newPage": false,
                "searchKey": "gosym.oldQuantum",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const oldQuantum"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst oldQuantum = 1\n```\n\nNOTE(rsc): This is wrong for GOARCH=arm, which uses a quantum of 4, but we have no idea whether we're using arm or not. This only matters in the old (pre-Go 1.2) symbol table format, so it's not worth fixing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#ver11",
              "documentation": {
                "identifier": "ver11",
                "newPage": false,
                "searchKey": "gosym.ver11",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ver11"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ver11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#ver116",
              "documentation": {
                "identifier": "ver116",
                "newPage": false,
                "searchKey": "gosym.ver116",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ver116"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ver116\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#ver12",
              "documentation": {
                "identifier": "ver12",
                "newPage": false,
                "searchKey": "gosym.ver12",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ver12"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ver12\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#verUnknown",
              "documentation": {
                "identifier": "verUnknown",
                "newPage": false,
                "searchKey": "gosym.verUnknown",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const verUnknown"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst verUnknown version = iota\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/gosym#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/gosym#bigEndianSymtab",
              "documentation": {
                "identifier": "bigEndianSymtab",
                "newPage": false,
                "searchKey": "gosym.bigEndianSymtab",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bigEndianSymtab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bigEndianSymtab = []byte{0xFF, 0xFF, 0xFF, 0xFD, 0x00, 0x00, 0x00}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#littleEndianSymtab",
              "documentation": {
                "identifier": "littleEndianSymtab",
                "newPage": false,
                "searchKey": "gosym.littleEndianSymtab",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var littleEndianSymtab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar littleEndianSymtab = []byte{0xFD, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#oldLittleEndianSymtab",
              "documentation": {
                "identifier": "oldLittleEndianSymtab",
                "newPage": false,
                "searchKey": "gosym.oldLittleEndianSymtab",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var oldLittleEndianSymtab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oldLittleEndianSymtab = []byte{0xFE, 0xFF, 0xFF, 0xFF, 0x00, 0x00}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#pclineTempDir",
              "documentation": {
                "identifier": "pclineTempDir",
                "newPage": false,
                "searchKey": "gosym.pclineTempDir",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pclineTempDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pclineTempDir string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#pclinetestBinary",
              "documentation": {
                "identifier": "pclinetestBinary",
                "newPage": false,
                "searchKey": "gosym.pclinetestBinary",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pclinetestBinary"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pclinetestBinary string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/gosym#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/gosym#DecodingError",
              "documentation": {
                "identifier": "DecodingError",
                "newPage": false,
                "searchKey": "gosym.DecodingError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DecodingError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DecodingError struct {\n\toff int\n\tmsg string\n\tval interface{}\n}\n```\n\nDecodingError represents an error during the decoding of the symbol table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#DecodingError.Error",
                    "documentation": {
                      "identifier": "DecodingError.Error",
                      "newPage": false,
                      "searchKey": "gosym.DecodingError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *DecodingError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *DecodingError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#Func",
              "documentation": {
                "identifier": "Func",
                "newPage": false,
                "searchKey": "gosym.Func",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Func struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Func struct {\n\tEntry uint64\n\t*Sym\n\tEnd       uint64\n\tParams    []*Sym // nil for Go 1.3 and later binaries\n\tLocals    []*Sym // nil for Go 1.3 and later binaries\n\tFrameSize int\n\tLineTable *LineTable\n\tObj       *Obj\n}\n```\n\nA Func collects information about a single function. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#LineTable",
              "documentation": {
                "identifier": "LineTable",
                "newPage": false,
                "searchKey": "gosym.LineTable",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LineTable struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LineTable struct {\n\tData []byte\n\tPC   uint64\n\tLine int\n\n\t// This mutex is used to keep parsing of pclntab synchronous.\n\tmu sync.Mutex\n\n\t// Contains the version of the pclntab section.\n\tversion version\n\n\t// Go 1.2/1.16 state\n\tbinary      binary.ByteOrder\n\tquantum     uint32\n\tptrsize     uint32\n\tfuncnametab []byte\n\tcutab       []byte\n\tfuncdata    []byte\n\tfunctab     []byte\n\tnfunctab    uint32\n\tfiletab     []byte\n\tpctab       []byte // points to the pctables.\n\tnfiletab    uint32\n\tfuncNames   map[uint32]string // cache the function names\n\tstrings     map[uint32]string // interned substrings of Data, keyed by offset\n\t// fileMap varies depending on the version of the object file.\n\t// For ver12, it maps the name to the index in the file table.\n\t// For ver116, it maps the name to the offset in filetab.\n\tfileMap map[string]uint32\n}\n```\n\nA LineTable is a data structure mapping program counters to line numbers. \n\nIn Go 1.1 and earlier, each function (represented by a Func) had its own LineTable, and the line number corresponded to a numbering of all source lines in the program, across all files. That absolute line number would then have to be converted separately to a file name and line number within the file. \n\nIn Go 1.2, the format of the data changed so that there is a single LineTable for the entire program, shared by all Funcs, and there are no absolute line numbers, just line numbers within specific files. \n\nFor the most part, LineTable's methods should be treated as an internal detail of the package; callers should use the methods on Table instead. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#NewLineTable",
                    "documentation": {
                      "identifier": "NewLineTable",
                      "newPage": false,
                      "searchKey": "gosym.NewLineTable",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewLineTable(data []byte, text uint64) *LineTable"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewLineTable(data []byte, text uint64) *LineTable\n```\n\nNewLineTable returns a new PC/line table corresponding to the encoded data. Text must be the start address of the corresponding text segment. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.LineToPC",
                    "documentation": {
                      "identifier": "LineTable.LineToPC",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.LineToPC",
                      "tags": [
                        "method",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) LineToPC(line int, maxpc uint64) uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) LineToPC(line int, maxpc uint64) uint64\n```\n\nLineToPC returns the program counter for the given line number, considering only program counters before maxpc. \n\nDeprecated: Use Table's LineToPC method instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.PCToLine",
                    "documentation": {
                      "identifier": "LineTable.PCToLine",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.PCToLine",
                      "tags": [
                        "method",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) PCToLine(pc uint64) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) PCToLine(pc uint64) int\n```\n\nPCToLine returns the line number for the given program counter. \n\nDeprecated: Use Table's PCToLine method instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.findFileLine",
                    "documentation": {
                      "identifier": "LineTable.findFileLine",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.findFileLine",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) findFileLine(entry uint64, filetab, linetab uint32, filenum, line int32, cutab []byte) uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) findFileLine(entry uint64, filetab, linetab uint32, filenum, line int32, cutab []byte) uint64\n```\n\nfindFileLine scans one function in the binary looking for a program counter in the given file on the given line. It does so by running the pc-value tables mapping program counter to file number. Since most functions come from a single file, these are usually short and quick to scan. If a file match is found, then the code goes to the expense of looking for a simultaneous line number match. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.findFunc",
                    "documentation": {
                      "identifier": "LineTable.findFunc",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.findFunc",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) findFunc(pc uint64) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) findFunc(pc uint64) []byte\n```\n\nfindFunc returns the func corresponding to the given program counter. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.funcName",
                    "documentation": {
                      "identifier": "LineTable.funcName",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.funcName",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) funcName(off uint32) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) funcName(off uint32) string\n```\n\nfuncName returns the name of the function found at off. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.go12Funcs",
                    "documentation": {
                      "identifier": "LineTable.go12Funcs",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.go12Funcs",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) go12Funcs() []Func"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) go12Funcs() []Func\n```\n\ngo12Funcs returns a slice of Funcs derived from the Go 1.2 pcln table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.go12LineToPC",
                    "documentation": {
                      "identifier": "LineTable.go12LineToPC",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.go12LineToPC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) go12LineToPC(file string, line int) (pc uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) go12LineToPC(file string, line int) (pc uint64)\n```\n\ngo12LineToPC maps a (file, line) pair to a program counter for the Go 1.2/1.16 pcln table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.go12MapFiles",
                    "documentation": {
                      "identifier": "LineTable.go12MapFiles",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.go12MapFiles",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) go12MapFiles(m map[string]*Obj, obj *Obj)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) go12MapFiles(m map[string]*Obj, obj *Obj)\n```\n\ngo12MapFiles adds to m a key for every file in the Go 1.2 LineTable. Every key maps to obj. That's not a very interesting map, but it provides a way for callers to obtain the list of files in the program. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.go12PCToFile",
                    "documentation": {
                      "identifier": "LineTable.go12PCToFile",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.go12PCToFile",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) go12PCToFile(pc uint64) (file string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) go12PCToFile(pc uint64) (file string)\n```\n\ngo12PCToFile maps program counter to file name for the Go 1.2 pcln table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.go12PCToLine",
                    "documentation": {
                      "identifier": "LineTable.go12PCToLine",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.go12PCToLine",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) go12PCToLine(pc uint64) (line int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) go12PCToLine(pc uint64) (line int)\n```\n\ngo12PCToLine maps program counter to line number for the Go 1.2 pcln table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.initFileMap",
                    "documentation": {
                      "identifier": "LineTable.initFileMap",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.initFileMap",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) initFileMap()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) initFileMap()\n```\n\ninitFileMap initializes the map from file name to file number. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.isGo12",
                    "documentation": {
                      "identifier": "LineTable.isGo12",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.isGo12",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) isGo12() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) isGo12() bool\n```\n\nisGo12 reports whether this is a Go 1.2 (or later) symbol table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.parse",
                    "documentation": {
                      "identifier": "LineTable.parse",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.parse",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) parse(targetPC uint64, targetLine int) (b []byte, pc uint64, line int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) parse(targetPC uint64, targetLine int) (b []byte, pc uint64, line int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.parsePclnTab",
                    "documentation": {
                      "identifier": "LineTable.parsePclnTab",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.parsePclnTab",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) parsePclnTab()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) parsePclnTab()\n```\n\nparsePclnTab parses the pclntab, setting the version. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.pcvalue",
                    "documentation": {
                      "identifier": "LineTable.pcvalue",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.pcvalue",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) pcvalue(off uint32, entry, targetpc uint64) int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) pcvalue(off uint32, entry, targetpc uint64) int32\n```\n\npcvalue reports the value associated with the target pc. off is the offset to the beginning of the pc-value table, and entry is the start PC for the corresponding function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.readvarint",
                    "documentation": {
                      "identifier": "LineTable.readvarint",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.readvarint",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) readvarint(pp *[]byte) uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) readvarint(pp *[]byte) uint32\n```\n\nreadvarint reads, removes, and returns a varint from *pp. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.slice",
                    "documentation": {
                      "identifier": "LineTable.slice",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.slice",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) slice(pc uint64) *LineTable"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) slice(pc uint64) *LineTable\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.step",
                    "documentation": {
                      "identifier": "LineTable.step",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.step",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) step(p *[]byte, pc *uint64, val *int32, first bool) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) step(p *[]byte, pc *uint64, val *int32, first bool) bool\n```\n\nstep advances to the next pc, value pair in the encoded table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.string",
                    "documentation": {
                      "identifier": "LineTable.string",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.string",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) string(off uint32) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) string(off uint32) string\n```\n\nstring returns a Go string found at off. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.stringFrom",
                    "documentation": {
                      "identifier": "LineTable.stringFrom",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.stringFrom",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) stringFrom(arr []byte, off uint32) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) stringFrom(arr []byte, off uint32) string\n```\n\nstringFrom returns a Go string found at off from a position. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#LineTable.uintptr",
                    "documentation": {
                      "identifier": "LineTable.uintptr",
                      "newPage": false,
                      "searchKey": "gosym.LineTable.uintptr",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *LineTable) uintptr(b []byte) uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *LineTable) uintptr(b []byte) uint64\n```\n\nuintptr returns the pointer-sized value encoded at b. The pointer size is dictated by the table being read. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#Obj",
              "documentation": {
                "identifier": "Obj",
                "newPage": false,
                "searchKey": "gosym.Obj",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Obj struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Obj struct {\n\t// Funcs is a list of functions in the Obj.\n\tFuncs []Func\n\n\t// In Go 1.1 and earlier, Paths is a list of symbols corresponding\n\t// to the source file names that produced the Obj.\n\t// In Go 1.2, Paths is nil.\n\t// Use the keys of Table.Files to obtain a list of source files.\n\tPaths []Sym // meta\n}\n```\n\nAn Obj represents a collection of functions in a symbol table. \n\nThe exact method of division of a binary into separate Objs is an internal detail of the symbol table format. \n\nIn early versions of Go each source file became a different Obj. \n\nIn Go 1 and Go 1.1, each package produced one Obj for all Go sources and one Obj per C source file. \n\nIn Go 1.2, there is a single Obj for the entire program. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#Obj.alineFromLine",
                    "documentation": {
                      "identifier": "Obj.alineFromLine",
                      "newPage": false,
                      "searchKey": "gosym.Obj.alineFromLine",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *Obj) alineFromLine(path string, line int) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *Obj) alineFromLine(path string, line int) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Obj.lineFromAline",
                    "documentation": {
                      "identifier": "Obj.lineFromAline",
                      "newPage": false,
                      "searchKey": "gosym.Obj.lineFromAline",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o *Obj) lineFromAline(aline int) (string, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o *Obj) lineFromAline(aline int) (string, int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#Sym",
              "documentation": {
                "identifier": "Sym",
                "newPage": false,
                "searchKey": "gosym.Sym",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sym struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sym struct {\n\tValue  uint64\n\tType   byte\n\tName   string\n\tGoType uint64\n\t// If this symbol is a function symbol, the corresponding Func\n\tFunc *Func\n}\n```\n\nA Sym represents a single symbol table entry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#Sym.BaseName",
                    "documentation": {
                      "identifier": "Sym.BaseName",
                      "newPage": false,
                      "searchKey": "gosym.Sym.BaseName",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Sym) BaseName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Sym) BaseName() string\n```\n\nBaseName returns the symbol name without the package or receiver name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Sym.PackageName",
                    "documentation": {
                      "identifier": "Sym.PackageName",
                      "newPage": false,
                      "searchKey": "gosym.Sym.PackageName",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Sym) PackageName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Sym) PackageName() string\n```\n\nPackageName returns the package part of the symbol name, or the empty string if there is none. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Sym.ReceiverName",
                    "documentation": {
                      "identifier": "Sym.ReceiverName",
                      "newPage": false,
                      "searchKey": "gosym.Sym.ReceiverName",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Sym) ReceiverName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Sym) ReceiverName() string\n```\n\nReceiverName returns the receiver type name of this symbol, or the empty string if there is none. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Sym.Static",
                    "documentation": {
                      "identifier": "Sym.Static",
                      "newPage": false,
                      "searchKey": "gosym.Sym.Static",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Sym) Static() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Sym) Static() bool\n```\n\nStatic reports whether this symbol is static (not visible outside its file). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#Table",
              "documentation": {
                "identifier": "Table",
                "newPage": false,
                "searchKey": "gosym.Table",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Table struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Table struct {\n\tSyms  []Sym // nil for Go 1.3 and later binaries\n\tFuncs []Func\n\tFiles map[string]*Obj // for Go 1.2 and later all files map to one Obj\n\tObjs  []Obj           // for Go 1.2 and later only one Obj in slice\n\n\tgo12line *LineTable // Go 1.2 line number table\n}\n```\n\nTable represents a Go symbol table. It stores all of the symbols decoded from the program and provides methods to translate between symbols, names, and addresses. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#NewTable",
                    "documentation": {
                      "identifier": "NewTable",
                      "newPage": false,
                      "searchKey": "gosym.NewTable",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewTable(symtab []byte, pcln *LineTable) (*Table, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewTable(symtab []byte, pcln *LineTable) (*Table, error)\n```\n\nNewTable decodes the Go symbol table (the \".gosymtab\" section in ELF), returning an in-memory representation. Starting with Go 1.3, the Go symbol table no longer includes symbol data. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#crack",
                    "documentation": {
                      "identifier": "crack",
                      "newPage": false,
                      "searchKey": "gosym.crack",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func crack(file string, t *testing.T) (*elf.File, *Table)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc crack(file string, t *testing.T) (*elf.File, *Table)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#getTable",
                    "documentation": {
                      "identifier": "getTable",
                      "newPage": false,
                      "searchKey": "gosym.getTable",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getTable(t *testing.T) *Table"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getTable(t *testing.T) *Table\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#parse",
                    "documentation": {
                      "identifier": "parse",
                      "newPage": false,
                      "searchKey": "gosym.parse",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parse(file string, f *elf.File, t *testing.T) (*elf.File, *Table)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parse(file string, f *elf.File, t *testing.T) (*elf.File, *Table)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Table.LineToPC",
                    "documentation": {
                      "identifier": "Table.LineToPC",
                      "newPage": false,
                      "searchKey": "gosym.Table.LineToPC",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Table) LineToPC(file string, line int) (pc uint64, fn *Func, err error)\n```\n\nLineToPC looks up the first program counter on the given line in the named file. It returns UnknownPathError or UnknownLineError if there is an error looking up this line. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Table.LookupFunc",
                    "documentation": {
                      "identifier": "Table.LookupFunc",
                      "newPage": false,
                      "searchKey": "gosym.Table.LookupFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Table) LookupFunc(name string) *Func"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Table) LookupFunc(name string) *Func\n```\n\nLookupFunc returns the text, data, or bss symbol with the given name, or nil if no such symbol is found. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Table.LookupSym",
                    "documentation": {
                      "identifier": "Table.LookupSym",
                      "newPage": false,
                      "searchKey": "gosym.Table.LookupSym",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Table) LookupSym(name string) *Sym"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Table) LookupSym(name string) *Sym\n```\n\nLookupSym returns the text, data, or bss symbol with the given name, or nil if no such symbol is found. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Table.PCToFunc",
                    "documentation": {
                      "identifier": "Table.PCToFunc",
                      "newPage": false,
                      "searchKey": "gosym.Table.PCToFunc",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Table) PCToFunc(pc uint64) *Func"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Table) PCToFunc(pc uint64) *Func\n```\n\nPCToFunc returns the function containing the program counter pc, or nil if there is no such function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Table.PCToLine",
                    "documentation": {
                      "identifier": "Table.PCToLine",
                      "newPage": false,
                      "searchKey": "gosym.Table.PCToLine",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Table) PCToLine(pc uint64) (file string, line int, fn *Func)\n```\n\nPCToLine looks up line number information for a program counter. If there is no information, it returns fn == nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/gosym#Table.SymByAddr",
                    "documentation": {
                      "identifier": "Table.SymByAddr",
                      "newPage": false,
                      "searchKey": "gosym.Table.SymByAddr",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Table) SymByAddr(addr uint64) *Sym"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Table) SymByAddr(addr uint64) *Sym\n```\n\nSymByAddr returns the text, data, or bss symbol starting at the given address. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#UnknownFileError",
              "documentation": {
                "identifier": "UnknownFileError",
                "newPage": false,
                "searchKey": "gosym.UnknownFileError",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnknownFileError string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnknownFileError string\n```\n\nUnknownFileError represents a failure to find the specific file in the symbol table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#UnknownFileError.Error",
                    "documentation": {
                      "identifier": "UnknownFileError.Error",
                      "newPage": false,
                      "searchKey": "gosym.UnknownFileError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e UnknownFileError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e UnknownFileError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#UnknownLineError",
              "documentation": {
                "identifier": "UnknownLineError",
                "newPage": false,
                "searchKey": "gosym.UnknownLineError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnknownLineError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnknownLineError struct {\n\tFile string\n\tLine int\n}\n```\n\nUnknownLineError represents a failure to map a line to a program counter, either because the line is beyond the bounds of the file or because there is no code on the given line. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/gosym#UnknownLineError.Error",
                    "documentation": {
                      "identifier": "UnknownLineError.Error",
                      "newPage": false,
                      "searchKey": "gosym.UnknownLineError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *UnknownLineError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *UnknownLineError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#sym",
              "documentation": {
                "identifier": "sym",
                "newPage": false,
                "searchKey": "gosym.sym",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sym struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sym struct {\n\tvalue  uint64\n\tgotype uint64\n\ttyp    byte\n\tname   []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#version",
              "documentation": {
                "identifier": "version",
                "newPage": false,
                "searchKey": "gosym.version",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type version int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype version int\n```\n\nversion of the pclntab \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/gosym#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/gosym#Test115PclnParsing",
              "documentation": {
                "identifier": "Test115PclnParsing",
                "newPage": false,
                "searchKey": "gosym.Test115PclnParsing",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test115PclnParsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test115PclnParsing(t *testing.T)\n```\n\nTest that we can parse a pclntab from 1.15. The file was compiled in /tmp/hello.go: [BEGIN] package main \n\nfunc main() { \n\n```\nprintln(\"hello\")\n\n```\n} [END] \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestIssue29551",
              "documentation": {
                "identifier": "TestIssue29551",
                "newPage": false,
                "searchKey": "gosym.TestIssue29551",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue29551(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue29551(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestLineAline",
              "documentation": {
                "identifier": "TestLineAline",
                "newPage": false,
                "searchKey": "gosym.TestLineAline",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineAline(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineAline(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestLineFromAline",
              "documentation": {
                "identifier": "TestLineFromAline",
                "newPage": false,
                "searchKey": "gosym.TestLineFromAline",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineFromAline(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineFromAline(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestPCLine",
              "documentation": {
                "identifier": "TestPCLine",
                "newPage": false,
                "searchKey": "gosym.TestPCLine",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPCLine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPCLine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestRemotePackage",
              "documentation": {
                "identifier": "TestRemotePackage",
                "newPage": false,
                "searchKey": "gosym.TestRemotePackage",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRemotePackage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRemotePackage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestStandardLibPackage",
              "documentation": {
                "identifier": "TestStandardLibPackage",
                "newPage": false,
                "searchKey": "gosym.TestStandardLibPackage",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStandardLibPackage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStandardLibPackage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#TestStandardLibPathPackage",
              "documentation": {
                "identifier": "TestStandardLibPathPackage",
                "newPage": false,
                "searchKey": "gosym.TestStandardLibPathPackage",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStandardLibPathPackage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStandardLibPathPackage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#assertString",
              "documentation": {
                "identifier": "assertString",
                "newPage": false,
                "searchKey": "gosym.assertString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func assertString(t *testing.T, dsc, out, tgt string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc assertString(t *testing.T, dsc, out, tgt string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#dotest",
              "documentation": {
                "identifier": "dotest",
                "newPage": false,
                "searchKey": "gosym.dotest",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func dotest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc dotest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#endtest",
              "documentation": {
                "identifier": "endtest",
                "newPage": false,
                "searchKey": "gosym.endtest",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func endtest()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc endtest()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#skipIfNotELF",
              "documentation": {
                "identifier": "skipIfNotELF",
                "newPage": false,
                "searchKey": "gosym.skipIfNotELF",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func skipIfNotELF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skipIfNotELF(t *testing.T)\n```\n\nskipIfNotELF skips the test if we are not running on an ELF system. These tests open and examine the test binary, and use elf.Open to do so. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/gosym#walksymtab",
              "documentation": {
                "identifier": "walksymtab",
                "newPage": false,
                "searchKey": "gosym.walksymtab",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func walksymtab(data []byte, fn func(sym) error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walksymtab(data []byte, fn func(sym) error) error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
