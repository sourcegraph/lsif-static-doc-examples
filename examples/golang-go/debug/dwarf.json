{
  "pathID": "/debug/dwarf",
  "documentation": {
    "identifier": "dwarf",
    "newPage": true,
    "searchKey": "debug/dwarf",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package dwarf"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package dwarf provides access to DWARF debugging information loaded from executable files, as defined in the DWARF 2.0 Standard at [http://dwarfstd.org/doc/dwarf-2.0.0.pdf](http://dwarfstd.org/doc/dwarf-2.0.0.pdf) \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/debug/dwarf#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAbstractOrigin",
              "documentation": {
                "identifier": "AttrAbstractOrigin",
                "newPage": false,
                "searchKey": "dwarf.AttrAbstractOrigin",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAbstractOrigin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAbstractOrigin Attr = 0x31\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAccessibility",
              "documentation": {
                "identifier": "AttrAccessibility",
                "newPage": false,
                "searchKey": "dwarf.AttrAccessibility",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAccessibility"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAccessibility Attr = 0x32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAddrBase",
              "documentation": {
                "identifier": "AttrAddrBase",
                "newPage": false,
                "searchKey": "dwarf.AttrAddrBase",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAddrBase"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAddrBase Attr = 0x73\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAddrClass",
              "documentation": {
                "identifier": "AttrAddrClass",
                "newPage": false,
                "searchKey": "dwarf.AttrAddrClass",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAddrClass"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAddrClass Attr = 0x33\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAlignment",
              "documentation": {
                "identifier": "AttrAlignment",
                "newPage": false,
                "searchKey": "dwarf.AttrAlignment",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAlignment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAlignment Attr = 0x88\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAllocated",
              "documentation": {
                "identifier": "AttrAllocated",
                "newPage": false,
                "searchKey": "dwarf.AttrAllocated",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAllocated"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAllocated Attr = 0x4E\n```\n\nThe following are new in DWARF 3. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrArtificial",
              "documentation": {
                "identifier": "AttrArtificial",
                "newPage": false,
                "searchKey": "dwarf.AttrArtificial",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrArtificial"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrArtificial Attr = 0x34\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrAssociated",
              "documentation": {
                "identifier": "AttrAssociated",
                "newPage": false,
                "searchKey": "dwarf.AttrAssociated",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrAssociated"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrAssociated Attr = 0x4F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrBaseTypes",
              "documentation": {
                "identifier": "AttrBaseTypes",
                "newPage": false,
                "searchKey": "dwarf.AttrBaseTypes",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrBaseTypes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrBaseTypes Attr = 0x35\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrBinaryScale",
              "documentation": {
                "identifier": "AttrBinaryScale",
                "newPage": false,
                "searchKey": "dwarf.AttrBinaryScale",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrBinaryScale"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrBinaryScale Attr = 0x5B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrBitOffset",
              "documentation": {
                "identifier": "AttrBitOffset",
                "newPage": false,
                "searchKey": "dwarf.AttrBitOffset",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrBitOffset"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrBitOffset Attr = 0x0C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrBitSize",
              "documentation": {
                "identifier": "AttrBitSize",
                "newPage": false,
                "searchKey": "dwarf.AttrBitSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrBitSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrBitSize Attr = 0x0D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrByteSize",
              "documentation": {
                "identifier": "AttrByteSize",
                "newPage": false,
                "searchKey": "dwarf.AttrByteSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrByteSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrByteSize Attr = 0x0B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallAllCalls",
              "documentation": {
                "identifier": "AttrCallAllCalls",
                "newPage": false,
                "searchKey": "dwarf.AttrCallAllCalls",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallAllCalls"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallAllCalls Attr = 0x7A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallAllSourceCalls",
              "documentation": {
                "identifier": "AttrCallAllSourceCalls",
                "newPage": false,
                "searchKey": "dwarf.AttrCallAllSourceCalls",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallAllSourceCalls"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallAllSourceCalls Attr = 0x7B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallAllTailCalls",
              "documentation": {
                "identifier": "AttrCallAllTailCalls",
                "newPage": false,
                "searchKey": "dwarf.AttrCallAllTailCalls",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallAllTailCalls"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallAllTailCalls Attr = 0x7C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallColumn",
              "documentation": {
                "identifier": "AttrCallColumn",
                "newPage": false,
                "searchKey": "dwarf.AttrCallColumn",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallColumn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallColumn Attr = 0x57\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallDataLocation",
              "documentation": {
                "identifier": "AttrCallDataLocation",
                "newPage": false,
                "searchKey": "dwarf.AttrCallDataLocation",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallDataLocation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallDataLocation Attr = 0x85\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallDataValue",
              "documentation": {
                "identifier": "AttrCallDataValue",
                "newPage": false,
                "searchKey": "dwarf.AttrCallDataValue",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallDataValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallDataValue Attr = 0x86\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallFile",
              "documentation": {
                "identifier": "AttrCallFile",
                "newPage": false,
                "searchKey": "dwarf.AttrCallFile",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallFile Attr = 0x58\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallLine",
              "documentation": {
                "identifier": "AttrCallLine",
                "newPage": false,
                "searchKey": "dwarf.AttrCallLine",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallLine Attr = 0x59\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallOrigin",
              "documentation": {
                "identifier": "AttrCallOrigin",
                "newPage": false,
                "searchKey": "dwarf.AttrCallOrigin",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallOrigin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallOrigin Attr = 0x7F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallPC",
              "documentation": {
                "identifier": "AttrCallPC",
                "newPage": false,
                "searchKey": "dwarf.AttrCallPC",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallPC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallPC Attr = 0x81\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallParameter",
              "documentation": {
                "identifier": "AttrCallParameter",
                "newPage": false,
                "searchKey": "dwarf.AttrCallParameter",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallParameter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallParameter Attr = 0x80\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallReturnPC",
              "documentation": {
                "identifier": "AttrCallReturnPC",
                "newPage": false,
                "searchKey": "dwarf.AttrCallReturnPC",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallReturnPC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallReturnPC Attr = 0x7D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallTailCall",
              "documentation": {
                "identifier": "AttrCallTailCall",
                "newPage": false,
                "searchKey": "dwarf.AttrCallTailCall",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallTailCall"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallTailCall Attr = 0x82\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallTarget",
              "documentation": {
                "identifier": "AttrCallTarget",
                "newPage": false,
                "searchKey": "dwarf.AttrCallTarget",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallTarget"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallTarget Attr = 0x83\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallTargetClobbered",
              "documentation": {
                "identifier": "AttrCallTargetClobbered",
                "newPage": false,
                "searchKey": "dwarf.AttrCallTargetClobbered",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallTargetClobbered"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallTargetClobbered Attr = 0x84\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCallValue",
              "documentation": {
                "identifier": "AttrCallValue",
                "newPage": false,
                "searchKey": "dwarf.AttrCallValue",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCallValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCallValue Attr = 0x7E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCalling",
              "documentation": {
                "identifier": "AttrCalling",
                "newPage": false,
                "searchKey": "dwarf.AttrCalling",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCalling"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCalling Attr = 0x36\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCommonRef",
              "documentation": {
                "identifier": "AttrCommonRef",
                "newPage": false,
                "searchKey": "dwarf.AttrCommonRef",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCommonRef"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCommonRef Attr = 0x1A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCompDir",
              "documentation": {
                "identifier": "AttrCompDir",
                "newPage": false,
                "searchKey": "dwarf.AttrCompDir",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCompDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCompDir Attr = 0x1B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrConstExpr",
              "documentation": {
                "identifier": "AttrConstExpr",
                "newPage": false,
                "searchKey": "dwarf.AttrConstExpr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrConstExpr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrConstExpr Attr = 0x6C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrConstValue",
              "documentation": {
                "identifier": "AttrConstValue",
                "newPage": false,
                "searchKey": "dwarf.AttrConstValue",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrConstValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrConstValue Attr = 0x1C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrContainingType",
              "documentation": {
                "identifier": "AttrContainingType",
                "newPage": false,
                "searchKey": "dwarf.AttrContainingType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrContainingType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrContainingType Attr = 0x1D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrCount",
              "documentation": {
                "identifier": "AttrCount",
                "newPage": false,
                "searchKey": "dwarf.AttrCount",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrCount Attr = 0x37\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDataBitOffset",
              "documentation": {
                "identifier": "AttrDataBitOffset",
                "newPage": false,
                "searchKey": "dwarf.AttrDataBitOffset",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDataBitOffset"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDataBitOffset Attr = 0x6B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDataLocation",
              "documentation": {
                "identifier": "AttrDataLocation",
                "newPage": false,
                "searchKey": "dwarf.AttrDataLocation",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDataLocation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDataLocation Attr = 0x50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDataMemberLoc",
              "documentation": {
                "identifier": "AttrDataMemberLoc",
                "newPage": false,
                "searchKey": "dwarf.AttrDataMemberLoc",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDataMemberLoc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDataMemberLoc Attr = 0x38\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDecimalScale",
              "documentation": {
                "identifier": "AttrDecimalScale",
                "newPage": false,
                "searchKey": "dwarf.AttrDecimalScale",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDecimalScale"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDecimalScale Attr = 0x5C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDecimalSign",
              "documentation": {
                "identifier": "AttrDecimalSign",
                "newPage": false,
                "searchKey": "dwarf.AttrDecimalSign",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDecimalSign"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDecimalSign Attr = 0x5E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDeclColumn",
              "documentation": {
                "identifier": "AttrDeclColumn",
                "newPage": false,
                "searchKey": "dwarf.AttrDeclColumn",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDeclColumn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDeclColumn Attr = 0x39\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDeclFile",
              "documentation": {
                "identifier": "AttrDeclFile",
                "newPage": false,
                "searchKey": "dwarf.AttrDeclFile",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDeclFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDeclFile Attr = 0x3A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDeclLine",
              "documentation": {
                "identifier": "AttrDeclLine",
                "newPage": false,
                "searchKey": "dwarf.AttrDeclLine",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDeclLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDeclLine Attr = 0x3B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDeclaration",
              "documentation": {
                "identifier": "AttrDeclaration",
                "newPage": false,
                "searchKey": "dwarf.AttrDeclaration",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDeclaration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDeclaration Attr = 0x3C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDefaultValue",
              "documentation": {
                "identifier": "AttrDefaultValue",
                "newPage": false,
                "searchKey": "dwarf.AttrDefaultValue",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDefaultValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDefaultValue Attr = 0x1E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDefaulted",
              "documentation": {
                "identifier": "AttrDefaulted",
                "newPage": false,
                "searchKey": "dwarf.AttrDefaulted",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDefaulted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDefaulted Attr = 0x8B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDeleted",
              "documentation": {
                "identifier": "AttrDeleted",
                "newPage": false,
                "searchKey": "dwarf.AttrDeleted",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDeleted"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDeleted Attr = 0x8A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDescription",
              "documentation": {
                "identifier": "AttrDescription",
                "newPage": false,
                "searchKey": "dwarf.AttrDescription",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDescription"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDescription Attr = 0x5A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDigitCount",
              "documentation": {
                "identifier": "AttrDigitCount",
                "newPage": false,
                "searchKey": "dwarf.AttrDigitCount",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDigitCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDigitCount Attr = 0x5F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDiscr",
              "documentation": {
                "identifier": "AttrDiscr",
                "newPage": false,
                "searchKey": "dwarf.AttrDiscr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDiscr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDiscr Attr = 0x15\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDiscrList",
              "documentation": {
                "identifier": "AttrDiscrList",
                "newPage": false,
                "searchKey": "dwarf.AttrDiscrList",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDiscrList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDiscrList Attr = 0x3D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDiscrValue",
              "documentation": {
                "identifier": "AttrDiscrValue",
                "newPage": false,
                "searchKey": "dwarf.AttrDiscrValue",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDiscrValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDiscrValue Attr = 0x16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrDwoName",
              "documentation": {
                "identifier": "AttrDwoName",
                "newPage": false,
                "searchKey": "dwarf.AttrDwoName",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrDwoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrDwoName Attr = 0x76\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrElemental",
              "documentation": {
                "identifier": "AttrElemental",
                "newPage": false,
                "searchKey": "dwarf.AttrElemental",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrElemental"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrElemental Attr = 0x66\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrEncoding",
              "documentation": {
                "identifier": "AttrEncoding",
                "newPage": false,
                "searchKey": "dwarf.AttrEncoding",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrEncoding Attr = 0x3E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrEndianity",
              "documentation": {
                "identifier": "AttrEndianity",
                "newPage": false,
                "searchKey": "dwarf.AttrEndianity",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrEndianity"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrEndianity Attr = 0x65\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrEntrypc",
              "documentation": {
                "identifier": "AttrEntrypc",
                "newPage": false,
                "searchKey": "dwarf.AttrEntrypc",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrEntrypc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrEntrypc Attr = 0x52\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrEnumClass",
              "documentation": {
                "identifier": "AttrEnumClass",
                "newPage": false,
                "searchKey": "dwarf.AttrEnumClass",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrEnumClass"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrEnumClass Attr = 0x6D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrExplicit",
              "documentation": {
                "identifier": "AttrExplicit",
                "newPage": false,
                "searchKey": "dwarf.AttrExplicit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrExplicit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrExplicit Attr = 0x63\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrExportSymbols",
              "documentation": {
                "identifier": "AttrExportSymbols",
                "newPage": false,
                "searchKey": "dwarf.AttrExportSymbols",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrExportSymbols"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrExportSymbols Attr = 0x89\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrExtension",
              "documentation": {
                "identifier": "AttrExtension",
                "newPage": false,
                "searchKey": "dwarf.AttrExtension",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrExtension"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrExtension Attr = 0x54\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrExternal",
              "documentation": {
                "identifier": "AttrExternal",
                "newPage": false,
                "searchKey": "dwarf.AttrExternal",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrExternal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrExternal Attr = 0x3F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrFrameBase",
              "documentation": {
                "identifier": "AttrFrameBase",
                "newPage": false,
                "searchKey": "dwarf.AttrFrameBase",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrFrameBase"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrFrameBase Attr = 0x40\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrFriend",
              "documentation": {
                "identifier": "AttrFriend",
                "newPage": false,
                "searchKey": "dwarf.AttrFriend",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrFriend"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrFriend Attr = 0x41\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrHighpc",
              "documentation": {
                "identifier": "AttrHighpc",
                "newPage": false,
                "searchKey": "dwarf.AttrHighpc",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrHighpc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrHighpc Attr = 0x12\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrIdentifierCase",
              "documentation": {
                "identifier": "AttrIdentifierCase",
                "newPage": false,
                "searchKey": "dwarf.AttrIdentifierCase",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrIdentifierCase"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrIdentifierCase Attr = 0x42\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrImport",
              "documentation": {
                "identifier": "AttrImport",
                "newPage": false,
                "searchKey": "dwarf.AttrImport",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrImport"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrImport Attr = 0x18\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrInline",
              "documentation": {
                "identifier": "AttrInline",
                "newPage": false,
                "searchKey": "dwarf.AttrInline",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrInline"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrInline Attr = 0x20\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrIsOptional",
              "documentation": {
                "identifier": "AttrIsOptional",
                "newPage": false,
                "searchKey": "dwarf.AttrIsOptional",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrIsOptional"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrIsOptional Attr = 0x21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrLanguage",
              "documentation": {
                "identifier": "AttrLanguage",
                "newPage": false,
                "searchKey": "dwarf.AttrLanguage",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrLanguage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrLanguage Attr = 0x13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrLinkageName",
              "documentation": {
                "identifier": "AttrLinkageName",
                "newPage": false,
                "searchKey": "dwarf.AttrLinkageName",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrLinkageName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrLinkageName Attr = 0x6E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrLocation",
              "documentation": {
                "identifier": "AttrLocation",
                "newPage": false,
                "searchKey": "dwarf.AttrLocation",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrLocation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrLocation Attr = 0x02\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrLoclistsBase",
              "documentation": {
                "identifier": "AttrLoclistsBase",
                "newPage": false,
                "searchKey": "dwarf.AttrLoclistsBase",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrLoclistsBase"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrLoclistsBase Attr = 0x8C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrLowerBound",
              "documentation": {
                "identifier": "AttrLowerBound",
                "newPage": false,
                "searchKey": "dwarf.AttrLowerBound",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrLowerBound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrLowerBound Attr = 0x22\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrLowpc",
              "documentation": {
                "identifier": "AttrLowpc",
                "newPage": false,
                "searchKey": "dwarf.AttrLowpc",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrLowpc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrLowpc Attr = 0x11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrMacroInfo",
              "documentation": {
                "identifier": "AttrMacroInfo",
                "newPage": false,
                "searchKey": "dwarf.AttrMacroInfo",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrMacroInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrMacroInfo Attr = 0x43\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrMacros",
              "documentation": {
                "identifier": "AttrMacros",
                "newPage": false,
                "searchKey": "dwarf.AttrMacros",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrMacros"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrMacros Attr = 0x79\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrMainSubprogram",
              "documentation": {
                "identifier": "AttrMainSubprogram",
                "newPage": false,
                "searchKey": "dwarf.AttrMainSubprogram",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrMainSubprogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrMainSubprogram Attr = 0x6A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrMutable",
              "documentation": {
                "identifier": "AttrMutable",
                "newPage": false,
                "searchKey": "dwarf.AttrMutable",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrMutable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrMutable Attr = 0x61\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrName",
              "documentation": {
                "identifier": "AttrName",
                "newPage": false,
                "searchKey": "dwarf.AttrName",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrName Attr = 0x03\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrNamelistItem",
              "documentation": {
                "identifier": "AttrNamelistItem",
                "newPage": false,
                "searchKey": "dwarf.AttrNamelistItem",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrNamelistItem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrNamelistItem Attr = 0x44\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrNoreturn",
              "documentation": {
                "identifier": "AttrNoreturn",
                "newPage": false,
                "searchKey": "dwarf.AttrNoreturn",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrNoreturn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrNoreturn Attr = 0x87\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrObjectPointer",
              "documentation": {
                "identifier": "AttrObjectPointer",
                "newPage": false,
                "searchKey": "dwarf.AttrObjectPointer",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrObjectPointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrObjectPointer Attr = 0x64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrOrdering",
              "documentation": {
                "identifier": "AttrOrdering",
                "newPage": false,
                "searchKey": "dwarf.AttrOrdering",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrOrdering"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrOrdering Attr = 0x09\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrPictureString",
              "documentation": {
                "identifier": "AttrPictureString",
                "newPage": false,
                "searchKey": "dwarf.AttrPictureString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrPictureString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrPictureString Attr = 0x60\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrPriority",
              "documentation": {
                "identifier": "AttrPriority",
                "newPage": false,
                "searchKey": "dwarf.AttrPriority",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrPriority"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrPriority Attr = 0x45\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrProducer",
              "documentation": {
                "identifier": "AttrProducer",
                "newPage": false,
                "searchKey": "dwarf.AttrProducer",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrProducer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrProducer Attr = 0x25\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrPrototyped",
              "documentation": {
                "identifier": "AttrPrototyped",
                "newPage": false,
                "searchKey": "dwarf.AttrPrototyped",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrPrototyped"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrPrototyped Attr = 0x27\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrPure",
              "documentation": {
                "identifier": "AttrPure",
                "newPage": false,
                "searchKey": "dwarf.AttrPure",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrPure"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrPure Attr = 0x67\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrRanges",
              "documentation": {
                "identifier": "AttrRanges",
                "newPage": false,
                "searchKey": "dwarf.AttrRanges",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrRanges"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrRanges Attr = 0x55\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrRank",
              "documentation": {
                "identifier": "AttrRank",
                "newPage": false,
                "searchKey": "dwarf.AttrRank",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrRank"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrRank Attr = 0x71\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrRecursive",
              "documentation": {
                "identifier": "AttrRecursive",
                "newPage": false,
                "searchKey": "dwarf.AttrRecursive",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrRecursive"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrRecursive Attr = 0x68\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrReference",
              "documentation": {
                "identifier": "AttrReference",
                "newPage": false,
                "searchKey": "dwarf.AttrReference",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrReference"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrReference Attr = 0x77\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrReturnAddr",
              "documentation": {
                "identifier": "AttrReturnAddr",
                "newPage": false,
                "searchKey": "dwarf.AttrReturnAddr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrReturnAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrReturnAddr Attr = 0x2A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrRnglistsBase",
              "documentation": {
                "identifier": "AttrRnglistsBase",
                "newPage": false,
                "searchKey": "dwarf.AttrRnglistsBase",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrRnglistsBase"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrRnglistsBase Attr = 0x74\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrRvalueReference",
              "documentation": {
                "identifier": "AttrRvalueReference",
                "newPage": false,
                "searchKey": "dwarf.AttrRvalueReference",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrRvalueReference"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrRvalueReference Attr = 0x78\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrSegment",
              "documentation": {
                "identifier": "AttrSegment",
                "newPage": false,
                "searchKey": "dwarf.AttrSegment",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrSegment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrSegment Attr = 0x46\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrSibling",
              "documentation": {
                "identifier": "AttrSibling",
                "newPage": false,
                "searchKey": "dwarf.AttrSibling",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrSibling"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrSibling Attr = 0x01\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrSignature",
              "documentation": {
                "identifier": "AttrSignature",
                "newPage": false,
                "searchKey": "dwarf.AttrSignature",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrSignature Attr = 0x69\n```\n\nThe following are new in DWARF 4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrSmall",
              "documentation": {
                "identifier": "AttrSmall",
                "newPage": false,
                "searchKey": "dwarf.AttrSmall",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrSmall"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrSmall Attr = 0x5D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrSpecification",
              "documentation": {
                "identifier": "AttrSpecification",
                "newPage": false,
                "searchKey": "dwarf.AttrSpecification",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrSpecification"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrSpecification Attr = 0x47\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStartScope",
              "documentation": {
                "identifier": "AttrStartScope",
                "newPage": false,
                "searchKey": "dwarf.AttrStartScope",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStartScope"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStartScope Attr = 0x2C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStaticLink",
              "documentation": {
                "identifier": "AttrStaticLink",
                "newPage": false,
                "searchKey": "dwarf.AttrStaticLink",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStaticLink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStaticLink Attr = 0x48\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStmtList",
              "documentation": {
                "identifier": "AttrStmtList",
                "newPage": false,
                "searchKey": "dwarf.AttrStmtList",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStmtList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStmtList Attr = 0x10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStrOffsetsBase",
              "documentation": {
                "identifier": "AttrStrOffsetsBase",
                "newPage": false,
                "searchKey": "dwarf.AttrStrOffsetsBase",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStrOffsetsBase"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStrOffsetsBase Attr = 0x72\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStride",
              "documentation": {
                "identifier": "AttrStride",
                "newPage": false,
                "searchKey": "dwarf.AttrStride",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStride"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStride Attr = 0x51\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStrideSize",
              "documentation": {
                "identifier": "AttrStrideSize",
                "newPage": false,
                "searchKey": "dwarf.AttrStrideSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStrideSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStrideSize Attr = 0x2E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStringLength",
              "documentation": {
                "identifier": "AttrStringLength",
                "newPage": false,
                "searchKey": "dwarf.AttrStringLength",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStringLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStringLength Attr = 0x19\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStringLengthBitSize",
              "documentation": {
                "identifier": "AttrStringLengthBitSize",
                "newPage": false,
                "searchKey": "dwarf.AttrStringLengthBitSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStringLengthBitSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStringLengthBitSize Attr = 0x6F\n```\n\nThe following are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrStringLengthByteSize",
              "documentation": {
                "identifier": "AttrStringLengthByteSize",
                "newPage": false,
                "searchKey": "dwarf.AttrStringLengthByteSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrStringLengthByteSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrStringLengthByteSize Attr = 0x70\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrThreadsScaled",
              "documentation": {
                "identifier": "AttrThreadsScaled",
                "newPage": false,
                "searchKey": "dwarf.AttrThreadsScaled",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrThreadsScaled"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrThreadsScaled Attr = 0x62\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrTrampoline",
              "documentation": {
                "identifier": "AttrTrampoline",
                "newPage": false,
                "searchKey": "dwarf.AttrTrampoline",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrTrampoline"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrTrampoline Attr = 0x56\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrType",
              "documentation": {
                "identifier": "AttrType",
                "newPage": false,
                "searchKey": "dwarf.AttrType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrType Attr = 0x49\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrUpperBound",
              "documentation": {
                "identifier": "AttrUpperBound",
                "newPage": false,
                "searchKey": "dwarf.AttrUpperBound",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrUpperBound"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrUpperBound Attr = 0x2F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrUseLocation",
              "documentation": {
                "identifier": "AttrUseLocation",
                "newPage": false,
                "searchKey": "dwarf.AttrUseLocation",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrUseLocation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrUseLocation Attr = 0x4A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrUseUTF8",
              "documentation": {
                "identifier": "AttrUseUTF8",
                "newPage": false,
                "searchKey": "dwarf.AttrUseUTF8",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrUseUTF8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrUseUTF8 Attr = 0x53\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrVarParam",
              "documentation": {
                "identifier": "AttrVarParam",
                "newPage": false,
                "searchKey": "dwarf.AttrVarParam",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrVarParam"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrVarParam Attr = 0x4B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrVirtuality",
              "documentation": {
                "identifier": "AttrVirtuality",
                "newPage": false,
                "searchKey": "dwarf.AttrVirtuality",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrVirtuality"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrVirtuality Attr = 0x4C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrVisibility",
              "documentation": {
                "identifier": "AttrVisibility",
                "newPage": false,
                "searchKey": "dwarf.AttrVisibility",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrVisibility"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrVisibility Attr = 0x17\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#AttrVtableElemLoc",
              "documentation": {
                "identifier": "AttrVtableElemLoc",
                "newPage": false,
                "searchKey": "dwarf.AttrVtableElemLoc",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const AttrVtableElemLoc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AttrVtableElemLoc Attr = 0x4D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassAddrPtr",
              "documentation": {
                "identifier": "ClassAddrPtr",
                "newPage": false,
                "searchKey": "dwarf.ClassAddrPtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassAddrPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassAddrPtr\n```\n\nClassAddrPtr represents values that are an int64 offset into the \"addr\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassAddress",
              "documentation": {
                "identifier": "ClassAddress",
                "newPage": false,
                "searchKey": "dwarf.ClassAddress",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassAddress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassAddress\n```\n\nClassAddress represents values of type uint64 that are addresses on the target machine. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassBlock",
              "documentation": {
                "identifier": "ClassBlock",
                "newPage": false,
                "searchKey": "dwarf.ClassBlock",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassBlock\n```\n\nClassBlock represents values of type []byte whose interpretation depends on the attribute. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassConstant",
              "documentation": {
                "identifier": "ClassConstant",
                "newPage": false,
                "searchKey": "dwarf.ClassConstant",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassConstant"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassConstant\n```\n\nClassConstant represents values of type int64 that are constants. The interpretation of this constant depends on the attribute. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassExprLoc",
              "documentation": {
                "identifier": "ClassExprLoc",
                "newPage": false,
                "searchKey": "dwarf.ClassExprLoc",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassExprLoc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassExprLoc\n```\n\nClassExprLoc represents values of type []byte that contain an encoded DWARF expression or location description. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassFlag",
              "documentation": {
                "identifier": "ClassFlag",
                "newPage": false,
                "searchKey": "dwarf.ClassFlag",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassFlag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassFlag\n```\n\nClassFlag represents values of type bool. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassLinePtr",
              "documentation": {
                "identifier": "ClassLinePtr",
                "newPage": false,
                "searchKey": "dwarf.ClassLinePtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassLinePtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassLinePtr\n```\n\nClassLinePtr represents values that are an int64 offset into the \"line\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassLocList",
              "documentation": {
                "identifier": "ClassLocList",
                "newPage": false,
                "searchKey": "dwarf.ClassLocList",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassLocList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassLocList\n```\n\nClassLocList represents values that are an int64 offset into the \"loclists\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassLocListPtr",
              "documentation": {
                "identifier": "ClassLocListPtr",
                "newPage": false,
                "searchKey": "dwarf.ClassLocListPtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassLocListPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassLocListPtr\n```\n\nClassLocListPtr represents values that are an int64 offset into the \"loclist\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassMacPtr",
              "documentation": {
                "identifier": "ClassMacPtr",
                "newPage": false,
                "searchKey": "dwarf.ClassMacPtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassMacPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassMacPtr\n```\n\nClassMacPtr represents values that are an int64 offset into the \"mac\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassRangeListPtr",
              "documentation": {
                "identifier": "ClassRangeListPtr",
                "newPage": false,
                "searchKey": "dwarf.ClassRangeListPtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassRangeListPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassRangeListPtr\n```\n\nClassRangeListPtr represents values that are an int64 offset into the \"rangelist\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassReference",
              "documentation": {
                "identifier": "ClassReference",
                "newPage": false,
                "searchKey": "dwarf.ClassReference",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassReference"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassReference\n```\n\nClassReference represents values that are an Offset offset of an Entry in the info section (for use with Reader.Seek). The DWARF specification combines ClassReference and ClassReferenceSig into class \"reference\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassReferenceAlt",
              "documentation": {
                "identifier": "ClassReferenceAlt",
                "newPage": false,
                "searchKey": "dwarf.ClassReferenceAlt",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassReferenceAlt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassReferenceAlt\n```\n\nClassReferenceAlt represents values of type int64 that are an offset into the DWARF \"info\" section of an alternate object file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassReferenceSig",
              "documentation": {
                "identifier": "ClassReferenceSig",
                "newPage": false,
                "searchKey": "dwarf.ClassReferenceSig",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassReferenceSig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassReferenceSig\n```\n\nClassReferenceSig represents values that are a uint64 type signature referencing a type Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassRngList",
              "documentation": {
                "identifier": "ClassRngList",
                "newPage": false,
                "searchKey": "dwarf.ClassRngList",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassRngList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassRngList\n```\n\nClassRngList represents values that are a uint64 offset from the base of the \"rnglists\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassRngListsPtr",
              "documentation": {
                "identifier": "ClassRngListsPtr",
                "newPage": false,
                "searchKey": "dwarf.ClassRngListsPtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassRngListsPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassRngListsPtr\n```\n\nClassRngListsPtr represents values that are an int64 offset into the \"rnglists\" section. These are used as the base for ClassRngList values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassStrOffsetsPtr",
              "documentation": {
                "identifier": "ClassStrOffsetsPtr",
                "newPage": false,
                "searchKey": "dwarf.ClassStrOffsetsPtr",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassStrOffsetsPtr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassStrOffsetsPtr\n```\n\nClassStrOffsetsPtr represents values that are an int64 offset into the \"str_offsets\" section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassString",
              "documentation": {
                "identifier": "ClassString",
                "newPage": false,
                "searchKey": "dwarf.ClassString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassString\n```\n\nClassString represents values that are strings. If the compilation unit specifies the AttrUseUTF8 flag (strongly recommended), the string value will be encoded in UTF-8. Otherwise, the encoding is unspecified. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassStringAlt",
              "documentation": {
                "identifier": "ClassStringAlt",
                "newPage": false,
                "searchKey": "dwarf.ClassStringAlt",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassStringAlt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassStringAlt\n```\n\nClassStringAlt represents values of type int64 that are an offset into the DWARF string section of an alternate object file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ClassUnknown",
              "documentation": {
                "identifier": "ClassUnknown",
                "newPage": false,
                "searchKey": "dwarf.ClassUnknown",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassUnknown"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassUnknown Class = iota\n```\n\nClassUnknown represents values of unknown DWARF class. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagAccessDeclaration",
              "documentation": {
                "identifier": "TagAccessDeclaration",
                "newPage": false,
                "searchKey": "dwarf.TagAccessDeclaration",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagAccessDeclaration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagAccessDeclaration Tag = 0x23\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagArrayType",
              "documentation": {
                "identifier": "TagArrayType",
                "newPage": false,
                "searchKey": "dwarf.TagArrayType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagArrayType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagArrayType Tag = 0x01\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagAtomicType",
              "documentation": {
                "identifier": "TagAtomicType",
                "newPage": false,
                "searchKey": "dwarf.TagAtomicType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagAtomicType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagAtomicType Tag = 0x47\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagBaseType",
              "documentation": {
                "identifier": "TagBaseType",
                "newPage": false,
                "searchKey": "dwarf.TagBaseType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagBaseType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagBaseType Tag = 0x24\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCallSite",
              "documentation": {
                "identifier": "TagCallSite",
                "newPage": false,
                "searchKey": "dwarf.TagCallSite",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCallSite"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCallSite Tag = 0x48\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCallSiteParameter",
              "documentation": {
                "identifier": "TagCallSiteParameter",
                "newPage": false,
                "searchKey": "dwarf.TagCallSiteParameter",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCallSiteParameter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCallSiteParameter Tag = 0x49\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCatchDwarfBlock",
              "documentation": {
                "identifier": "TagCatchDwarfBlock",
                "newPage": false,
                "searchKey": "dwarf.TagCatchDwarfBlock",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCatchDwarfBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCatchDwarfBlock Tag = 0x25\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagClassType",
              "documentation": {
                "identifier": "TagClassType",
                "newPage": false,
                "searchKey": "dwarf.TagClassType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagClassType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagClassType Tag = 0x02\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCoarrayType",
              "documentation": {
                "identifier": "TagCoarrayType",
                "newPage": false,
                "searchKey": "dwarf.TagCoarrayType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCoarrayType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCoarrayType Tag = 0x44\n```\n\nThe following are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCommonDwarfBlock",
              "documentation": {
                "identifier": "TagCommonDwarfBlock",
                "newPage": false,
                "searchKey": "dwarf.TagCommonDwarfBlock",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCommonDwarfBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCommonDwarfBlock Tag = 0x1A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCommonInclusion",
              "documentation": {
                "identifier": "TagCommonInclusion",
                "newPage": false,
                "searchKey": "dwarf.TagCommonInclusion",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCommonInclusion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCommonInclusion Tag = 0x1B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCompileUnit",
              "documentation": {
                "identifier": "TagCompileUnit",
                "newPage": false,
                "searchKey": "dwarf.TagCompileUnit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCompileUnit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCompileUnit Tag = 0x11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagCondition",
              "documentation": {
                "identifier": "TagCondition",
                "newPage": false,
                "searchKey": "dwarf.TagCondition",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagCondition"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagCondition Tag = 0x3F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagConstType",
              "documentation": {
                "identifier": "TagConstType",
                "newPage": false,
                "searchKey": "dwarf.TagConstType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagConstType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagConstType Tag = 0x26\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagConstant",
              "documentation": {
                "identifier": "TagConstant",
                "newPage": false,
                "searchKey": "dwarf.TagConstant",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagConstant"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagConstant Tag = 0x27\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagDwarfProcedure",
              "documentation": {
                "identifier": "TagDwarfProcedure",
                "newPage": false,
                "searchKey": "dwarf.TagDwarfProcedure",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagDwarfProcedure"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagDwarfProcedure Tag = 0x36\n```\n\nThe following are new in DWARF 3. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagDynamicType",
              "documentation": {
                "identifier": "TagDynamicType",
                "newPage": false,
                "searchKey": "dwarf.TagDynamicType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagDynamicType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagDynamicType Tag = 0x46\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagEntryPoint",
              "documentation": {
                "identifier": "TagEntryPoint",
                "newPage": false,
                "searchKey": "dwarf.TagEntryPoint",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagEntryPoint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagEntryPoint Tag = 0x03\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagEnumerationType",
              "documentation": {
                "identifier": "TagEnumerationType",
                "newPage": false,
                "searchKey": "dwarf.TagEnumerationType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagEnumerationType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagEnumerationType Tag = 0x04\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagEnumerator",
              "documentation": {
                "identifier": "TagEnumerator",
                "newPage": false,
                "searchKey": "dwarf.TagEnumerator",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagEnumerator"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagEnumerator Tag = 0x28\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagFileType",
              "documentation": {
                "identifier": "TagFileType",
                "newPage": false,
                "searchKey": "dwarf.TagFileType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagFileType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagFileType Tag = 0x29\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagFormalParameter",
              "documentation": {
                "identifier": "TagFormalParameter",
                "newPage": false,
                "searchKey": "dwarf.TagFormalParameter",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagFormalParameter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagFormalParameter Tag = 0x05\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagFriend",
              "documentation": {
                "identifier": "TagFriend",
                "newPage": false,
                "searchKey": "dwarf.TagFriend",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagFriend"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagFriend Tag = 0x2A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagGenericSubrange",
              "documentation": {
                "identifier": "TagGenericSubrange",
                "newPage": false,
                "searchKey": "dwarf.TagGenericSubrange",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagGenericSubrange"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagGenericSubrange Tag = 0x45\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagImmutableType",
              "documentation": {
                "identifier": "TagImmutableType",
                "newPage": false,
                "searchKey": "dwarf.TagImmutableType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagImmutableType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagImmutableType Tag = 0x4B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagImportedDeclaration",
              "documentation": {
                "identifier": "TagImportedDeclaration",
                "newPage": false,
                "searchKey": "dwarf.TagImportedDeclaration",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagImportedDeclaration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagImportedDeclaration Tag = 0x08\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagImportedModule",
              "documentation": {
                "identifier": "TagImportedModule",
                "newPage": false,
                "searchKey": "dwarf.TagImportedModule",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagImportedModule"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagImportedModule Tag = 0x3A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagImportedUnit",
              "documentation": {
                "identifier": "TagImportedUnit",
                "newPage": false,
                "searchKey": "dwarf.TagImportedUnit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagImportedUnit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagImportedUnit Tag = 0x3D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagInheritance",
              "documentation": {
                "identifier": "TagInheritance",
                "newPage": false,
                "searchKey": "dwarf.TagInheritance",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagInheritance"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagInheritance Tag = 0x1C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagInlinedSubroutine",
              "documentation": {
                "identifier": "TagInlinedSubroutine",
                "newPage": false,
                "searchKey": "dwarf.TagInlinedSubroutine",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagInlinedSubroutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagInlinedSubroutine Tag = 0x1D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagInterfaceType",
              "documentation": {
                "identifier": "TagInterfaceType",
                "newPage": false,
                "searchKey": "dwarf.TagInterfaceType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagInterfaceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagInterfaceType Tag = 0x38\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagLabel",
              "documentation": {
                "identifier": "TagLabel",
                "newPage": false,
                "searchKey": "dwarf.TagLabel",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagLabel"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagLabel Tag = 0x0A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagLexDwarfBlock",
              "documentation": {
                "identifier": "TagLexDwarfBlock",
                "newPage": false,
                "searchKey": "dwarf.TagLexDwarfBlock",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagLexDwarfBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagLexDwarfBlock Tag = 0x0B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagMember",
              "documentation": {
                "identifier": "TagMember",
                "newPage": false,
                "searchKey": "dwarf.TagMember",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagMember"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagMember Tag = 0x0D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagModule",
              "documentation": {
                "identifier": "TagModule",
                "newPage": false,
                "searchKey": "dwarf.TagModule",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagModule"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagModule Tag = 0x1E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagMutableType",
              "documentation": {
                "identifier": "TagMutableType",
                "newPage": false,
                "searchKey": "dwarf.TagMutableType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagMutableType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagMutableType Tag = 0x3E // Later removed from DWARF.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagNamelist",
              "documentation": {
                "identifier": "TagNamelist",
                "newPage": false,
                "searchKey": "dwarf.TagNamelist",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagNamelist"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagNamelist Tag = 0x2B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagNamelistItem",
              "documentation": {
                "identifier": "TagNamelistItem",
                "newPage": false,
                "searchKey": "dwarf.TagNamelistItem",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagNamelistItem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagNamelistItem Tag = 0x2C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagNamespace",
              "documentation": {
                "identifier": "TagNamespace",
                "newPage": false,
                "searchKey": "dwarf.TagNamespace",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagNamespace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagNamespace Tag = 0x39\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagPackedType",
              "documentation": {
                "identifier": "TagPackedType",
                "newPage": false,
                "searchKey": "dwarf.TagPackedType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagPackedType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagPackedType Tag = 0x2D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagPartialUnit",
              "documentation": {
                "identifier": "TagPartialUnit",
                "newPage": false,
                "searchKey": "dwarf.TagPartialUnit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagPartialUnit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagPartialUnit Tag = 0x3C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagPointerType",
              "documentation": {
                "identifier": "TagPointerType",
                "newPage": false,
                "searchKey": "dwarf.TagPointerType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagPointerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagPointerType Tag = 0x0F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagPtrToMemberType",
              "documentation": {
                "identifier": "TagPtrToMemberType",
                "newPage": false,
                "searchKey": "dwarf.TagPtrToMemberType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagPtrToMemberType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagPtrToMemberType Tag = 0x1F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagReferenceType",
              "documentation": {
                "identifier": "TagReferenceType",
                "newPage": false,
                "searchKey": "dwarf.TagReferenceType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagReferenceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagReferenceType Tag = 0x10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagRestrictType",
              "documentation": {
                "identifier": "TagRestrictType",
                "newPage": false,
                "searchKey": "dwarf.TagRestrictType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagRestrictType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagRestrictType Tag = 0x37\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagRvalueReferenceType",
              "documentation": {
                "identifier": "TagRvalueReferenceType",
                "newPage": false,
                "searchKey": "dwarf.TagRvalueReferenceType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagRvalueReferenceType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagRvalueReferenceType Tag = 0x42\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagSetType",
              "documentation": {
                "identifier": "TagSetType",
                "newPage": false,
                "searchKey": "dwarf.TagSetType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSetType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSetType Tag = 0x20\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagSharedType",
              "documentation": {
                "identifier": "TagSharedType",
                "newPage": false,
                "searchKey": "dwarf.TagSharedType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSharedType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSharedType Tag = 0x40\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagSkeletonUnit",
              "documentation": {
                "identifier": "TagSkeletonUnit",
                "newPage": false,
                "searchKey": "dwarf.TagSkeletonUnit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSkeletonUnit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSkeletonUnit Tag = 0x4A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagStringType",
              "documentation": {
                "identifier": "TagStringType",
                "newPage": false,
                "searchKey": "dwarf.TagStringType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagStringType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagStringType Tag = 0x12\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagStructType",
              "documentation": {
                "identifier": "TagStructType",
                "newPage": false,
                "searchKey": "dwarf.TagStructType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagStructType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagStructType Tag = 0x13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagSubprogram",
              "documentation": {
                "identifier": "TagSubprogram",
                "newPage": false,
                "searchKey": "dwarf.TagSubprogram",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSubprogram"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSubprogram Tag = 0x2E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagSubrangeType",
              "documentation": {
                "identifier": "TagSubrangeType",
                "newPage": false,
                "searchKey": "dwarf.TagSubrangeType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSubrangeType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSubrangeType Tag = 0x21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagSubroutineType",
              "documentation": {
                "identifier": "TagSubroutineType",
                "newPage": false,
                "searchKey": "dwarf.TagSubroutineType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSubroutineType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSubroutineType Tag = 0x15\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagTemplateAlias",
              "documentation": {
                "identifier": "TagTemplateAlias",
                "newPage": false,
                "searchKey": "dwarf.TagTemplateAlias",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagTemplateAlias"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagTemplateAlias Tag = 0x43\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagTemplateTypeParameter",
              "documentation": {
                "identifier": "TagTemplateTypeParameter",
                "newPage": false,
                "searchKey": "dwarf.TagTemplateTypeParameter",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagTemplateTypeParameter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagTemplateTypeParameter Tag = 0x2F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagTemplateValueParameter",
              "documentation": {
                "identifier": "TagTemplateValueParameter",
                "newPage": false,
                "searchKey": "dwarf.TagTemplateValueParameter",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagTemplateValueParameter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagTemplateValueParameter Tag = 0x30\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagThrownType",
              "documentation": {
                "identifier": "TagThrownType",
                "newPage": false,
                "searchKey": "dwarf.TagThrownType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagThrownType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagThrownType Tag = 0x31\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagTryDwarfBlock",
              "documentation": {
                "identifier": "TagTryDwarfBlock",
                "newPage": false,
                "searchKey": "dwarf.TagTryDwarfBlock",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagTryDwarfBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagTryDwarfBlock Tag = 0x32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagTypeUnit",
              "documentation": {
                "identifier": "TagTypeUnit",
                "newPage": false,
                "searchKey": "dwarf.TagTypeUnit",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagTypeUnit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagTypeUnit Tag = 0x41\n```\n\nThe following are new in DWARF 4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagTypedef",
              "documentation": {
                "identifier": "TagTypedef",
                "newPage": false,
                "searchKey": "dwarf.TagTypedef",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagTypedef"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagTypedef Tag = 0x16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagUnionType",
              "documentation": {
                "identifier": "TagUnionType",
                "newPage": false,
                "searchKey": "dwarf.TagUnionType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagUnionType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagUnionType Tag = 0x17\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagUnspecifiedParameters",
              "documentation": {
                "identifier": "TagUnspecifiedParameters",
                "newPage": false,
                "searchKey": "dwarf.TagUnspecifiedParameters",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagUnspecifiedParameters"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagUnspecifiedParameters Tag = 0x18\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagUnspecifiedType",
              "documentation": {
                "identifier": "TagUnspecifiedType",
                "newPage": false,
                "searchKey": "dwarf.TagUnspecifiedType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagUnspecifiedType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagUnspecifiedType Tag = 0x3B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagVariable",
              "documentation": {
                "identifier": "TagVariable",
                "newPage": false,
                "searchKey": "dwarf.TagVariable",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagVariable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagVariable Tag = 0x34\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagVariant",
              "documentation": {
                "identifier": "TagVariant",
                "newPage": false,
                "searchKey": "dwarf.TagVariant",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagVariant"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagVariant Tag = 0x19\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagVariantPart",
              "documentation": {
                "identifier": "TagVariantPart",
                "newPage": false,
                "searchKey": "dwarf.TagVariantPart",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagVariantPart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagVariantPart Tag = 0x33\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagVolatileType",
              "documentation": {
                "identifier": "TagVolatileType",
                "newPage": false,
                "searchKey": "dwarf.TagVolatileType",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagVolatileType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagVolatileType Tag = 0x35\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TagWithStmt",
              "documentation": {
                "identifier": "TagWithStmt",
                "newPage": false,
                "searchKey": "dwarf.TagWithStmt",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagWithStmt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagWithStmt Tag = 0x22\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encASCII",
              "documentation": {
                "identifier": "encASCII",
                "newPage": false,
                "searchKey": "dwarf.encASCII",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encASCII"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encASCII = 0x12\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encAddress",
              "documentation": {
                "identifier": "encAddress",
                "newPage": false,
                "searchKey": "dwarf.encAddress",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encAddress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encAddress = 0x01\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encBoolean",
              "documentation": {
                "identifier": "encBoolean",
                "newPage": false,
                "searchKey": "dwarf.encBoolean",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encBoolean"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encBoolean = 0x02\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encComplexFloat",
              "documentation": {
                "identifier": "encComplexFloat",
                "newPage": false,
                "searchKey": "dwarf.encComplexFloat",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encComplexFloat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encComplexFloat = 0x03\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encDecimalFloat",
              "documentation": {
                "identifier": "encDecimalFloat",
                "newPage": false,
                "searchKey": "dwarf.encDecimalFloat",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encDecimalFloat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encDecimalFloat = 0x0F\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encEdited",
              "documentation": {
                "identifier": "encEdited",
                "newPage": false,
                "searchKey": "dwarf.encEdited",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encEdited"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encEdited = 0x0C\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encFloat",
              "documentation": {
                "identifier": "encFloat",
                "newPage": false,
                "searchKey": "dwarf.encFloat",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encFloat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encFloat = 0x04\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encImaginaryFloat",
              "documentation": {
                "identifier": "encImaginaryFloat",
                "newPage": false,
                "searchKey": "dwarf.encImaginaryFloat",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encImaginaryFloat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encImaginaryFloat = 0x09\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\nThe following are new in DWARF 3. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encNumericString",
              "documentation": {
                "identifier": "encNumericString",
                "newPage": false,
                "searchKey": "dwarf.encNumericString",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encNumericString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encNumericString = 0x0B\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encPackedDecimal",
              "documentation": {
                "identifier": "encPackedDecimal",
                "newPage": false,
                "searchKey": "dwarf.encPackedDecimal",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encPackedDecimal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encPackedDecimal = 0x0A\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encSigned",
              "documentation": {
                "identifier": "encSigned",
                "newPage": false,
                "searchKey": "dwarf.encSigned",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encSigned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encSigned = 0x05\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encSignedChar",
              "documentation": {
                "identifier": "encSignedChar",
                "newPage": false,
                "searchKey": "dwarf.encSignedChar",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encSignedChar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encSignedChar = 0x06\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encSignedFixed",
              "documentation": {
                "identifier": "encSignedFixed",
                "newPage": false,
                "searchKey": "dwarf.encSignedFixed",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encSignedFixed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encSignedFixed = 0x0D\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encUCS",
              "documentation": {
                "identifier": "encUCS",
                "newPage": false,
                "searchKey": "dwarf.encUCS",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encUCS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encUCS = 0x11\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\nThe following are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encUTF",
              "documentation": {
                "identifier": "encUTF",
                "newPage": false,
                "searchKey": "dwarf.encUTF",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encUTF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encUTF = 0x10\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\nThe following are new in DWARF 4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encUnsigned",
              "documentation": {
                "identifier": "encUnsigned",
                "newPage": false,
                "searchKey": "dwarf.encUnsigned",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encUnsigned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encUnsigned = 0x07\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encUnsignedChar",
              "documentation": {
                "identifier": "encUnsignedChar",
                "newPage": false,
                "searchKey": "dwarf.encUnsignedChar",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encUnsignedChar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encUnsignedChar = 0x08\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#encUnsignedFixed",
              "documentation": {
                "identifier": "encUnsignedFixed",
                "newPage": false,
                "searchKey": "dwarf.encUnsignedFixed",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encUnsignedFixed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encUnsignedFixed = 0x0E\n```\n\nBasic type encodings -- the value for AttrEncoding in a TagBaseType Entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formAddr",
              "documentation": {
                "identifier": "formAddr",
                "newPage": false,
                "searchKey": "dwarf.formAddr",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formAddr format = 0x01\n```\n\nvalue formats \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formAddrx",
              "documentation": {
                "identifier": "formAddrx",
                "newPage": false,
                "searchKey": "dwarf.formAddrx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formAddrx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formAddrx format = 0x1B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formAddrx1",
              "documentation": {
                "identifier": "formAddrx1",
                "newPage": false,
                "searchKey": "dwarf.formAddrx1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formAddrx1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formAddrx1 format = 0x29\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formAddrx2",
              "documentation": {
                "identifier": "formAddrx2",
                "newPage": false,
                "searchKey": "dwarf.formAddrx2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formAddrx2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formAddrx2 format = 0x2A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formAddrx3",
              "documentation": {
                "identifier": "formAddrx3",
                "newPage": false,
                "searchKey": "dwarf.formAddrx3",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formAddrx3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formAddrx3 format = 0x2B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formAddrx4",
              "documentation": {
                "identifier": "formAddrx4",
                "newPage": false,
                "searchKey": "dwarf.formAddrx4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formAddrx4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formAddrx4 format = 0x2C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formData1",
              "documentation": {
                "identifier": "formData1",
                "newPage": false,
                "searchKey": "dwarf.formData1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formData1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formData1 format = 0x0B\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formData16",
              "documentation": {
                "identifier": "formData16",
                "newPage": false,
                "searchKey": "dwarf.formData16",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formData16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formData16 format = 0x1E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formData2",
              "documentation": {
                "identifier": "formData2",
                "newPage": false,
                "searchKey": "dwarf.formData2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formData2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formData2 format = 0x05\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formData4",
              "documentation": {
                "identifier": "formData4",
                "newPage": false,
                "searchKey": "dwarf.formData4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formData4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formData4 format = 0x06\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formData8",
              "documentation": {
                "identifier": "formData8",
                "newPage": false,
                "searchKey": "dwarf.formData8",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formData8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formData8 format = 0x07\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formDwarfBlock",
              "documentation": {
                "identifier": "formDwarfBlock",
                "newPage": false,
                "searchKey": "dwarf.formDwarfBlock",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formDwarfBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formDwarfBlock format = 0x09\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formDwarfBlock1",
              "documentation": {
                "identifier": "formDwarfBlock1",
                "newPage": false,
                "searchKey": "dwarf.formDwarfBlock1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formDwarfBlock1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formDwarfBlock1 format = 0x0A\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formDwarfBlock2",
              "documentation": {
                "identifier": "formDwarfBlock2",
                "newPage": false,
                "searchKey": "dwarf.formDwarfBlock2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formDwarfBlock2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formDwarfBlock2 format = 0x03\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formDwarfBlock4",
              "documentation": {
                "identifier": "formDwarfBlock4",
                "newPage": false,
                "searchKey": "dwarf.formDwarfBlock4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formDwarfBlock4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formDwarfBlock4 format = 0x04\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formExprloc",
              "documentation": {
                "identifier": "formExprloc",
                "newPage": false,
                "searchKey": "dwarf.formExprloc",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formExprloc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formExprloc format = 0x18\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formFlag",
              "documentation": {
                "identifier": "formFlag",
                "newPage": false,
                "searchKey": "dwarf.formFlag",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formFlag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formFlag format = 0x0C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formFlagPresent",
              "documentation": {
                "identifier": "formFlagPresent",
                "newPage": false,
                "searchKey": "dwarf.formFlagPresent",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formFlagPresent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formFlagPresent format = 0x19\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formGnuRefAlt",
              "documentation": {
                "identifier": "formGnuRefAlt",
                "newPage": false,
                "searchKey": "dwarf.formGnuRefAlt",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formGnuRefAlt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formGnuRefAlt format = 0x1f20\n```\n\nExtensions for multi-file compression (.dwz) [http://www.dwarfstd.org/ShowIssue.php?issue=120604.1](http://www.dwarfstd.org/ShowIssue.php?issue=120604.1) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formGnuStrpAlt",
              "documentation": {
                "identifier": "formGnuStrpAlt",
                "newPage": false,
                "searchKey": "dwarf.formGnuStrpAlt",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formGnuStrpAlt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formGnuStrpAlt format = 0x1f21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formImplicitConst",
              "documentation": {
                "identifier": "formImplicitConst",
                "newPage": false,
                "searchKey": "dwarf.formImplicitConst",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formImplicitConst"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formImplicitConst format = 0x21\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formIndirect",
              "documentation": {
                "identifier": "formIndirect",
                "newPage": false,
                "searchKey": "dwarf.formIndirect",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formIndirect"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formIndirect format = 0x16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formLineStrp",
              "documentation": {
                "identifier": "formLineStrp",
                "newPage": false,
                "searchKey": "dwarf.formLineStrp",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formLineStrp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formLineStrp format = 0x1F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formLoclistx",
              "documentation": {
                "identifier": "formLoclistx",
                "newPage": false,
                "searchKey": "dwarf.formLoclistx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formLoclistx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formLoclistx format = 0x22\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRef1",
              "documentation": {
                "identifier": "formRef1",
                "newPage": false,
                "searchKey": "dwarf.formRef1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRef1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRef1 format = 0x11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRef2",
              "documentation": {
                "identifier": "formRef2",
                "newPage": false,
                "searchKey": "dwarf.formRef2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRef2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRef2 format = 0x12\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRef4",
              "documentation": {
                "identifier": "formRef4",
                "newPage": false,
                "searchKey": "dwarf.formRef4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRef4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRef4 format = 0x13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRef8",
              "documentation": {
                "identifier": "formRef8",
                "newPage": false,
                "searchKey": "dwarf.formRef8",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRef8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRef8 format = 0x14\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRefAddr",
              "documentation": {
                "identifier": "formRefAddr",
                "newPage": false,
                "searchKey": "dwarf.formRefAddr",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRefAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRefAddr format = 0x10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRefSig8",
              "documentation": {
                "identifier": "formRefSig8",
                "newPage": false,
                "searchKey": "dwarf.formRefSig8",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRefSig8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRefSig8 format = 0x20\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRefSup4",
              "documentation": {
                "identifier": "formRefSup4",
                "newPage": false,
                "searchKey": "dwarf.formRefSup4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRefSup4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRefSup4 format = 0x1C\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRefSup8",
              "documentation": {
                "identifier": "formRefSup8",
                "newPage": false,
                "searchKey": "dwarf.formRefSup8",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRefSup8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRefSup8 format = 0x24\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRefUdata",
              "documentation": {
                "identifier": "formRefUdata",
                "newPage": false,
                "searchKey": "dwarf.formRefUdata",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRefUdata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRefUdata format = 0x15\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formRnglistx",
              "documentation": {
                "identifier": "formRnglistx",
                "newPage": false,
                "searchKey": "dwarf.formRnglistx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formRnglistx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formRnglistx format = 0x23\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formSdata",
              "documentation": {
                "identifier": "formSdata",
                "newPage": false,
                "searchKey": "dwarf.formSdata",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formSdata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formSdata format = 0x0D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formSecOffset",
              "documentation": {
                "identifier": "formSecOffset",
                "newPage": false,
                "searchKey": "dwarf.formSecOffset",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formSecOffset"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formSecOffset format = 0x17\n```\n\nThe following are new in DWARF 4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formString",
              "documentation": {
                "identifier": "formString",
                "newPage": false,
                "searchKey": "dwarf.formString",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formString format = 0x08\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrp",
              "documentation": {
                "identifier": "formStrp",
                "newPage": false,
                "searchKey": "dwarf.formStrp",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrp format = 0x0E\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrpSup",
              "documentation": {
                "identifier": "formStrpSup",
                "newPage": false,
                "searchKey": "dwarf.formStrpSup",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrpSup"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrpSup format = 0x1D\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrx",
              "documentation": {
                "identifier": "formStrx",
                "newPage": false,
                "searchKey": "dwarf.formStrx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrx format = 0x1A\n```\n\nThe following are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrx1",
              "documentation": {
                "identifier": "formStrx1",
                "newPage": false,
                "searchKey": "dwarf.formStrx1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrx1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrx1 format = 0x25\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrx2",
              "documentation": {
                "identifier": "formStrx2",
                "newPage": false,
                "searchKey": "dwarf.formStrx2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrx2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrx2 format = 0x26\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrx3",
              "documentation": {
                "identifier": "formStrx3",
                "newPage": false,
                "searchKey": "dwarf.formStrx3",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrx3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrx3 format = 0x27\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formStrx4",
              "documentation": {
                "identifier": "formStrx4",
                "newPage": false,
                "searchKey": "dwarf.formStrx4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formStrx4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formStrx4 format = 0x28\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#formUdata",
              "documentation": {
                "identifier": "formUdata",
                "newPage": false,
                "searchKey": "dwarf.formUdata",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const formUdata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst formUdata format = 0x0F\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleBaseAddress",
              "documentation": {
                "identifier": "lleBaseAddress",
                "newPage": false,
                "searchKey": "dwarf.lleBaseAddress",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleBaseAddress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleBaseAddress = 0x06\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleBaseAddressx",
              "documentation": {
                "identifier": "lleBaseAddressx",
                "newPage": false,
                "searchKey": "dwarf.lleBaseAddressx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleBaseAddressx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleBaseAddressx = 0x01\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleDefaultLocation",
              "documentation": {
                "identifier": "lleDefaultLocation",
                "newPage": false,
                "searchKey": "dwarf.lleDefaultLocation",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleDefaultLocation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleDefaultLocation = 0x05\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleEndOfList",
              "documentation": {
                "identifier": "lleEndOfList",
                "newPage": false,
                "searchKey": "dwarf.lleEndOfList",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleEndOfList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleEndOfList = 0x00\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleOffsetPair",
              "documentation": {
                "identifier": "lleOffsetPair",
                "newPage": false,
                "searchKey": "dwarf.lleOffsetPair",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleOffsetPair"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleOffsetPair = 0x04\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleStartEnd",
              "documentation": {
                "identifier": "lleStartEnd",
                "newPage": false,
                "searchKey": "dwarf.lleStartEnd",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleStartEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleStartEnd = 0x07\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleStartLength",
              "documentation": {
                "identifier": "lleStartLength",
                "newPage": false,
                "searchKey": "dwarf.lleStartLength",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleStartLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleStartLength = 0x08\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleStartxEndx",
              "documentation": {
                "identifier": "lleStartxEndx",
                "newPage": false,
                "searchKey": "dwarf.lleStartxEndx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleStartxEndx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleStartxEndx = 0x02\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lleStartxLength",
              "documentation": {
                "identifier": "lleStartxLength",
                "newPage": false,
                "searchKey": "dwarf.lleStartxLength",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lleStartxLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lleStartxLength = 0x03\n```\n\nLocation list entry codes. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnctDirectoryIndex",
              "documentation": {
                "identifier": "lnctDirectoryIndex",
                "newPage": false,
                "searchKey": "dwarf.lnctDirectoryIndex",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnctDirectoryIndex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnctDirectoryIndex = 0x02\n```\n\nLine table directory and file name entry formats. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnctMD5",
              "documentation": {
                "identifier": "lnctMD5",
                "newPage": false,
                "searchKey": "dwarf.lnctMD5",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnctMD5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnctMD5 = 0x05\n```\n\nLine table directory and file name entry formats. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnctPath",
              "documentation": {
                "identifier": "lnctPath",
                "newPage": false,
                "searchKey": "dwarf.lnctPath",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnctPath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnctPath = 0x01\n```\n\nLine table directory and file name entry formats. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnctSize",
              "documentation": {
                "identifier": "lnctSize",
                "newPage": false,
                "searchKey": "dwarf.lnctSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnctSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnctSize = 0x04\n```\n\nLine table directory and file name entry formats. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnctTimestamp",
              "documentation": {
                "identifier": "lnctTimestamp",
                "newPage": false,
                "searchKey": "dwarf.lnctTimestamp",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnctTimestamp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnctTimestamp = 0x03\n```\n\nLine table directory and file name entry formats. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lneDefineFile",
              "documentation": {
                "identifier": "lneDefineFile",
                "newPage": false,
                "searchKey": "dwarf.lneDefineFile",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lneDefineFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lneDefineFile = 3\n```\n\nStatement program extended opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lneEndSequence",
              "documentation": {
                "identifier": "lneEndSequence",
                "newPage": false,
                "searchKey": "dwarf.lneEndSequence",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lneEndSequence"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lneEndSequence = 1\n```\n\nStatement program extended opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lneSetAddress",
              "documentation": {
                "identifier": "lneSetAddress",
                "newPage": false,
                "searchKey": "dwarf.lneSetAddress",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lneSetAddress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lneSetAddress = 2\n```\n\nStatement program extended opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lneSetDiscriminator",
              "documentation": {
                "identifier": "lneSetDiscriminator",
                "newPage": false,
                "searchKey": "dwarf.lneSetDiscriminator",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lneSetDiscriminator"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lneSetDiscriminator = 4\n```\n\nStatement program extended opcode encodings. \n\nDWARF 4 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsAdvanceLine",
              "documentation": {
                "identifier": "lnsAdvanceLine",
                "newPage": false,
                "searchKey": "dwarf.lnsAdvanceLine",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsAdvanceLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsAdvanceLine = 3\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsAdvancePC",
              "documentation": {
                "identifier": "lnsAdvancePC",
                "newPage": false,
                "searchKey": "dwarf.lnsAdvancePC",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsAdvancePC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsAdvancePC = 2\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsConstAddPC",
              "documentation": {
                "identifier": "lnsConstAddPC",
                "newPage": false,
                "searchKey": "dwarf.lnsConstAddPC",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsConstAddPC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsConstAddPC = 8\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsCopy",
              "documentation": {
                "identifier": "lnsCopy",
                "newPage": false,
                "searchKey": "dwarf.lnsCopy",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsCopy"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsCopy = 1\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsFixedAdvancePC",
              "documentation": {
                "identifier": "lnsFixedAdvancePC",
                "newPage": false,
                "searchKey": "dwarf.lnsFixedAdvancePC",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsFixedAdvancePC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsFixedAdvancePC = 9\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsNegateStmt",
              "documentation": {
                "identifier": "lnsNegateStmt",
                "newPage": false,
                "searchKey": "dwarf.lnsNegateStmt",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsNegateStmt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsNegateStmt = 6\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsSetBasicBlock",
              "documentation": {
                "identifier": "lnsSetBasicBlock",
                "newPage": false,
                "searchKey": "dwarf.lnsSetBasicBlock",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsSetBasicBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsSetBasicBlock = 7\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsSetColumn",
              "documentation": {
                "identifier": "lnsSetColumn",
                "newPage": false,
                "searchKey": "dwarf.lnsSetColumn",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsSetColumn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsSetColumn = 5\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsSetEpilogueBegin",
              "documentation": {
                "identifier": "lnsSetEpilogueBegin",
                "newPage": false,
                "searchKey": "dwarf.lnsSetEpilogueBegin",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsSetEpilogueBegin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsSetEpilogueBegin = 11\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsSetFile",
              "documentation": {
                "identifier": "lnsSetFile",
                "newPage": false,
                "searchKey": "dwarf.lnsSetFile",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsSetFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsSetFile = 4\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsSetISA",
              "documentation": {
                "identifier": "lnsSetISA",
                "newPage": false,
                "searchKey": "dwarf.lnsSetISA",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsSetISA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsSetISA = 12\n```\n\nStatement program standard opcode encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnsSetPrologueEnd",
              "documentation": {
                "identifier": "lnsSetPrologueEnd",
                "newPage": false,
                "searchKey": "dwarf.lnsSetPrologueEnd",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const lnsSetPrologueEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst lnsSetPrologueEnd = 10\n```\n\nStatement program standard opcode encodings. \n\nDWARF 3 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opAbs",
              "documentation": {
                "identifier": "opAbs",
                "newPage": false,
                "searchKey": "dwarf.opAbs",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opAbs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opAbs = 0x19\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opAddr",
              "documentation": {
                "identifier": "opAddr",
                "newPage": false,
                "searchKey": "dwarf.opAddr",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opAddr = 0x03 /* 1 op, const addr */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opAddrx",
              "documentation": {
                "identifier": "opAddrx",
                "newPage": false,
                "searchKey": "dwarf.opAddrx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opAddrx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opAddrx = 0xA1\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opAnd",
              "documentation": {
                "identifier": "opAnd",
                "newPage": false,
                "searchKey": "dwarf.opAnd",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opAnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opAnd = 0x1A\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opBitPiece",
              "documentation": {
                "identifier": "opBitPiece",
                "newPage": false,
                "searchKey": "dwarf.opBitPiece",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opBitPiece"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opBitPiece = 0x9D\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opBra",
              "documentation": {
                "identifier": "opBra",
                "newPage": false,
                "searchKey": "dwarf.opBra",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opBra"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opBra = 0x28 /* 1 op, signed 2-byte constant */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opBreg0",
              "documentation": {
                "identifier": "opBreg0",
                "newPage": false,
                "searchKey": "dwarf.opBreg0",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opBreg0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opBreg0 = 0x70 /* 1 op, signed LEB128 constant */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\nOpRegN = OpReg0 + N for N = 0..31 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opBregx",
              "documentation": {
                "identifier": "opBregx",
                "newPage": false,
                "searchKey": "dwarf.opBregx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opBregx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opBregx = 0x92 /* 2 op, ULEB128 reg; SLEB128 off */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opCall2",
              "documentation": {
                "identifier": "opCall2",
                "newPage": false,
                "searchKey": "dwarf.opCall2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opCall2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opCall2 = 0x98 /* 2-byte offset of DIE */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opCall4",
              "documentation": {
                "identifier": "opCall4",
                "newPage": false,
                "searchKey": "dwarf.opCall4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opCall4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opCall4 = 0x99 /* 4-byte offset of DIE */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opCallFrameCFA",
              "documentation": {
                "identifier": "opCallFrameCFA",
                "newPage": false,
                "searchKey": "dwarf.opCallFrameCFA",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opCallFrameCFA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opCallFrameCFA = 0x9C\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opCallRef",
              "documentation": {
                "identifier": "opCallRef",
                "newPage": false,
                "searchKey": "dwarf.opCallRef",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opCallRef"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opCallRef = 0x9A /* 4- or 8- byte offset of DIE */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst1s",
              "documentation": {
                "identifier": "opConst1s",
                "newPage": false,
                "searchKey": "dwarf.opConst1s",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst1s"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst1s = 0x09 /*\t\" signed */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst1u",
              "documentation": {
                "identifier": "opConst1u",
                "newPage": false,
                "searchKey": "dwarf.opConst1u",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst1u"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst1u = 0x08 /* 1 op, 1 byte const */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst2s",
              "documentation": {
                "identifier": "opConst2s",
                "newPage": false,
                "searchKey": "dwarf.opConst2s",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst2s"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst2s = 0x0B /*\t\" signed */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst2u",
              "documentation": {
                "identifier": "opConst2u",
                "newPage": false,
                "searchKey": "dwarf.opConst2u",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst2u"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst2u = 0x0A /* 1 op, 2 byte const  */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst4s",
              "documentation": {
                "identifier": "opConst4s",
                "newPage": false,
                "searchKey": "dwarf.opConst4s",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst4s"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst4s = 0x0D /*\t\" signed */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst4u",
              "documentation": {
                "identifier": "opConst4u",
                "newPage": false,
                "searchKey": "dwarf.opConst4u",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst4u"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst4u = 0x0C /* 1 op, 4 byte const */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst8s",
              "documentation": {
                "identifier": "opConst8s",
                "newPage": false,
                "searchKey": "dwarf.opConst8s",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst8s"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst8s = 0x0F /*\t\" signed */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConst8u",
              "documentation": {
                "identifier": "opConst8u",
                "newPage": false,
                "searchKey": "dwarf.opConst8u",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConst8u"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConst8u = 0x0E /* 1 op, 8 byte const */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConstType",
              "documentation": {
                "identifier": "opConstType",
                "newPage": false,
                "searchKey": "dwarf.opConstType",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConstType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConstType = 0xA4\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConsts",
              "documentation": {
                "identifier": "opConsts",
                "newPage": false,
                "searchKey": "dwarf.opConsts",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConsts"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConsts = 0x11 /*\t\" signed */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConstu",
              "documentation": {
                "identifier": "opConstu",
                "newPage": false,
                "searchKey": "dwarf.opConstu",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConstu"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConstu = 0x10 /* 1 op, LEB128 const */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConstx",
              "documentation": {
                "identifier": "opConstx",
                "newPage": false,
                "searchKey": "dwarf.opConstx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConstx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConstx = 0xA2\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opConvert",
              "documentation": {
                "identifier": "opConvert",
                "newPage": false,
                "searchKey": "dwarf.opConvert",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opConvert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opConvert = 0xA8\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opDeref",
              "documentation": {
                "identifier": "opDeref",
                "newPage": false,
                "searchKey": "dwarf.opDeref",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDeref"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDeref = 0x06\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opDerefSize",
              "documentation": {
                "identifier": "opDerefSize",
                "newPage": false,
                "searchKey": "dwarf.opDerefSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDerefSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDerefSize = 0x94 /* 1-byte size of data retrieved */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opDerefType",
              "documentation": {
                "identifier": "opDerefType",
                "newPage": false,
                "searchKey": "dwarf.opDerefType",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDerefType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDerefType = 0xA6\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opDiv",
              "documentation": {
                "identifier": "opDiv",
                "newPage": false,
                "searchKey": "dwarf.opDiv",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDiv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDiv = 0x1B\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opDrop",
              "documentation": {
                "identifier": "opDrop",
                "newPage": false,
                "searchKey": "dwarf.opDrop",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDrop"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDrop = 0x13\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opDup",
              "documentation": {
                "identifier": "opDup",
                "newPage": false,
                "searchKey": "dwarf.opDup",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opDup"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opDup = 0x12\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opEntryValue",
              "documentation": {
                "identifier": "opEntryValue",
                "newPage": false,
                "searchKey": "dwarf.opEntryValue",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opEntryValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opEntryValue = 0xA3\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opEq",
              "documentation": {
                "identifier": "opEq",
                "newPage": false,
                "searchKey": "dwarf.opEq",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opEq"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opEq = 0x29\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opFbreg",
              "documentation": {
                "identifier": "opFbreg",
                "newPage": false,
                "searchKey": "dwarf.opFbreg",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opFbreg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opFbreg = 0x91 /* 1 op, SLEB128 offset */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opFormTLSAddress",
              "documentation": {
                "identifier": "opFormTLSAddress",
                "newPage": false,
                "searchKey": "dwarf.opFormTLSAddress",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opFormTLSAddress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opFormTLSAddress = 0x9B\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opGe",
              "documentation": {
                "identifier": "opGe",
                "newPage": false,
                "searchKey": "dwarf.opGe",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opGe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opGe = 0x2A\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opGt",
              "documentation": {
                "identifier": "opGt",
                "newPage": false,
                "searchKey": "dwarf.opGt",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opGt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opGt = 0x2B\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opImplicitPointer",
              "documentation": {
                "identifier": "opImplicitPointer",
                "newPage": false,
                "searchKey": "dwarf.opImplicitPointer",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opImplicitPointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opImplicitPointer = 0xA0\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\nThe following a new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opImplicitValue",
              "documentation": {
                "identifier": "opImplicitValue",
                "newPage": false,
                "searchKey": "dwarf.opImplicitValue",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opImplicitValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opImplicitValue = 0x9E\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\nThe following are new in DWARF 4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opLe",
              "documentation": {
                "identifier": "opLe",
                "newPage": false,
                "searchKey": "dwarf.opLe",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opLe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opLe = 0x2C\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opLit0",
              "documentation": {
                "identifier": "opLit0",
                "newPage": false,
                "searchKey": "dwarf.opLit0",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opLit0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opLit0 = 0x30\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opLt",
              "documentation": {
                "identifier": "opLt",
                "newPage": false,
                "searchKey": "dwarf.opLt",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opLt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opLt = 0x2D\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opMinus",
              "documentation": {
                "identifier": "opMinus",
                "newPage": false,
                "searchKey": "dwarf.opMinus",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opMinus"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opMinus = 0x1C\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opMod",
              "documentation": {
                "identifier": "opMod",
                "newPage": false,
                "searchKey": "dwarf.opMod",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opMod"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opMod = 0x1D\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opMul",
              "documentation": {
                "identifier": "opMul",
                "newPage": false,
                "searchKey": "dwarf.opMul",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opMul"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opMul = 0x1E\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opNe",
              "documentation": {
                "identifier": "opNe",
                "newPage": false,
                "searchKey": "dwarf.opNe",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opNe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opNe = 0x2E\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opNeg",
              "documentation": {
                "identifier": "opNeg",
                "newPage": false,
                "searchKey": "dwarf.opNeg",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opNeg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opNeg = 0x1F\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opNop",
              "documentation": {
                "identifier": "opNop",
                "newPage": false,
                "searchKey": "dwarf.opNop",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opNop"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opNop = 0x96\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opNot",
              "documentation": {
                "identifier": "opNot",
                "newPage": false,
                "searchKey": "dwarf.opNot",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opNot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opNot = 0x20\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opOr",
              "documentation": {
                "identifier": "opOr",
                "newPage": false,
                "searchKey": "dwarf.opOr",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opOr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opOr = 0x21\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opOver",
              "documentation": {
                "identifier": "opOver",
                "newPage": false,
                "searchKey": "dwarf.opOver",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opOver"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opOver = 0x14\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opPick",
              "documentation": {
                "identifier": "opPick",
                "newPage": false,
                "searchKey": "dwarf.opPick",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opPick"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opPick = 0x15 /* 1 op, 1 byte stack index */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opPiece",
              "documentation": {
                "identifier": "opPiece",
                "newPage": false,
                "searchKey": "dwarf.opPiece",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opPiece"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opPiece = 0x93 /* 1 op, ULEB128 size of piece */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opPlus",
              "documentation": {
                "identifier": "opPlus",
                "newPage": false,
                "searchKey": "dwarf.opPlus",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opPlus"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opPlus = 0x22\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opPlusUconst",
              "documentation": {
                "identifier": "opPlusUconst",
                "newPage": false,
                "searchKey": "dwarf.opPlusUconst",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opPlusUconst"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opPlusUconst = 0x23 /* 1 op, ULEB128 addend */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opPushObjAddr",
              "documentation": {
                "identifier": "opPushObjAddr",
                "newPage": false,
                "searchKey": "dwarf.opPushObjAddr",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opPushObjAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opPushObjAddr = 0x97\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\nThe following are new in DWARF 3. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opReg0",
              "documentation": {
                "identifier": "opReg0",
                "newPage": false,
                "searchKey": "dwarf.opReg0",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opReg0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opReg0 = 0x50\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\nOpLitN = OpLit0 + N for N = 0..31 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opRegvalType",
              "documentation": {
                "identifier": "opRegvalType",
                "newPage": false,
                "searchKey": "dwarf.opRegvalType",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opRegvalType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opRegvalType = 0xA5\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opRegx",
              "documentation": {
                "identifier": "opRegx",
                "newPage": false,
                "searchKey": "dwarf.opRegx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opRegx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opRegx = 0x90 /* 1 op, ULEB128 register */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\nOpBregN = OpBreg0 + N for N = 0..31 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opReinterpret",
              "documentation": {
                "identifier": "opReinterpret",
                "newPage": false,
                "searchKey": "dwarf.opReinterpret",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opReinterpret"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opReinterpret = 0xA9\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opRot",
              "documentation": {
                "identifier": "opRot",
                "newPage": false,
                "searchKey": "dwarf.opRot",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opRot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opRot = 0x17\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opShl",
              "documentation": {
                "identifier": "opShl",
                "newPage": false,
                "searchKey": "dwarf.opShl",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opShl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opShl = 0x24\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opShr",
              "documentation": {
                "identifier": "opShr",
                "newPage": false,
                "searchKey": "dwarf.opShr",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opShr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opShr = 0x25\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opShra",
              "documentation": {
                "identifier": "opShra",
                "newPage": false,
                "searchKey": "dwarf.opShra",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opShra"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opShra = 0x26\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opSkip",
              "documentation": {
                "identifier": "opSkip",
                "newPage": false,
                "searchKey": "dwarf.opSkip",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opSkip"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opSkip = 0x2F /* 1 op, signed 2-byte constant */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opStackValue",
              "documentation": {
                "identifier": "opStackValue",
                "newPage": false,
                "searchKey": "dwarf.opStackValue",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opStackValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opStackValue = 0x9F\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opSwap",
              "documentation": {
                "identifier": "opSwap",
                "newPage": false,
                "searchKey": "dwarf.opSwap",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opSwap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opSwap = 0x16\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opXderef",
              "documentation": {
                "identifier": "opXderef",
                "newPage": false,
                "searchKey": "dwarf.opXderef",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opXderef"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opXderef = 0x18\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opXderefSize",
              "documentation": {
                "identifier": "opXderefSize",
                "newPage": false,
                "searchKey": "dwarf.opXderefSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opXderefSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opXderefSize = 0x95 /* 1-byte size of data retrieved */\n\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opXderefType",
              "documentation": {
                "identifier": "opXderefType",
                "newPage": false,
                "searchKey": "dwarf.opXderefType",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opXderefType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opXderefType = 0xA7\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#opXor",
              "documentation": {
                "identifier": "opXor",
                "newPage": false,
                "searchKey": "dwarf.opXor",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const opXor"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst opXor = 0x27\n```\n\nLocation expression operators. The debug info encodes value locations like 8(R3) as a sequence of these op codes. This package does not implement full expressions; the opPlusUconst operator is expected by the type parser. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleBaseAddress",
              "documentation": {
                "identifier": "rleBaseAddress",
                "newPage": false,
                "searchKey": "dwarf.rleBaseAddress",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleBaseAddress"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleBaseAddress = 0x5\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleBaseAddressx",
              "documentation": {
                "identifier": "rleBaseAddressx",
                "newPage": false,
                "searchKey": "dwarf.rleBaseAddressx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleBaseAddressx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleBaseAddressx = 0x1\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleEndOfList",
              "documentation": {
                "identifier": "rleEndOfList",
                "newPage": false,
                "searchKey": "dwarf.rleEndOfList",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleEndOfList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleEndOfList = 0x0\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleOffsetPair",
              "documentation": {
                "identifier": "rleOffsetPair",
                "newPage": false,
                "searchKey": "dwarf.rleOffsetPair",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleOffsetPair"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleOffsetPair = 0x4\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleStartEnd",
              "documentation": {
                "identifier": "rleStartEnd",
                "newPage": false,
                "searchKey": "dwarf.rleStartEnd",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleStartEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleStartEnd = 0x6\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleStartLength",
              "documentation": {
                "identifier": "rleStartLength",
                "newPage": false,
                "searchKey": "dwarf.rleStartLength",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleStartLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleStartLength = 0x7\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleStartxEndx",
              "documentation": {
                "identifier": "rleStartxEndx",
                "newPage": false,
                "searchKey": "dwarf.rleStartxEndx",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleStartxEndx"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleStartxEndx = 0x2\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#rleStartxLength",
              "documentation": {
                "identifier": "rleStartxLength",
                "newPage": false,
                "searchKey": "dwarf.rleStartxLength",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rleStartxLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rleStartxLength = 0x3\n```\n\nOpcodes for DWARFv5 debug_rnglists section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#utCompile",
              "documentation": {
                "identifier": "utCompile",
                "newPage": false,
                "searchKey": "dwarf.utCompile",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const utCompile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst utCompile = 0x01\n```\n\nUnit header unit type encodings. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#utPartial",
              "documentation": {
                "identifier": "utPartial",
                "newPage": false,
                "searchKey": "dwarf.utPartial",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const utPartial"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst utPartial = 0x03\n```\n\nUnit header unit type encodings. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#utSkeleton",
              "documentation": {
                "identifier": "utSkeleton",
                "newPage": false,
                "searchKey": "dwarf.utSkeleton",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const utSkeleton"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst utSkeleton = 0x04\n```\n\nUnit header unit type encodings. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#utSplitCompile",
              "documentation": {
                "identifier": "utSplitCompile",
                "newPage": false,
                "searchKey": "dwarf.utSplitCompile",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const utSplitCompile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst utSplitCompile = 0x05\n```\n\nUnit header unit type encodings. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#utSplitType",
              "documentation": {
                "identifier": "utSplitType",
                "newPage": false,
                "searchKey": "dwarf.utSplitType",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const utSplitType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst utSplitType = 0x06\n```\n\nUnit header unit type encodings. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#utType",
              "documentation": {
                "identifier": "utType",
                "newPage": false,
                "searchKey": "dwarf.utType",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const utType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst utType = 0x02\n```\n\nUnit header unit type encodings. These are new in DWARF 5. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Attr_name",
              "documentation": {
                "identifier": "_Attr_name",
                "newPage": false,
                "searchKey": "dwarf._Attr_name",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Attr_name"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Attr_name = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Class_name",
              "documentation": {
                "identifier": "_Class_name",
                "newPage": false,
                "searchKey": "dwarf._Class_name",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Class_name"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Class_name = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_name_0",
              "documentation": {
                "identifier": "_Tag_name_0",
                "newPage": false,
                "searchKey": "dwarf._Tag_name_0",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Tag_name_0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Tag_name_0 = \"ArrayTypeClassTypeEntryPointEnumerationTypeFormalParameter\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_name_1",
              "documentation": {
                "identifier": "_Tag_name_1",
                "newPage": false,
                "searchKey": "dwarf._Tag_name_1",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Tag_name_1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Tag_name_1 = \"ImportedDeclaration\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_name_2",
              "documentation": {
                "identifier": "_Tag_name_2",
                "newPage": false,
                "searchKey": "dwarf._Tag_name_2",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Tag_name_2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Tag_name_2 = \"LabelLexDwarfBlock\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_name_3",
              "documentation": {
                "identifier": "_Tag_name_3",
                "newPage": false,
                "searchKey": "dwarf._Tag_name_3",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Tag_name_3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Tag_name_3 = \"Member\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_name_4",
              "documentation": {
                "identifier": "_Tag_name_4",
                "newPage": false,
                "searchKey": "dwarf._Tag_name_4",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Tag_name_4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Tag_name_4 = \"PointerTypeReferenceTypeCompileUnitStringTypeStructType\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_name_5",
              "documentation": {
                "identifier": "_Tag_name_5",
                "newPage": false,
                "searchKey": "dwarf._Tag_name_5",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const _Tag_name_5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst _Tag_name_5 = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/dwarf#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/dwarf#ErrUnknownPC",
              "documentation": {
                "identifier": "ErrUnknownPC",
                "newPage": false,
                "searchKey": "dwarf.ErrUnknownPC",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrUnknownPC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrUnknownPC = errors.New(\"ErrUnknownPC\")\n```\n\nErrUnknownPC is the error returned by LineReader.ScanPC when the seek PC is not covered by any entry in the line table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#PathJoin",
              "documentation": {
                "identifier": "PathJoin",
                "newPage": false,
                "searchKey": "dwarf.PathJoin",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var PathJoin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar PathJoin = pathJoin\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#attrIsExprloc",
              "documentation": {
                "identifier": "attrIsExprloc",
                "newPage": false,
                "searchKey": "dwarf.attrIsExprloc",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var attrIsExprloc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar attrIsExprloc = ...\n```\n\nattrIsExprloc indicates attributes that allow exprloc values that are encoded as block values in DWARF 2 and 3. See DWARF 4, Figure 20. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#attrPtrClass",
              "documentation": {
                "identifier": "attrPtrClass",
                "newPage": false,
                "searchKey": "dwarf.attrPtrClass",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var attrPtrClass"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar attrPtrClass = ...\n```\n\nattrPtrClass indicates the *ptr class of attributes that have encoding formSecOffset in DWARF 4 or formData* in DWARF 2 and 3. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#errSegmentSelector",
              "documentation": {
                "identifier": "errSegmentSelector",
                "newPage": false,
                "searchKey": "dwarf.errSegmentSelector",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errSegmentSelector"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errSegmentSelector = errors.New(\"non-zero segment_selector size not supported\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#knownOpcodeLengths",
              "documentation": {
                "identifier": "knownOpcodeLengths",
                "newPage": false,
                "searchKey": "dwarf.knownOpcodeLengths",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var knownOpcodeLengths"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar knownOpcodeLengths = ...\n```\n\nknownOpcodeLengths gives the opcode lengths (in varint arguments) of known standard opcodes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Attr_map",
              "documentation": {
                "identifier": "_Attr_map",
                "newPage": false,
                "searchKey": "dwarf._Attr_map",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _Attr_map"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _Attr_map = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Class_index",
              "documentation": {
                "identifier": "_Class_index",
                "newPage": false,
                "searchKey": "dwarf._Class_index",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _Class_index"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _Class_index = [...]uint8{0, 12, 24, 34, 47, 59, 68, 80, 95, 106, 123, 137, 154, 165, 182, 196}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_index_0",
              "documentation": {
                "identifier": "_Tag_index_0",
                "newPage": false,
                "searchKey": "dwarf._Tag_index_0",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _Tag_index_0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _Tag_index_0 = [...]uint8{0, 9, 18, 28, 43, 58}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_index_2",
              "documentation": {
                "identifier": "_Tag_index_2",
                "newPage": false,
                "searchKey": "dwarf._Tag_index_2",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _Tag_index_2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _Tag_index_2 = [...]uint8{0, 5, 18}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_index_4",
              "documentation": {
                "identifier": "_Tag_index_4",
                "newPage": false,
                "searchKey": "dwarf._Tag_index_4",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _Tag_index_4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _Tag_index_4 = [...]uint8{0, 11, 24, 35, 45, 55}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#_Tag_index_5",
              "documentation": {
                "identifier": "_Tag_index_5",
                "newPage": false,
                "searchKey": "dwarf._Tag_index_5",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var _Tag_index_5"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar _Tag_index_5 = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/dwarf#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/dwarf#AddrType",
              "documentation": {
                "identifier": "AddrType",
                "newPage": false,
                "searchKey": "dwarf.AddrType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AddrType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AddrType struct {\n\tBasicType\n}\n```\n\nAn AddrType represents a machine address type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ArrayType",
              "documentation": {
                "identifier": "ArrayType",
                "newPage": false,
                "searchKey": "dwarf.ArrayType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ArrayType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ArrayType struct {\n\tCommonType\n\tType          Type\n\tStrideBitSize int64 // if > 0, number of bits to hold each element\n\tCount         int64 // if == -1, an incomplete array, like char x[].\n}\n```\n\nAn ArrayType represents a fixed size array type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#ArrayType.Size",
                    "documentation": {
                      "identifier": "ArrayType.Size",
                      "newPage": false,
                      "searchKey": "dwarf.ArrayType.Size",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *ArrayType) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *ArrayType) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#ArrayType.String",
                    "documentation": {
                      "identifier": "ArrayType.String",
                      "newPage": false,
                      "searchKey": "dwarf.ArrayType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *ArrayType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *ArrayType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Attr",
              "documentation": {
                "identifier": "Attr",
                "newPage": false,
                "searchKey": "dwarf.Attr",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Attr uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Attr uint32\n```\n\nAn Attr identifies the attribute type in a DWARF Entry's Field. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#Attr.GoString",
                    "documentation": {
                      "identifier": "Attr.GoString",
                      "newPage": false,
                      "searchKey": "dwarf.Attr.GoString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a Attr) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a Attr) GoString() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Attr.String",
                    "documentation": {
                      "identifier": "Attr.String",
                      "newPage": false,
                      "searchKey": "dwarf.Attr.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i Attr) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i Attr) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#BasicType",
              "documentation": {
                "identifier": "BasicType",
                "newPage": false,
                "searchKey": "dwarf.BasicType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BasicType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BasicType struct {\n\tCommonType\n\tBitSize   int64\n\tBitOffset int64\n}\n```\n\nA BasicType holds fields common to all basic types. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#BasicType.Basic",
                    "documentation": {
                      "identifier": "BasicType.Basic",
                      "newPage": false,
                      "searchKey": "dwarf.BasicType.Basic",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BasicType) Basic() *BasicType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BasicType) Basic() *BasicType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#BasicType.String",
                    "documentation": {
                      "identifier": "BasicType.String",
                      "newPage": false,
                      "searchKey": "dwarf.BasicType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *BasicType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *BasicType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#BoolType",
              "documentation": {
                "identifier": "BoolType",
                "newPage": false,
                "searchKey": "dwarf.BoolType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BoolType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BoolType struct {\n\tBasicType\n}\n```\n\nA BoolType represents a boolean type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#CharType",
              "documentation": {
                "identifier": "CharType",
                "newPage": false,
                "searchKey": "dwarf.CharType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CharType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CharType struct {\n\tBasicType\n}\n```\n\nA CharType represents a signed character type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Class",
              "documentation": {
                "identifier": "Class",
                "newPage": false,
                "searchKey": "dwarf.Class",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Class int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Class int\n```\n\nA Class is the DWARF 4 class of an attribute value. \n\nIn general, a given attribute's value may take on one of several possible classes defined by DWARF, each of which leads to a slightly different interpretation of the attribute. \n\nDWARF version 4 distinguishes attribute value classes more finely than previous versions of DWARF. The reader will disambiguate coarser classes from earlier versions of DWARF into the appropriate DWARF 4 class. For example, DWARF 2 uses \"constant\" for constants as well as all types of section offsets, but the reader will canonicalize attributes in DWARF 2 files that refer to section offsets to one of the Class*Ptr classes, even though these classes were only defined in DWARF 3. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#formToClass",
                    "documentation": {
                      "identifier": "formToClass",
                      "newPage": false,
                      "searchKey": "dwarf.formToClass",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func formToClass(form format, attr Attr, vers int, b *buf) Class"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc formToClass(form format, attr Attr, vers int, b *buf) Class\n```\n\nformToClass returns the DWARF 4 Class for the given form. If the DWARF version is less then 4, it will disambiguate some forms depending on the attribute. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Class.GoString",
                    "documentation": {
                      "identifier": "Class.GoString",
                      "newPage": false,
                      "searchKey": "dwarf.Class.GoString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i Class) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i Class) GoString() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Class.String",
                    "documentation": {
                      "identifier": "Class.String",
                      "newPage": false,
                      "searchKey": "dwarf.Class.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i Class) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i Class) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#CommonType",
              "documentation": {
                "identifier": "CommonType",
                "newPage": false,
                "searchKey": "dwarf.CommonType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommonType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommonType struct {\n\tByteSize int64  // size of value of this type, in bytes\n\tName     string // name that can be used to refer to type\n}\n```\n\nA CommonType holds fields common to multiple types. If a field is not known or not applicable for a given type, the zero value is used. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#CommonType.Common",
                    "documentation": {
                      "identifier": "CommonType.Common",
                      "newPage": false,
                      "searchKey": "dwarf.CommonType.Common",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommonType) Common() *CommonType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommonType) Common() *CommonType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#CommonType.Size",
                    "documentation": {
                      "identifier": "CommonType.Size",
                      "newPage": false,
                      "searchKey": "dwarf.CommonType.Size",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommonType) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommonType) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#ComplexType",
              "documentation": {
                "identifier": "ComplexType",
                "newPage": false,
                "searchKey": "dwarf.ComplexType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ComplexType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ComplexType struct {\n\tBasicType\n}\n```\n\nA ComplexType represents a complex floating point type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Data",
              "documentation": {
                "identifier": "Data",
                "newPage": false,
                "searchKey": "dwarf.Data",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Data struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Data struct {\n\t// raw data\n\tabbrev   []byte\n\taranges  []byte\n\tframe    []byte\n\tinfo     []byte\n\tline     []byte\n\tpubnames []byte\n\tranges   []byte\n\tstr      []byte\n\n\t// New sections added in DWARF 5.\n\taddr       []byte\n\tlineStr    []byte\n\tstrOffsets []byte\n\trngLists   []byte\n\n\t// parsed data\n\tabbrevCache map[uint64]abbrevTable\n\tbigEndian   bool\n\torder       binary.ByteOrder\n\ttypeCache   map[Offset]Type\n\ttypeSigs    map[uint64]*typeUnit\n\tunit        []unit\n}\n```\n\nData represents the DWARF debugging information loaded from an executable file (for example, an ELF or Mach-O executable). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "dwarf.New",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(abbrev, aranges, frame, info, line, pubnames, ranges, str []byte) (*Data, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(abbrev, aranges, frame, info, line, pubnames, ranges, str []byte) (*Data, error)\n```\n\nNew returns a new Data object initialized from the given parameters. Rather than calling this function directly, clients should typically use the DWARF method of the File type of the appropriate package debug/elf, debug/macho, or debug/pe. \n\nThe []byte arguments are the data from the corresponding debug section in the object file; for example, for an ELF object, abbrev is the contents of the \".debug_abbrev\" section. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.AddSection",
                    "documentation": {
                      "identifier": "Data.AddSection",
                      "newPage": false,
                      "searchKey": "dwarf.Data.AddSection",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) AddSection(name string, contents []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) AddSection(name string, contents []byte) error\n```\n\nAddSection adds another DWARF section by name. The name should be a DWARF section name such as \".debug_addr\", \".debug_str_offsets\", and so forth. This approach is used for new DWARF sections added in DWARF 5 and later. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.AddTypes",
                    "documentation": {
                      "identifier": "Data.AddTypes",
                      "newPage": false,
                      "searchKey": "dwarf.Data.AddTypes",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) AddTypes(name string, types []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) AddTypes(name string, types []byte) error\n```\n\nAddTypes will add one .debug_types section to the DWARF data. A typical object with DWARF version 4 debug info will have multiple .debug_types sections. The name is used for error reporting only, and serves to distinguish one .debug_types section from another. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.LineReader",
                    "documentation": {
                      "identifier": "Data.LineReader",
                      "newPage": false,
                      "searchKey": "dwarf.Data.LineReader",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) LineReader(cu *Entry) (*LineReader, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) LineReader(cu *Entry) (*LineReader, error)\n```\n\nLineReader returns a new reader for the line table of compilation unit cu, which must be an Entry with tag TagCompileUnit. \n\nIf this compilation unit has no line table, it returns nil, nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.Ranges",
                    "documentation": {
                      "identifier": "Data.Ranges",
                      "newPage": false,
                      "searchKey": "dwarf.Data.Ranges",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) Ranges(e *Entry) ([][2]uint64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) Ranges(e *Entry) ([][2]uint64, error)\n```\n\nRanges returns the PC ranges covered by e, a slice of [low,high) pairs. Only some entry types, such as TagCompileUnit or TagSubprogram, have PC ranges; for others, this will return nil with no error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.Reader",
                    "documentation": {
                      "identifier": "Data.Reader",
                      "newPage": false,
                      "searchKey": "dwarf.Data.Reader",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) Reader() *Reader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) Reader() *Reader\n```\n\nReader returns a new Reader for Data. The reader is positioned at byte offset 0 in the DWARF `info' section. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.Type",
                    "documentation": {
                      "identifier": "Data.Type",
                      "newPage": false,
                      "searchKey": "dwarf.Data.Type",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) Type(off Offset) (Type, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) Type(off Offset) (Type, error)\n```\n\nType reads the type at off in the DWARF `info' section. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.baseAddressForEntry",
                    "documentation": {
                      "identifier": "Data.baseAddressForEntry",
                      "newPage": false,
                      "searchKey": "dwarf.Data.baseAddressForEntry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) baseAddressForEntry(e *Entry) (*Entry, uint64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) baseAddressForEntry(e *Entry) (*Entry, uint64, error)\n```\n\nbaseAddressForEntry returns the initial base address to be used when looking up the range list of entry e. DWARF specifies that this should be the lowpc attribute of the enclosing compilation unit, however comments in gdb/dwarf2read.c say that some versions of GCC use the entrypc attribute, so we check that too. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.debugAddr",
                    "documentation": {
                      "identifier": "Data.debugAddr",
                      "newPage": false,
                      "searchKey": "dwarf.Data.debugAddr",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) debugAddr(format dataFormat, addrBase, idx uint64) (uint64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) debugAddr(format dataFormat, addrBase, idx uint64) (uint64, error)\n```\n\ndebugAddr returns the address at idx in debug_addr \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.dwarf2Ranges",
                    "documentation": {
                      "identifier": "Data.dwarf2Ranges",
                      "newPage": false,
                      "searchKey": "dwarf.Data.dwarf2Ranges",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) dwarf2Ranges(u *unit, base uint64, ranges int64, ret [][2]uint64) ([][2]uint64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) dwarf2Ranges(u *unit, base uint64, ranges int64, ret [][2]uint64) ([][2]uint64, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.dwarf5Ranges",
                    "documentation": {
                      "identifier": "Data.dwarf5Ranges",
                      "newPage": false,
                      "searchKey": "dwarf.Data.dwarf5Ranges",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) dwarf5Ranges(u *unit, cu *Entry, base uint64, ranges int64, ret [][2]uint64) ([][2]uint64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) dwarf5Ranges(u *unit, cu *Entry, base uint64, ranges int64, ret [][2]uint64) ([][2]uint64, error)\n```\n\ndwarf5Ranges interpets a debug_rnglists sequence, see DWARFv5 section 2.17.3 (page 53). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.offsetToUnit",
                    "documentation": {
                      "identifier": "Data.offsetToUnit",
                      "newPage": false,
                      "searchKey": "dwarf.Data.offsetToUnit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) offsetToUnit(off Offset) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) offsetToUnit(off Offset) int\n```\n\noffsetToUnit returns the index of the unit containing offset off. It returns -1 if no unit contains this offset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.parseAbbrev",
                    "documentation": {
                      "identifier": "Data.parseAbbrev",
                      "newPage": false,
                      "searchKey": "dwarf.Data.parseAbbrev",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) parseAbbrev(off uint64, vers int) (abbrevTable, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) parseAbbrev(off uint64, vers int) (abbrevTable, error)\n```\n\nParseAbbrev returns the abbreviation table that starts at byte off in the .debug_abbrev section. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.parseTypes",
                    "documentation": {
                      "identifier": "Data.parseTypes",
                      "newPage": false,
                      "searchKey": "dwarf.Data.parseTypes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) parseTypes(name string, types []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) parseTypes(name string, types []byte) error\n```\n\nParse a .debug_types section. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.parseUnits",
                    "documentation": {
                      "identifier": "Data.parseUnits",
                      "newPage": false,
                      "searchKey": "dwarf.Data.parseUnits",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) parseUnits() ([]unit, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) parseUnits() ([]unit, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.readType",
                    "documentation": {
                      "identifier": "Data.readType",
                      "newPage": false,
                      "searchKey": "dwarf.Data.readType",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) readType(name string, r typeReader, off Offset, typeCache map[Offset]Type, fixups *typeFixer) (Type, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) readType(name string, r typeReader, off Offset, typeCache map[Offset]Type, fixups *typeFixer) (Type, error)\n```\n\nreadType reads a type from r at off of name. It adds types to the type cache, appends new typedef types to typedefs, and computes the sizes of types. Callers should pass nil for typedefs; this is used for internal recursion. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Data.sigToType",
                    "documentation": {
                      "identifier": "Data.sigToType",
                      "newPage": false,
                      "searchKey": "dwarf.Data.sigToType",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Data) sigToType(sig uint64) (Type, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Data) sigToType(sig uint64) (Type, error)\n```\n\nReturn the type for a type signature. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#DecodeError",
              "documentation": {
                "identifier": "DecodeError",
                "newPage": false,
                "searchKey": "dwarf.DecodeError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DecodeError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DecodeError struct {\n\tName   string\n\tOffset Offset\n\tErr    string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#DecodeError.Error",
                    "documentation": {
                      "identifier": "DecodeError.Error",
                      "newPage": false,
                      "searchKey": "dwarf.DecodeError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e DecodeError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e DecodeError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#DotDotDotType",
              "documentation": {
                "identifier": "DotDotDotType",
                "newPage": false,
                "searchKey": "dwarf.DotDotDotType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DotDotDotType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DotDotDotType struct {\n\tCommonType\n}\n```\n\nA DotDotDotType represents the variadic ... function parameter. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#DotDotDotType.String",
                    "documentation": {
                      "identifier": "DotDotDotType.String",
                      "newPage": false,
                      "searchKey": "dwarf.DotDotDotType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *DotDotDotType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *DotDotDotType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Entry",
              "documentation": {
                "identifier": "Entry",
                "newPage": false,
                "searchKey": "dwarf.Entry",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Entry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Entry struct {\n\tOffset   Offset // offset of Entry in DWARF info\n\tTag      Tag    // tag (kind of Entry)\n\tChildren bool   // whether Entry is followed by children\n\tField    []Field\n}\n```\n\nAn entry is a sequence of attribute/value pairs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#Entry.AttrField",
                    "documentation": {
                      "identifier": "Entry.AttrField",
                      "newPage": false,
                      "searchKey": "dwarf.Entry.AttrField",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Entry) AttrField(a Attr) *Field"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Entry) AttrField(a Attr) *Field\n```\n\nAttrField returns the Field associated with attribute Attr in Entry, or nil if there is no such attribute. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Entry.Val",
                    "documentation": {
                      "identifier": "Entry.Val",
                      "newPage": false,
                      "searchKey": "dwarf.Entry.Val",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Entry) Val(a Attr) interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Entry) Val(a Attr) interface{}\n```\n\nVal returns the value associated with attribute Attr in Entry, or nil if there is no such attribute. \n\nA common idiom is to merge the check for nil return with the check that the value has the expected dynamic type, as in: \n\n```\nv, ok := e.Val(AttrSibling).(int64)\n\n```\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#EnumType",
              "documentation": {
                "identifier": "EnumType",
                "newPage": false,
                "searchKey": "dwarf.EnumType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnumType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnumType struct {\n\tCommonType\n\tEnumName string\n\tVal      []*EnumValue\n}\n```\n\nAn EnumType represents an enumerated type. The only indication of its native integer type is its ByteSize (inside CommonType). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#EnumType.String",
                    "documentation": {
                      "identifier": "EnumType.String",
                      "newPage": false,
                      "searchKey": "dwarf.EnumType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *EnumType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *EnumType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#EnumValue",
              "documentation": {
                "identifier": "EnumValue",
                "newPage": false,
                "searchKey": "dwarf.EnumValue",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EnumValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EnumValue struct {\n\tName string\n\tVal  int64\n}\n```\n\nAn EnumValue represents a single enumeration value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Field",
              "documentation": {
                "identifier": "Field",
                "newPage": false,
                "searchKey": "dwarf.Field",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Field struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Field struct {\n\tAttr  Attr\n\tVal   interface{}\n\tClass Class\n}\n```\n\nA Field is a single attribute/value pair in an Entry. \n\nA value can be one of several \"attribute classes\" defined by DWARF. The Go types corresponding to each class are: \n\n```\nDWARF class       Go type        Class\n-----------       -------        -----\naddress           uint64         ClassAddress\nblock             []byte         ClassBlock\nconstant          int64          ClassConstant\nflag              bool           ClassFlag\nreference\n  to info         dwarf.Offset   ClassReference\n  to type unit    uint64         ClassReferenceSig\nstring            string         ClassString\nexprloc           []byte         ClassExprLoc\nlineptr           int64          ClassLinePtr\nloclistptr        int64          ClassLocListPtr\nmacptr            int64          ClassMacPtr\nrangelistptr      int64          ClassRangeListPtr\n\n```\nFor unrecognized or vendor-defined attributes, Class may be ClassUnknown. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#FloatType",
              "documentation": {
                "identifier": "FloatType",
                "newPage": false,
                "searchKey": "dwarf.FloatType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FloatType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FloatType struct {\n\tBasicType\n}\n```\n\nA FloatType represents a floating point type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#FuncType",
              "documentation": {
                "identifier": "FuncType",
                "newPage": false,
                "searchKey": "dwarf.FuncType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FuncType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FuncType struct {\n\tCommonType\n\tReturnType Type\n\tParamType  []Type\n}\n```\n\nA FuncType represents a function type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#FuncType.String",
                    "documentation": {
                      "identifier": "FuncType.String",
                      "newPage": false,
                      "searchKey": "dwarf.FuncType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *FuncType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *FuncType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#IntType",
              "documentation": {
                "identifier": "IntType",
                "newPage": false,
                "searchKey": "dwarf.IntType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntType struct {\n\tBasicType\n}\n```\n\nAn IntType represents a signed integer type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#LineEntry",
              "documentation": {
                "identifier": "LineEntry",
                "newPage": false,
                "searchKey": "dwarf.LineEntry",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LineEntry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LineEntry struct {\n\t// Address is the program-counter value of a machine\n\t// instruction generated by the compiler. This LineEntry\n\t// applies to each instruction from Address to just before the\n\t// Address of the next LineEntry.\n\tAddress uint64\n\n\t// OpIndex is the index of an operation within a VLIW\n\t// instruction. The index of the first operation is 0. For\n\t// non-VLIW architectures, it will always be 0. Address and\n\t// OpIndex together form an operation pointer that can\n\t// reference any individual operation within the instruction\n\t// stream.\n\tOpIndex int\n\n\t// File is the source file corresponding to these\n\t// instructions.\n\tFile *LineFile\n\n\t// Line is the source code line number corresponding to these\n\t// instructions. Lines are numbered beginning at 1. It may be\n\t// 0 if these instructions cannot be attributed to any source\n\t// line.\n\tLine int\n\n\t// Column is the column number within the source line of these\n\t// instructions. Columns are numbered beginning at 1. It may\n\t// be 0 to indicate the \"left edge\" of the line.\n\tColumn int\n\n\t// IsStmt indicates that Address is a recommended breakpoint\n\t// location, such as the beginning of a line, statement, or a\n\t// distinct subpart of a statement.\n\tIsStmt bool\n\n\t// BasicBlock indicates that Address is the beginning of a\n\t// basic block.\n\tBasicBlock bool\n\n\t// PrologueEnd indicates that Address is one (of possibly\n\t// many) PCs where execution should be suspended for a\n\t// breakpoint on entry to the containing function.\n\t//\n\t// Added in DWARF 3.\n\tPrologueEnd bool\n\n\t// EpilogueBegin indicates that Address is one (of possibly\n\t// many) PCs where execution should be suspended for a\n\t// breakpoint on exit from this function.\n\t//\n\t// Added in DWARF 3.\n\tEpilogueBegin bool\n\n\t// ISA is the instruction set architecture for these\n\t// instructions. Possible ISA values should be defined by the\n\t// applicable ABI specification.\n\t//\n\t// Added in DWARF 3.\n\tISA int\n\n\t// Discriminator is an arbitrary integer indicating the block\n\t// to which these instructions belong. It serves to\n\t// distinguish among multiple blocks that may all have with\n\t// the same source file, line, and column. Where only one\n\t// block exists for a given source position, it should be 0.\n\t//\n\t// Added in DWARF 3.\n\tDiscriminator int\n\n\t// EndSequence indicates that Address is the first byte after\n\t// the end of a sequence of target machine instructions. If it\n\t// is set, only this and the Address field are meaningful. A\n\t// line number table may contain information for multiple\n\t// potentially disjoint instruction sequences. The last entry\n\t// in a line table should always have EndSequence set.\n\tEndSequence bool\n}\n```\n\nA LineEntry is a row in a DWARF line table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#LineFile",
              "documentation": {
                "identifier": "LineFile",
                "newPage": false,
                "searchKey": "dwarf.LineFile",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LineFile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LineFile struct {\n\tName   string\n\tMtime  uint64 // Implementation defined modification time, or 0 if unknown\n\tLength int    // File length, or 0 if unknown\n}\n```\n\nA LineFile is a source file referenced by a DWARF line table entry. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#LineReader",
              "documentation": {
                "identifier": "LineReader",
                "newPage": false,
                "searchKey": "dwarf.LineReader",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LineReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LineReader struct {\n\tbuf buf\n\n\t// Original .debug_line section data. Used by Seek.\n\tsection []byte\n\n\tstr     []byte // .debug_str\n\tlineStr []byte // .debug_line_str\n\n\t// Header information\n\tversion              uint16\n\taddrsize             int\n\tsegmentSelectorSize  int\n\tminInstructionLength int\n\tmaxOpsPerInstruction int\n\tdefaultIsStmt        bool\n\tlineBase             int\n\tlineRange            int\n\topcodeBase           int\n\topcodeLengths        []int\n\tdirectories          []string\n\tfileEntries          []*LineFile\n\n\tprogramOffset Offset // section offset of line number program\n\tendOffset     Offset // section offset of byte following program\n\n\tinitialFileEntries int // initial length of fileEntries\n\n\t// Current line number program state machine registers\n\tstate     LineEntry // public state\n\tfileIndex int       // private state\n}\n```\n\nA LineReader reads a sequence of LineEntry structures from a DWARF \"line\" section for a single compilation unit. LineEntries occur in order of increasing PC and each LineEntry gives metadata for the instructions from that LineEntry's PC to just before the next LineEntry's PC. The last entry will have its EndSequence field set. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.Files",
                    "documentation": {
                      "identifier": "LineReader.Files",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.Files",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) Files() []*LineFile"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) Files() []*LineFile\n```\n\nFiles returns the file name table of this compilation unit as of the current position in the line table. The file name table may be referenced from attributes in this compilation unit such as AttrDeclFile. \n\nEntry 0 is always nil, since file index 0 represents \"no file\". \n\nThe file name table of a compilation unit is not fixed. Files returns the file table as of the current position in the line table. This may contain more entries than the file table at an earlier position in the line table, though existing entries never change. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.Next",
                    "documentation": {
                      "identifier": "LineReader.Next",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.Next",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) Next(entry *LineEntry) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) Next(entry *LineEntry) error\n```\n\nNext sets *entry to the next row in this line table and moves to the next row. If there are no more entries and the line table is properly terminated, it returns io.EOF. \n\nRows are always in order of increasing entry.Address, but entry.Line may go forward or backward. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.Reset",
                    "documentation": {
                      "identifier": "LineReader.Reset",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.Reset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) Reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) Reset()\n```\n\nReset repositions the line table reader at the beginning of the line table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.Seek",
                    "documentation": {
                      "identifier": "LineReader.Seek",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.Seek",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) Seek(pos LineReaderPos)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) Seek(pos LineReaderPos)\n```\n\nSeek restores the line table reader to a position returned by Tell. \n\nThe argument pos must have been returned by a call to Tell on this line table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.SeekPC",
                    "documentation": {
                      "identifier": "LineReader.SeekPC",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.SeekPC",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) SeekPC(pc uint64, entry *LineEntry) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) SeekPC(pc uint64, entry *LineEntry) error\n```\n\nSeekPC sets *entry to the LineEntry that includes pc and positions the reader on the next entry in the line table. If necessary, this will seek backwards to find pc. \n\nIf pc is not covered by any entry in this line table, SeekPC returns ErrUnknownPC. In this case, *entry and the final seek position are unspecified. \n\nNote that DWARF line tables only permit sequential, forward scans. Hence, in the worst case, this takes time linear in the size of the line table. If the caller wishes to do repeated fast PC lookups, it should build an appropriate index of the line table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.Tell",
                    "documentation": {
                      "identifier": "LineReader.Tell",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.Tell",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) Tell() LineReaderPos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) Tell() LineReaderPos\n```\n\nTell returns the current position in the line table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.advancePC",
                    "documentation": {
                      "identifier": "LineReader.advancePC",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.advancePC",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) advancePC(opAdvance int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) advancePC(opAdvance int)\n```\n\nadvancePC advances \"operation pointer\" (the combination of Address and OpIndex) in r.state by opAdvance steps. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.readFileEntry",
                    "documentation": {
                      "identifier": "LineReader.readFileEntry",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.readFileEntry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) readFileEntry() (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) readFileEntry() (bool, error)\n```\n\nreadFileEntry reads a file entry from either the header or a DW_LNE_define_file extended opcode and adds it to r.fileEntries. A true return value indicates that there are no more entries to read. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.readHeader",
                    "documentation": {
                      "identifier": "LineReader.readHeader",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.readHeader",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) readHeader(compDir string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) readHeader(compDir string) error\n```\n\nreadHeader reads the line number program header from r.buf and sets all of the header fields in r. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.readLNCT",
                    "documentation": {
                      "identifier": "LineReader.readLNCT",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.readLNCT",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) readLNCT(s []lnctForm, dwarf64 bool) (path string, mtime uint64, size uint64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) readLNCT(s []lnctForm, dwarf64 bool) (path string, mtime uint64, size uint64, err error)\n```\n\nreadLNCT reads a sequence of LNCT entries and returns path information. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.readLNCTFormat",
                    "documentation": {
                      "identifier": "LineReader.readLNCTFormat",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.readLNCTFormat",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) readLNCTFormat() []lnctForm"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) readLNCTFormat() []lnctForm\n```\n\nreadLNCTFormat reads an LNCT format description. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.resetState",
                    "documentation": {
                      "identifier": "LineReader.resetState",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.resetState",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) resetState()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) resetState()\n```\n\nresetState resets r.state to its default values \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.step",
                    "documentation": {
                      "identifier": "LineReader.step",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.step",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) step(entry *LineEntry) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) step(entry *LineEntry) bool\n```\n\nstep processes the next opcode and updates r.state. If the opcode emits a row in the line table, this updates *entry and returns true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#LineReader.updateFile",
                    "documentation": {
                      "identifier": "LineReader.updateFile",
                      "newPage": false,
                      "searchKey": "dwarf.LineReader.updateFile",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *LineReader) updateFile()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *LineReader) updateFile()\n```\n\nupdateFile updates r.state.File after r.fileIndex has changed or r.fileEntries has changed. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#LineReaderPos",
              "documentation": {
                "identifier": "LineReaderPos",
                "newPage": false,
                "searchKey": "dwarf.LineReaderPos",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LineReaderPos struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LineReaderPos struct {\n\t// off is the current offset in the DWARF line section.\n\toff Offset\n\t// numFileEntries is the length of fileEntries.\n\tnumFileEntries int\n\t// state and fileIndex are the statement machine state at\n\t// offset off.\n\tstate     LineEntry\n\tfileIndex int\n}\n```\n\nA LineReaderPos represents a position in a line table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Offset",
              "documentation": {
                "identifier": "Offset",
                "newPage": false,
                "searchKey": "dwarf.Offset",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Offset uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Offset uint32\n```\n\nAn Offset represents the location of an Entry within the DWARF info. (See Reader.Seek.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#PtrType",
              "documentation": {
                "identifier": "PtrType",
                "newPage": false,
                "searchKey": "dwarf.PtrType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PtrType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PtrType struct {\n\tCommonType\n\tType Type\n}\n```\n\nA PtrType represents a pointer type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#PtrType.String",
                    "documentation": {
                      "identifier": "PtrType.String",
                      "newPage": false,
                      "searchKey": "dwarf.PtrType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *PtrType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *PtrType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#QualType",
              "documentation": {
                "identifier": "QualType",
                "newPage": false,
                "searchKey": "dwarf.QualType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type QualType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype QualType struct {\n\tCommonType\n\tQual string\n\tType Type\n}\n```\n\nA QualType represents a type that has the C/C++ \"const\", \"restrict\", or \"volatile\" qualifier. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#QualType.Size",
                    "documentation": {
                      "identifier": "QualType.Size",
                      "newPage": false,
                      "searchKey": "dwarf.QualType.Size",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *QualType) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *QualType) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#QualType.String",
                    "documentation": {
                      "identifier": "QualType.String",
                      "newPage": false,
                      "searchKey": "dwarf.QualType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *QualType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *QualType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Reader",
              "documentation": {
                "identifier": "Reader",
                "newPage": false,
                "searchKey": "dwarf.Reader",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Reader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Reader struct {\n\tb            buf\n\td            *Data\n\terr          error\n\tunit         int\n\tlastUnit     bool   // set if last entry returned by Next is TagCompileUnit/TagPartialUnit\n\tlastChildren bool   // .Children of last entry returned by Next\n\tlastSibling  Offset // .Val(AttrSibling) of last entry returned by Next\n\tcu           *Entry // current compilation unit\n}\n```\n\nA Reader allows reading Entry structures from a DWARF `info' section. The Entry structures are arranged in a tree. The Reader's Next function return successive entries from a pre-order traversal of the tree. If an entry has children, its Children field will be true, and the children follow, terminated by an Entry with Tag 0. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.AddressSize",
                    "documentation": {
                      "identifier": "Reader.AddressSize",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.AddressSize",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) AddressSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) AddressSize() int\n```\n\nAddressSize returns the size in bytes of addresses in the current compilation unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.ByteOrder",
                    "documentation": {
                      "identifier": "Reader.ByteOrder",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.ByteOrder",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) ByteOrder() binary.ByteOrder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) ByteOrder() binary.ByteOrder\n```\n\nByteOrder returns the byte order in the current compilation unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.Next",
                    "documentation": {
                      "identifier": "Reader.Next",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.Next",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) Next() (*Entry, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) Next() (*Entry, error)\n```\n\nNext reads the next entry from the encoded entry stream. It returns nil, nil when it reaches the end of the section. It returns an error if the current offset is invalid or the data at the offset cannot be decoded as a valid Entry. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.Seek",
                    "documentation": {
                      "identifier": "Reader.Seek",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.Seek",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) Seek(off Offset)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) Seek(off Offset)\n```\n\nSeek positions the Reader at offset off in the encoded entry stream. Offset 0 can be used to denote the first entry. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.SeekPC",
                    "documentation": {
                      "identifier": "Reader.SeekPC",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.SeekPC",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) SeekPC(pc uint64) (*Entry, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) SeekPC(pc uint64) (*Entry, error)\n```\n\nSeekPC returns the Entry for the compilation unit that includes pc, and positions the reader to read the children of that unit.  If pc is not covered by any unit, SeekPC returns ErrUnknownPC and the position of the reader is undefined. \n\nBecause compilation units can describe multiple regions of the executable, in the worst case SeekPC must search through all the ranges in all the compilation units. Each call to SeekPC starts the search at the compilation unit of the last call, so in general looking up a series of PCs will be faster if they are sorted. If the caller wishes to do repeated fast PC lookups, it should build an appropriate index using the Ranges method. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.SkipChildren",
                    "documentation": {
                      "identifier": "Reader.SkipChildren",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.SkipChildren",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) SkipChildren()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) SkipChildren()\n```\n\nSkipChildren skips over the child entries associated with the last Entry returned by Next. If that Entry did not have children or Next has not been called, SkipChildren is a no-op. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.clone",
                    "documentation": {
                      "identifier": "Reader.clone",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.clone",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) clone() typeReader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) clone() typeReader\n```\n\nclone returns a copy of the reader. This is used by the typeReader interface. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.maybeNextUnit",
                    "documentation": {
                      "identifier": "Reader.maybeNextUnit",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.maybeNextUnit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) maybeNextUnit()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) maybeNextUnit()\n```\n\nmaybeNextUnit advances to the next unit if this one is finished. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.nextUnit",
                    "documentation": {
                      "identifier": "Reader.nextUnit",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.nextUnit",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) nextUnit()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) nextUnit()\n```\n\nnextUnit advances to the next unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Reader.offset",
                    "documentation": {
                      "identifier": "Reader.offset",
                      "newPage": false,
                      "searchKey": "dwarf.Reader.offset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) offset() Offset"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) offset() Offset\n```\n\noffset returns the current buffer offset. This is used by the typeReader interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#StructField",
              "documentation": {
                "identifier": "StructField",
                "newPage": false,
                "searchKey": "dwarf.StructField",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructField struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructField struct {\n\tName       string\n\tType       Type\n\tByteOffset int64\n\tByteSize   int64 // usually zero; use Type.Size() for normal fields\n\tBitOffset  int64 // within the ByteSize bytes at ByteOffset\n\tBitSize    int64 // zero if not a bit field\n}\n```\n\nA StructField represents a field in a struct, union, or C++ class type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#StructType",
              "documentation": {
                "identifier": "StructType",
                "newPage": false,
                "searchKey": "dwarf.StructType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructType struct {\n\tCommonType\n\tStructName string\n\tKind       string // \"struct\", \"union\", or \"class\".\n\tField      []*StructField\n\tIncomplete bool // if true, struct, union, class is declared but not defined\n}\n```\n\nA StructType represents a struct, union, or C++ class type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#StructType.Defn",
                    "documentation": {
                      "identifier": "StructType.Defn",
                      "newPage": false,
                      "searchKey": "dwarf.StructType.Defn",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *StructType) Defn() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *StructType) Defn() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#StructType.String",
                    "documentation": {
                      "identifier": "StructType.String",
                      "newPage": false,
                      "searchKey": "dwarf.StructType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *StructType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *StructType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Tag",
              "documentation": {
                "identifier": "Tag",
                "newPage": false,
                "searchKey": "dwarf.Tag",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tag uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tag uint32\n```\n\nA Tag is the classification (the type) of an Entry. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#Tag.GoString",
                    "documentation": {
                      "identifier": "Tag.GoString",
                      "newPage": false,
                      "searchKey": "dwarf.Tag.GoString",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t Tag) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t Tag) GoString() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#Tag.String",
                    "documentation": {
                      "identifier": "Tag.String",
                      "newPage": false,
                      "searchKey": "dwarf.Tag.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i Tag) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i Tag) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#Type",
              "documentation": {
                "identifier": "Type",
                "newPage": false,
                "searchKey": "dwarf.Type",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Type interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Type interface {\n\tCommon() *CommonType\n\tString() string\n\tSize() int64\n}\n```\n\nA Type conventionally represents a pointer to any of the specific Type structures (CharType, StructType, etc.). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#TypedefType",
              "documentation": {
                "identifier": "TypedefType",
                "newPage": false,
                "searchKey": "dwarf.TypedefType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TypedefType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TypedefType struct {\n\tCommonType\n\tType Type\n}\n```\n\nA TypedefType represents a named type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#TypedefType.Size",
                    "documentation": {
                      "identifier": "TypedefType.Size",
                      "newPage": false,
                      "searchKey": "dwarf.TypedefType.Size",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TypedefType) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TypedefType) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#TypedefType.String",
                    "documentation": {
                      "identifier": "TypedefType.String",
                      "newPage": false,
                      "searchKey": "dwarf.TypedefType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TypedefType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TypedefType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#UcharType",
              "documentation": {
                "identifier": "UcharType",
                "newPage": false,
                "searchKey": "dwarf.UcharType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UcharType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UcharType struct {\n\tBasicType\n}\n```\n\nA UcharType represents an unsigned character type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#UintType",
              "documentation": {
                "identifier": "UintType",
                "newPage": false,
                "searchKey": "dwarf.UintType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UintType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UintType struct {\n\tBasicType\n}\n```\n\nA UintType represents an unsigned integer type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#UnspecifiedType",
              "documentation": {
                "identifier": "UnspecifiedType",
                "newPage": false,
                "searchKey": "dwarf.UnspecifiedType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnspecifiedType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnspecifiedType struct {\n\tBasicType\n}\n```\n\nAn UnspecifiedType represents an implicit, unknown, ambiguous or nonexistent type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#UnsupportedType",
              "documentation": {
                "identifier": "UnsupportedType",
                "newPage": false,
                "searchKey": "dwarf.UnsupportedType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnsupportedType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnsupportedType struct {\n\tCommonType\n\tTag Tag\n}\n```\n\nAn UnsupportedType is a placeholder returned in situations where we encounter a type that isn't supported. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#UnsupportedType.String",
                    "documentation": {
                      "identifier": "UnsupportedType.String",
                      "newPage": false,
                      "searchKey": "dwarf.UnsupportedType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *UnsupportedType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *UnsupportedType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#VoidType",
              "documentation": {
                "identifier": "VoidType",
                "newPage": false,
                "searchKey": "dwarf.VoidType",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VoidType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VoidType struct {\n\tCommonType\n}\n```\n\nA VoidType represents the C void type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#VoidType.String",
                    "documentation": {
                      "identifier": "VoidType.String",
                      "newPage": false,
                      "searchKey": "dwarf.VoidType.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *VoidType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *VoidType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#abbrev",
              "documentation": {
                "identifier": "abbrev",
                "newPage": false,
                "searchKey": "dwarf.abbrev",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type abbrev struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype abbrev struct {\n\ttag      Tag\n\tchildren bool\n\tfield    []afield\n}\n```\n\na single entry's description: a sequence of attributes \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#abbrevTable",
              "documentation": {
                "identifier": "abbrevTable",
                "newPage": false,
                "searchKey": "dwarf.abbrevTable",
                "tags": [
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type abbrevTable map[uint32]dwarf.abbrev"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype abbrevTable map[uint32]abbrev\n```\n\na map from entry format ids to their descriptions \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#afield",
              "documentation": {
                "identifier": "afield",
                "newPage": false,
                "searchKey": "dwarf.afield",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type afield struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype afield struct {\n\tattr  Attr\n\tfmt   format\n\tclass Class\n\tval   int64 // for formImplicitConst\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#buf",
              "documentation": {
                "identifier": "buf",
                "newPage": false,
                "searchKey": "dwarf.buf",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type buf struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype buf struct {\n\tdwarf  *Data\n\torder  binary.ByteOrder\n\tformat dataFormat\n\tname   string\n\toff    Offset\n\tdata   []byte\n\terr    error\n}\n```\n\nData buffer being decoded. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#makeBuf",
                    "documentation": {
                      "identifier": "makeBuf",
                      "newPage": false,
                      "searchKey": "dwarf.makeBuf",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeBuf(d *Data, format dataFormat, name string, off Offset, data []byte) buf"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeBuf(d *Data, format dataFormat, name string, off Offset, data []byte) buf\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.addr",
                    "documentation": {
                      "identifier": "buf.addr",
                      "newPage": false,
                      "searchKey": "dwarf.buf.addr",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) addr() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) addr() uint64\n```\n\nAddress-sized uint. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.bytes",
                    "documentation": {
                      "identifier": "buf.bytes",
                      "newPage": false,
                      "searchKey": "dwarf.buf.bytes",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) bytes(n int) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) bytes(n int) []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.entry",
                    "documentation": {
                      "identifier": "buf.entry",
                      "newPage": false,
                      "searchKey": "dwarf.buf.entry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) entry(cu *Entry, atab abbrevTable, ubase Offset, vers int) *Entry"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) entry(cu *Entry, atab abbrevTable, ubase Offset, vers int) *Entry\n```\n\nEntry reads a single entry from buf, decoding according to the given abbreviation table. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.error",
                    "documentation": {
                      "identifier": "buf.error",
                      "newPage": false,
                      "searchKey": "dwarf.buf.error",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) error(s string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) error(s string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.int",
                    "documentation": {
                      "identifier": "buf.int",
                      "newPage": false,
                      "searchKey": "dwarf.buf.int",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) int() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) int() int64\n```\n\nSigned int is a sign-extended varint. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.skip",
                    "documentation": {
                      "identifier": "buf.skip",
                      "newPage": false,
                      "searchKey": "dwarf.buf.skip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) skip(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) skip(n int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.string",
                    "documentation": {
                      "identifier": "buf.string",
                      "newPage": false,
                      "searchKey": "dwarf.buf.string",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) string() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) string() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.uint",
                    "documentation": {
                      "identifier": "buf.uint",
                      "newPage": false,
                      "searchKey": "dwarf.buf.uint",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) uint() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) uint() uint64\n```\n\nUnsigned int is just a varint. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.uint16",
                    "documentation": {
                      "identifier": "buf.uint16",
                      "newPage": false,
                      "searchKey": "dwarf.buf.uint16",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) uint16() uint16"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) uint16() uint16\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.uint24",
                    "documentation": {
                      "identifier": "buf.uint24",
                      "newPage": false,
                      "searchKey": "dwarf.buf.uint24",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) uint24() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) uint24() uint32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.uint32",
                    "documentation": {
                      "identifier": "buf.uint32",
                      "newPage": false,
                      "searchKey": "dwarf.buf.uint32",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) uint32() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) uint32() uint32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.uint64",
                    "documentation": {
                      "identifier": "buf.uint64",
                      "newPage": false,
                      "searchKey": "dwarf.buf.uint64",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) uint64() uint64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.uint8",
                    "documentation": {
                      "identifier": "buf.uint8",
                      "newPage": false,
                      "searchKey": "dwarf.buf.uint8",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) uint8() uint8"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) uint8() uint8\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.unitLength",
                    "documentation": {
                      "identifier": "buf.unitLength",
                      "newPage": false,
                      "searchKey": "dwarf.buf.unitLength",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) unitLength() (length Offset, dwarf64 bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) unitLength() (length Offset, dwarf64 bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#buf.varint",
                    "documentation": {
                      "identifier": "buf.varint",
                      "newPage": false,
                      "searchKey": "dwarf.buf.varint",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *buf) varint() (c uint64, bits uint)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *buf) varint() (c uint64, bits uint)\n```\n\nRead a varint, which is 7 bits per byte, little endian. the 0x80 bit means read another byte. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#dataFormat",
              "documentation": {
                "identifier": "dataFormat",
                "newPage": false,
                "searchKey": "dwarf.dataFormat",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dataFormat interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dataFormat interface {\n\t// DWARF version number. Zero means unknown.\n\tversion() int\n\n\t// 64-bit DWARF format?\n\tdwarf64() (dwarf64 bool, isKnown bool)\n\n\t// Size of an address, in bytes. Zero means unknown.\n\taddrsize() int\n}\n```\n\nData format, other than byte order. This affects the handling of certain field formats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#format",
              "documentation": {
                "identifier": "format",
                "newPage": false,
                "searchKey": "dwarf.format",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type format uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype format uint32\n```\n\nA format is a DWARF data encoding format. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#lnctForm",
              "documentation": {
                "identifier": "lnctForm",
                "newPage": false,
                "searchKey": "dwarf.lnctForm",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type lnctForm struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lnctForm struct {\n\tlnct int\n\tform format\n}\n```\n\nlnctForm is a pair of an LNCT code and a form. This represents an entry in the directory name or file name description in the DWARF 5 line number program header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#typeFixer",
              "documentation": {
                "identifier": "typeFixer",
                "newPage": false,
                "searchKey": "dwarf.typeFixer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeFixer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeFixer struct {\n\ttypedefs   []*TypedefType\n\tarraytypes []*Type\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeFixer.apply",
                    "documentation": {
                      "identifier": "typeFixer.apply",
                      "newPage": false,
                      "searchKey": "dwarf.typeFixer.apply",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tf *typeFixer) apply()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tf *typeFixer) apply()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeFixer.recordArrayType",
                    "documentation": {
                      "identifier": "typeFixer.recordArrayType",
                      "newPage": false,
                      "searchKey": "dwarf.typeFixer.recordArrayType",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tf *typeFixer) recordArrayType(t *Type)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tf *typeFixer) recordArrayType(t *Type)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#typeReader",
              "documentation": {
                "identifier": "typeReader",
                "newPage": false,
                "searchKey": "dwarf.typeReader",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeReader interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeReader interface {\n\tSeek(Offset)\n\tNext() (*Entry, error)\n\tclone() typeReader\n\toffset() Offset\n\t// AddressSize returns the size in bytes of addresses in the current\n\t// compilation unit.\n\tAddressSize() int\n}\n```\n\ntypeReader is used to read from either the info section or the types section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#typeUnit",
              "documentation": {
                "identifier": "typeUnit",
                "newPage": false,
                "searchKey": "dwarf.typeUnit",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeUnit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeUnit struct {\n\tunit\n\ttoff  Offset // Offset to signature type within data.\n\tname  string // Name of .debug_type section.\n\tcache Type   // Cache the type, nil to start.\n}\n```\n\nThe typeUnit format is a single type with a signature. It holds the same data as a compilation unit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#typeUnitReader",
              "documentation": {
                "identifier": "typeUnitReader",
                "newPage": false,
                "searchKey": "dwarf.typeUnitReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeUnitReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeUnitReader struct {\n\td   *Data\n\ttu  *typeUnit\n\tb   buf\n\terr error\n}\n```\n\ntypeUnitReader is a typeReader for a tagTypeUnit. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeUnitReader.AddressSize",
                    "documentation": {
                      "identifier": "typeUnitReader.AddressSize",
                      "newPage": false,
                      "searchKey": "dwarf.typeUnitReader.AddressSize",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tur *typeUnitReader) AddressSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tur *typeUnitReader) AddressSize() int\n```\n\nAddressSize returns the size in bytes of addresses in the current type unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeUnitReader.Next",
                    "documentation": {
                      "identifier": "typeUnitReader.Next",
                      "newPage": false,
                      "searchKey": "dwarf.typeUnitReader.Next",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tur *typeUnitReader) Next() (*Entry, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tur *typeUnitReader) Next() (*Entry, error)\n```\n\nNext reads the next Entry from the type unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeUnitReader.Seek",
                    "documentation": {
                      "identifier": "typeUnitReader.Seek",
                      "newPage": false,
                      "searchKey": "dwarf.typeUnitReader.Seek",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tur *typeUnitReader) Seek(off Offset)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tur *typeUnitReader) Seek(off Offset)\n```\n\nSeek to a new position in the type unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeUnitReader.clone",
                    "documentation": {
                      "identifier": "typeUnitReader.clone",
                      "newPage": false,
                      "searchKey": "dwarf.typeUnitReader.clone",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tur *typeUnitReader) clone() typeReader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tur *typeUnitReader) clone() typeReader\n```\n\nclone returns a new reader for the type unit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#typeUnitReader.offset",
                    "documentation": {
                      "identifier": "typeUnitReader.offset",
                      "newPage": false,
                      "searchKey": "dwarf.typeUnitReader.offset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tur *typeUnitReader) offset() Offset"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tur *typeUnitReader) offset() Offset\n```\n\noffset returns the current offset. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#unit",
              "documentation": {
                "identifier": "unit",
                "newPage": false,
                "searchKey": "dwarf.unit",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type unit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unit struct {\n\tbase   Offset // byte offset of header within the aggregate info\n\toff    Offset // byte offset of data within the aggregate info\n\tdata   []byte\n\tatable abbrevTable\n\tasize  int\n\tvers   int\n\tutype  uint8 // DWARF 5 unit type\n\tis64   bool  // True for 64-bit DWARF format\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#unit.addrsize",
                    "documentation": {
                      "identifier": "unit.addrsize",
                      "newPage": false,
                      "searchKey": "dwarf.unit.addrsize",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *unit) addrsize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *unit) addrsize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#unit.dwarf64",
                    "documentation": {
                      "identifier": "unit.dwarf64",
                      "newPage": false,
                      "searchKey": "dwarf.unit.dwarf64",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *unit) dwarf64() (bool, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *unit) dwarf64() (bool, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#unit.version",
                    "documentation": {
                      "identifier": "unit.version",
                      "newPage": false,
                      "searchKey": "dwarf.unit.version",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *unit) version() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *unit) version() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#unknownFormat",
              "documentation": {
                "identifier": "unknownFormat",
                "newPage": false,
                "searchKey": "dwarf.unknownFormat",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type unknownFormat struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unknownFormat struct{}\n```\n\nSome parts of DWARF have no data format, e.g., abbrevs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/dwarf#unknownFormat.addrsize",
                    "documentation": {
                      "identifier": "unknownFormat.addrsize",
                      "newPage": false,
                      "searchKey": "dwarf.unknownFormat.addrsize",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u unknownFormat) addrsize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u unknownFormat) addrsize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#unknownFormat.dwarf64",
                    "documentation": {
                      "identifier": "unknownFormat.dwarf64",
                      "newPage": false,
                      "searchKey": "dwarf.unknownFormat.dwarf64",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u unknownFormat) dwarf64() (bool, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u unknownFormat) dwarf64() (bool, bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/dwarf#unknownFormat.version",
                    "documentation": {
                      "identifier": "unknownFormat.version",
                      "newPage": false,
                      "searchKey": "dwarf.unknownFormat.version",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u unknownFormat) version() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u unknownFormat) version() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/dwarf#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/dwarf#TestDwarf5Ranges",
              "documentation": {
                "identifier": "TestDwarf5Ranges",
                "newPage": false,
                "searchKey": "dwarf.TestDwarf5Ranges",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDwarf5Ranges(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDwarf5Ranges(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#pathIsAbs",
              "documentation": {
                "identifier": "pathIsAbs",
                "newPage": false,
                "searchKey": "dwarf.pathIsAbs",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func pathIsAbs(path string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pathIsAbs(path string) bool\n```\n\npathIsAbs reports whether path is an absolute path (or \"full path name\" in DWARF parlance). This is in \"whatever form makes sense for the host system\", so this accepts both UNIX-style and DOS-style absolute paths. We avoid the filepath package because we want this to behave the same regardless of our host system and because we don't know what system the paths came from. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#pathJoin",
              "documentation": {
                "identifier": "pathJoin",
                "newPage": false,
                "searchKey": "dwarf.pathJoin",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func pathJoin(dirname, filename string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pathJoin(dirname, filename string) string\n```\n\npathJoin joins dirname and filename. filename must be relative. DWARF paths can be UNIX-style or DOS-style, so this handles both. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#splitDrive",
              "documentation": {
                "identifier": "splitDrive",
                "newPage": false,
                "searchKey": "dwarf.splitDrive",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func splitDrive(path string) (drive, rest string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc splitDrive(path string) (drive, rest string)\n```\n\nsplitDrive splits the DOS drive letter or UNC share point from path, if any. path == drive + rest \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/dwarf#zeroArray",
              "documentation": {
                "identifier": "zeroArray",
                "newPage": false,
                "searchKey": "dwarf.zeroArray",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func zeroArray(t *Type)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc zeroArray(t *Type)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
