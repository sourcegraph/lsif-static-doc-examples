{
  "pathID": "/debug/plan9obj",
  "documentation": {
    "identifier": "plan9obj",
    "newPage": true,
    "searchKey": "debug/plan9obj",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package plan9obj"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package plan9obj implements access to Plan 9 a.out object files. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/debug/plan9obj#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/plan9obj#Magic64",
              "documentation": {
                "identifier": "Magic64",
                "newPage": false,
                "searchKey": "plan9obj.Magic64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Magic64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Magic64 = 0x8000 // 64-bit expanded header\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#Magic386",
              "documentation": {
                "identifier": "Magic386",
                "newPage": false,
                "searchKey": "plan9obj.Magic386",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Magic386"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Magic386 = (4*11+0)*11 + 7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#MagicAMD64",
              "documentation": {
                "identifier": "MagicAMD64",
                "newPage": false,
                "searchKey": "plan9obj.MagicAMD64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MagicAMD64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MagicAMD64 = (4*26+0)*26 + 7 + Magic64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#MagicARM",
              "documentation": {
                "identifier": "MagicARM",
                "newPage": false,
                "searchKey": "plan9obj.MagicARM",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MagicARM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MagicARM = (4*20+0)*20 + 7\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/plan9obj#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/plan9obj#fileTests",
              "documentation": {
                "identifier": "fileTests",
                "newPage": false,
                "searchKey": "plan9obj.fileTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fileTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fileTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/plan9obj#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/plan9obj#FileHeader",
              "documentation": {
                "identifier": "FileHeader",
                "newPage": false,
                "searchKey": "plan9obj.FileHeader",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileHeader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileHeader struct {\n\tMagic       uint32\n\tBss         uint32\n\tEntry       uint64\n\tPtrSize     int\n\tLoadAddress uint64\n\tHdrSize     uint64\n}\n```\n\nA FileHeader represents a Plan 9 a.out file header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#File",
              "documentation": {
                "identifier": "File",
                "newPage": false,
                "searchKey": "plan9obj.File",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type File struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype File struct {\n\tFileHeader\n\tSections []*Section\n\tcloser   io.Closer\n}\n```\n\nA File represents an open Plan 9 a.out file. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/plan9obj#Open",
                    "documentation": {
                      "identifier": "Open",
                      "newPage": false,
                      "searchKey": "plan9obj.Open",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Open(name string) (*File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Open(name string) (*File, error)\n```\n\nOpen opens the named file using os.Open and prepares it for use as a Plan 9 a.out binary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/plan9obj#NewFile",
                    "documentation": {
                      "identifier": "NewFile",
                      "newPage": false,
                      "searchKey": "plan9obj.NewFile",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFile(r io.ReaderAt) (*File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFile(r io.ReaderAt) (*File, error)\n```\n\nNewFile creates a new File for accessing a Plan 9 binary in an underlying reader. The Plan 9 binary is expected to start at position 0 in the ReaderAt. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/plan9obj#File.Close",
                    "documentation": {
                      "identifier": "File.Close",
                      "newPage": false,
                      "searchKey": "plan9obj.File.Close",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Close() error\n```\n\nClose closes the File. If the File was created using NewFile directly instead of Open, Close has no effect. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/plan9obj#File.Symbols",
                    "documentation": {
                      "identifier": "File.Symbols",
                      "newPage": false,
                      "searchKey": "plan9obj.File.Symbols",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Symbols() ([]Sym, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Symbols() ([]Sym, error)\n```\n\nSymbols returns the symbol table for f. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/plan9obj#File.Section",
                    "documentation": {
                      "identifier": "File.Section",
                      "newPage": false,
                      "searchKey": "plan9obj.File.Section",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Section(name string) *Section"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Section(name string) *Section\n```\n\nSection returns a section with the given name, or nil if no such section exists. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#SectionHeader",
              "documentation": {
                "identifier": "SectionHeader",
                "newPage": false,
                "searchKey": "plan9obj.SectionHeader",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SectionHeader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SectionHeader struct {\n\tName   string\n\tSize   uint32\n\tOffset uint32\n}\n```\n\nA SectionHeader represents a single Plan 9 a.out section header. This structure doesn't exist on-disk, but eases navigation through the object file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#Section",
              "documentation": {
                "identifier": "Section",
                "newPage": false,
                "searchKey": "plan9obj.Section",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Section struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Section struct {\n\tSectionHeader\n\n\t// Embed ReaderAt for ReadAt method.\n\t// Do not embed SectionReader directly\n\t// to avoid having Read and Seek.\n\t// If a client wants Read and Seek it must use\n\t// Open() to avoid fighting over the seek offset\n\t// with other clients.\n\tio.ReaderAt\n\tsr *io.SectionReader\n}\n```\n\nA Section represents a single section in a Plan 9 a.out file. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/plan9obj#Section.Data",
                    "documentation": {
                      "identifier": "Section.Data",
                      "newPage": false,
                      "searchKey": "plan9obj.Section.Data",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Section) Data() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Section) Data() ([]byte, error)\n```\n\nData reads and returns the contents of the Plan 9 a.out section. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/debug/plan9obj#Section.Open",
                    "documentation": {
                      "identifier": "Section.Open",
                      "newPage": false,
                      "searchKey": "plan9obj.Section.Open",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Section) Open() io.ReadSeeker"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Section) Open() io.ReadSeeker\n```\n\nOpen returns a new ReadSeeker reading the Plan 9 a.out section. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#Sym",
              "documentation": {
                "identifier": "Sym",
                "newPage": false,
                "searchKey": "plan9obj.Sym",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Sym struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Sym struct {\n\tValue uint64\n\tType  rune\n\tName  string\n}\n```\n\nA Symbol represents an entry in a Plan 9 a.out symbol table section. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#formatError",
              "documentation": {
                "identifier": "formatError",
                "newPage": false,
                "searchKey": "plan9obj.formatError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type formatError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype formatError struct {\n\toff int\n\tmsg string\n\tval interface{}\n}\n```\n\nformatError is returned by some operations if the data does not have the correct format for an object file. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/debug/plan9obj#formatError.Error",
                    "documentation": {
                      "identifier": "formatError.Error",
                      "newPage": false,
                      "searchKey": "plan9obj.formatError.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *formatError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *formatError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#prog",
              "documentation": {
                "identifier": "prog",
                "newPage": false,
                "searchKey": "plan9obj.prog",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type prog struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype prog struct {\n\tMagic uint32 /* magic number */\n\tText  uint32 /* size of text segment */\n\tData  uint32 /* size of initialized data */\n\tBss   uint32 /* size of uninitialized data */\n\tSyms  uint32 /* size of symbol table */\n\tEntry uint32 /* entry point */\n\tSpsz  uint32 /* size of pc/sp offset table */\n\tPcsz  uint32 /* size of pc/line number table */\n}\n```\n\nPlan 9 Program header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#sym",
              "documentation": {
                "identifier": "sym",
                "newPage": false,
                "searchKey": "plan9obj.sym",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sym struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sym struct {\n\tvalue uint64\n\ttyp   byte\n\tname  []byte\n}\n```\n\nPlan 9 symbol table entries. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#fileTest",
              "documentation": {
                "identifier": "fileTest",
                "newPage": false,
                "searchKey": "plan9obj.fileTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileTest struct {\n\tfile     string\n\thdr      FileHeader\n\tsections []*SectionHeader\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/debug/plan9obj#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/debug/plan9obj#parseMagic",
              "documentation": {
                "identifier": "parseMagic",
                "newPage": false,
                "searchKey": "plan9obj.parseMagic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseMagic(magic []byte) (uint32, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseMagic(magic []byte) (uint32, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#walksymtab",
              "documentation": {
                "identifier": "walksymtab",
                "newPage": false,
                "searchKey": "plan9obj.walksymtab",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walksymtab(data []byte, ptrsz int, fn func(sym) error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walksymtab(data []byte, ptrsz int, fn func(sym) error) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#newTable",
              "documentation": {
                "identifier": "newTable",
                "newPage": false,
                "searchKey": "plan9obj.newTable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newTable(symtab []byte, ptrsz int) ([]Sym, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newTable(symtab []byte, ptrsz int) ([]Sym, error)\n```\n\nNewTable decodes the Go symbol table in data, returning an in-memory representation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#TestOpen",
              "documentation": {
                "identifier": "TestOpen",
                "newPage": false,
                "searchKey": "plan9obj.TestOpen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOpen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOpen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/debug/plan9obj#TestOpenFailure",
              "documentation": {
                "identifier": "TestOpenFailure",
                "newPage": false,
                "searchKey": "plan9obj.TestOpenFailure",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOpenFailure(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOpenFailure(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
