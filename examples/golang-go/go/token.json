{
  "pathID": "/go/token",
  "documentation": {
    "identifier": "token",
    "newPage": true,
    "searchKey": "go/token",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package token"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package token defines constants representing the lexical tokens of the Go programming language and basic operations on tokens (printing, predicates). \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/go/token#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/token#NoPos",
              "documentation": {
                "identifier": "NoPos",
                "newPage": false,
                "searchKey": "token.NoPos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const NoPos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NoPos Pos = 0\n```\n\nThe zero value for Pos is NoPos; there is no file and line information associated with it, and NoPos.IsValid() is false. NoPos is always smaller than any other Pos value. The corresponding Position value for NoPos is the zero value for Position. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ILLEGAL",
              "documentation": {
                "identifier": "ILLEGAL",
                "newPage": false,
                "searchKey": "token.ILLEGAL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ILLEGAL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ILLEGAL Token = iota\n```\n\nThe list of tokens. \n\nSpecial tokens \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#EOF",
              "documentation": {
                "identifier": "EOF",
                "newPage": false,
                "searchKey": "token.EOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const EOF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EOF\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#COMMENT",
              "documentation": {
                "identifier": "COMMENT",
                "newPage": false,
                "searchKey": "token.COMMENT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const COMMENT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst COMMENT\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#literal_beg",
              "documentation": {
                "identifier": "literal_beg",
                "newPage": false,
                "searchKey": "token.literal_beg",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const literal_beg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst literal_beg\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IDENT",
              "documentation": {
                "identifier": "IDENT",
                "newPage": false,
                "searchKey": "token.IDENT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const IDENT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IDENT // main\n\n```\n\nThe list of tokens. \n\nIdentifiers and basic type literals (these tokens stand for classes of literals) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#INT",
              "documentation": {
                "identifier": "INT",
                "newPage": false,
                "searchKey": "token.INT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const INT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst INT // 12345\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#FLOAT",
              "documentation": {
                "identifier": "FLOAT",
                "newPage": false,
                "searchKey": "token.FLOAT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const FLOAT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FLOAT // 123.45\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IMAG",
              "documentation": {
                "identifier": "IMAG",
                "newPage": false,
                "searchKey": "token.IMAG",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const IMAG"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IMAG // 123.45i\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#CHAR",
              "documentation": {
                "identifier": "CHAR",
                "newPage": false,
                "searchKey": "token.CHAR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const CHAR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CHAR // 'a'\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#STRING",
              "documentation": {
                "identifier": "STRING",
                "newPage": false,
                "searchKey": "token.STRING",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const STRING"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst STRING // \"abc\"\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#literal_end",
              "documentation": {
                "identifier": "literal_end",
                "newPage": false,
                "searchKey": "token.literal_end",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const literal_end"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst literal_end\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#operator_beg",
              "documentation": {
                "identifier": "operator_beg",
                "newPage": false,
                "searchKey": "token.operator_beg",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const operator_beg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst operator_beg\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ADD",
              "documentation": {
                "identifier": "ADD",
                "newPage": false,
                "searchKey": "token.ADD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ADD"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ADD // +\n\n```\n\nThe list of tokens. \n\nOperators and delimiters \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SUB",
              "documentation": {
                "identifier": "SUB",
                "newPage": false,
                "searchKey": "token.SUB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SUB"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SUB // -\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#MUL",
              "documentation": {
                "identifier": "MUL",
                "newPage": false,
                "searchKey": "token.MUL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const MUL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MUL // *\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#QUO",
              "documentation": {
                "identifier": "QUO",
                "newPage": false,
                "searchKey": "token.QUO",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const QUO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst QUO // /\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#REM",
              "documentation": {
                "identifier": "REM",
                "newPage": false,
                "searchKey": "token.REM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const REM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst REM // %\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#AND",
              "documentation": {
                "identifier": "AND",
                "newPage": false,
                "searchKey": "token.AND",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const AND"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AND // &\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#OR",
              "documentation": {
                "identifier": "OR",
                "newPage": false,
                "searchKey": "token.OR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const OR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst OR // |\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#XOR",
              "documentation": {
                "identifier": "XOR",
                "newPage": false,
                "searchKey": "token.XOR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const XOR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst XOR // ^\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SHL",
              "documentation": {
                "identifier": "SHL",
                "newPage": false,
                "searchKey": "token.SHL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHL // <<\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SHR",
              "documentation": {
                "identifier": "SHR",
                "newPage": false,
                "searchKey": "token.SHR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHR // >>\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#AND_NOT",
              "documentation": {
                "identifier": "AND_NOT",
                "newPage": false,
                "searchKey": "token.AND_NOT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const AND_NOT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AND_NOT // &^\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ADD_ASSIGN",
              "documentation": {
                "identifier": "ADD_ASSIGN",
                "newPage": false,
                "searchKey": "token.ADD_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ADD_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ADD_ASSIGN // +=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SUB_ASSIGN",
              "documentation": {
                "identifier": "SUB_ASSIGN",
                "newPage": false,
                "searchKey": "token.SUB_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SUB_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SUB_ASSIGN // -=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#MUL_ASSIGN",
              "documentation": {
                "identifier": "MUL_ASSIGN",
                "newPage": false,
                "searchKey": "token.MUL_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const MUL_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MUL_ASSIGN // *=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#QUO_ASSIGN",
              "documentation": {
                "identifier": "QUO_ASSIGN",
                "newPage": false,
                "searchKey": "token.QUO_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const QUO_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst QUO_ASSIGN // /=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#REM_ASSIGN",
              "documentation": {
                "identifier": "REM_ASSIGN",
                "newPage": false,
                "searchKey": "token.REM_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const REM_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst REM_ASSIGN // %=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#AND_ASSIGN",
              "documentation": {
                "identifier": "AND_ASSIGN",
                "newPage": false,
                "searchKey": "token.AND_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const AND_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AND_ASSIGN // &=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#OR_ASSIGN",
              "documentation": {
                "identifier": "OR_ASSIGN",
                "newPage": false,
                "searchKey": "token.OR_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const OR_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst OR_ASSIGN // |=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#XOR_ASSIGN",
              "documentation": {
                "identifier": "XOR_ASSIGN",
                "newPage": false,
                "searchKey": "token.XOR_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const XOR_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst XOR_ASSIGN // ^=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SHL_ASSIGN",
              "documentation": {
                "identifier": "SHL_ASSIGN",
                "newPage": false,
                "searchKey": "token.SHL_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHL_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHL_ASSIGN // <<=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SHR_ASSIGN",
              "documentation": {
                "identifier": "SHR_ASSIGN",
                "newPage": false,
                "searchKey": "token.SHR_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHR_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHR_ASSIGN // >>=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#AND_NOT_ASSIGN",
              "documentation": {
                "identifier": "AND_NOT_ASSIGN",
                "newPage": false,
                "searchKey": "token.AND_NOT_ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const AND_NOT_ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst AND_NOT_ASSIGN // &^=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LAND",
              "documentation": {
                "identifier": "LAND",
                "newPage": false,
                "searchKey": "token.LAND",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LAND"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LAND // &&\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LOR",
              "documentation": {
                "identifier": "LOR",
                "newPage": false,
                "searchKey": "token.LOR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LOR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LOR // ||\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ARROW",
              "documentation": {
                "identifier": "ARROW",
                "newPage": false,
                "searchKey": "token.ARROW",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ARROW"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ARROW // <-\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#INC",
              "documentation": {
                "identifier": "INC",
                "newPage": false,
                "searchKey": "token.INC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const INC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst INC // ++\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#DEC",
              "documentation": {
                "identifier": "DEC",
                "newPage": false,
                "searchKey": "token.DEC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const DEC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DEC // --\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#EQL",
              "documentation": {
                "identifier": "EQL",
                "newPage": false,
                "searchKey": "token.EQL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const EQL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EQL // ==\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LSS",
              "documentation": {
                "identifier": "LSS",
                "newPage": false,
                "searchKey": "token.LSS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LSS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LSS // <\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#GTR",
              "documentation": {
                "identifier": "GTR",
                "newPage": false,
                "searchKey": "token.GTR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const GTR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst GTR // >\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ASSIGN",
              "documentation": {
                "identifier": "ASSIGN",
                "newPage": false,
                "searchKey": "token.ASSIGN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ASSIGN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ASSIGN // =\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#NOT",
              "documentation": {
                "identifier": "NOT",
                "newPage": false,
                "searchKey": "token.NOT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const NOT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NOT // !\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#NEQ",
              "documentation": {
                "identifier": "NEQ",
                "newPage": false,
                "searchKey": "token.NEQ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const NEQ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NEQ // !=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LEQ",
              "documentation": {
                "identifier": "LEQ",
                "newPage": false,
                "searchKey": "token.LEQ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LEQ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LEQ // <=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#GEQ",
              "documentation": {
                "identifier": "GEQ",
                "newPage": false,
                "searchKey": "token.GEQ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const GEQ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst GEQ // >=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#DEFINE",
              "documentation": {
                "identifier": "DEFINE",
                "newPage": false,
                "searchKey": "token.DEFINE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const DEFINE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DEFINE // :=\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ELLIPSIS",
              "documentation": {
                "identifier": "ELLIPSIS",
                "newPage": false,
                "searchKey": "token.ELLIPSIS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ELLIPSIS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ELLIPSIS // ...\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LPAREN",
              "documentation": {
                "identifier": "LPAREN",
                "newPage": false,
                "searchKey": "token.LPAREN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LPAREN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LPAREN // (\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LBRACK",
              "documentation": {
                "identifier": "LBRACK",
                "newPage": false,
                "searchKey": "token.LBRACK",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LBRACK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LBRACK // [\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LBRACE",
              "documentation": {
                "identifier": "LBRACE",
                "newPage": false,
                "searchKey": "token.LBRACE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LBRACE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LBRACE // {\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#COMMA",
              "documentation": {
                "identifier": "COMMA",
                "newPage": false,
                "searchKey": "token.COMMA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const COMMA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst COMMA // ,\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#PERIOD",
              "documentation": {
                "identifier": "PERIOD",
                "newPage": false,
                "searchKey": "token.PERIOD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const PERIOD"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PERIOD // .\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#RPAREN",
              "documentation": {
                "identifier": "RPAREN",
                "newPage": false,
                "searchKey": "token.RPAREN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const RPAREN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RPAREN // )\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#RBRACK",
              "documentation": {
                "identifier": "RBRACK",
                "newPage": false,
                "searchKey": "token.RBRACK",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const RBRACK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RBRACK // ]\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#RBRACE",
              "documentation": {
                "identifier": "RBRACE",
                "newPage": false,
                "searchKey": "token.RBRACE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const RBRACE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RBRACE // }\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SEMICOLON",
              "documentation": {
                "identifier": "SEMICOLON",
                "newPage": false,
                "searchKey": "token.SEMICOLON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SEMICOLON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SEMICOLON // ;\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#COLON",
              "documentation": {
                "identifier": "COLON",
                "newPage": false,
                "searchKey": "token.COLON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const COLON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst COLON // :\n\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#operator_end",
              "documentation": {
                "identifier": "operator_end",
                "newPage": false,
                "searchKey": "token.operator_end",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const operator_end"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst operator_end\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#keyword_beg",
              "documentation": {
                "identifier": "keyword_beg",
                "newPage": false,
                "searchKey": "token.keyword_beg",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const keyword_beg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst keyword_beg\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#BREAK",
              "documentation": {
                "identifier": "BREAK",
                "newPage": false,
                "searchKey": "token.BREAK",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const BREAK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BREAK\n```\n\nThe list of tokens. \n\nKeywords \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#CASE",
              "documentation": {
                "identifier": "CASE",
                "newPage": false,
                "searchKey": "token.CASE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const CASE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CASE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#CHAN",
              "documentation": {
                "identifier": "CHAN",
                "newPage": false,
                "searchKey": "token.CHAN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const CHAN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CHAN\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#CONST",
              "documentation": {
                "identifier": "CONST",
                "newPage": false,
                "searchKey": "token.CONST",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const CONST"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CONST\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#CONTINUE",
              "documentation": {
                "identifier": "CONTINUE",
                "newPage": false,
                "searchKey": "token.CONTINUE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const CONTINUE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CONTINUE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#DEFAULT",
              "documentation": {
                "identifier": "DEFAULT",
                "newPage": false,
                "searchKey": "token.DEFAULT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const DEFAULT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DEFAULT\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#DEFER",
              "documentation": {
                "identifier": "DEFER",
                "newPage": false,
                "searchKey": "token.DEFER",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const DEFER"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DEFER\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#ELSE",
              "documentation": {
                "identifier": "ELSE",
                "newPage": false,
                "searchKey": "token.ELSE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ELSE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ELSE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#FALLTHROUGH",
              "documentation": {
                "identifier": "FALLTHROUGH",
                "newPage": false,
                "searchKey": "token.FALLTHROUGH",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const FALLTHROUGH"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FALLTHROUGH\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#FOR",
              "documentation": {
                "identifier": "FOR",
                "newPage": false,
                "searchKey": "token.FOR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const FOR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FOR\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#FUNC",
              "documentation": {
                "identifier": "FUNC",
                "newPage": false,
                "searchKey": "token.FUNC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const FUNC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FUNC\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#GO",
              "documentation": {
                "identifier": "GO",
                "newPage": false,
                "searchKey": "token.GO",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const GO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst GO\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#GOTO",
              "documentation": {
                "identifier": "GOTO",
                "newPage": false,
                "searchKey": "token.GOTO",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const GOTO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst GOTO\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IF",
              "documentation": {
                "identifier": "IF",
                "newPage": false,
                "searchKey": "token.IF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const IF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IF\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IMPORT",
              "documentation": {
                "identifier": "IMPORT",
                "newPage": false,
                "searchKey": "token.IMPORT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const IMPORT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IMPORT\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#INTERFACE",
              "documentation": {
                "identifier": "INTERFACE",
                "newPage": false,
                "searchKey": "token.INTERFACE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const INTERFACE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst INTERFACE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#MAP",
              "documentation": {
                "identifier": "MAP",
                "newPage": false,
                "searchKey": "token.MAP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const MAP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MAP\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#PACKAGE",
              "documentation": {
                "identifier": "PACKAGE",
                "newPage": false,
                "searchKey": "token.PACKAGE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const PACKAGE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PACKAGE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#RANGE",
              "documentation": {
                "identifier": "RANGE",
                "newPage": false,
                "searchKey": "token.RANGE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const RANGE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RANGE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#RETURN",
              "documentation": {
                "identifier": "RETURN",
                "newPage": false,
                "searchKey": "token.RETURN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const RETURN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RETURN\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SELECT",
              "documentation": {
                "identifier": "SELECT",
                "newPage": false,
                "searchKey": "token.SELECT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SELECT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SELECT\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#STRUCT",
              "documentation": {
                "identifier": "STRUCT",
                "newPage": false,
                "searchKey": "token.STRUCT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const STRUCT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst STRUCT\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#SWITCH",
              "documentation": {
                "identifier": "SWITCH",
                "newPage": false,
                "searchKey": "token.SWITCH",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SWITCH"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SWITCH\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TYPE",
              "documentation": {
                "identifier": "TYPE",
                "newPage": false,
                "searchKey": "token.TYPE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const TYPE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TYPE\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#VAR",
              "documentation": {
                "identifier": "VAR",
                "newPage": false,
                "searchKey": "token.VAR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const VAR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst VAR\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#keyword_end",
              "documentation": {
                "identifier": "keyword_end",
                "newPage": false,
                "searchKey": "token.keyword_end",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const keyword_end"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst keyword_end\n```\n\nThe list of tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#LowestPrec",
              "documentation": {
                "identifier": "LowestPrec",
                "newPage": false,
                "searchKey": "token.LowestPrec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const LowestPrec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst LowestPrec = 0 // non-operators\n\n```\n\nA set of constants for precedence-based expression parsing. Non-operators have lowest precedence, followed by operators starting with precedence 1 up to unary operators. The highest precedence serves as \"catch-all\" precedence for selector, indexing, and other operator and delimiter tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#UnaryPrec",
              "documentation": {
                "identifier": "UnaryPrec",
                "newPage": false,
                "searchKey": "token.UnaryPrec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnaryPrec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnaryPrec = 6\n```\n\nA set of constants for precedence-based expression parsing. Non-operators have lowest precedence, followed by operators starting with precedence 1 up to unary operators. The highest precedence serves as \"catch-all\" precedence for selector, indexing, and other operator and delimiter tokens. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#HighestPrec",
              "documentation": {
                "identifier": "HighestPrec",
                "newPage": false,
                "searchKey": "token.HighestPrec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const HighestPrec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst HighestPrec = 7\n```\n\nA set of constants for precedence-based expression parsing. Non-operators have lowest precedence, followed by operators starting with precedence 1 up to unary operators. The highest precedence serves as \"catch-all\" precedence for selector, indexing, and other operator and delimiter tokens. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/token#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/token#tokens",
              "documentation": {
                "identifier": "tokens",
                "newPage": false,
                "searchKey": "token.tokens",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tokens"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tokens = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#keywords",
              "documentation": {
                "identifier": "keywords",
                "newPage": false,
                "searchKey": "token.keywords",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var keywords"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar keywords map[string]Token\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#tests",
              "documentation": {
                "identifier": "tests",
                "newPage": false,
                "searchKey": "token.tests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/token#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/token#Position",
              "documentation": {
                "identifier": "Position",
                "newPage": false,
                "searchKey": "token.Position",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Position struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Position struct {\n\tFilename string // filename, if any\n\tOffset   int    // offset, starting at 0\n\tLine     int    // line number, starting at 1\n\tColumn   int    // column number, starting at 1 (byte count)\n}\n```\n\nPosition describes an arbitrary source position including the file, line, and column location. A Position is valid if the line number is > 0. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/token#Position.IsValid",
                    "documentation": {
                      "identifier": "Position.IsValid",
                      "newPage": false,
                      "searchKey": "token.Position.IsValid",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pos *Position) IsValid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pos *Position) IsValid() bool\n```\n\nIsValid reports whether the position is valid. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#Position.String",
                    "documentation": {
                      "identifier": "Position.String",
                      "newPage": false,
                      "searchKey": "token.Position.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pos Position) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pos Position) String() string\n```\n\nString returns a string in one of several forms: \n\n```\nfile:line:column    valid position with file name\nfile:line           valid position with file name but no column (column == 0)\nline:column         valid position without file name\nline                valid position without file name and no column (column == 0)\nfile                invalid position with file name\n-                   invalid position without file name\n\n```\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/token#Pos",
              "documentation": {
                "identifier": "Pos",
                "newPage": false,
                "searchKey": "token.Pos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Pos int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Pos int\n```\n\nPos is a compact encoding of a source position within a file set. It can be converted into a Position for a more convenient, but much larger, representation. \n\nThe Pos value for a given file is a number in the range [base, base+size], where base and size are specified when a file is added to the file set. The difference between a Pos value and the corresponding file base corresponds to the byte offset of that position (represented by the Pos value) from the beginning of the file. Thus, the file base offset is the Pos value representing the first byte in the file. \n\nTo create the Pos value for a specific source offset (measured in bytes), first add the respective file to the current file set using FileSet.AddFile and then call File.Pos(offset) for that file. Given a Pos value p for a specific file set fset, the corresponding Position value is obtained by calling fset.Position(p). \n\nPos values can be compared directly with the usual comparison operators: If two Pos values p and q are in the same file, comparing p and q is equivalent to comparing the respective source file offsets. If p and q are in different files, p < q is true if the file implied by p was added to the respective file set before the file implied by q. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/token#Pos.IsValid",
                    "documentation": {
                      "identifier": "Pos.IsValid",
                      "newPage": false,
                      "searchKey": "token.Pos.IsValid",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Pos) IsValid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Pos) IsValid() bool\n```\n\nIsValid reports whether the position is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/token#File",
              "documentation": {
                "identifier": "File",
                "newPage": false,
                "searchKey": "token.File",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type File struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype File struct {\n\tset  *FileSet\n\tname string // file name as provided to AddFile\n\tbase int    // Pos value range for this file is [base...base+size]\n\tsize int    // file size as provided to AddFile\n\n\t// lines and infos are protected by mutex\n\tmutex sync.Mutex\n\tlines []int // lines contains the offset of the first character for each line (the first entry is always 0)\n\tinfos []lineInfo\n}\n```\n\nA File is a handle for a file belonging to a FileSet. A File has a name, size, and line offset table. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/token#File.Name",
                    "documentation": {
                      "identifier": "File.Name",
                      "newPage": false,
                      "searchKey": "token.File.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Name() string\n```\n\nName returns the file name of file f as registered with AddFile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.Base",
                    "documentation": {
                      "identifier": "File.Base",
                      "newPage": false,
                      "searchKey": "token.File.Base",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Base() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Base() int\n```\n\nBase returns the base offset of file f as registered with AddFile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.Size",
                    "documentation": {
                      "identifier": "File.Size",
                      "newPage": false,
                      "searchKey": "token.File.Size",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Size() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Size() int\n```\n\nSize returns the size of file f as registered with AddFile. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.LineCount",
                    "documentation": {
                      "identifier": "File.LineCount",
                      "newPage": false,
                      "searchKey": "token.File.LineCount",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) LineCount() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) LineCount() int\n```\n\nLineCount returns the number of lines in file f. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.AddLine",
                    "documentation": {
                      "identifier": "File.AddLine",
                      "newPage": false,
                      "searchKey": "token.File.AddLine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) AddLine(offset int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) AddLine(offset int)\n```\n\nAddLine adds the line offset for a new line. The line offset must be larger than the offset for the previous line and smaller than the file size; otherwise the line offset is ignored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.MergeLine",
                    "documentation": {
                      "identifier": "File.MergeLine",
                      "newPage": false,
                      "searchKey": "token.File.MergeLine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) MergeLine(line int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) MergeLine(line int)\n```\n\nMergeLine merges a line with the following line. It is akin to replacing the newline character at the end of the line with a space (to not change the remaining offsets). To obtain the line number, consult e.g. Position.Line. MergeLine will panic if given an invalid line number. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.SetLines",
                    "documentation": {
                      "identifier": "File.SetLines",
                      "newPage": false,
                      "searchKey": "token.File.SetLines",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) SetLines(lines []int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) SetLines(lines []int) bool\n```\n\nSetLines sets the line offsets for a file and reports whether it succeeded. The line offsets are the offsets of the first character of each line; for instance for the content \"ab\\nc\\n\" the line offsets are {0, 3}. An empty file has an empty line offset table. Each line offset must be larger than the offset for the previous line and smaller than the file size; otherwise SetLines fails and returns false. Callers must not mutate the provided slice after SetLines returns. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.SetLinesForContent",
                    "documentation": {
                      "identifier": "File.SetLinesForContent",
                      "newPage": false,
                      "searchKey": "token.File.SetLinesForContent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) SetLinesForContent(content []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) SetLinesForContent(content []byte)\n```\n\nSetLinesForContent sets the line offsets for the given file content. It ignores position-altering //line comments. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.LineStart",
                    "documentation": {
                      "identifier": "File.LineStart",
                      "newPage": false,
                      "searchKey": "token.File.LineStart",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) LineStart(line int) Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) LineStart(line int) Pos\n```\n\nLineStart returns the Pos value of the start of the specified line. It ignores any alternative positions set using AddLineColumnInfo. LineStart panics if the 1-based line number is invalid. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.AddLineInfo",
                    "documentation": {
                      "identifier": "File.AddLineInfo",
                      "newPage": false,
                      "searchKey": "token.File.AddLineInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) AddLineInfo(offset int, filename string, line int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) AddLineInfo(offset int, filename string, line int)\n```\n\nAddLineInfo is like AddLineColumnInfo with a column = 1 argument. It is here for backward-compatibility for code prior to Go 1.11. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.AddLineColumnInfo",
                    "documentation": {
                      "identifier": "File.AddLineColumnInfo",
                      "newPage": false,
                      "searchKey": "token.File.AddLineColumnInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) AddLineColumnInfo(offset int, filename string, line, column int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) AddLineColumnInfo(offset int, filename string, line, column int)\n```\n\nAddLineColumnInfo adds alternative file, line, and column number information for a given file offset. The offset must be larger than the offset for the previously added alternative line info and smaller than the file size; otherwise the information is ignored. \n\nAddLineColumnInfo is typically used to register alternative position information for line directives such as //line filename:line:column. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.Pos",
                    "documentation": {
                      "identifier": "File.Pos",
                      "newPage": false,
                      "searchKey": "token.File.Pos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Pos(offset int) Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Pos(offset int) Pos\n```\n\nPos returns the Pos value for the given file offset; the offset must be <= f.Size(). f.Pos(f.Offset(p)) == p. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.Offset",
                    "documentation": {
                      "identifier": "File.Offset",
                      "newPage": false,
                      "searchKey": "token.File.Offset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Offset(p Pos) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Offset(p Pos) int\n```\n\nOffset returns the offset for the given file position p; p must be a valid Pos value in that file. f.Offset(f.Pos(offset)) == offset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.Line",
                    "documentation": {
                      "identifier": "File.Line",
                      "newPage": false,
                      "searchKey": "token.File.Line",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Line(p Pos) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Line(p Pos) int\n```\n\nLine returns the line number for the given file position p; p must be a Pos value in that file or NoPos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.unpack",
                    "documentation": {
                      "identifier": "File.unpack",
                      "newPage": false,
                      "searchKey": "token.File.unpack",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) unpack(offset int, adjusted bool) (filename string, line, column int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) unpack(offset int, adjusted bool) (filename string, line, column int)\n```\n\nunpack returns the filename and line and column number for a file offset. If adjusted is set, unpack will return the filename and line information possibly adjusted by //line comments; otherwise those comments are ignored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.position",
                    "documentation": {
                      "identifier": "File.position",
                      "newPage": false,
                      "searchKey": "token.File.position",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) position(p Pos, adjusted bool) (pos Position)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) position(p Pos, adjusted bool) (pos Position)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.PositionFor",
                    "documentation": {
                      "identifier": "File.PositionFor",
                      "newPage": false,
                      "searchKey": "token.File.PositionFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) PositionFor(p Pos, adjusted bool) (pos Position)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) PositionFor(p Pos, adjusted bool) (pos Position)\n```\n\nPositionFor returns the Position value for the given file position p. If adjusted is set, the position may be adjusted by position-altering //line comments; otherwise those comments are ignored. p must be a Pos value in f or NoPos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#File.Position",
                    "documentation": {
                      "identifier": "File.Position",
                      "newPage": false,
                      "searchKey": "token.File.Position",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Position(p Pos) (pos Position)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Position(p Pos) (pos Position)\n```\n\nPosition returns the Position value for the given file position p. Calling f.Position(p) is equivalent to calling f.PositionFor(p, true). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/token#lineInfo",
              "documentation": {
                "identifier": "lineInfo",
                "newPage": false,
                "searchKey": "token.lineInfo",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type lineInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lineInfo struct {\n\t// fields are exported to make them accessible to gob\n\tOffset       int\n\tFilename     string\n\tLine, Column int\n}\n```\n\nA lineInfo object describes alternative file, line, and column number information (such as provided via a //line directive) for a given file offset. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#FileSet",
              "documentation": {
                "identifier": "FileSet",
                "newPage": false,
                "searchKey": "token.FileSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileSet struct {\n\tmutex sync.RWMutex // protects the file set\n\tbase  int          // base offset for the next file\n\tfiles []*File      // list of files in the order added to the set\n\tlast  *File        // cache of last file looked up\n}\n```\n\nA FileSet represents a set of source files. Methods of file sets are synchronized; multiple goroutines may invoke them concurrently. \n\nThe byte offsets for each file in a file set are mapped into distinct (integer) intervals, one interval [base, base+size] per file. Base represents the first byte in the file, and size is the corresponding file size. A Pos value is a value in such an interval. By determining the interval a Pos value belongs to, the file, its file base, and thus the byte offset (position) the Pos value is representing can be computed. \n\nWhen adding a new file, a file base must be provided. That can be any integer value that is past the end of any interval of any file already in the file set. For convenience, FileSet.Base provides such a value, which is simply the end of the Pos interval of the most recently added file, plus one. Unless there is a need to extend an interval later, using the FileSet.Base should be used as argument for FileSet.AddFile. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/token#NewFileSet",
                    "documentation": {
                      "identifier": "NewFileSet",
                      "newPage": false,
                      "searchKey": "token.NewFileSet",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFileSet() *FileSet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFileSet() *FileSet\n```\n\nNewFileSet creates a new file set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.Base",
                    "documentation": {
                      "identifier": "FileSet.Base",
                      "newPage": false,
                      "searchKey": "token.FileSet.Base",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) Base() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) Base() int\n```\n\nBase returns the minimum base offset that must be provided to AddFile when adding the next file. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.AddFile",
                    "documentation": {
                      "identifier": "FileSet.AddFile",
                      "newPage": false,
                      "searchKey": "token.FileSet.AddFile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) AddFile(filename string, base, size int) *File"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) AddFile(filename string, base, size int) *File\n```\n\nAddFile adds a new file with a given filename, base offset, and file size to the file set s and returns the file. Multiple files may have the same name. The base offset must not be smaller than the FileSet's Base(), and size must not be negative. As a special case, if a negative base is provided, the current value of the FileSet's Base() is used instead. \n\nAdding the file will set the file set's Base() value to base + size + 1 as the minimum base value for the next file. The following relationship exists between a Pos value p for a given file offset offs: \n\n```\nint(p) = base + offs\n\n```\nwith offs in the range [0, size] and thus p in the range [base, base+size]. For convenience, File.Pos may be used to create file-specific position values from a file offset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.Iterate",
                    "documentation": {
                      "identifier": "FileSet.Iterate",
                      "newPage": false,
                      "searchKey": "token.FileSet.Iterate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) Iterate(f func(*File) bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) Iterate(f func(*File) bool)\n```\n\nIterate calls f for the files in the file set in the order they were added until f returns false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.file",
                    "documentation": {
                      "identifier": "FileSet.file",
                      "newPage": false,
                      "searchKey": "token.FileSet.file",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) file(p Pos) *File"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) file(p Pos) *File\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.File",
                    "documentation": {
                      "identifier": "FileSet.File",
                      "newPage": false,
                      "searchKey": "token.FileSet.File",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) File(p Pos) (f *File)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) File(p Pos) (f *File)\n```\n\nFile returns the file that contains the position p. If no such file is found (for instance for p == NoPos), the result is nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.PositionFor",
                    "documentation": {
                      "identifier": "FileSet.PositionFor",
                      "newPage": false,
                      "searchKey": "token.FileSet.PositionFor",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) PositionFor(p Pos, adjusted bool) (pos Position)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) PositionFor(p Pos, adjusted bool) (pos Position)\n```\n\nPositionFor converts a Pos p in the fileset into a Position value. If adjusted is set, the position may be adjusted by position-altering //line comments; otherwise those comments are ignored. p must be a Pos value in s or NoPos. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.Position",
                    "documentation": {
                      "identifier": "FileSet.Position",
                      "newPage": false,
                      "searchKey": "token.FileSet.Position",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) Position(p Pos) (pos Position)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) Position(p Pos) (pos Position)\n```\n\nPosition converts a Pos p in the fileset into a Position value. Calling s.Position(p) is equivalent to calling s.PositionFor(p, true). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.Read",
                    "documentation": {
                      "identifier": "FileSet.Read",
                      "newPage": false,
                      "searchKey": "token.FileSet.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) Read(decode func(interface{}) error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) Read(decode func(interface{}) error) error\n```\n\nRead calls decode to deserialize a file set into s; s must not be nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#FileSet.Write",
                    "documentation": {
                      "identifier": "FileSet.Write",
                      "newPage": false,
                      "searchKey": "token.FileSet.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *FileSet) Write(encode func(interface{}) error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *FileSet) Write(encode func(interface{}) error) error\n```\n\nWrite calls encode to serialize the file set s. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/token#serializedFile",
              "documentation": {
                "identifier": "serializedFile",
                "newPage": false,
                "searchKey": "token.serializedFile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type serializedFile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype serializedFile struct {\n\t// fields correspond 1:1 to fields with same (lower-case) name in File\n\tName  string\n\tBase  int\n\tSize  int\n\tLines []int\n\tInfos []lineInfo\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#serializedFileSet",
              "documentation": {
                "identifier": "serializedFileSet",
                "newPage": false,
                "searchKey": "token.serializedFileSet",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type serializedFileSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype serializedFileSet struct {\n\tBase  int\n\tFiles []serializedFile\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#Token",
              "documentation": {
                "identifier": "Token",
                "newPage": false,
                "searchKey": "token.Token",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Token int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Token int\n```\n\nToken is the set of lexical tokens of the Go programming language. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/token#Lookup",
                    "documentation": {
                      "identifier": "Lookup",
                      "newPage": false,
                      "searchKey": "token.Lookup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Lookup(ident string) Token"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Lookup(ident string) Token\n```\n\nLookup maps an identifier to its keyword token or IDENT (if not a keyword). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#Token.String",
                    "documentation": {
                      "identifier": "Token.String",
                      "newPage": false,
                      "searchKey": "token.Token.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tok Token) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tok Token) String() string\n```\n\nString returns the string corresponding to the token tok. For operators, delimiters, and keywords the string is the actual token character sequence (e.g., for the token ADD, the string is \"+\"). For all other tokens the string corresponds to the token constant name (e.g. for the token IDENT, the string is \"IDENT\"). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#Token.Precedence",
                    "documentation": {
                      "identifier": "Token.Precedence",
                      "newPage": false,
                      "searchKey": "token.Token.Precedence",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (op Token) Precedence() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (op Token) Precedence() int\n```\n\nPrecedence returns the operator precedence of the binary operator op. If op is not a binary operator, the result is LowestPrecedence. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#Token.IsLiteral",
                    "documentation": {
                      "identifier": "Token.IsLiteral",
                      "newPage": false,
                      "searchKey": "token.Token.IsLiteral",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tok Token) IsLiteral() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tok Token) IsLiteral() bool\n```\n\nIsLiteral returns true for tokens corresponding to identifiers and basic type literals; it returns false otherwise. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#Token.IsOperator",
                    "documentation": {
                      "identifier": "Token.IsOperator",
                      "newPage": false,
                      "searchKey": "token.Token.IsOperator",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tok Token) IsOperator() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tok Token) IsOperator() bool\n```\n\nIsOperator returns true for tokens corresponding to operators and delimiters; it returns false otherwise. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/token#Token.IsKeyword",
                    "documentation": {
                      "identifier": "Token.IsKeyword",
                      "newPage": false,
                      "searchKey": "token.Token.IsKeyword",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tok Token) IsKeyword() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tok Token) IsKeyword() bool\n```\n\nIsKeyword returns true for tokens corresponding to keywords; it returns false otherwise. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/token#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/token#searchLineInfos",
              "documentation": {
                "identifier": "searchLineInfos",
                "newPage": false,
                "searchKey": "token.searchLineInfos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchLineInfos(a []lineInfo, x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchLineInfos(a []lineInfo, x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#searchFiles",
              "documentation": {
                "identifier": "searchFiles",
                "newPage": false,
                "searchKey": "token.searchFiles",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchFiles(a []*File, x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchFiles(a []*File, x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#searchInts",
              "documentation": {
                "identifier": "searchInts",
                "newPage": false,
                "searchKey": "token.searchInts",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func searchInts(a []int, x int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc searchInts(a []int, x int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#init.token.go",
              "documentation": {
                "identifier": "init.token.go",
                "newPage": false,
                "searchKey": "token.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IsExported",
              "documentation": {
                "identifier": "IsExported",
                "newPage": false,
                "searchKey": "token.IsExported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsExported(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsExported(name string) bool\n```\n\nIsExported reports whether name starts with an upper-case letter. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IsKeyword",
              "documentation": {
                "identifier": "IsKeyword",
                "newPage": false,
                "searchKey": "token.IsKeyword",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsKeyword(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsKeyword(name string) bool\n```\n\nIsKeyword reports whether name is a Go keyword, such as \"func\" or \"return\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#IsIdentifier",
              "documentation": {
                "identifier": "IsIdentifier",
                "newPage": false,
                "searchKey": "token.IsIdentifier",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsIdentifier(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsIdentifier(name string) bool\n```\n\nIsIdentifier reports whether name is a Go identifier, that is, a non-empty string made up of letters, digits, and underscores, where the first character is not a digit. Keywords are not identifiers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#BenchmarkSearchInts",
              "documentation": {
                "identifier": "BenchmarkSearchInts",
                "newPage": false,
                "searchKey": "token.BenchmarkSearchInts",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSearchInts(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSearchInts(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#checkPos",
              "documentation": {
                "identifier": "checkPos",
                "newPage": false,
                "searchKey": "token.checkPos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkPos(t *testing.T, msg string, got, want Position)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkPos(t *testing.T, msg string, got, want Position)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestNoPos",
              "documentation": {
                "identifier": "TestNoPos",
                "newPage": false,
                "searchKey": "token.TestNoPos",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoPos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoPos(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#linecol",
              "documentation": {
                "identifier": "linecol",
                "newPage": false,
                "searchKey": "token.linecol",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func linecol(lines []int, offs int) (int, int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc linecol(lines []int, offs int) (int, int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#verifyPositions",
              "documentation": {
                "identifier": "verifyPositions",
                "newPage": false,
                "searchKey": "token.verifyPositions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyPositions(t *testing.T, fset *FileSet, f *File, lines []int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyPositions(t *testing.T, fset *FileSet, f *File, lines []int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#makeTestSource",
              "documentation": {
                "identifier": "makeTestSource",
                "newPage": false,
                "searchKey": "token.makeTestSource",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeTestSource(size int, lines []int) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeTestSource(size int, lines []int) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestPositions",
              "documentation": {
                "identifier": "TestPositions",
                "newPage": false,
                "searchKey": "token.TestPositions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPositions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPositions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestLineInfo",
              "documentation": {
                "identifier": "TestLineInfo",
                "newPage": false,
                "searchKey": "token.TestLineInfo",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineInfo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineInfo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestFiles",
              "documentation": {
                "identifier": "TestFiles",
                "newPage": false,
                "searchKey": "token.TestFiles",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFiles(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFiles(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestFileSetPastEnd",
              "documentation": {
                "identifier": "TestFileSetPastEnd",
                "newPage": false,
                "searchKey": "token.TestFileSetPastEnd",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileSetPastEnd(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileSetPastEnd(t *testing.T)\n```\n\nFileSet.File should return nil if Pos is past the end of the FileSet. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestFileSetCacheUnlikely",
              "documentation": {
                "identifier": "TestFileSetCacheUnlikely",
                "newPage": false,
                "searchKey": "token.TestFileSetCacheUnlikely",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileSetCacheUnlikely(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileSetCacheUnlikely(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestFileSetRace",
              "documentation": {
                "identifier": "TestFileSetRace",
                "newPage": false,
                "searchKey": "token.TestFileSetRace",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileSetRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileSetRace(t *testing.T)\n```\n\nissue 4345. Test that concurrent use of FileSet.Pos does not trigger a race in the FileSet position cache. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestFileSetRace2",
              "documentation": {
                "identifier": "TestFileSetRace2",
                "newPage": false,
                "searchKey": "token.TestFileSetRace2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileSetRace2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileSetRace2(t *testing.T)\n```\n\nissue 16548. Test that concurrent use of File.AddLine and FileSet.PositionFor does not trigger a race in the FileSet position cache. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestPositionFor",
              "documentation": {
                "identifier": "TestPositionFor",
                "newPage": false,
                "searchKey": "token.TestPositionFor",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPositionFor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPositionFor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestLineStart",
              "documentation": {
                "identifier": "TestLineStart",
                "newPage": false,
                "searchKey": "token.TestLineStart",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineStart(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineStart(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#equal",
              "documentation": {
                "identifier": "equal",
                "newPage": false,
                "searchKey": "token.equal",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func equal(p, q *FileSet) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc equal(p, q *FileSet) error\n```\n\nequal returns nil if p and q describe the same file set; otherwise it returns an error describing the discrepancy. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#checkSerialize",
              "documentation": {
                "identifier": "checkSerialize",
                "newPage": false,
                "searchKey": "token.checkSerialize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkSerialize(t *testing.T, p *FileSet)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkSerialize(t *testing.T, p *FileSet)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestSerialization",
              "documentation": {
                "identifier": "TestSerialization",
                "newPage": false,
                "searchKey": "token.TestSerialization",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSerialization(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSerialization(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/token#TestIsIdentifier",
              "documentation": {
                "identifier": "TestIsIdentifier",
                "newPage": false,
                "searchKey": "token.TestIsIdentifier",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsIdentifier(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsIdentifier(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
