{
  "pathID": "/go/ast",
  "documentation": {
    "identifier": "ast",
    "newPage": true,
    "searchKey": "go/ast",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package ast"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package ast declares the types used to represent syntax trees for Go packages. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/go/ast#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast#SEND",
              "documentation": {
                "identifier": "SEND",
                "newPage": false,
                "searchKey": "ast.SEND",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SEND"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SEND ChanDir = 1 << iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#RECV",
              "documentation": {
                "identifier": "RECV",
                "newPage": false,
                "searchKey": "ast.RECV",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RECV"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RECV\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FilterFuncDuplicates",
              "documentation": {
                "identifier": "FilterFuncDuplicates",
                "newPage": false,
                "searchKey": "ast.FilterFuncDuplicates",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const FilterFuncDuplicates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FilterFuncDuplicates MergeMode = 1 << iota\n```\n\nIf set, duplicate function declarations are excluded. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FilterUnassociatedComments",
              "documentation": {
                "identifier": "FilterUnassociatedComments",
                "newPage": false,
                "searchKey": "ast.FilterUnassociatedComments",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const FilterUnassociatedComments"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FilterUnassociatedComments\n```\n\nIf set, comments that are not associated with a specific AST node (as Doc or Comment) are excluded. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FilterImportDuplicates",
              "documentation": {
                "identifier": "FilterImportDuplicates",
                "newPage": false,
                "searchKey": "ast.FilterImportDuplicates",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const FilterImportDuplicates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FilterImportDuplicates\n```\n\nIf set, duplicate import declarations are excluded. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Bad",
              "documentation": {
                "identifier": "Bad",
                "newPage": false,
                "searchKey": "ast.Bad",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Bad"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Bad ObjKind = iota // for error handling\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Pkg",
              "documentation": {
                "identifier": "Pkg",
                "newPage": false,
                "searchKey": "ast.Pkg",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Pkg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Pkg // package\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Con",
              "documentation": {
                "identifier": "Con",
                "newPage": false,
                "searchKey": "ast.Con",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Con"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Con // constant\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Typ",
              "documentation": {
                "identifier": "Typ",
                "newPage": false,
                "searchKey": "ast.Typ",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Typ"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Typ // type\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Var",
              "documentation": {
                "identifier": "Var",
                "newPage": false,
                "searchKey": "ast.Var",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Var"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Var // variable\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Fun",
              "documentation": {
                "identifier": "Fun",
                "newPage": false,
                "searchKey": "ast.Fun",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Fun"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Fun // function or method\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Lbl",
              "documentation": {
                "identifier": "Lbl",
                "newPage": false,
                "searchKey": "ast.Lbl",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Lbl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Lbl // label\n\n```\n\nThe list of possible Object kinds. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/ast#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast#separator",
              "documentation": {
                "identifier": "separator",
                "newPage": false,
                "searchKey": "ast.separator",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var separator"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar separator = &Comment{token.NoPos, \"//\"}\n```\n\nseparator is an empty //-style comment that is interspersed between different comment groups when they are concatenated into a single group \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#indent",
              "documentation": {
                "identifier": "indent",
                "newPage": false,
                "searchKey": "ast.indent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var indent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indent = []byte(\".  \")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#objKindStrings",
              "documentation": {
                "identifier": "objKindStrings",
                "newPage": false,
                "searchKey": "ast.objKindStrings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var objKindStrings"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar objKindStrings = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#comments",
              "documentation": {
                "identifier": "comments",
                "newPage": false,
                "searchKey": "ast.comments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var comments"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar comments = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#isDirectiveTests",
              "documentation": {
                "identifier": "isDirectiveTests",
                "newPage": false,
                "searchKey": "ast.isDirectiveTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var isDirectiveTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isDirectiveTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#tests",
              "documentation": {
                "identifier": "tests",
                "newPage": false,
                "searchKey": "ast.tests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/ast#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast#Node",
              "documentation": {
                "identifier": "Node",
                "newPage": false,
                "searchKey": "ast.Node",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node interface {\n\tPos() token.Pos // position of first character belonging to the node\n\tEnd() token.Pos // position of first character immediately after the node\n}\n```\n\nAll node types implement the Node interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Expr",
              "documentation": {
                "identifier": "Expr",
                "newPage": false,
                "searchKey": "ast.Expr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Expr interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Expr interface {\n\tNode\n\texprNode()\n}\n```\n\nAll expression nodes implement the Expr interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Stmt",
              "documentation": {
                "identifier": "Stmt",
                "newPage": false,
                "searchKey": "ast.Stmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Stmt interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Stmt interface {\n\tNode\n\tstmtNode()\n}\n```\n\nAll statement nodes implement the Stmt interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Decl",
              "documentation": {
                "identifier": "Decl",
                "newPage": false,
                "searchKey": "ast.Decl",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Decl interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Decl interface {\n\tNode\n\tdeclNode()\n}\n```\n\nAll declaration nodes implement the Decl interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Comment",
              "documentation": {
                "identifier": "Comment",
                "newPage": false,
                "searchKey": "ast.Comment",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Comment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Comment struct {\n\tSlash token.Pos // position of \"/\" starting the comment\n\tText  string    // comment text (excluding '\\n' for //-style comments)\n}\n```\n\nA Comment node represents a single //-style or /*-style comment. \n\nThe Text field contains the comment text without carriage returns (\\r) that may have been present in the source. Because a comment's end position is computed using len(Text), the position reported by End() does not match the true source end position for comments containing carriage returns. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#Comment.Pos",
                    "documentation": {
                      "identifier": "Comment.Pos",
                      "newPage": false,
                      "searchKey": "ast.Comment.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Comment) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Comment) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Comment.End",
                    "documentation": {
                      "identifier": "Comment.End",
                      "newPage": false,
                      "searchKey": "ast.Comment.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Comment) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Comment) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#CommentGroup",
              "documentation": {
                "identifier": "CommentGroup",
                "newPage": false,
                "searchKey": "ast.CommentGroup",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommentGroup struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommentGroup struct {\n\tList []*Comment // len(List) > 0\n}\n```\n\nA CommentGroup represents a sequence of comments with no other tokens and no empty lines between. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#CommentGroup.Pos",
                    "documentation": {
                      "identifier": "CommentGroup.Pos",
                      "newPage": false,
                      "searchKey": "ast.CommentGroup.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *CommentGroup) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *CommentGroup) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentGroup.End",
                    "documentation": {
                      "identifier": "CommentGroup.End",
                      "newPage": false,
                      "searchKey": "ast.CommentGroup.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *CommentGroup) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *CommentGroup) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentGroup.Text",
                    "documentation": {
                      "identifier": "CommentGroup.Text",
                      "newPage": false,
                      "searchKey": "ast.CommentGroup.Text",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *CommentGroup) Text() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *CommentGroup) Text() string\n```\n\nText returns the text of the comment. Comment markers (//, /*, and */), the first space of a line comment, and leading and trailing empty lines are removed. Comment directives like \"//line\" and \"//go:noinline\" are also removed. Multiple empty lines are reduced to one, and trailing space on lines is trimmed. Unless the result is empty, it is newline-terminated. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Field",
              "documentation": {
                "identifier": "Field",
                "newPage": false,
                "searchKey": "ast.Field",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Field struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Field struct {\n\tDoc     *CommentGroup // associated documentation; or nil\n\tNames   []*Ident      // field/method/(type) parameter names, or type \"type\"; or nil\n\tType    Expr          // field/method/parameter type, type list type; or nil\n\tTag     *BasicLit     // field tag; or nil\n\tComment *CommentGroup // line comments; or nil\n}\n```\n\nA Field represents a Field declaration list in a struct type, a method list in an interface type, or a parameter/result declaration in a signature. Field.Names is nil for unnamed parameters (parameter lists which only contain types) and embedded struct fields. In the latter case, the field name is the type name. Field.Names contains a single name \"type\" for elements of interface type lists. Types belonging to the same type list share the same \"type\" identifier which also records the position of that keyword. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#Field.Pos",
                    "documentation": {
                      "identifier": "Field.Pos",
                      "newPage": false,
                      "searchKey": "ast.Field.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *Field) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *Field) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Field.End",
                    "documentation": {
                      "identifier": "Field.End",
                      "newPage": false,
                      "searchKey": "ast.Field.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *Field) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *Field) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FieldList",
              "documentation": {
                "identifier": "FieldList",
                "newPage": false,
                "searchKey": "ast.FieldList",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FieldList struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FieldList struct {\n\tOpening token.Pos // position of opening parenthesis/brace, if any\n\tList    []*Field  // field list; or nil\n\tClosing token.Pos // position of closing parenthesis/brace, if any\n}\n```\n\nA FieldList represents a list of Fields, enclosed by parentheses or braces. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#FieldList.Pos",
                    "documentation": {
                      "identifier": "FieldList.Pos",
                      "newPage": false,
                      "searchKey": "ast.FieldList.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldList) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldList) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FieldList.End",
                    "documentation": {
                      "identifier": "FieldList.End",
                      "newPage": false,
                      "searchKey": "ast.FieldList.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldList) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldList) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FieldList.NumFields",
                    "documentation": {
                      "identifier": "FieldList.NumFields",
                      "newPage": false,
                      "searchKey": "ast.FieldList.NumFields",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldList) NumFields() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldList) NumFields() int\n```\n\nNumFields returns the number of parameters or struct fields represented by a FieldList. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BadExpr",
              "documentation": {
                "identifier": "BadExpr",
                "newPage": false,
                "searchKey": "ast.BadExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadExpr struct {\n\tFrom, To token.Pos // position range of bad expression\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA BadExpr node is a placeholder for an expression containing syntax errors for which a correct expression node cannot be created. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BadExpr.Pos",
                    "documentation": {
                      "identifier": "BadExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.BadExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *BadExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *BadExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BadExpr.End",
                    "documentation": {
                      "identifier": "BadExpr.End",
                      "newPage": false,
                      "searchKey": "ast.BadExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *BadExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *BadExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BadExpr.exprNode",
                    "documentation": {
                      "identifier": "BadExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.BadExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BadExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BadExpr) exprNode()\n```\n\nexprNode() ensures that only expression/type nodes can be assigned to an Expr. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Ident",
              "documentation": {
                "identifier": "Ident",
                "newPage": false,
                "searchKey": "ast.Ident",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ident struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ident struct {\n\tNamePos token.Pos // identifier position\n\tName    string    // identifier name\n\tObj     *Object   // denoted object; or nil\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nAn Ident node represents an identifier. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#NewIdent",
                    "documentation": {
                      "identifier": "NewIdent",
                      "newPage": false,
                      "searchKey": "ast.NewIdent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewIdent(name string) *Ident"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewIdent(name string) *Ident\n```\n\nNewIdent creates a new Ident without position. Useful for ASTs generated by code other than the Go parser. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#fieldName",
                    "documentation": {
                      "identifier": "fieldName",
                      "newPage": false,
                      "searchKey": "ast.fieldName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func fieldName(x Expr) *Ident"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc fieldName(x Expr) *Ident\n```\n\nfieldName assumes that x is the type of an anonymous field and returns the corresponding field name. If x is not an acceptable anonymous field, the result is nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ident.Pos",
                    "documentation": {
                      "identifier": "Ident.Pos",
                      "newPage": false,
                      "searchKey": "ast.Ident.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *Ident) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *Ident) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ident.End",
                    "documentation": {
                      "identifier": "Ident.End",
                      "newPage": false,
                      "searchKey": "ast.Ident.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *Ident) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *Ident) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ident.exprNode",
                    "documentation": {
                      "identifier": "Ident.exprNode",
                      "newPage": false,
                      "searchKey": "ast.Ident.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*Ident) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*Ident) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ident.IsExported",
                    "documentation": {
                      "identifier": "Ident.IsExported",
                      "newPage": false,
                      "searchKey": "ast.Ident.IsExported",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (id *Ident) IsExported() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (id *Ident) IsExported() bool\n```\n\nIsExported reports whether id starts with an upper-case letter. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ident.String",
                    "documentation": {
                      "identifier": "Ident.String",
                      "newPage": false,
                      "searchKey": "ast.Ident.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (id *Ident) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (id *Ident) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Ellipsis",
              "documentation": {
                "identifier": "Ellipsis",
                "newPage": false,
                "searchKey": "ast.Ellipsis",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ellipsis struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ellipsis struct {\n\tEllipsis token.Pos // position of \"...\"\n\tElt      Expr      // ellipsis element type (parameter lists only); or nil\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nAn Ellipsis node stands for the \"...\" type in a parameter list or the \"...\" length in an array type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#Ellipsis.Pos",
                    "documentation": {
                      "identifier": "Ellipsis.Pos",
                      "newPage": false,
                      "searchKey": "ast.Ellipsis.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *Ellipsis) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *Ellipsis) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ellipsis.End",
                    "documentation": {
                      "identifier": "Ellipsis.End",
                      "newPage": false,
                      "searchKey": "ast.Ellipsis.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *Ellipsis) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *Ellipsis) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Ellipsis.exprNode",
                    "documentation": {
                      "identifier": "Ellipsis.exprNode",
                      "newPage": false,
                      "searchKey": "ast.Ellipsis.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*Ellipsis) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*Ellipsis) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BasicLit",
              "documentation": {
                "identifier": "BasicLit",
                "newPage": false,
                "searchKey": "ast.BasicLit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BasicLit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BasicLit struct {\n\tValuePos token.Pos   // literal position\n\tKind     token.Token // token.INT, token.FLOAT, token.IMAG, token.CHAR, or token.STRING\n\tValue    string      // literal string; e.g. 42, 0x7f, 3.14, 1e-9, 2.4i, 'a', '\\x7f', \"foo\" or `\\m\\n\\o`\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA BasicLit node represents a literal of basic type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BasicLit.Pos",
                    "documentation": {
                      "identifier": "BasicLit.Pos",
                      "newPage": false,
                      "searchKey": "ast.BasicLit.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *BasicLit) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *BasicLit) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BasicLit.End",
                    "documentation": {
                      "identifier": "BasicLit.End",
                      "newPage": false,
                      "searchKey": "ast.BasicLit.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *BasicLit) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *BasicLit) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BasicLit.exprNode",
                    "documentation": {
                      "identifier": "BasicLit.exprNode",
                      "newPage": false,
                      "searchKey": "ast.BasicLit.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BasicLit) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BasicLit) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FuncLit",
              "documentation": {
                "identifier": "FuncLit",
                "newPage": false,
                "searchKey": "ast.FuncLit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FuncLit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FuncLit struct {\n\tType *FuncType  // function type\n\tBody *BlockStmt // function body\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA FuncLit node represents a function literal. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#FuncLit.Pos",
                    "documentation": {
                      "identifier": "FuncLit.Pos",
                      "newPage": false,
                      "searchKey": "ast.FuncLit.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *FuncLit) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *FuncLit) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FuncLit.End",
                    "documentation": {
                      "identifier": "FuncLit.End",
                      "newPage": false,
                      "searchKey": "ast.FuncLit.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *FuncLit) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *FuncLit) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FuncLit.exprNode",
                    "documentation": {
                      "identifier": "FuncLit.exprNode",
                      "newPage": false,
                      "searchKey": "ast.FuncLit.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*FuncLit) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*FuncLit) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#CompositeLit",
              "documentation": {
                "identifier": "CompositeLit",
                "newPage": false,
                "searchKey": "ast.CompositeLit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CompositeLit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CompositeLit struct {\n\tType       Expr      // literal type; or nil\n\tLbrace     token.Pos // position of \"{\"\n\tElts       []Expr    // list of composite elements; or nil\n\tRbrace     token.Pos // position of \"}\"\n\tIncomplete bool      // true if (source) expressions are missing in the Elts list\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA CompositeLit node represents a composite literal. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#CompositeLit.Pos",
                    "documentation": {
                      "identifier": "CompositeLit.Pos",
                      "newPage": false,
                      "searchKey": "ast.CompositeLit.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *CompositeLit) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *CompositeLit) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CompositeLit.End",
                    "documentation": {
                      "identifier": "CompositeLit.End",
                      "newPage": false,
                      "searchKey": "ast.CompositeLit.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *CompositeLit) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *CompositeLit) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CompositeLit.exprNode",
                    "documentation": {
                      "identifier": "CompositeLit.exprNode",
                      "newPage": false,
                      "searchKey": "ast.CompositeLit.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*CompositeLit) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*CompositeLit) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ParenExpr",
              "documentation": {
                "identifier": "ParenExpr",
                "newPage": false,
                "searchKey": "ast.ParenExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ParenExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ParenExpr struct {\n\tLparen token.Pos // position of \"(\"\n\tX      Expr      // parenthesized expression\n\tRparen token.Pos // position of \")\"\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA ParenExpr node represents a parenthesized expression. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ParenExpr.Pos",
                    "documentation": {
                      "identifier": "ParenExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.ParenExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ParenExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ParenExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ParenExpr.End",
                    "documentation": {
                      "identifier": "ParenExpr.End",
                      "newPage": false,
                      "searchKey": "ast.ParenExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ParenExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ParenExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ParenExpr.exprNode",
                    "documentation": {
                      "identifier": "ParenExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.ParenExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ParenExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ParenExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#SelectorExpr",
              "documentation": {
                "identifier": "SelectorExpr",
                "newPage": false,
                "searchKey": "ast.SelectorExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SelectorExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SelectorExpr struct {\n\tX   Expr   // expression\n\tSel *Ident // field selector\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA SelectorExpr node represents an expression followed by a selector. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#SelectorExpr.Pos",
                    "documentation": {
                      "identifier": "SelectorExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.SelectorExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *SelectorExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *SelectorExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SelectorExpr.End",
                    "documentation": {
                      "identifier": "SelectorExpr.End",
                      "newPage": false,
                      "searchKey": "ast.SelectorExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *SelectorExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *SelectorExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SelectorExpr.exprNode",
                    "documentation": {
                      "identifier": "SelectorExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.SelectorExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*SelectorExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*SelectorExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#IndexExpr",
              "documentation": {
                "identifier": "IndexExpr",
                "newPage": false,
                "searchKey": "ast.IndexExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexExpr struct {\n\tX      Expr      // expression\n\tLbrack token.Pos // position of \"[\"\n\tIndex  Expr      // index expression\n\tRbrack token.Pos // position of \"]\"\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nAn IndexExpr node represents an expression followed by an index. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#IndexExpr.Pos",
                    "documentation": {
                      "identifier": "IndexExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.IndexExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *IndexExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *IndexExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#IndexExpr.End",
                    "documentation": {
                      "identifier": "IndexExpr.End",
                      "newPage": false,
                      "searchKey": "ast.IndexExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *IndexExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *IndexExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#IndexExpr.exprNode",
                    "documentation": {
                      "identifier": "IndexExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.IndexExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*IndexExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*IndexExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#SliceExpr",
              "documentation": {
                "identifier": "SliceExpr",
                "newPage": false,
                "searchKey": "ast.SliceExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SliceExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SliceExpr struct {\n\tX      Expr      // expression\n\tLbrack token.Pos // position of \"[\"\n\tLow    Expr      // begin of slice range; or nil\n\tHigh   Expr      // end of slice range; or nil\n\tMax    Expr      // maximum capacity of slice; or nil\n\tSlice3 bool      // true if 3-index slice (2 colons present)\n\tRbrack token.Pos // position of \"]\"\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA SliceExpr node represents an expression followed by slice indices. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#SliceExpr.Pos",
                    "documentation": {
                      "identifier": "SliceExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.SliceExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *SliceExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *SliceExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SliceExpr.End",
                    "documentation": {
                      "identifier": "SliceExpr.End",
                      "newPage": false,
                      "searchKey": "ast.SliceExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *SliceExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *SliceExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SliceExpr.exprNode",
                    "documentation": {
                      "identifier": "SliceExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.SliceExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*SliceExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*SliceExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#TypeAssertExpr",
              "documentation": {
                "identifier": "TypeAssertExpr",
                "newPage": false,
                "searchKey": "ast.TypeAssertExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TypeAssertExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TypeAssertExpr struct {\n\tX      Expr      // expression\n\tLparen token.Pos // position of \"(\"\n\tType   Expr      // asserted type; nil means type switch X.(type)\n\tRparen token.Pos // position of \")\"\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA TypeAssertExpr node represents an expression followed by a type assertion. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#TypeAssertExpr.Pos",
                    "documentation": {
                      "identifier": "TypeAssertExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.TypeAssertExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *TypeAssertExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *TypeAssertExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#TypeAssertExpr.End",
                    "documentation": {
                      "identifier": "TypeAssertExpr.End",
                      "newPage": false,
                      "searchKey": "ast.TypeAssertExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *TypeAssertExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *TypeAssertExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#TypeAssertExpr.exprNode",
                    "documentation": {
                      "identifier": "TypeAssertExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.TypeAssertExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*TypeAssertExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*TypeAssertExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#CallExpr",
              "documentation": {
                "identifier": "CallExpr",
                "newPage": false,
                "searchKey": "ast.CallExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CallExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CallExpr struct {\n\tFun      Expr      // function expression\n\tLparen   token.Pos // position of \"(\"\n\tArgs     []Expr    // function arguments; or nil\n\tEllipsis token.Pos // position of \"...\" (token.NoPos if there is no \"...\")\n\tRparen   token.Pos // position of \")\"\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA CallExpr node represents an expression followed by an argument list. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#CallExpr.Pos",
                    "documentation": {
                      "identifier": "CallExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.CallExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *CallExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *CallExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CallExpr.End",
                    "documentation": {
                      "identifier": "CallExpr.End",
                      "newPage": false,
                      "searchKey": "ast.CallExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *CallExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *CallExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CallExpr.exprNode",
                    "documentation": {
                      "identifier": "CallExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.CallExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*CallExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*CallExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#StarExpr",
              "documentation": {
                "identifier": "StarExpr",
                "newPage": false,
                "searchKey": "ast.StarExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StarExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StarExpr struct {\n\tStar token.Pos // position of \"*\"\n\tX    Expr      // operand\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA StarExpr node represents an expression of the form \"*\" Expression. Semantically it could be a unary \"*\" expression, or a pointer type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#StarExpr.Pos",
                    "documentation": {
                      "identifier": "StarExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.StarExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *StarExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *StarExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#StarExpr.End",
                    "documentation": {
                      "identifier": "StarExpr.End",
                      "newPage": false,
                      "searchKey": "ast.StarExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *StarExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *StarExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#StarExpr.exprNode",
                    "documentation": {
                      "identifier": "StarExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.StarExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*StarExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*StarExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#UnaryExpr",
              "documentation": {
                "identifier": "UnaryExpr",
                "newPage": false,
                "searchKey": "ast.UnaryExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnaryExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnaryExpr struct {\n\tOpPos token.Pos   // position of Op\n\tOp    token.Token // operator\n\tX     Expr        // operand\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA UnaryExpr node represents a unary expression. Unary \"*\" expressions are represented via StarExpr nodes. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#UnaryExpr.Pos",
                    "documentation": {
                      "identifier": "UnaryExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.UnaryExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *UnaryExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *UnaryExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#UnaryExpr.End",
                    "documentation": {
                      "identifier": "UnaryExpr.End",
                      "newPage": false,
                      "searchKey": "ast.UnaryExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *UnaryExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *UnaryExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#UnaryExpr.exprNode",
                    "documentation": {
                      "identifier": "UnaryExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.UnaryExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*UnaryExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*UnaryExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BinaryExpr",
              "documentation": {
                "identifier": "BinaryExpr",
                "newPage": false,
                "searchKey": "ast.BinaryExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BinaryExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BinaryExpr struct {\n\tX     Expr        // left operand\n\tOpPos token.Pos   // position of Op\n\tOp    token.Token // operator\n\tY     Expr        // right operand\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA BinaryExpr node represents a binary expression. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BinaryExpr.Pos",
                    "documentation": {
                      "identifier": "BinaryExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.BinaryExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *BinaryExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *BinaryExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BinaryExpr.End",
                    "documentation": {
                      "identifier": "BinaryExpr.End",
                      "newPage": false,
                      "searchKey": "ast.BinaryExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *BinaryExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *BinaryExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BinaryExpr.exprNode",
                    "documentation": {
                      "identifier": "BinaryExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.BinaryExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BinaryExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BinaryExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#KeyValueExpr",
              "documentation": {
                "identifier": "KeyValueExpr",
                "newPage": false,
                "searchKey": "ast.KeyValueExpr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type KeyValueExpr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype KeyValueExpr struct {\n\tKey   Expr\n\tColon token.Pos // position of \":\"\n\tValue Expr\n}\n```\n\nAn expression is represented by a tree consisting of one or more of the following concrete expression nodes. \n\nA KeyValueExpr node represents (key : value) pairs in composite literals. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#KeyValueExpr.Pos",
                    "documentation": {
                      "identifier": "KeyValueExpr.Pos",
                      "newPage": false,
                      "searchKey": "ast.KeyValueExpr.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *KeyValueExpr) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *KeyValueExpr) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#KeyValueExpr.End",
                    "documentation": {
                      "identifier": "KeyValueExpr.End",
                      "newPage": false,
                      "searchKey": "ast.KeyValueExpr.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *KeyValueExpr) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *KeyValueExpr) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#KeyValueExpr.exprNode",
                    "documentation": {
                      "identifier": "KeyValueExpr.exprNode",
                      "newPage": false,
                      "searchKey": "ast.KeyValueExpr.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*KeyValueExpr) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*KeyValueExpr) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ChanDir",
              "documentation": {
                "identifier": "ChanDir",
                "newPage": false,
                "searchKey": "ast.ChanDir",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChanDir int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChanDir int\n```\n\nThe direction of a channel type is indicated by a bit mask including one or both of the following constants. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ArrayType",
              "documentation": {
                "identifier": "ArrayType",
                "newPage": false,
                "searchKey": "ast.ArrayType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ArrayType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ArrayType struct {\n\tLbrack token.Pos // position of \"[\"\n\tLen    Expr      // Ellipsis node for [...]T array types, nil for slice types\n\tElt    Expr      // element type\n}\n```\n\nA type is represented by a tree consisting of one or more of the following type-specific expression nodes. \n\nAn ArrayType node represents an array or slice type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ArrayType.Pos",
                    "documentation": {
                      "identifier": "ArrayType.Pos",
                      "newPage": false,
                      "searchKey": "ast.ArrayType.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ArrayType) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ArrayType) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ArrayType.End",
                    "documentation": {
                      "identifier": "ArrayType.End",
                      "newPage": false,
                      "searchKey": "ast.ArrayType.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ArrayType) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ArrayType) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ArrayType.exprNode",
                    "documentation": {
                      "identifier": "ArrayType.exprNode",
                      "newPage": false,
                      "searchKey": "ast.ArrayType.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ArrayType) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ArrayType) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#StructType",
              "documentation": {
                "identifier": "StructType",
                "newPage": false,
                "searchKey": "ast.StructType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructType struct {\n\tStruct     token.Pos  // position of \"struct\" keyword\n\tFields     *FieldList // list of field declarations\n\tIncomplete bool       // true if (source) fields are missing in the Fields list\n}\n```\n\nA type is represented by a tree consisting of one or more of the following type-specific expression nodes. \n\nA StructType node represents a struct type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#StructType.Pos",
                    "documentation": {
                      "identifier": "StructType.Pos",
                      "newPage": false,
                      "searchKey": "ast.StructType.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *StructType) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *StructType) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#StructType.End",
                    "documentation": {
                      "identifier": "StructType.End",
                      "newPage": false,
                      "searchKey": "ast.StructType.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *StructType) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *StructType) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#StructType.exprNode",
                    "documentation": {
                      "identifier": "StructType.exprNode",
                      "newPage": false,
                      "searchKey": "ast.StructType.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*StructType) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*StructType) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#InterfaceType",
              "documentation": {
                "identifier": "InterfaceType",
                "newPage": false,
                "searchKey": "ast.InterfaceType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InterfaceType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InterfaceType struct {\n\tInterface  token.Pos  // position of \"interface\" keyword\n\tMethods    *FieldList // list of embedded interfaces, methods, or types\n\tIncomplete bool       // true if (source) methods or types are missing in the Methods list\n}\n```\n\nA type is represented by a tree consisting of one or more of the following type-specific expression nodes. \n\nAn InterfaceType node represents an interface type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#InterfaceType.Pos",
                    "documentation": {
                      "identifier": "InterfaceType.Pos",
                      "newPage": false,
                      "searchKey": "ast.InterfaceType.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *InterfaceType) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *InterfaceType) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#InterfaceType.End",
                    "documentation": {
                      "identifier": "InterfaceType.End",
                      "newPage": false,
                      "searchKey": "ast.InterfaceType.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *InterfaceType) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *InterfaceType) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#InterfaceType.exprNode",
                    "documentation": {
                      "identifier": "InterfaceType.exprNode",
                      "newPage": false,
                      "searchKey": "ast.InterfaceType.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*InterfaceType) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*InterfaceType) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#MapType",
              "documentation": {
                "identifier": "MapType",
                "newPage": false,
                "searchKey": "ast.MapType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MapType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MapType struct {\n\tMap   token.Pos // position of \"map\" keyword\n\tKey   Expr\n\tValue Expr\n}\n```\n\nA type is represented by a tree consisting of one or more of the following type-specific expression nodes. \n\nA MapType node represents a map type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#MapType.Pos",
                    "documentation": {
                      "identifier": "MapType.Pos",
                      "newPage": false,
                      "searchKey": "ast.MapType.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *MapType) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *MapType) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#MapType.End",
                    "documentation": {
                      "identifier": "MapType.End",
                      "newPage": false,
                      "searchKey": "ast.MapType.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *MapType) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *MapType) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#MapType.exprNode",
                    "documentation": {
                      "identifier": "MapType.exprNode",
                      "newPage": false,
                      "searchKey": "ast.MapType.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*MapType) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*MapType) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ChanType",
              "documentation": {
                "identifier": "ChanType",
                "newPage": false,
                "searchKey": "ast.ChanType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChanType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChanType struct {\n\tBegin token.Pos // position of \"chan\" keyword or \"<-\" (whichever comes first)\n\tArrow token.Pos // position of \"<-\" (token.NoPos if there is no \"<-\")\n\tDir   ChanDir   // channel direction\n\tValue Expr      // value type\n}\n```\n\nA type is represented by a tree consisting of one or more of the following type-specific expression nodes. \n\nA ChanType node represents a channel type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ChanType.Pos",
                    "documentation": {
                      "identifier": "ChanType.Pos",
                      "newPage": false,
                      "searchKey": "ast.ChanType.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ChanType) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ChanType) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ChanType.End",
                    "documentation": {
                      "identifier": "ChanType.End",
                      "newPage": false,
                      "searchKey": "ast.ChanType.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *ChanType) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *ChanType) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ChanType.exprNode",
                    "documentation": {
                      "identifier": "ChanType.exprNode",
                      "newPage": false,
                      "searchKey": "ast.ChanType.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ChanType) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ChanType) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BadStmt",
              "documentation": {
                "identifier": "BadStmt",
                "newPage": false,
                "searchKey": "ast.BadStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadStmt struct {\n\tFrom, To token.Pos // position range of bad statement\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA BadStmt node is a placeholder for statements containing syntax errors for which no correct statement nodes can be created. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BadStmt.Pos",
                    "documentation": {
                      "identifier": "BadStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.BadStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BadStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BadStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BadStmt.End",
                    "documentation": {
                      "identifier": "BadStmt.End",
                      "newPage": false,
                      "searchKey": "ast.BadStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BadStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BadStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BadStmt.stmtNode",
                    "documentation": {
                      "identifier": "BadStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.BadStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BadStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BadStmt) stmtNode()\n```\n\nstmtNode() ensures that only statement nodes can be assigned to a Stmt. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#DeclStmt",
              "documentation": {
                "identifier": "DeclStmt",
                "newPage": false,
                "searchKey": "ast.DeclStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeclStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeclStmt struct {\n\tDecl Decl // *GenDecl with CONST, TYPE, or VAR token\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA DeclStmt node represents a declaration in a statement list. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#DeclStmt.Pos",
                    "documentation": {
                      "identifier": "DeclStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.DeclStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DeclStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DeclStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#DeclStmt.End",
                    "documentation": {
                      "identifier": "DeclStmt.End",
                      "newPage": false,
                      "searchKey": "ast.DeclStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DeclStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DeclStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#DeclStmt.stmtNode",
                    "documentation": {
                      "identifier": "DeclStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.DeclStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*DeclStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*DeclStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#EmptyStmt",
              "documentation": {
                "identifier": "EmptyStmt",
                "newPage": false,
                "searchKey": "ast.EmptyStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmptyStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmptyStmt struct {\n\tSemicolon token.Pos // position of following \";\"\n\tImplicit  bool      // if set, \";\" was omitted in the source\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nAn EmptyStmt node represents an empty statement. The \"position\" of the empty statement is the position of the immediately following (explicit or implicit) semicolon. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#EmptyStmt.Pos",
                    "documentation": {
                      "identifier": "EmptyStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.EmptyStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *EmptyStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *EmptyStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#EmptyStmt.End",
                    "documentation": {
                      "identifier": "EmptyStmt.End",
                      "newPage": false,
                      "searchKey": "ast.EmptyStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *EmptyStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *EmptyStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#EmptyStmt.stmtNode",
                    "documentation": {
                      "identifier": "EmptyStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.EmptyStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*EmptyStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*EmptyStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#LabeledStmt",
              "documentation": {
                "identifier": "LabeledStmt",
                "newPage": false,
                "searchKey": "ast.LabeledStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type LabeledStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype LabeledStmt struct {\n\tLabel *Ident\n\tColon token.Pos // position of \":\"\n\tStmt  Stmt\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA LabeledStmt node represents a labeled statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#LabeledStmt.Pos",
                    "documentation": {
                      "identifier": "LabeledStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.LabeledStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *LabeledStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *LabeledStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#LabeledStmt.End",
                    "documentation": {
                      "identifier": "LabeledStmt.End",
                      "newPage": false,
                      "searchKey": "ast.LabeledStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *LabeledStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *LabeledStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#LabeledStmt.stmtNode",
                    "documentation": {
                      "identifier": "LabeledStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.LabeledStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*LabeledStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*LabeledStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ExprStmt",
              "documentation": {
                "identifier": "ExprStmt",
                "newPage": false,
                "searchKey": "ast.ExprStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExprStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExprStmt struct {\n\tX Expr // expression\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nAn ExprStmt node represents a (stand-alone) expression in a statement list. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ExprStmt.Pos",
                    "documentation": {
                      "identifier": "ExprStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.ExprStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ExprStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ExprStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ExprStmt.End",
                    "documentation": {
                      "identifier": "ExprStmt.End",
                      "newPage": false,
                      "searchKey": "ast.ExprStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ExprStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ExprStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ExprStmt.stmtNode",
                    "documentation": {
                      "identifier": "ExprStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.ExprStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ExprStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ExprStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#SendStmt",
              "documentation": {
                "identifier": "SendStmt",
                "newPage": false,
                "searchKey": "ast.SendStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SendStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SendStmt struct {\n\tChan  Expr\n\tArrow token.Pos // position of \"<-\"\n\tValue Expr\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA SendStmt node represents a send statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#SendStmt.Pos",
                    "documentation": {
                      "identifier": "SendStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.SendStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SendStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SendStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SendStmt.End",
                    "documentation": {
                      "identifier": "SendStmt.End",
                      "newPage": false,
                      "searchKey": "ast.SendStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SendStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SendStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SendStmt.stmtNode",
                    "documentation": {
                      "identifier": "SendStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.SendStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*SendStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*SendStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#IncDecStmt",
              "documentation": {
                "identifier": "IncDecStmt",
                "newPage": false,
                "searchKey": "ast.IncDecStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IncDecStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IncDecStmt struct {\n\tX      Expr\n\tTokPos token.Pos   // position of Tok\n\tTok    token.Token // INC or DEC\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nAn IncDecStmt node represents an increment or decrement statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#IncDecStmt.Pos",
                    "documentation": {
                      "identifier": "IncDecStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.IncDecStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IncDecStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IncDecStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#IncDecStmt.End",
                    "documentation": {
                      "identifier": "IncDecStmt.End",
                      "newPage": false,
                      "searchKey": "ast.IncDecStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IncDecStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IncDecStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#IncDecStmt.stmtNode",
                    "documentation": {
                      "identifier": "IncDecStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.IncDecStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*IncDecStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*IncDecStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#AssignStmt",
              "documentation": {
                "identifier": "AssignStmt",
                "newPage": false,
                "searchKey": "ast.AssignStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AssignStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AssignStmt struct {\n\tLhs    []Expr\n\tTokPos token.Pos   // position of Tok\n\tTok    token.Token // assignment token, DEFINE\n\tRhs    []Expr\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nAn AssignStmt node represents an assignment or a short variable declaration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#AssignStmt.Pos",
                    "documentation": {
                      "identifier": "AssignStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.AssignStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AssignStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AssignStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#AssignStmt.End",
                    "documentation": {
                      "identifier": "AssignStmt.End",
                      "newPage": false,
                      "searchKey": "ast.AssignStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *AssignStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *AssignStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#AssignStmt.stmtNode",
                    "documentation": {
                      "identifier": "AssignStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.AssignStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*AssignStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*AssignStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#GoStmt",
              "documentation": {
                "identifier": "GoStmt",
                "newPage": false,
                "searchKey": "ast.GoStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GoStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GoStmt struct {\n\tGo   token.Pos // position of \"go\" keyword\n\tCall *CallExpr\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA GoStmt node represents a go statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#GoStmt.Pos",
                    "documentation": {
                      "identifier": "GoStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.GoStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GoStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GoStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#GoStmt.End",
                    "documentation": {
                      "identifier": "GoStmt.End",
                      "newPage": false,
                      "searchKey": "ast.GoStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *GoStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *GoStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#GoStmt.stmtNode",
                    "documentation": {
                      "identifier": "GoStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.GoStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*GoStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*GoStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#DeferStmt",
              "documentation": {
                "identifier": "DeferStmt",
                "newPage": false,
                "searchKey": "ast.DeferStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DeferStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DeferStmt struct {\n\tDefer token.Pos // position of \"defer\" keyword\n\tCall  *CallExpr\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA DeferStmt node represents a defer statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#DeferStmt.Pos",
                    "documentation": {
                      "identifier": "DeferStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.DeferStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DeferStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DeferStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#DeferStmt.End",
                    "documentation": {
                      "identifier": "DeferStmt.End",
                      "newPage": false,
                      "searchKey": "ast.DeferStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *DeferStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *DeferStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#DeferStmt.stmtNode",
                    "documentation": {
                      "identifier": "DeferStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.DeferStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*DeferStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*DeferStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ReturnStmt",
              "documentation": {
                "identifier": "ReturnStmt",
                "newPage": false,
                "searchKey": "ast.ReturnStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReturnStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReturnStmt struct {\n\tReturn  token.Pos // position of \"return\" keyword\n\tResults []Expr    // result expressions; or nil\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA ReturnStmt node represents a return statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ReturnStmt.Pos",
                    "documentation": {
                      "identifier": "ReturnStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.ReturnStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ReturnStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ReturnStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ReturnStmt.End",
                    "documentation": {
                      "identifier": "ReturnStmt.End",
                      "newPage": false,
                      "searchKey": "ast.ReturnStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ReturnStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ReturnStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ReturnStmt.stmtNode",
                    "documentation": {
                      "identifier": "ReturnStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.ReturnStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ReturnStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ReturnStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BranchStmt",
              "documentation": {
                "identifier": "BranchStmt",
                "newPage": false,
                "searchKey": "ast.BranchStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BranchStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BranchStmt struct {\n\tTokPos token.Pos   // position of Tok\n\tTok    token.Token // keyword token (BREAK, CONTINUE, GOTO, FALLTHROUGH)\n\tLabel  *Ident      // label name; or nil\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA BranchStmt node represents a break, continue, goto, or fallthrough statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BranchStmt.Pos",
                    "documentation": {
                      "identifier": "BranchStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.BranchStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BranchStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BranchStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BranchStmt.End",
                    "documentation": {
                      "identifier": "BranchStmt.End",
                      "newPage": false,
                      "searchKey": "ast.BranchStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BranchStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BranchStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BranchStmt.stmtNode",
                    "documentation": {
                      "identifier": "BranchStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.BranchStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BranchStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BranchStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BlockStmt",
              "documentation": {
                "identifier": "BlockStmt",
                "newPage": false,
                "searchKey": "ast.BlockStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BlockStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BlockStmt struct {\n\tLbrace token.Pos // position of \"{\"\n\tList   []Stmt\n\tRbrace token.Pos // position of \"}\", if any (may be absent due to syntax error)\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA BlockStmt node represents a braced statement list. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BlockStmt.Pos",
                    "documentation": {
                      "identifier": "BlockStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.BlockStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BlockStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BlockStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BlockStmt.End",
                    "documentation": {
                      "identifier": "BlockStmt.End",
                      "newPage": false,
                      "searchKey": "ast.BlockStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *BlockStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *BlockStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BlockStmt.stmtNode",
                    "documentation": {
                      "identifier": "BlockStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.BlockStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BlockStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BlockStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#IfStmt",
              "documentation": {
                "identifier": "IfStmt",
                "newPage": false,
                "searchKey": "ast.IfStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfStmt struct {\n\tIf   token.Pos // position of \"if\" keyword\n\tInit Stmt      // initialization statement; or nil\n\tCond Expr      // condition\n\tBody *BlockStmt\n\tElse Stmt // else branch; or nil\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nAn IfStmt node represents an if statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#IfStmt.Pos",
                    "documentation": {
                      "identifier": "IfStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.IfStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IfStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IfStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#IfStmt.End",
                    "documentation": {
                      "identifier": "IfStmt.End",
                      "newPage": false,
                      "searchKey": "ast.IfStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IfStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IfStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#IfStmt.stmtNode",
                    "documentation": {
                      "identifier": "IfStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.IfStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*IfStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*IfStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#CaseClause",
              "documentation": {
                "identifier": "CaseClause",
                "newPage": false,
                "searchKey": "ast.CaseClause",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CaseClause struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CaseClause struct {\n\tCase  token.Pos // position of \"case\" or \"default\" keyword\n\tList  []Expr    // list of expressions or types; nil means default case\n\tColon token.Pos // position of \":\"\n\tBody  []Stmt    // statement list; or nil\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA CaseClause represents a case of an expression or type switch statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#CaseClause.Pos",
                    "documentation": {
                      "identifier": "CaseClause.Pos",
                      "newPage": false,
                      "searchKey": "ast.CaseClause.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CaseClause) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CaseClause) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CaseClause.End",
                    "documentation": {
                      "identifier": "CaseClause.End",
                      "newPage": false,
                      "searchKey": "ast.CaseClause.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CaseClause) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CaseClause) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CaseClause.stmtNode",
                    "documentation": {
                      "identifier": "CaseClause.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.CaseClause.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*CaseClause) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*CaseClause) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#SwitchStmt",
              "documentation": {
                "identifier": "SwitchStmt",
                "newPage": false,
                "searchKey": "ast.SwitchStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SwitchStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SwitchStmt struct {\n\tSwitch token.Pos  // position of \"switch\" keyword\n\tInit   Stmt       // initialization statement; or nil\n\tTag    Expr       // tag expression; or nil\n\tBody   *BlockStmt // CaseClauses only\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA SwitchStmt node represents an expression switch statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#SwitchStmt.Pos",
                    "documentation": {
                      "identifier": "SwitchStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.SwitchStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SwitchStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SwitchStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SwitchStmt.End",
                    "documentation": {
                      "identifier": "SwitchStmt.End",
                      "newPage": false,
                      "searchKey": "ast.SwitchStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SwitchStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SwitchStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SwitchStmt.stmtNode",
                    "documentation": {
                      "identifier": "SwitchStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.SwitchStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*SwitchStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*SwitchStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#TypeSwitchStmt",
              "documentation": {
                "identifier": "TypeSwitchStmt",
                "newPage": false,
                "searchKey": "ast.TypeSwitchStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TypeSwitchStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TypeSwitchStmt struct {\n\tSwitch token.Pos  // position of \"switch\" keyword\n\tInit   Stmt       // initialization statement; or nil\n\tAssign Stmt       // x := y.(type) or y.(type)\n\tBody   *BlockStmt // CaseClauses only\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA TypeSwitchStmt node represents a type switch statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#TypeSwitchStmt.Pos",
                    "documentation": {
                      "identifier": "TypeSwitchStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.TypeSwitchStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *TypeSwitchStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *TypeSwitchStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#TypeSwitchStmt.End",
                    "documentation": {
                      "identifier": "TypeSwitchStmt.End",
                      "newPage": false,
                      "searchKey": "ast.TypeSwitchStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *TypeSwitchStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *TypeSwitchStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#TypeSwitchStmt.stmtNode",
                    "documentation": {
                      "identifier": "TypeSwitchStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.TypeSwitchStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*TypeSwitchStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*TypeSwitchStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#CommClause",
              "documentation": {
                "identifier": "CommClause",
                "newPage": false,
                "searchKey": "ast.CommClause",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommClause struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommClause struct {\n\tCase  token.Pos // position of \"case\" or \"default\" keyword\n\tComm  Stmt      // send or receive statement; nil means default case\n\tColon token.Pos // position of \":\"\n\tBody  []Stmt    // statement list; or nil\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA CommClause node represents a case of a select statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#CommClause.Pos",
                    "documentation": {
                      "identifier": "CommClause.Pos",
                      "newPage": false,
                      "searchKey": "ast.CommClause.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CommClause) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CommClause) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommClause.End",
                    "documentation": {
                      "identifier": "CommClause.End",
                      "newPage": false,
                      "searchKey": "ast.CommClause.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CommClause) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CommClause) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommClause.stmtNode",
                    "documentation": {
                      "identifier": "CommClause.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.CommClause.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*CommClause) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*CommClause) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#SelectStmt",
              "documentation": {
                "identifier": "SelectStmt",
                "newPage": false,
                "searchKey": "ast.SelectStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SelectStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SelectStmt struct {\n\tSelect token.Pos  // position of \"select\" keyword\n\tBody   *BlockStmt // CommClauses only\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA SelectStmt node represents a select statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#SelectStmt.Pos",
                    "documentation": {
                      "identifier": "SelectStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.SelectStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SelectStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SelectStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SelectStmt.End",
                    "documentation": {
                      "identifier": "SelectStmt.End",
                      "newPage": false,
                      "searchKey": "ast.SelectStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *SelectStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *SelectStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#SelectStmt.stmtNode",
                    "documentation": {
                      "identifier": "SelectStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.SelectStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*SelectStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*SelectStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ForStmt",
              "documentation": {
                "identifier": "ForStmt",
                "newPage": false,
                "searchKey": "ast.ForStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ForStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ForStmt struct {\n\tFor  token.Pos // position of \"for\" keyword\n\tInit Stmt      // initialization statement; or nil\n\tCond Expr      // condition; or nil\n\tPost Stmt      // post iteration statement; or nil\n\tBody *BlockStmt\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA ForStmt represents a for statement. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ForStmt.Pos",
                    "documentation": {
                      "identifier": "ForStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.ForStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ForStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ForStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ForStmt.End",
                    "documentation": {
                      "identifier": "ForStmt.End",
                      "newPage": false,
                      "searchKey": "ast.ForStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ForStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ForStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ForStmt.stmtNode",
                    "documentation": {
                      "identifier": "ForStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.ForStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ForStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ForStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#RangeStmt",
              "documentation": {
                "identifier": "RangeStmt",
                "newPage": false,
                "searchKey": "ast.RangeStmt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RangeStmt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RangeStmt struct {\n\tFor        token.Pos   // position of \"for\" keyword\n\tKey, Value Expr        // Key, Value may be nil\n\tTokPos     token.Pos   // position of Tok; invalid if Key == nil\n\tTok        token.Token // ILLEGAL if Key == nil, ASSIGN, DEFINE\n\tX          Expr        // value to range over\n\tBody       *BlockStmt\n}\n```\n\nA statement is represented by a tree consisting of one or more of the following concrete statement nodes. \n\nA RangeStmt represents a for statement with a range clause. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#RangeStmt.Pos",
                    "documentation": {
                      "identifier": "RangeStmt.Pos",
                      "newPage": false,
                      "searchKey": "ast.RangeStmt.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RangeStmt) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RangeStmt) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#RangeStmt.End",
                    "documentation": {
                      "identifier": "RangeStmt.End",
                      "newPage": false,
                      "searchKey": "ast.RangeStmt.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *RangeStmt) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *RangeStmt) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#RangeStmt.stmtNode",
                    "documentation": {
                      "identifier": "RangeStmt.stmtNode",
                      "newPage": false,
                      "searchKey": "ast.RangeStmt.stmtNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*RangeStmt) stmtNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*RangeStmt) stmtNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Spec",
              "documentation": {
                "identifier": "Spec",
                "newPage": false,
                "searchKey": "ast.Spec",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Spec interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Spec interface {\n\tNode\n\tspecNode()\n}\n```\n\nA Spec node represents a single (non-parenthesized) import, constant, type, or variable declaration. \n\nThe Spec type stands for any of *ImportSpec, *ValueSpec, and *TypeSpec. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ImportSpec",
              "documentation": {
                "identifier": "ImportSpec",
                "newPage": false,
                "searchKey": "ast.ImportSpec",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ImportSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ImportSpec struct {\n\tDoc     *CommentGroup // associated documentation; or nil\n\tName    *Ident        // local package name (including \".\"); or nil\n\tPath    *BasicLit     // import path\n\tComment *CommentGroup // line comments; or nil\n\tEndPos  token.Pos     // end of spec (overrides Path.Pos if nonzero)\n}\n```\n\nA Spec node represents a single (non-parenthesized) import, constant, type, or variable declaration. \n\nAn ImportSpec node represents a single package import. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ImportSpec.Pos",
                    "documentation": {
                      "identifier": "ImportSpec.Pos",
                      "newPage": false,
                      "searchKey": "ast.ImportSpec.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ImportSpec) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ImportSpec) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ImportSpec.End",
                    "documentation": {
                      "identifier": "ImportSpec.End",
                      "newPage": false,
                      "searchKey": "ast.ImportSpec.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ImportSpec) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ImportSpec) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ImportSpec.specNode",
                    "documentation": {
                      "identifier": "ImportSpec.specNode",
                      "newPage": false,
                      "searchKey": "ast.ImportSpec.specNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ImportSpec) specNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ImportSpec) specNode()\n```\n\nspecNode() ensures that only spec nodes can be assigned to a Spec. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ValueSpec",
              "documentation": {
                "identifier": "ValueSpec",
                "newPage": false,
                "searchKey": "ast.ValueSpec",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValueSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValueSpec struct {\n\tDoc     *CommentGroup // associated documentation; or nil\n\tNames   []*Ident      // value names (len(Names) > 0)\n\tType    Expr          // value type; or nil\n\tValues  []Expr        // initial values; or nil\n\tComment *CommentGroup // line comments; or nil\n}\n```\n\nA Spec node represents a single (non-parenthesized) import, constant, type, or variable declaration. \n\nA ValueSpec node represents a constant or variable declaration (ConstSpec or VarSpec production). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ValueSpec.Pos",
                    "documentation": {
                      "identifier": "ValueSpec.Pos",
                      "newPage": false,
                      "searchKey": "ast.ValueSpec.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ValueSpec) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ValueSpec) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ValueSpec.End",
                    "documentation": {
                      "identifier": "ValueSpec.End",
                      "newPage": false,
                      "searchKey": "ast.ValueSpec.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *ValueSpec) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *ValueSpec) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#ValueSpec.specNode",
                    "documentation": {
                      "identifier": "ValueSpec.specNode",
                      "newPage": false,
                      "searchKey": "ast.ValueSpec.specNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*ValueSpec) specNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*ValueSpec) specNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#BadDecl",
              "documentation": {
                "identifier": "BadDecl",
                "newPage": false,
                "searchKey": "ast.BadDecl",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadDecl struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadDecl struct {\n\tFrom, To token.Pos // position range of bad declaration\n}\n```\n\nA declaration is represented by one of the following declaration nodes. \n\nA BadDecl node is a placeholder for a declaration containing syntax errors for which a correct declaration node cannot be created. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#BadDecl.Pos",
                    "documentation": {
                      "identifier": "BadDecl.Pos",
                      "newPage": false,
                      "searchKey": "ast.BadDecl.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *BadDecl) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *BadDecl) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BadDecl.End",
                    "documentation": {
                      "identifier": "BadDecl.End",
                      "newPage": false,
                      "searchKey": "ast.BadDecl.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *BadDecl) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *BadDecl) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#BadDecl.declNode",
                    "documentation": {
                      "identifier": "BadDecl.declNode",
                      "newPage": false,
                      "searchKey": "ast.BadDecl.declNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*BadDecl) declNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*BadDecl) declNode()\n```\n\ndeclNode() ensures that only declaration nodes can be assigned to a Decl. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#GenDecl",
              "documentation": {
                "identifier": "GenDecl",
                "newPage": false,
                "searchKey": "ast.GenDecl",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GenDecl struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GenDecl struct {\n\tDoc    *CommentGroup // associated documentation; or nil\n\tTokPos token.Pos     // position of Tok\n\tTok    token.Token   // IMPORT, CONST, TYPE, or VAR\n\tLparen token.Pos     // position of '(', if any\n\tSpecs  []Spec\n\tRparen token.Pos // position of ')', if any\n}\n```\n\nA declaration is represented by one of the following declaration nodes. \n\nA GenDecl node (generic declaration node) represents an import, constant, type or variable declaration. A valid Lparen position (Lparen.IsValid()) indicates a parenthesized declaration. \n\nRelationship between Tok value and Specs element type: \n\n```\ntoken.IMPORT  *ImportSpec\ntoken.CONST   *ValueSpec\ntoken.TYPE    *TypeSpec\ntoken.VAR     *ValueSpec\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#GenDecl.Pos",
                    "documentation": {
                      "identifier": "GenDecl.Pos",
                      "newPage": false,
                      "searchKey": "ast.GenDecl.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *GenDecl) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *GenDecl) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#GenDecl.End",
                    "documentation": {
                      "identifier": "GenDecl.End",
                      "newPage": false,
                      "searchKey": "ast.GenDecl.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *GenDecl) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *GenDecl) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#GenDecl.declNode",
                    "documentation": {
                      "identifier": "GenDecl.declNode",
                      "newPage": false,
                      "searchKey": "ast.GenDecl.declNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*GenDecl) declNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*GenDecl) declNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FuncDecl",
              "documentation": {
                "identifier": "FuncDecl",
                "newPage": false,
                "searchKey": "ast.FuncDecl",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FuncDecl struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FuncDecl struct {\n\tDoc  *CommentGroup // associated documentation; or nil\n\tRecv *FieldList    // receiver (methods); or nil (functions)\n\tName *Ident        // function/method name\n\tType *FuncType     // function signature: type and value parameters, results, and position of \"func\" keyword\n\tBody *BlockStmt    // function body; or nil for external (non-Go) function\n\n}\n```\n\nA declaration is represented by one of the following declaration nodes. \n\nA FuncDecl node represents a function declaration. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#FuncDecl.Pos",
                    "documentation": {
                      "identifier": "FuncDecl.Pos",
                      "newPage": false,
                      "searchKey": "ast.FuncDecl.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *FuncDecl) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *FuncDecl) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FuncDecl.End",
                    "documentation": {
                      "identifier": "FuncDecl.End",
                      "newPage": false,
                      "searchKey": "ast.FuncDecl.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *FuncDecl) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *FuncDecl) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FuncDecl.declNode",
                    "documentation": {
                      "identifier": "FuncDecl.declNode",
                      "newPage": false,
                      "searchKey": "ast.FuncDecl.declNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*FuncDecl) declNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*FuncDecl) declNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#File",
              "documentation": {
                "identifier": "File",
                "newPage": false,
                "searchKey": "ast.File",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type File struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype File struct {\n\tDoc        *CommentGroup   // associated documentation; or nil\n\tPackage    token.Pos       // position of \"package\" keyword\n\tName       *Ident          // package name\n\tDecls      []Decl          // top-level declarations; or nil\n\tScope      *Scope          // package scope (this file only)\n\tImports    []*ImportSpec   // imports in this file\n\tUnresolved []*Ident        // unresolved identifiers in this file\n\tComments   []*CommentGroup // list of all comments in the source file\n}\n```\n\nA File node represents a Go source file. \n\nThe Comments list contains all comments in the source file in order of appearance, including the comments that are pointed to from other nodes via Doc and Comment fields. \n\nFor correct printing of source code containing comments (using packages go/format and go/printer), special care must be taken to update comments when a File's syntax tree is modified: For printing, comments are interspersed between tokens based on their position. If syntax tree nodes are removed or moved, relevant comments in their vicinity must also be removed (from the File.Comments list) or moved accordingly (by updating their positions). A CommentMap may be used to facilitate some of these operations. \n\nWhether and how a comment is associated with a node depends on the interpretation of the syntax tree by the manipulating program: Except for Doc and Comment comments directly associated with nodes, the remaining comments are \"free-floating\" (see also issues #18593, #20744). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#MergePackageFiles",
                    "documentation": {
                      "identifier": "MergePackageFiles",
                      "newPage": false,
                      "searchKey": "ast.MergePackageFiles",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MergePackageFiles(pkg *Package, mode MergeMode) *File"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MergePackageFiles(pkg *Package, mode MergeMode) *File\n```\n\nMergePackageFiles creates a file AST by merging the ASTs of the files belonging to a package. The mode flags control merging behavior. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#File.Pos",
                    "documentation": {
                      "identifier": "File.Pos",
                      "newPage": false,
                      "searchKey": "ast.File.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#File.End",
                    "documentation": {
                      "identifier": "File.End",
                      "newPage": false,
                      "searchKey": "ast.File.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Package",
              "documentation": {
                "identifier": "Package",
                "newPage": false,
                "searchKey": "ast.Package",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Package struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Package struct {\n\tName    string             // package name\n\tScope   *Scope             // package scope across all files\n\tImports map[string]*Object // map of package id -> package object\n\tFiles   map[string]*File   // Go source files by filename\n}\n```\n\nA Package node represents a set of source files collectively building a Go package. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#NewPackage",
                    "documentation": {
                      "identifier": "NewPackage",
                      "newPage": false,
                      "searchKey": "ast.NewPackage",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewPackage(fset *token.FileSet, files map[string]*File, importer Importer, universe *Scope) (*Package, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewPackage(fset *token.FileSet, files map[string]*File, importer Importer, universe *Scope) (*Package, error)\n```\n\nNewPackage creates a new Package node from a set of File nodes. It resolves unresolved identifiers across files and updates each file's Unresolved list accordingly. If a non-nil importer and universe scope are provided, they are used to resolve identifiers not declared in any of the package files. Any remaining unresolved identifiers are reported as undeclared. If the files belong to different packages, one package name is selected and files with different package names are reported and then ignored. The result is a package node and a scanner.ErrorList if there were errors. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Package.Pos",
                    "documentation": {
                      "identifier": "Package.Pos",
                      "newPage": false,
                      "searchKey": "ast.Package.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Package) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Package) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Package.End",
                    "documentation": {
                      "identifier": "Package.End",
                      "newPage": false,
                      "searchKey": "ast.Package.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Package) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Package) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FuncType",
              "documentation": {
                "identifier": "FuncType",
                "newPage": false,
                "searchKey": "ast.FuncType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FuncType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FuncType struct {\n\tFunc    token.Pos  // position of \"func\" keyword (token.NoPos if there is no \"func\")\n\tParams  *FieldList // (incoming) parameters; non-nil\n\tResults *FieldList // (outgoing) results; or nil\n}\n```\n\nA FuncType node represents a function type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#FuncType.Pos",
                    "documentation": {
                      "identifier": "FuncType.Pos",
                      "newPage": false,
                      "searchKey": "ast.FuncType.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *FuncType) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *FuncType) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FuncType.End",
                    "documentation": {
                      "identifier": "FuncType.End",
                      "newPage": false,
                      "searchKey": "ast.FuncType.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *FuncType) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *FuncType) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#FuncType.exprNode",
                    "documentation": {
                      "identifier": "FuncType.exprNode",
                      "newPage": false,
                      "searchKey": "ast.FuncType.exprNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*FuncType) exprNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*FuncType) exprNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#TypeSpec",
              "documentation": {
                "identifier": "TypeSpec",
                "newPage": false,
                "searchKey": "ast.TypeSpec",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TypeSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TypeSpec struct {\n\tDoc     *CommentGroup // associated documentation; or nil\n\tName    *Ident        // type name\n\tAssign  token.Pos     // position of '=', if any\n\tType    Expr          // *Ident, *ParenExpr, *SelectorExpr, *StarExpr, or any of the *XxxTypes\n\tComment *CommentGroup // line comments; or nil\n}\n```\n\nA TypeSpec node represents a type declaration (TypeSpec production). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#TypeSpec.Pos",
                    "documentation": {
                      "identifier": "TypeSpec.Pos",
                      "newPage": false,
                      "searchKey": "ast.TypeSpec.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *TypeSpec) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *TypeSpec) Pos() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#TypeSpec.End",
                    "documentation": {
                      "identifier": "TypeSpec.End",
                      "newPage": false,
                      "searchKey": "ast.TypeSpec.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *TypeSpec) End() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *TypeSpec) End() token.Pos\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#TypeSpec.specNode",
                    "documentation": {
                      "identifier": "TypeSpec.specNode",
                      "newPage": false,
                      "searchKey": "ast.TypeSpec.specNode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*TypeSpec) specNode()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*TypeSpec) specNode()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#byPos",
              "documentation": {
                "identifier": "byPos",
                "newPage": false,
                "searchKey": "ast.byPos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byPos []*ast.CommentGroup"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byPos []*CommentGroup\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#byPos.Len",
                    "documentation": {
                      "identifier": "byPos.Len",
                      "newPage": false,
                      "searchKey": "ast.byPos.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byPos) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byPos) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#byPos.Less",
                    "documentation": {
                      "identifier": "byPos.Less",
                      "newPage": false,
                      "searchKey": "ast.byPos.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byPos) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byPos) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#byPos.Swap",
                    "documentation": {
                      "identifier": "byPos.Swap",
                      "newPage": false,
                      "searchKey": "ast.byPos.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byPos) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byPos) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#CommentMap",
              "documentation": {
                "identifier": "CommentMap",
                "newPage": false,
                "searchKey": "ast.CommentMap",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommentMap map[ast.Node][]*ast.CommentGroup"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommentMap map[Node][]*CommentGroup\n```\n\nA CommentMap maps an AST node to a list of comment groups associated with it. See NewCommentMap for a description of the association. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#NewCommentMap",
                    "documentation": {
                      "identifier": "NewCommentMap",
                      "newPage": false,
                      "searchKey": "ast.NewCommentMap",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCommentMap(fset *token.FileSet, node Node, comments []*CommentGroup) CommentMap"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCommentMap(fset *token.FileSet, node Node, comments []*CommentGroup) CommentMap\n```\n\nNewCommentMap creates a new comment map by associating comment groups of the comments list with the nodes of the AST specified by node. \n\nA comment group g is associated with a node n if: \n\n```\n- g starts on the same line as n ends\n- g starts on the line immediately following n, and there is\n  at least one empty line after g and before the next node\n- g starts before n and is not associated to the node before n\n  via the previous rules\n\n```\nNewCommentMap tries to associate a comment group to the \"largest\" node possible: For instance, if the comment is a line comment trailing an assignment, the comment is associated with the entire assignment rather than just the last operand in the assignment. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentMap.addComment",
                    "documentation": {
                      "identifier": "CommentMap.addComment",
                      "newPage": false,
                      "searchKey": "ast.CommentMap.addComment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cmap CommentMap) addComment(n Node, c *CommentGroup)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cmap CommentMap) addComment(n Node, c *CommentGroup)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentMap.Update",
                    "documentation": {
                      "identifier": "CommentMap.Update",
                      "newPage": false,
                      "searchKey": "ast.CommentMap.Update",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cmap CommentMap) Update(old, new Node) Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cmap CommentMap) Update(old, new Node) Node\n```\n\nUpdate replaces an old node in the comment map with the new node and returns the new node. Comments that were associated with the old node are associated with the new node. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentMap.Filter",
                    "documentation": {
                      "identifier": "CommentMap.Filter",
                      "newPage": false,
                      "searchKey": "ast.CommentMap.Filter",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cmap CommentMap) Filter(node Node) CommentMap"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cmap CommentMap) Filter(node Node) CommentMap\n```\n\nFilter returns a new comment map consisting of only those entries of cmap for which a corresponding node exists in the AST specified by node. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentMap.Comments",
                    "documentation": {
                      "identifier": "CommentMap.Comments",
                      "newPage": false,
                      "searchKey": "ast.CommentMap.Comments",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cmap CommentMap) Comments() []*CommentGroup"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cmap CommentMap) Comments() []*CommentGroup\n```\n\nComments returns the list of comment groups in the comment map. The result is sorted in source order. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#CommentMap.String",
                    "documentation": {
                      "identifier": "CommentMap.String",
                      "newPage": false,
                      "searchKey": "ast.CommentMap.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cmap CommentMap) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cmap CommentMap) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#byInterval",
              "documentation": {
                "identifier": "byInterval",
                "newPage": false,
                "searchKey": "ast.byInterval",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byInterval []ast.Node"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byInterval []Node\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#byInterval.Len",
                    "documentation": {
                      "identifier": "byInterval.Len",
                      "newPage": false,
                      "searchKey": "ast.byInterval.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byInterval) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byInterval) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#byInterval.Less",
                    "documentation": {
                      "identifier": "byInterval.Less",
                      "newPage": false,
                      "searchKey": "ast.byInterval.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byInterval) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byInterval) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#byInterval.Swap",
                    "documentation": {
                      "identifier": "byInterval.Swap",
                      "newPage": false,
                      "searchKey": "ast.byInterval.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a byInterval) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a byInterval) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#commentListReader",
              "documentation": {
                "identifier": "commentListReader",
                "newPage": false,
                "searchKey": "ast.commentListReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type commentListReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype commentListReader struct {\n\tfset     *token.FileSet\n\tlist     []*CommentGroup\n\tindex    int\n\tcomment  *CommentGroup  // comment group at current index\n\tpos, end token.Position // source interval of comment group at current index\n}\n```\n\nA commentListReader helps iterating through a list of comment groups. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#commentListReader.eol",
                    "documentation": {
                      "identifier": "commentListReader.eol",
                      "newPage": false,
                      "searchKey": "ast.commentListReader.eol",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *commentListReader) eol() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *commentListReader) eol() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#commentListReader.next",
                    "documentation": {
                      "identifier": "commentListReader.next",
                      "newPage": false,
                      "searchKey": "ast.commentListReader.next",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *commentListReader) next()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *commentListReader) next()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#nodeStack",
              "documentation": {
                "identifier": "nodeStack",
                "newPage": false,
                "searchKey": "ast.nodeStack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nodeStack []ast.Node"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nodeStack []Node\n```\n\nA nodeStack keeps track of nested nodes. A node lower on the stack lexically contains the nodes higher on the stack. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#nodeStack.push",
                    "documentation": {
                      "identifier": "nodeStack.push",
                      "newPage": false,
                      "searchKey": "ast.nodeStack.push",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *nodeStack) push(n Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *nodeStack) push(n Node)\n```\n\npush pops all nodes that appear lexically before n and then pushes n on the stack. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#nodeStack.pop",
                    "documentation": {
                      "identifier": "nodeStack.pop",
                      "newPage": false,
                      "searchKey": "ast.nodeStack.pop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *nodeStack) pop(pos token.Pos) (top Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *nodeStack) pop(pos token.Pos) (top Node)\n```\n\npop pops all nodes that appear lexically before pos (i.e., whose lexical extent has ended before or at pos). It returns the last node popped. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Filter",
              "documentation": {
                "identifier": "Filter",
                "newPage": false,
                "searchKey": "ast.Filter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Filter func(string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Filter func(string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#MergeMode",
              "documentation": {
                "identifier": "MergeMode",
                "newPage": false,
                "searchKey": "ast.MergeMode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MergeMode uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MergeMode uint\n```\n\nThe MergeMode flags control the behavior of MergePackageFiles. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#posSpan",
              "documentation": {
                "identifier": "posSpan",
                "newPage": false,
                "searchKey": "ast.posSpan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type posSpan struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype posSpan struct {\n\tStart token.Pos\n\tEnd   token.Pos\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#cgPos",
              "documentation": {
                "identifier": "cgPos",
                "newPage": false,
                "searchKey": "ast.cgPos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type cgPos struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cgPos struct {\n\tleft bool // true if comment is to the left of the spec, false otherwise.\n\tcg   *CommentGroup\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FieldFilter",
              "documentation": {
                "identifier": "FieldFilter",
                "newPage": false,
                "searchKey": "ast.FieldFilter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FieldFilter func(name string, value reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FieldFilter func(name string, value reflect.Value) bool\n```\n\nA FieldFilter may be provided to Fprint to control the output. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#printer",
              "documentation": {
                "identifier": "printer",
                "newPage": false,
                "searchKey": "ast.printer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type printer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype printer struct {\n\toutput io.Writer\n\tfset   *token.FileSet\n\tfilter FieldFilter\n\tptrmap map[interface{}]int // *T -> line number\n\tindent int                 // current indentation level\n\tlast   byte                // the last byte processed by Write\n\tline   int                 // current line number\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#printer.Write",
                    "documentation": {
                      "identifier": "printer.Write",
                      "newPage": false,
                      "searchKey": "ast.printer.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) Write(data []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) Write(data []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#printer.printf",
                    "documentation": {
                      "identifier": "printer.printf",
                      "newPage": false,
                      "searchKey": "ast.printer.printf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) printf(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) printf(format string, args ...interface{})\n```\n\nprintf is a convenience wrapper that takes care of print errors. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#printer.print",
                    "documentation": {
                      "identifier": "printer.print",
                      "newPage": false,
                      "searchKey": "ast.printer.print",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) print(x reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) print(x reflect.Value)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#localError",
              "documentation": {
                "identifier": "localError",
                "newPage": false,
                "searchKey": "ast.localError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type localError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype localError struct {\n\terr error\n}\n```\n\nlocalError wraps locally caught errors so we can distinguish them from genuine panics which we don't want to return as errors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#pkgBuilder",
              "documentation": {
                "identifier": "pkgBuilder",
                "newPage": false,
                "searchKey": "ast.pkgBuilder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pkgBuilder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pkgBuilder struct {\n\tfset   *token.FileSet\n\terrors scanner.ErrorList\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#pkgBuilder.error",
                    "documentation": {
                      "identifier": "pkgBuilder.error",
                      "newPage": false,
                      "searchKey": "ast.pkgBuilder.error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *pkgBuilder) error(pos token.Pos, msg string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *pkgBuilder) error(pos token.Pos, msg string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#pkgBuilder.errorf",
                    "documentation": {
                      "identifier": "pkgBuilder.errorf",
                      "newPage": false,
                      "searchKey": "ast.pkgBuilder.errorf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *pkgBuilder) errorf(pos token.Pos, format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *pkgBuilder) errorf(pos token.Pos, format string, args ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#pkgBuilder.declare",
                    "documentation": {
                      "identifier": "pkgBuilder.declare",
                      "newPage": false,
                      "searchKey": "ast.pkgBuilder.declare",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *pkgBuilder) declare(scope, altScope *Scope, obj *Object)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *pkgBuilder) declare(scope, altScope *Scope, obj *Object)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Importer",
              "documentation": {
                "identifier": "Importer",
                "newPage": false,
                "searchKey": "ast.Importer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Importer func(imports map[string]*std/go/ast.Object, path string) (pkg *std/go/ast.Object, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Importer func(imports map[string]*Object, path string) (pkg *Object, err error)\n```\n\nAn Importer resolves import paths to package Objects. The imports map records the packages already imported, indexed by package id (canonical import path). An Importer must determine the canonical import path and check the map to see if it is already present in the imports map. If so, the Importer can return the map entry. Otherwise, the Importer should load the package data for the given path into a new *Object (pkg), record pkg in the imports map, and then return pkg. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Scope",
              "documentation": {
                "identifier": "Scope",
                "newPage": false,
                "searchKey": "ast.Scope",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Scope struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Scope struct {\n\tOuter   *Scope\n\tObjects map[string]*Object\n}\n```\n\nA Scope maintains the set of named language entities declared in the scope and a link to the immediately surrounding (outer) scope. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#NewScope",
                    "documentation": {
                      "identifier": "NewScope",
                      "newPage": false,
                      "searchKey": "ast.NewScope",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewScope(outer *Scope) *Scope"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewScope(outer *Scope) *Scope\n```\n\nNewScope creates a new scope nested in the outer scope. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Scope.Lookup",
                    "documentation": {
                      "identifier": "Scope.Lookup",
                      "newPage": false,
                      "searchKey": "ast.Scope.Lookup",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Scope) Lookup(name string) *Object"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Scope) Lookup(name string) *Object\n```\n\nLookup returns the object with the given name if it is found in scope s, otherwise it returns nil. Outer scopes are ignored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Scope.Insert",
                    "documentation": {
                      "identifier": "Scope.Insert",
                      "newPage": false,
                      "searchKey": "ast.Scope.Insert",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Scope) Insert(obj *Object) (alt *Object)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Scope) Insert(obj *Object) (alt *Object)\n```\n\nInsert attempts to insert a named object obj into the scope s. If the scope already contains an object alt with the same name, Insert leaves the scope unchanged and returns alt. Otherwise it inserts obj and returns nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Scope.String",
                    "documentation": {
                      "identifier": "Scope.String",
                      "newPage": false,
                      "searchKey": "ast.Scope.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *Scope) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *Scope) String() string\n```\n\nDebugging support \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Object",
              "documentation": {
                "identifier": "Object",
                "newPage": false,
                "searchKey": "ast.Object",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Object struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Object struct {\n\tKind ObjKind\n\tName string      // declared name\n\tDecl interface{} // corresponding Field, XxxSpec, FuncDecl, LabeledStmt, AssignStmt, Scope; or nil\n\tData interface{} // object-specific data; or nil\n\tType interface{} // placeholder for type information; may be nil\n}\n```\n\nAn Object describes a named language entity such as a package, constant, type, variable, function (incl. methods), or label. \n\nThe Data fields contains object-specific data: \n\n```\nKind    Data type         Data value\nPkg     *Scope            package scope\nCon     int               iota for the respective declaration\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#NewObj",
                    "documentation": {
                      "identifier": "NewObj",
                      "newPage": false,
                      "searchKey": "ast.NewObj",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewObj(kind ObjKind, name string) *Object"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewObj(kind ObjKind, name string) *Object\n```\n\nNewObj creates a new object of a given kind and name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/ast#Object.Pos",
                    "documentation": {
                      "identifier": "Object.Pos",
                      "newPage": false,
                      "searchKey": "ast.Object.Pos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (obj *Object) Pos() token.Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (obj *Object) Pos() token.Pos\n```\n\nPos computes the source position of the declaration of an object name. The result may be an invalid position if it cannot be computed (obj.Decl may be nil or not correct). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#ObjKind",
              "documentation": {
                "identifier": "ObjKind",
                "newPage": false,
                "searchKey": "ast.ObjKind",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ObjKind int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ObjKind int\n```\n\nObjKind describes what an object represents. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#ObjKind.String",
                    "documentation": {
                      "identifier": "ObjKind.String",
                      "newPage": false,
                      "searchKey": "ast.ObjKind.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (kind ObjKind) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (kind ObjKind) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Visitor",
              "documentation": {
                "identifier": "Visitor",
                "newPage": false,
                "searchKey": "ast.Visitor",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Visitor interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Visitor interface {\n\tVisit(node Node) (w Visitor)\n}\n```\n\nA Visitor's Visit method is invoked for each node encountered by Walk. If the result visitor w is not nil, Walk visits each of the children of node with the visitor w, followed by a call of w.Visit(nil). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#inspector",
              "documentation": {
                "identifier": "inspector",
                "newPage": false,
                "searchKey": "ast.inspector",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type inspector func(std/go/ast.Node) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype inspector func(Node) bool\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/ast#inspector.Visit",
                    "documentation": {
                      "identifier": "inspector.Visit",
                      "newPage": false,
                      "searchKey": "ast.inspector.Visit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f inspector) Visit(node Node) Visitor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f inspector) Visit(node Node) Visitor\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/ast#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast#isWhitespace",
              "documentation": {
                "identifier": "isWhitespace",
                "newPage": false,
                "searchKey": "ast.isWhitespace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isWhitespace(ch byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isWhitespace(ch byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#stripTrailingWhitespace",
              "documentation": {
                "identifier": "stripTrailingWhitespace",
                "newPage": false,
                "searchKey": "ast.stripTrailingWhitespace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stripTrailingWhitespace(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stripTrailingWhitespace(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#isDirective",
              "documentation": {
                "identifier": "isDirective",
                "newPage": false,
                "searchKey": "ast.isDirective",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isDirective(c string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isDirective(c string) bool\n```\n\nisDirective reports whether c is a comment directive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#IsExported",
              "documentation": {
                "identifier": "IsExported",
                "newPage": false,
                "searchKey": "ast.IsExported",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsExported(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsExported(name string) bool\n```\n\nIsExported reports whether name starts with an upper-case letter. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#sortComments",
              "documentation": {
                "identifier": "sortComments",
                "newPage": false,
                "searchKey": "ast.sortComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortComments(list []*CommentGroup)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortComments(list []*CommentGroup)\n```\n\nsortComments sorts the list of comment groups in source order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#nodeList",
              "documentation": {
                "identifier": "nodeList",
                "newPage": false,
                "searchKey": "ast.nodeList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nodeList(n Node) []Node"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nodeList(n Node) []Node\n```\n\nnodeList returns the list of nodes of the AST n in source order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#summary",
              "documentation": {
                "identifier": "summary",
                "newPage": false,
                "searchKey": "ast.summary",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func summary(list []*CommentGroup) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc summary(list []*CommentGroup) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#exportFilter",
              "documentation": {
                "identifier": "exportFilter",
                "newPage": false,
                "searchKey": "ast.exportFilter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func exportFilter(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc exportFilter(name string) bool\n```\n\nexportFilter is a special filter function to extract exported nodes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FileExports",
              "documentation": {
                "identifier": "FileExports",
                "newPage": false,
                "searchKey": "ast.FileExports",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FileExports(src *File) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FileExports(src *File) bool\n```\n\nFileExports trims the AST for a Go source file in place such that only exported nodes remain: all top-level identifiers which are not exported and their associated information (such as type, initial value, or function body) are removed. Non-exported fields and methods of exported types are stripped. The File.Comments list is not changed. \n\nFileExports reports whether there are exported declarations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#PackageExports",
              "documentation": {
                "identifier": "PackageExports",
                "newPage": false,
                "searchKey": "ast.PackageExports",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PackageExports(pkg *Package) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PackageExports(pkg *Package) bool\n```\n\nPackageExports trims the AST for a Go package in place such that only exported nodes remain. The pkg.Files list is not changed, so that file names and top-level package comments don't get lost. \n\nPackageExports reports whether there are exported declarations; it returns false otherwise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterIdentList",
              "documentation": {
                "identifier": "filterIdentList",
                "newPage": false,
                "searchKey": "ast.filterIdentList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterIdentList(list []*Ident, f Filter) []*Ident"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterIdentList(list []*Ident, f Filter) []*Ident\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterFieldList",
              "documentation": {
                "identifier": "filterFieldList",
                "newPage": false,
                "searchKey": "ast.filterFieldList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterFieldList(fields *FieldList, filter Filter, export bool) (removedFields bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterFieldList(fields *FieldList, filter Filter, export bool) (removedFields bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterCompositeLit",
              "documentation": {
                "identifier": "filterCompositeLit",
                "newPage": false,
                "searchKey": "ast.filterCompositeLit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterCompositeLit(lit *CompositeLit, filter Filter, export bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterCompositeLit(lit *CompositeLit, filter Filter, export bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterExprList",
              "documentation": {
                "identifier": "filterExprList",
                "newPage": false,
                "searchKey": "ast.filterExprList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterExprList(list []Expr, filter Filter, export bool) []Expr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterExprList(list []Expr, filter Filter, export bool) []Expr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterParamList",
              "documentation": {
                "identifier": "filterParamList",
                "newPage": false,
                "searchKey": "ast.filterParamList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterParamList(fields *FieldList, filter Filter, export bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterParamList(fields *FieldList, filter Filter, export bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterType",
              "documentation": {
                "identifier": "filterType",
                "newPage": false,
                "searchKey": "ast.filterType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterType(typ Expr, f Filter, export bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterType(typ Expr, f Filter, export bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterSpec",
              "documentation": {
                "identifier": "filterSpec",
                "newPage": false,
                "searchKey": "ast.filterSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterSpec(spec Spec, f Filter, export bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterSpec(spec Spec, f Filter, export bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterSpecList",
              "documentation": {
                "identifier": "filterSpecList",
                "newPage": false,
                "searchKey": "ast.filterSpecList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterSpecList(list []Spec, f Filter, export bool) []Spec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterSpecList(list []Spec, f Filter, export bool) []Spec\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FilterDecl",
              "documentation": {
                "identifier": "FilterDecl",
                "newPage": false,
                "searchKey": "ast.FilterDecl",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FilterDecl(decl Decl, f Filter) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FilterDecl(decl Decl, f Filter) bool\n```\n\nFilterDecl trims the AST for a Go declaration in place by removing all names (including struct field and interface method names, but not from parameter lists) that don't pass through the filter f. \n\nFilterDecl reports whether there are any declared names left after filtering. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterDecl",
              "documentation": {
                "identifier": "filterDecl",
                "newPage": false,
                "searchKey": "ast.filterDecl",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterDecl(decl Decl, f Filter, export bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterDecl(decl Decl, f Filter, export bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FilterFile",
              "documentation": {
                "identifier": "FilterFile",
                "newPage": false,
                "searchKey": "ast.FilterFile",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FilterFile(src *File, f Filter) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FilterFile(src *File, f Filter) bool\n```\n\nFilterFile trims the AST for a Go file in place by removing all names from top-level declarations (including struct field and interface method names, but not from parameter lists) that don't pass through the filter f. If the declaration is empty afterwards, the declaration is removed from the AST. Import declarations are always removed. The File.Comments list is not changed. \n\nFilterFile reports whether there are any top-level declarations left after filtering. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterFile",
              "documentation": {
                "identifier": "filterFile",
                "newPage": false,
                "searchKey": "ast.filterFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterFile(src *File, f Filter, export bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterFile(src *File, f Filter, export bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#FilterPackage",
              "documentation": {
                "identifier": "FilterPackage",
                "newPage": false,
                "searchKey": "ast.FilterPackage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FilterPackage(pkg *Package, f Filter) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FilterPackage(pkg *Package, f Filter) bool\n```\n\nFilterPackage trims the AST for a Go package in place by removing all names from top-level declarations (including struct field and interface method names, but not from parameter lists) that don't pass through the filter f. If the declaration is empty afterwards, the declaration is removed from the AST. The pkg.Files list is not changed, so that file names and top-level package comments don't get lost. \n\nFilterPackage reports whether there are any top-level declarations left after filtering. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#filterPackage",
              "documentation": {
                "identifier": "filterPackage",
                "newPage": false,
                "searchKey": "ast.filterPackage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func filterPackage(pkg *Package, f Filter, export bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc filterPackage(pkg *Package, f Filter, export bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#nameOf",
              "documentation": {
                "identifier": "nameOf",
                "newPage": false,
                "searchKey": "ast.nameOf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nameOf(f *FuncDecl) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nameOf(f *FuncDecl) string\n```\n\nnameOf returns the function (foo) or method name (foo.bar) for the given function declaration. If the AST is incorrect for the receiver, it assumes a function instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#SortImports",
              "documentation": {
                "identifier": "SortImports",
                "newPage": false,
                "searchKey": "ast.SortImports",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SortImports(fset *token.FileSet, f *File)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SortImports(fset *token.FileSet, f *File)\n```\n\nSortImports sorts runs of consecutive import lines in import blocks in f. It also removes duplicate imports when it is possible to do so without data loss. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#lineAt",
              "documentation": {
                "identifier": "lineAt",
                "newPage": false,
                "searchKey": "ast.lineAt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func lineAt(fset *token.FileSet, pos token.Pos) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lineAt(fset *token.FileSet, pos token.Pos) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#importPath",
              "documentation": {
                "identifier": "importPath",
                "newPage": false,
                "searchKey": "ast.importPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func importPath(s Spec) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc importPath(s Spec) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#importName",
              "documentation": {
                "identifier": "importName",
                "newPage": false,
                "searchKey": "ast.importName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func importName(s Spec) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc importName(s Spec) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#importComment",
              "documentation": {
                "identifier": "importComment",
                "newPage": false,
                "searchKey": "ast.importComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func importComment(s Spec) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc importComment(s Spec) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#collapse",
              "documentation": {
                "identifier": "collapse",
                "newPage": false,
                "searchKey": "ast.collapse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func collapse(prev, next Spec) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc collapse(prev, next Spec) bool\n```\n\ncollapse indicates whether prev may be removed, leaving only next. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#sortSpecs",
              "documentation": {
                "identifier": "sortSpecs",
                "newPage": false,
                "searchKey": "ast.sortSpecs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortSpecs(fset *token.FileSet, f *File, specs []Spec) []Spec"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortSpecs(fset *token.FileSet, f *File, specs []Spec) []Spec\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#NotNilFilter",
              "documentation": {
                "identifier": "NotNilFilter",
                "newPage": false,
                "searchKey": "ast.NotNilFilter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NotNilFilter(_ string, v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NotNilFilter(_ string, v reflect.Value) bool\n```\n\nNotNilFilter returns true for field values that are not nil; it returns false otherwise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Fprint",
              "documentation": {
                "identifier": "Fprint",
                "newPage": false,
                "searchKey": "ast.Fprint",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter) error\n```\n\nFprint prints the (sub-)tree starting at AST node x to w. If fset != nil, position information is interpreted relative to that file set. Otherwise positions are printed as integer values (file set specific offsets). \n\nA non-nil FieldFilter f may be provided to control the output: struct fields for which f(fieldname, fieldvalue) is true are printed; all others are filtered from the output. Unexported struct fields are never printed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#fprint",
              "documentation": {
                "identifier": "fprint",
                "newPage": false,
                "searchKey": "ast.fprint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Print",
              "documentation": {
                "identifier": "Print",
                "newPage": false,
                "searchKey": "ast.Print",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Print(fset *token.FileSet, x interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Print(fset *token.FileSet, x interface{}) error\n```\n\nPrint prints x to standard output, skipping nil fields. Print(fset, x) is the same as Fprint(os.Stdout, fset, x, NotNilFilter). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#resolve",
              "documentation": {
                "identifier": "resolve",
                "newPage": false,
                "searchKey": "ast.resolve",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolve(scope *Scope, ident *Ident) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolve(scope *Scope, ident *Ident) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkIdentList",
              "documentation": {
                "identifier": "walkIdentList",
                "newPage": false,
                "searchKey": "ast.walkIdentList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkIdentList(v Visitor, list []*Ident)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkIdentList(v Visitor, list []*Ident)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkExprList",
              "documentation": {
                "identifier": "walkExprList",
                "newPage": false,
                "searchKey": "ast.walkExprList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkExprList(v Visitor, list []Expr)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkExprList(v Visitor, list []Expr)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkStmtList",
              "documentation": {
                "identifier": "walkStmtList",
                "newPage": false,
                "searchKey": "ast.walkStmtList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkStmtList(v Visitor, list []Stmt)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkStmtList(v Visitor, list []Stmt)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkDeclList",
              "documentation": {
                "identifier": "walkDeclList",
                "newPage": false,
                "searchKey": "ast.walkDeclList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkDeclList(v Visitor, list []Decl)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkDeclList(v Visitor, list []Decl)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Walk",
              "documentation": {
                "identifier": "Walk",
                "newPage": false,
                "searchKey": "ast.Walk",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Walk(v Visitor, node Node)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Walk(v Visitor, node Node)\n```\n\nWalk traverses an AST in depth-first order: It starts by calling v.Visit(node); node must not be nil. If the visitor w returned by v.Visit(node) is not nil, Walk is invoked recursively with visitor w for each of the non-nil children of node, followed by a call of w.Visit(nil). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#Inspect",
              "documentation": {
                "identifier": "Inspect",
                "newPage": false,
                "searchKey": "ast.Inspect",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Inspect(node Node, f func(Node) bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Inspect(node Node, f func(Node) bool)\n```\n\nInspect traverses an AST in depth-first order: It starts by calling f(node); node must not be nil. If f returns true, Inspect invokes f recursively for each of the non-nil children of node, followed by a call of f(nil). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkFuncTypeParams",
              "documentation": {
                "identifier": "walkFuncTypeParams",
                "newPage": false,
                "searchKey": "ast.walkFuncTypeParams",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkFuncTypeParams(v Visitor, n *FuncType)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkFuncTypeParams(v Visitor, n *FuncType)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkTypeSpecParams",
              "documentation": {
                "identifier": "walkTypeSpecParams",
                "newPage": false,
                "searchKey": "ast.walkTypeSpecParams",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkTypeSpecParams(v Visitor, n *TypeSpec)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkTypeSpecParams(v Visitor, n *TypeSpec)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#walkOtherNodes",
              "documentation": {
                "identifier": "walkOtherNodes",
                "newPage": false,
                "searchKey": "ast.walkOtherNodes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func walkOtherNodes(v Visitor, n Node)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc walkOtherNodes(v Visitor, n Node)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#TestCommentText",
              "documentation": {
                "identifier": "TestCommentText",
                "newPage": false,
                "searchKey": "ast.TestCommentText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCommentText(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCommentText(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#TestIsDirective",
              "documentation": {
                "identifier": "TestIsDirective",
                "newPage": false,
                "searchKey": "ast.TestIsDirective",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsDirective(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsDirective(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#trim",
              "documentation": {
                "identifier": "trim",
                "newPage": false,
                "searchKey": "ast.trim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func trim(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trim(s string) string\n```\n\nSplit s into lines, trim whitespace from all lines, and return the concatenated non-empty lines. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast#TestPrint",
              "documentation": {
                "identifier": "TestPrint",
                "newPage": false,
                "searchKey": "ast.TestPrint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrint(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrint(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
