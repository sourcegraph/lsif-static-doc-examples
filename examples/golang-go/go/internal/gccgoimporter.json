{
  "pathID": "/go/internal/gccgoimporter",
  "documentation": {
    "identifier": "gccgoimporter",
    "newPage": true,
    "searchKey": "go/internal/gccgoimporter",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package gccgoimporter"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package gccgoimporter implements Import for gccgo-generated object files. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/go/internal/gccgoimporter#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#armag",
              "documentation": {
                "identifier": "armag",
                "newPage": false,
                "searchKey": "gccgoimporter.armag",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const armag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst armag = \"!<arch>\\n\"\n```\n\nMagic strings for different archive file formats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#armagt",
              "documentation": {
                "identifier": "armagt",
                "newPage": false,
                "searchKey": "gccgoimporter.armagt",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const armagt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst armagt = \"!<thin>\\n\"\n```\n\nMagic strings for different archive file formats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#armagb",
              "documentation": {
                "identifier": "armagb",
                "newPage": false,
                "searchKey": "gccgoimporter.armagb",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const armagb"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst armagb = \"<bigaf>\\n\"\n```\n\nMagic strings for different archive file formats. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arNameOff",
              "documentation": {
                "identifier": "arNameOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arNameOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arNameOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arNameOff = 0\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arNameSize",
              "documentation": {
                "identifier": "arNameSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arNameSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arNameSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arNameSize = 16\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arDateOff",
              "documentation": {
                "identifier": "arDateOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arDateOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arDateOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arDateOff = arNameOff + arNameSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arDateSize",
              "documentation": {
                "identifier": "arDateSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arDateSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arDateSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arDateSize = 12\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arUIDOff",
              "documentation": {
                "identifier": "arUIDOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arUIDOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arUIDOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arUIDOff = arDateOff + arDateSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arUIDSize",
              "documentation": {
                "identifier": "arUIDSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arUIDSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arUIDSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arUIDSize = 6\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arGIDOff",
              "documentation": {
                "identifier": "arGIDOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arGIDOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arGIDOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arGIDOff = arUIDOff + arUIDSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arGIDSize",
              "documentation": {
                "identifier": "arGIDSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arGIDSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arGIDSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arGIDSize = 6\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arModeOff",
              "documentation": {
                "identifier": "arModeOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arModeOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arModeOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arModeOff = arGIDOff + arGIDSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arModeSize",
              "documentation": {
                "identifier": "arModeSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arModeSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arModeSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arModeSize = 8\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arSizeOff",
              "documentation": {
                "identifier": "arSizeOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arSizeOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arSizeOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arSizeOff = arModeOff + arModeSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arSizeSize",
              "documentation": {
                "identifier": "arSizeSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arSizeSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arSizeSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arSizeSize = 10\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arFmagOff",
              "documentation": {
                "identifier": "arFmagOff",
                "newPage": false,
                "searchKey": "gccgoimporter.arFmagOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arFmagOff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arFmagOff = arSizeOff + arSizeSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arFmagSize",
              "documentation": {
                "identifier": "arFmagSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arFmagSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arFmagSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arFmagSize = 2\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arHdrSize",
              "documentation": {
                "identifier": "arHdrSize",
                "newPage": false,
                "searchKey": "gccgoimporter.arHdrSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arHdrSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arHdrSize = arFmagOff + arFmagSize\n```\n\nOffsets and sizes for fields in a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arfmag",
              "documentation": {
                "identifier": "arfmag",
                "newPage": false,
                "searchKey": "gccgoimporter.arfmag",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const arfmag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst arfmag = \"`\\n\"\n```\n\nThe contents of the fmag field of a standard archive header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgov1Magic",
              "documentation": {
                "identifier": "gccgov1Magic",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgov1Magic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgov1Magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgov1Magic = \"v1;\\n\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgov2Magic",
              "documentation": {
                "identifier": "gccgov2Magic",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgov2Magic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgov2Magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgov2Magic = \"v2;\\n\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgov3Magic",
              "documentation": {
                "identifier": "gccgov3Magic",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgov3Magic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgov3Magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgov3Magic = \"v3;\\n\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#goimporterMagic",
              "documentation": {
                "identifier": "goimporterMagic",
                "newPage": false,
                "searchKey": "gccgoimporter.goimporterMagic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const goimporterMagic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst goimporterMagic = \"\\n$$ \"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#archiveMagic",
              "documentation": {
                "identifier": "archiveMagic",
                "newPage": false,
                "searchKey": "gccgoimporter.archiveMagic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const archiveMagic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst archiveMagic = \"!<ar\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#aixbigafMagic",
              "documentation": {
                "identifier": "aixbigafMagic",
                "newPage": false,
                "searchKey": "gccgoimporter.aixbigafMagic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const aixbigafMagic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst aixbigafMagic = \"<big\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinINT8",
              "documentation": {
                "identifier": "gccgoBuiltinINT8",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinINT8",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinINT8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinINT8 = 1\n```\n\nFrom gofrontend/go/export.h Note that these values are negative in the gofrontend and have been made positive in the gccgoimporter. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinINT16",
              "documentation": {
                "identifier": "gccgoBuiltinINT16",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinINT16",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinINT16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinINT16 = 2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinINT32",
              "documentation": {
                "identifier": "gccgoBuiltinINT32",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinINT32",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinINT32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinINT32 = 3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinINT64",
              "documentation": {
                "identifier": "gccgoBuiltinINT64",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinINT64",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinINT64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinINT64 = 4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinUINT8",
              "documentation": {
                "identifier": "gccgoBuiltinUINT8",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinUINT8",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinUINT8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinUINT8 = 5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinUINT16",
              "documentation": {
                "identifier": "gccgoBuiltinUINT16",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinUINT16",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinUINT16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinUINT16 = 6\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinUINT32",
              "documentation": {
                "identifier": "gccgoBuiltinUINT32",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinUINT32",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinUINT32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinUINT32 = 7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinUINT64",
              "documentation": {
                "identifier": "gccgoBuiltinUINT64",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinUINT64",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinUINT64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinUINT64 = 8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinFLOAT32",
              "documentation": {
                "identifier": "gccgoBuiltinFLOAT32",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinFLOAT32",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinFLOAT32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinFLOAT32 = 9\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinFLOAT64",
              "documentation": {
                "identifier": "gccgoBuiltinFLOAT64",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinFLOAT64",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinFLOAT64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinFLOAT64 = 10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinINT",
              "documentation": {
                "identifier": "gccgoBuiltinINT",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinINT",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinINT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinINT = 11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinUINT",
              "documentation": {
                "identifier": "gccgoBuiltinUINT",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinUINT",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinUINT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinUINT = 12\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinUINTPTR",
              "documentation": {
                "identifier": "gccgoBuiltinUINTPTR",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinUINTPTR",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinUINTPTR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinUINTPTR = 13\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinBOOL",
              "documentation": {
                "identifier": "gccgoBuiltinBOOL",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinBOOL",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinBOOL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinBOOL = 15\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinSTRING",
              "documentation": {
                "identifier": "gccgoBuiltinSTRING",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinSTRING",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinSTRING"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinSTRING = 16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinCOMPLEX64",
              "documentation": {
                "identifier": "gccgoBuiltinCOMPLEX64",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinCOMPLEX64",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinCOMPLEX64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinCOMPLEX64 = 17\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinCOMPLEX128",
              "documentation": {
                "identifier": "gccgoBuiltinCOMPLEX128",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinCOMPLEX128",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinCOMPLEX128"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinCOMPLEX128 = 18\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinERROR",
              "documentation": {
                "identifier": "gccgoBuiltinERROR",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinERROR",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinERROR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinERROR = 19\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinBYTE",
              "documentation": {
                "identifier": "gccgoBuiltinBYTE",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinBYTE",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinBYTE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinBYTE = 20\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoBuiltinRUNE",
              "documentation": {
                "identifier": "gccgoBuiltinRUNE",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoBuiltinRUNE",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const gccgoBuiltinRUNE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gccgoBuiltinRUNE = 21\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/internal/gccgoimporter#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#reserved",
              "documentation": {
                "identifier": "reserved",
                "newPage": false,
                "searchKey": "gccgoimporter.reserved",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var reserved"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar reserved = new(struct{ types.Type })\n```\n\nreserved is a singleton type used to fill type map slots that have been reserved (i.e., for which a type number has been parsed) but which don't have their actual type yet. When the type map is updated, the actual type must replace a reserved entry (or we have an internal error). Used for self-verification only - not required for correctness. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#importablePackages",
              "documentation": {
                "identifier": "importablePackages",
                "newPage": false,
                "searchKey": "gccgoimporter.importablePackages",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var importablePackages"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar importablePackages = ...\n```\n\nimportablePackages is a list of packages that we verify that we can import. This should be all standard library packages in all relevant versions of gccgo. Note that since gccgo follows a different release cycle, and since different systems have different versions installed, we can't use the last-two-versions rule of the gc toolchain. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#importerTests",
              "documentation": {
                "identifier": "importerTests",
                "newPage": false,
                "searchKey": "gccgoimporter.importerTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var importerTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar importerTests = ...\n```\n\nWhen adding tests to this list, be sure to set the 'gccgoVersion' field if the testcases uses a \"recent\" Go addition (ex: aliases). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#typeParserTests",
              "documentation": {
                "identifier": "typeParserTests",
                "newPage": false,
                "searchKey": "gccgoimporter.typeParserTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var typeParserTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar typeParserTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/internal/gccgoimporter#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#seekerReadAt",
              "documentation": {
                "identifier": "seekerReadAt",
                "newPage": false,
                "searchKey": "gccgoimporter.seekerReadAt",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type seekerReadAt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype seekerReadAt struct {\n\tseeker io.ReadSeeker\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#seekerReadAt.ReadAt",
                    "documentation": {
                      "identifier": "seekerReadAt.ReadAt",
                      "newPage": false,
                      "searchKey": "gccgoimporter.seekerReadAt.ReadAt",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sra seekerReadAt) ReadAt(p []byte, off int64) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sra seekerReadAt) ReadAt(p []byte, off int64) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#GccgoInstallation",
              "documentation": {
                "identifier": "GccgoInstallation",
                "newPage": false,
                "searchKey": "gccgoimporter.GccgoInstallation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type GccgoInstallation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GccgoInstallation struct {\n\t// Version of gcc (e.g. 4.8.0).\n\tGccVersion string\n\n\t// Target triple (e.g. x86_64-unknown-linux-gnu).\n\tTargetTriple string\n\n\t// Built-in library paths used by this installation.\n\tLibPaths []string\n}\n```\n\nInformation about a specific installation of gccgo. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#GccgoInstallation.InitFromDriver",
                    "documentation": {
                      "identifier": "GccgoInstallation.InitFromDriver",
                      "newPage": false,
                      "searchKey": "gccgoimporter.GccgoInstallation.InitFromDriver",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (inst *GccgoInstallation) InitFromDriver(gccgoPath string, args ...string) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (inst *GccgoInstallation) InitFromDriver(gccgoPath string, args ...string) (err error)\n```\n\nAsk the driver at the given path for information for this GccgoInstallation. The given arguments are passed directly to the call of the driver. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#GccgoInstallation.SearchPaths",
                    "documentation": {
                      "identifier": "GccgoInstallation.SearchPaths",
                      "newPage": false,
                      "searchKey": "gccgoimporter.GccgoInstallation.SearchPaths",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (inst *GccgoInstallation) SearchPaths() (paths []string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (inst *GccgoInstallation) SearchPaths() (paths []string)\n```\n\nReturn the list of export search paths for this GccgoInstallation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#GccgoInstallation.GetImporter",
                    "documentation": {
                      "identifier": "GccgoInstallation.GetImporter",
                      "newPage": false,
                      "searchKey": "gccgoimporter.GccgoInstallation.GetImporter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (inst *GccgoInstallation) GetImporter(incpaths []string, initmap map[*types.Package]InitData) Importer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (inst *GccgoInstallation) GetImporter(incpaths []string, initmap map[*types.Package]InitData) Importer\n```\n\nReturn an importer that searches incpaths followed by the gcc installation's built-in search paths and the current directory. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#PackageInit",
              "documentation": {
                "identifier": "PackageInit",
                "newPage": false,
                "searchKey": "gccgoimporter.PackageInit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PackageInit struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PackageInit struct {\n\tName     string // short package name\n\tInitFunc string // name of init function\n\tPriority int    // priority of init function, see InitData.Priority\n}\n```\n\nA PackageInit describes an imported package that needs initialization. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#InitData",
              "documentation": {
                "identifier": "InitData",
                "newPage": false,
                "searchKey": "gccgoimporter.InitData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type InitData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InitData struct {\n\t// Initialization priority of this package relative to other packages.\n\t// This is based on the maximum depth of the package's dependency graph;\n\t// it is guaranteed to be greater than that of its dependencies.\n\tPriority int\n\n\t// The list of packages which this package depends on to be initialized,\n\t// including itself if needed. This is the subset of the transitive closure of\n\t// the package's dependencies that need initialization.\n\tInits []PackageInit\n}\n```\n\nThe gccgo-specific init data for a package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#Importer",
              "documentation": {
                "identifier": "Importer",
                "newPage": false,
                "searchKey": "gccgoimporter.Importer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Importer func(imports map[string]*go/types.Package, path string, srcDir string, lookup func(string) (io.ReadCloser, error)) (*go/types.Package, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Importer func(imports map[string]*types.Package, path, srcDir string, lookup func(string) (io.ReadCloser, error)) (*types.Package, error)\n```\n\nAn Importer resolves import paths to Packages. The imports map records packages already known, indexed by package path. An importer must determine the canonical package path and check imports to see if it is already present in the map. If so, the Importer can return the map entry. Otherwise, the importer must load the package data for the given path into a new *Package, record it in imports map, and return the package. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#GetImporter",
                    "documentation": {
                      "identifier": "GetImporter",
                      "newPage": false,
                      "searchKey": "gccgoimporter.GetImporter",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GetImporter(searchpaths []string, initmap map[*types.Package]InitData) Importer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GetImporter(searchpaths []string, initmap map[*types.Package]InitData) Importer\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#parser",
              "documentation": {
                "identifier": "parser",
                "newPage": false,
                "searchKey": "gccgoimporter.parser",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type parser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parser struct {\n\tscanner  *scanner.Scanner\n\tversion  string                    // format version\n\ttok      rune                      // current token\n\tlit      string                    // literal string; only valid for Ident, Int, String tokens\n\tpkgpath  string                    // package path of imported package\n\tpkgname  string                    // name of imported package\n\tpkg      *types.Package            // reference to imported package\n\timports  map[string]*types.Package // package path -> package object\n\ttypeList []types.Type              // type number -> type\n\ttypeData []string                  // unparsed type data (v3 and later)\n\tfixups   []fixupRecord             // fixups to apply at end of parsing\n\tinitdata InitData                  // package init priority data\n\taliases  map[int]string            // maps saved type number to alias name\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.init.parser.go",
                    "documentation": {
                      "identifier": "parser.init.parser.go",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.init",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) init(filename string, src io.Reader, imports map[string]*types.Package)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) init(filename string, src io.Reader, imports map[string]*types.Package)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.initScanner",
                    "documentation": {
                      "identifier": "parser.initScanner",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.initScanner",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) initScanner(filename string, src io.Reader)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) initScanner(filename string, src io.Reader)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.error",
                    "documentation": {
                      "identifier": "parser.error",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.error",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) error(err interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) error(err interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.errorf",
                    "documentation": {
                      "identifier": "parser.errorf",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.errorf",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) errorf(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) errorf(format string, args ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.expect",
                    "documentation": {
                      "identifier": "parser.expect",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.expect",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expect(tok rune) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expect(tok rune) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.expectEOL",
                    "documentation": {
                      "identifier": "parser.expectEOL",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.expectEOL",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expectEOL()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expectEOL()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.expectKeyword",
                    "documentation": {
                      "identifier": "parser.expectKeyword",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.expectKeyword",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) expectKeyword(keyword string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) expectKeyword(keyword string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseString",
                    "documentation": {
                      "identifier": "parser.parseString",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseString",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseString() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseUnquotedString",
                    "documentation": {
                      "identifier": "parser.parseUnquotedString",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseUnquotedString",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseUnquotedString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseUnquotedString() string\n```\n\nunquotedString     = { unquotedStringChar } . unquotedStringChar = <neither a whitespace nor a ';' char> . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.next",
                    "documentation": {
                      "identifier": "parser.next",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.next",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) next()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) next()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseQualifiedName",
                    "documentation": {
                      "identifier": "parser.parseQualifiedName",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseQualifiedName",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseQualifiedName() (path, name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseQualifiedName() (path, name string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseUnquotedQualifiedName",
                    "documentation": {
                      "identifier": "parser.parseUnquotedQualifiedName",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseUnquotedQualifiedName",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseUnquotedQualifiedName() (path, name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseUnquotedQualifiedName() (path, name string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseQualifiedNameStr",
                    "documentation": {
                      "identifier": "parser.parseQualifiedNameStr",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseQualifiedNameStr",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseQualifiedNameStr(unquotedName string) (pkgpath, name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseQualifiedNameStr(unquotedName string) (pkgpath, name string)\n```\n\nqualifiedName = [ [\".\"] unquotedString \".\" ] unquotedString . \n\nThe above production uses greedy matching. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.getPkg",
                    "documentation": {
                      "identifier": "parser.getPkg",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.getPkg",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) getPkg(pkgpath, name string) *types.Package"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) getPkg(pkgpath, name string) *types.Package\n```\n\ngetPkg returns the package for a given path. If the package is not found but we have a package name, create the package and add it to the p.imports map. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseExportedName",
                    "documentation": {
                      "identifier": "parser.parseExportedName",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseExportedName",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseExportedName() (pkg *types.Package, name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseExportedName() (pkg *types.Package, name string)\n```\n\nparseExportedName is like parseQualifiedName, but the package path is resolved to an imported *types.Package. \n\nExportedName = string [string] . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseName",
                    "documentation": {
                      "identifier": "parser.parseName",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseName",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseName() string\n```\n\nName = QualifiedName | \"?\" . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseField",
                    "documentation": {
                      "identifier": "parser.parseField",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseField",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseField(pkg *types.Package) (field *types.Var, tag string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseField(pkg *types.Package) (field *types.Var, tag string)\n```\n\nField = Name Type [string] . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseParam",
                    "documentation": {
                      "identifier": "parser.parseParam",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseParam",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseParam(pkg *types.Package) (param *types.Var, isVariadic bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseParam(pkg *types.Package) (param *types.Var, isVariadic bool)\n```\n\nParam = Name [\"...\"] Type . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseVar",
                    "documentation": {
                      "identifier": "parser.parseVar",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseVar",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseVar(pkg *types.Package) *types.Var"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseVar(pkg *types.Package) *types.Var\n```\n\nVar = Name Type . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseConversion",
                    "documentation": {
                      "identifier": "parser.parseConversion",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseConversion",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseConversion(pkg *types.Package) (val constant.Value, typ types.Type)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseConversion(pkg *types.Package) (val constant.Value, typ types.Type)\n```\n\nConversion = \"convert\" \"(\" Type \",\" ConstValue \")\" . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseConstValue",
                    "documentation": {
                      "identifier": "parser.parseConstValue",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseConstValue",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseConstValue(pkg *types.Package) (val constant.Value, typ types.Type)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseConstValue(pkg *types.Package) (val constant.Value, typ types.Type)\n```\n\nConstValue     = string | \"false\" | \"true\" | [\"-\"] (int [\"'\"] | FloatOrComplex) | Conversion . FloatOrComplex = float [\"i\" | (\"+\"|\"-\") float \"i\"] . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseConst",
                    "documentation": {
                      "identifier": "parser.parseConst",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseConst",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseConst(pkg *types.Package) *types.Const"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseConst(pkg *types.Package) *types.Const\n```\n\nConst = Name [Type] \"=\" ConstValue . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.reserve",
                    "documentation": {
                      "identifier": "parser.reserve",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.reserve",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) reserve(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) reserve(n int)\n```\n\nreserve reserves the type map entry n for future use. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.update",
                    "documentation": {
                      "identifier": "parser.update",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.update",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) update(t types.Type, nlist []interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) update(t types.Type, nlist []interface{})\n```\n\nupdate sets the type map entries for the entries in nlist to t. An entry in nlist can be a type number in p.typeList, used to resolve named types, or it can be a *types.Pointer, used to resolve pointers to named types in case they are referenced by embedded fields. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseNamedType",
                    "documentation": {
                      "identifier": "parser.parseNamedType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseNamedType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseNamedType(nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseNamedType(nlist []interface{}) types.Type\n```\n\nNamedType = TypeName [ \"=\" ] Type { Method } . TypeName  = ExportedName . Method    = \"func\" \"(\" Param \")\" Name ParamList ResultList [InlineBody] \";\" . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseInt64",
                    "documentation": {
                      "identifier": "parser.parseInt64",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseInt64",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseInt64() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseInt64() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseInt",
                    "documentation": {
                      "identifier": "parser.parseInt",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseInt",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseInt() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseInt() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseArrayOrSliceType",
                    "documentation": {
                      "identifier": "parser.parseArrayOrSliceType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseArrayOrSliceType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseArrayOrSliceType(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseArrayOrSliceType(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nArrayOrSliceType = \"[\" [ int ] \"]\" Type . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseMapType",
                    "documentation": {
                      "identifier": "parser.parseMapType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseMapType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseMapType(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseMapType(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nMapType = \"map\" \"[\" Type \"]\" Type . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseChanType",
                    "documentation": {
                      "identifier": "parser.parseChanType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseChanType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseChanType(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseChanType(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nChanType = \"chan\" [\"<-\" | \"-<\"] Type . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseStructType",
                    "documentation": {
                      "identifier": "parser.parseStructType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseStructType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseStructType(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseStructType(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nStructType = \"struct\" \"{\" { Field } \"}\" . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseParamList",
                    "documentation": {
                      "identifier": "parser.parseParamList",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseParamList",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseParamList(pkg *types.Package) (*types.Tuple, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseParamList(pkg *types.Package) (*types.Tuple, bool)\n```\n\nParamList = \"(\" [ { Parameter \",\" } Parameter ] \")\" . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseResultList",
                    "documentation": {
                      "identifier": "parser.parseResultList",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseResultList",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseResultList(pkg *types.Package) *types.Tuple"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseResultList(pkg *types.Package) *types.Tuple\n```\n\nResultList = Type | ParamList . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseFunctionType",
                    "documentation": {
                      "identifier": "parser.parseFunctionType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseFunctionType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFunctionType(pkg *types.Package, nlist []interface{}) *types.Signature"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFunctionType(pkg *types.Package, nlist []interface{}) *types.Signature\n```\n\nFunctionType = ParamList ResultList . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseFunc",
                    "documentation": {
                      "identifier": "parser.parseFunc",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseFunc",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseFunc(pkg *types.Package) *types.Func"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseFunc(pkg *types.Package) *types.Func\n```\n\nFunc = Name FunctionType [InlineBody] . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseInterfaceType",
                    "documentation": {
                      "identifier": "parser.parseInterfaceType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseInterfaceType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseInterfaceType(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseInterfaceType(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nInterfaceType = \"interface\" \"{\" { (\"?\" Type | Func) \";\" } \"}\" . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parsePointerType",
                    "documentation": {
                      "identifier": "parser.parsePointerType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parsePointerType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parsePointerType(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parsePointerType(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nPointerType = \"*\" (\"any\" | Type) . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseTypeSpec",
                    "documentation": {
                      "identifier": "parser.parseTypeSpec",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseTypeSpec",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeSpec(pkg *types.Package, nlist []interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeSpec(pkg *types.Package, nlist []interface{}) types.Type\n```\n\nTypeSpec = NamedType | MapType | ChanType | StructType | InterfaceType | PointerType | ArrayOrSliceType | FunctionType . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseType",
                    "documentation": {
                      "identifier": "parser.parseType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseType(pkg *types.Package, n ...interface{}) types.Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseType(pkg *types.Package, n ...interface{}) types.Type\n```\n\nType = \"<\" \"type\" ( \"-\" int | int [ TypeSpec ] ) \">\" . \n\nparseType updates the type map to t for all type numbers n. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseTypeAfterAngle",
                    "documentation": {
                      "identifier": "parser.parseTypeAfterAngle",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseTypeAfterAngle",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeAfterAngle(pkg *types.Package, n ...interface{}) (t types.Type, n1 int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeAfterAngle(pkg *types.Package, n ...interface{}) (t types.Type, n1 int)\n```\n\n(*parser).Type after reading the \"<\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseTypeExtended",
                    "documentation": {
                      "identifier": "parser.parseTypeExtended",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseTypeExtended",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypeExtended(pkg *types.Package, n ...interface{}) (t types.Type, n1 int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypeExtended(pkg *types.Package, n ...interface{}) (t types.Type, n1 int)\n```\n\nparseTypeExtended is identical to parseType, but if the type in question is a saved type, returns the index as well as the type pointer (index returned is zero if we parsed a builtin). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.skipInlineBody",
                    "documentation": {
                      "identifier": "parser.skipInlineBody",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.skipInlineBody",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) skipInlineBody()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) skipInlineBody()\n```\n\nInlineBody = \"<inl:NN>\" .{NN} Reports whether a body was skipped. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseTypes",
                    "documentation": {
                      "identifier": "parser.parseTypes",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseTypes",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseTypes(pkg *types.Package)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseTypes(pkg *types.Package)\n```\n\nTypes = \"types\" maxp1 exportedp1 (offset length)* . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseSavedType",
                    "documentation": {
                      "identifier": "parser.parseSavedType",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseSavedType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseSavedType(pkg *types.Package, i int, nlist []interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseSavedType(pkg *types.Package, i int, nlist []interface{})\n```\n\nparseSavedType parses one saved type definition. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parsePackageInit",
                    "documentation": {
                      "identifier": "parser.parsePackageInit",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parsePackageInit",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parsePackageInit() PackageInit"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parsePackageInit() PackageInit\n```\n\nPackageInit = unquotedString unquotedString int . \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.maybeCreatePackage",
                    "documentation": {
                      "identifier": "parser.maybeCreatePackage",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.maybeCreatePackage",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) maybeCreatePackage()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) maybeCreatePackage()\n```\n\nCreate the package if we have parsed both the package path and package name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseInitDataDirective",
                    "documentation": {
                      "identifier": "parser.parseInitDataDirective",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseInitDataDirective",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseInitDataDirective()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseInitDataDirective()\n```\n\nInitDataDirective = ( \"v1\" | \"v2\" | \"v3\" ) \";\" | \n\n```\n\"priority\" int \";\" |\n\"init\" { PackageInit } \";\" |\n\"checksum\" unquotedString \";\" .\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parseDirective",
                    "documentation": {
                      "identifier": "parser.parseDirective",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parseDirective",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parseDirective()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parseDirective()\n```\n\nDirective = InitDataDirective | \n\n```\n\"package\" unquotedString [ unquotedString ] [ unquotedString ] \";\" |\n\"pkgpath\" unquotedString \";\" |\n\"prefix\" unquotedString \";\" |\n\"import\" unquotedString unquotedString string \";\" |\n\"indirectimport\" unquotedString unquotedstring \";\" |\n\"func\" Func \";\" |\n\"type\" Type \";\" |\n\"var\" Var \";\" |\n\"const\" Const \";\" .\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#parser.parsePackage",
                    "documentation": {
                      "identifier": "parser.parsePackage",
                      "newPage": false,
                      "searchKey": "gccgoimporter.parser.parsePackage",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *parser) parsePackage() *types.Package"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *parser) parsePackage() *types.Package\n```\n\nPackage = { Directive } . \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#fixupRecord",
              "documentation": {
                "identifier": "fixupRecord",
                "newPage": false,
                "searchKey": "gccgoimporter.fixupRecord",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fixupRecord struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fixupRecord struct {\n\ttoUpdate *types.Named // type to modify when fixup is processed\n\ttarget   types.Type   // type that was incomplete when fixup was created\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#importError",
              "documentation": {
                "identifier": "importError",
                "newPage": false,
                "searchKey": "gccgoimporter.importError",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type importError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype importError struct {\n\tpos scanner.Position\n\terr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/go/internal/gccgoimporter#importError.Error",
                    "documentation": {
                      "identifier": "importError.Error",
                      "newPage": false,
                      "searchKey": "gccgoimporter.importError.Error",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e importError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e importError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#importerTest",
              "documentation": {
                "identifier": "importerTest",
                "newPage": false,
                "searchKey": "gccgoimporter.importerTest",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type importerTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype importerTest struct {\n\tpkgpath, name, want, wantval string\n\twantinits                    []string\n\tgccgoVersion                 int // minimum gccgo version (0 => any)\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/internal/gccgoimporter#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#arExportData",
              "documentation": {
                "identifier": "arExportData",
                "newPage": false,
                "searchKey": "gccgoimporter.arExportData",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func arExportData(archive io.ReadSeeker) (io.ReadSeeker, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc arExportData(archive io.ReadSeeker) (io.ReadSeeker, error)\n```\n\narExportData takes an archive file and returns a ReadSeeker for the export data in that file. This assumes that there is only one object in the archive containing export data, which is not quite what gccgo does; gccgo concatenates together all the export data for all the objects in the file.  In practice that case does not arise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#standardArExportData",
              "documentation": {
                "identifier": "standardArExportData",
                "newPage": false,
                "searchKey": "gccgoimporter.standardArExportData",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func standardArExportData(archive io.ReadSeeker) (io.ReadSeeker, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc standardArExportData(archive io.ReadSeeker) (io.ReadSeeker, error)\n```\n\nstandardArExportData returns export data from a standard archive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#elfFromAr",
              "documentation": {
                "identifier": "elfFromAr",
                "newPage": false,
                "searchKey": "gccgoimporter.elfFromAr",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func elfFromAr(member *io.SectionReader) (io.ReadSeeker, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc elfFromAr(member *io.SectionReader) (io.ReadSeeker, error)\n```\n\nelfFromAr tries to get export data from an archive member as an ELF file. If there is no export data, this returns nil, nil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#aixBigArExportData",
              "documentation": {
                "identifier": "aixBigArExportData",
                "newPage": false,
                "searchKey": "gccgoimporter.aixBigArExportData",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func aixBigArExportData(archive io.ReadSeeker) (io.ReadSeeker, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc aixBigArExportData(archive io.ReadSeeker) (io.ReadSeeker, error)\n```\n\naixBigArExportData returns export data from an AIX big archive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#readerAtFromSeeker",
              "documentation": {
                "identifier": "readerAtFromSeeker",
                "newPage": false,
                "searchKey": "gccgoimporter.readerAtFromSeeker",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readerAtFromSeeker(rs io.ReadSeeker) io.ReaderAt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readerAtFromSeeker(rs io.ReadSeeker) io.ReaderAt\n```\n\nreaderAtFromSeeker turns an io.ReadSeeker into an io.ReaderAt. This is only safe because there won't be any concurrent seeks while this code is executing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#findExportFile",
              "documentation": {
                "identifier": "findExportFile",
                "newPage": false,
                "searchKey": "gccgoimporter.findExportFile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findExportFile(searchpaths []string, pkgpath string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findExportFile(searchpaths []string, pkgpath string) (string, error)\n```\n\nLocate the file from which to read export data. This is intended to replicate the logic in gofrontend. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#openExportFile",
              "documentation": {
                "identifier": "openExportFile",
                "newPage": false,
                "searchKey": "gccgoimporter.openExportFile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func openExportFile(fpath string) (reader io.ReadSeeker, closer io.Closer, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc openExportFile(fpath string) (reader io.ReadSeeker, closer io.Closer, err error)\n```\n\nOpens the export data file at the given path. If this is an ELF file, searches for and opens the .go_export section. If this is an archive, reads the export data from the first member, which is assumed to be an ELF file. This is intended to replicate the logic in gofrontend. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#readMagic",
              "documentation": {
                "identifier": "readMagic",
                "newPage": false,
                "searchKey": "gccgoimporter.readMagic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readMagic(reader io.ReadSeeker) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readMagic(reader io.ReadSeeker) (string, error)\n```\n\nreadMagic reads the four bytes at the start of a ReadSeeker and returns them as a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#deref",
              "documentation": {
                "identifier": "deref",
                "newPage": false,
                "searchKey": "gccgoimporter.deref",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deref(typ types.Type) types.Type"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deref(typ types.Type) types.Type\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#lookupBuiltinType",
              "documentation": {
                "identifier": "lookupBuiltinType",
                "newPage": false,
                "searchKey": "gccgoimporter.lookupBuiltinType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lookupBuiltinType(typ int) types.Type"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lookupBuiltinType(typ int) types.Type\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#TestInstallationImporter",
              "documentation": {
                "identifier": "TestInstallationImporter",
                "newPage": false,
                "searchKey": "gccgoimporter.TestInstallationImporter",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInstallationImporter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInstallationImporter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#runImporterTest",
              "documentation": {
                "identifier": "runImporterTest",
                "newPage": false,
                "searchKey": "gccgoimporter.runImporterTest",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runImporterTest(t *testing.T, imp Importer, initmap map[*types.Package]InitData, test *importerTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runImporterTest(t *testing.T, imp Importer, initmap map[*types.Package]InitData, test *importerTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#TestGoxImporter",
              "documentation": {
                "identifier": "TestGoxImporter",
                "newPage": false,
                "searchKey": "gccgoimporter.TestGoxImporter",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoxImporter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoxImporter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#gccgoPath",
              "documentation": {
                "identifier": "gccgoPath",
                "newPage": false,
                "searchKey": "gccgoimporter.gccgoPath",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func gccgoPath() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc gccgoPath() string\n```\n\ngccgoPath returns a path to gccgo if it is present (either in path or specified via GCCGO environment variable), or an empty string if no gccgo is available. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#TestObjImporter",
              "documentation": {
                "identifier": "TestObjImporter",
                "newPage": false,
                "searchKey": "gccgoimporter.TestObjImporter",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestObjImporter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestObjImporter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/internal/gccgoimporter#TestTypeParser",
              "documentation": {
                "identifier": "TestTypeParser",
                "newPage": false,
                "searchKey": "gccgoimporter.TestTypeParser",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeParser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeParser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
