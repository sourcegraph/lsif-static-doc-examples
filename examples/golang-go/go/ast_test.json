{
  "pathID": "/go/ast_test",
  "documentation": {
    "identifier": "ast_test",
    "newPage": true,
    "searchKey": "go/ast_test",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package ast_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/go/ast_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast_test#golden",
              "documentation": {
                "identifier": "golden",
                "newPage": false,
                "searchKey": "ast_test.golden",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const golden"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst golden = ...\n```\n\nCalling ast.MergePackageFiles with ast.FilterFuncDuplicates keeps a duplicate entry with attached documentation in favor of one without, and it favors duplicate entries appearing later in the source over ones appearing earlier. This is why (*t2).f2 is kept and t2.f2 is eliminated in this test case. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#input",
              "documentation": {
                "identifier": "input",
                "newPage": false,
                "searchKey": "ast_test.input",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const input"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst input = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#src",
              "documentation": {
                "identifier": "src",
                "newPage": false,
                "searchKey": "ast_test.src",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const src"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst src = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/ast_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast_test#res",
              "documentation": {
                "identifier": "res",
                "newPage": false,
                "searchKey": "ast_test.res",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var res"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar res = ...\n```\n\nres maps a key of the form \"line number: node type\" to the associated comments' text. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/go/ast_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/go/ast_test#ExampleCommentMap",
              "documentation": {
                "identifier": "ExampleCommentMap",
                "newPage": false,
                "searchKey": "ast_test.ExampleCommentMap",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCommentMap()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCommentMap()\n```\n\nThis example illustrates how to remove a variable declaration in a Go program while maintaining correct comment association using an ast.CommentMap. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#ExampleInspect",
              "documentation": {
                "identifier": "ExampleInspect",
                "newPage": false,
                "searchKey": "ast_test.ExampleInspect",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleInspect()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleInspect()\n```\n\nThis example demonstrates how to inspect the AST of a Go program. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#ExamplePrint",
              "documentation": {
                "identifier": "ExamplePrint",
                "newPage": false,
                "searchKey": "ast_test.ExamplePrint",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExamplePrint()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExamplePrint()\n```\n\nThis example shows what an AST looks like when printed for debugging. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#TestCommentMap",
              "documentation": {
                "identifier": "TestCommentMap",
                "newPage": false,
                "searchKey": "ast_test.TestCommentMap",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCommentMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCommentMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#TestFilter",
              "documentation": {
                "identifier": "TestFilter",
                "newPage": false,
                "searchKey": "ast_test.TestFilter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFilter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFilter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#TestFilterDuplicates",
              "documentation": {
                "identifier": "TestFilterDuplicates",
                "newPage": false,
                "searchKey": "ast_test.TestFilterDuplicates",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFilterDuplicates(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFilterDuplicates(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#TestIssue33649",
              "documentation": {
                "identifier": "TestIssue33649",
                "newPage": false,
                "searchKey": "ast_test.TestIssue33649",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue33649(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue33649(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/go/ast_test#ctext",
              "documentation": {
                "identifier": "ctext",
                "newPage": false,
                "searchKey": "ast_test.ctext",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ctext(list []*CommentGroup) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ctext(list []*CommentGroup) string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
