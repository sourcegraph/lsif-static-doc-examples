{
  "pathID": "/text/template/parse",
  "documentation": {
    "identifier": "parse",
    "newPage": true,
    "searchKey": "text/template/parse",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package parse"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package parse builds parse trees for templates as defined by text/template and html/template. Clients should use those packages to construct templates rather than this one, which provides shared internal data structures not intended for general use. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/text/template/parse#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/text/template/parse#itemError",
              "documentation": {
                "identifier": "itemError",
                "newPage": false,
                "searchKey": "parse.itemError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemError itemType = iota // error occurred; value is text of error\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemBool",
              "documentation": {
                "identifier": "itemBool",
                "newPage": false,
                "searchKey": "parse.itemBool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemBool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemBool // boolean constant\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemChar",
              "documentation": {
                "identifier": "itemChar",
                "newPage": false,
                "searchKey": "parse.itemChar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemChar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemChar // printable ASCII character; grab bag for comma etc.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemCharConstant",
              "documentation": {
                "identifier": "itemCharConstant",
                "newPage": false,
                "searchKey": "parse.itemCharConstant",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemCharConstant"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemCharConstant // character constant\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemComment",
              "documentation": {
                "identifier": "itemComment",
                "newPage": false,
                "searchKey": "parse.itemComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemComment // comment text\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemComplex",
              "documentation": {
                "identifier": "itemComplex",
                "newPage": false,
                "searchKey": "parse.itemComplex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemComplex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemComplex // complex constant (1+2i); imaginary is just a number\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemAssign",
              "documentation": {
                "identifier": "itemAssign",
                "newPage": false,
                "searchKey": "parse.itemAssign",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemAssign"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemAssign // equals ('=') introducing an assignment\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemDeclare",
              "documentation": {
                "identifier": "itemDeclare",
                "newPage": false,
                "searchKey": "parse.itemDeclare",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemDeclare"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemDeclare // colon-equals (':=') introducing a declaration\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemEOF",
              "documentation": {
                "identifier": "itemEOF",
                "newPage": false,
                "searchKey": "parse.itemEOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemEOF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemEOF\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemField",
              "documentation": {
                "identifier": "itemField",
                "newPage": false,
                "searchKey": "parse.itemField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemField"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemField // alphanumeric identifier starting with '.'\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemIdentifier",
              "documentation": {
                "identifier": "itemIdentifier",
                "newPage": false,
                "searchKey": "parse.itemIdentifier",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemIdentifier"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemIdentifier // alphanumeric identifier not starting with '.'\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemLeftDelim",
              "documentation": {
                "identifier": "itemLeftDelim",
                "newPage": false,
                "searchKey": "parse.itemLeftDelim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemLeftDelim"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemLeftDelim // left action delimiter\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemLeftParen",
              "documentation": {
                "identifier": "itemLeftParen",
                "newPage": false,
                "searchKey": "parse.itemLeftParen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemLeftParen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemLeftParen // '(' inside action\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemNumber",
              "documentation": {
                "identifier": "itemNumber",
                "newPage": false,
                "searchKey": "parse.itemNumber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemNumber"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemNumber // simple number, including imaginary\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemPipe",
              "documentation": {
                "identifier": "itemPipe",
                "newPage": false,
                "searchKey": "parse.itemPipe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemPipe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemPipe // pipe symbol\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemRawString",
              "documentation": {
                "identifier": "itemRawString",
                "newPage": false,
                "searchKey": "parse.itemRawString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemRawString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemRawString // raw quoted string (includes quotes)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemRightDelim",
              "documentation": {
                "identifier": "itemRightDelim",
                "newPage": false,
                "searchKey": "parse.itemRightDelim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemRightDelim"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemRightDelim // right action delimiter\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemRightParen",
              "documentation": {
                "identifier": "itemRightParen",
                "newPage": false,
                "searchKey": "parse.itemRightParen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemRightParen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemRightParen // ')' inside action\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemSpace",
              "documentation": {
                "identifier": "itemSpace",
                "newPage": false,
                "searchKey": "parse.itemSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemSpace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemSpace // run of spaces separating arguments\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemString",
              "documentation": {
                "identifier": "itemString",
                "newPage": false,
                "searchKey": "parse.itemString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemString // quoted string (includes quotes)\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemText",
              "documentation": {
                "identifier": "itemText",
                "newPage": false,
                "searchKey": "parse.itemText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemText"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemText // plain text\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemVariable",
              "documentation": {
                "identifier": "itemVariable",
                "newPage": false,
                "searchKey": "parse.itemVariable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemVariable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemVariable // variable starting with '$', such as '$' or  '$1' or '$hello'\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemKeyword",
              "documentation": {
                "identifier": "itemKeyword",
                "newPage": false,
                "searchKey": "parse.itemKeyword",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemKeyword"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemKeyword // used only to delimit the keywords\n\n```\n\nKeywords appear after all the rest. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemBlock",
              "documentation": {
                "identifier": "itemBlock",
                "newPage": false,
                "searchKey": "parse.itemBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemBlock // block keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemDot",
              "documentation": {
                "identifier": "itemDot",
                "newPage": false,
                "searchKey": "parse.itemDot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemDot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemDot // the cursor, spelled '.'\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemDefine",
              "documentation": {
                "identifier": "itemDefine",
                "newPage": false,
                "searchKey": "parse.itemDefine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemDefine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemDefine // define keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemElse",
              "documentation": {
                "identifier": "itemElse",
                "newPage": false,
                "searchKey": "parse.itemElse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemElse"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemElse // else keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemEnd",
              "documentation": {
                "identifier": "itemEnd",
                "newPage": false,
                "searchKey": "parse.itemEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemEnd // end keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemIf",
              "documentation": {
                "identifier": "itemIf",
                "newPage": false,
                "searchKey": "parse.itemIf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemIf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemIf // if keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemNil",
              "documentation": {
                "identifier": "itemNil",
                "newPage": false,
                "searchKey": "parse.itemNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemNil"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemNil // the untyped nil constant, easiest to treat as a keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemRange",
              "documentation": {
                "identifier": "itemRange",
                "newPage": false,
                "searchKey": "parse.itemRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemRange"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemRange // range keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemTemplate",
              "documentation": {
                "identifier": "itemTemplate",
                "newPage": false,
                "searchKey": "parse.itemTemplate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemTemplate // template keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemWith",
              "documentation": {
                "identifier": "itemWith",
                "newPage": false,
                "searchKey": "parse.itemWith",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const itemWith"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst itemWith // with keyword\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#eof",
              "documentation": {
                "identifier": "eof",
                "newPage": false,
                "searchKey": "parse.eof",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const eof"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst eof = -1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#spaceChars",
              "documentation": {
                "identifier": "spaceChars",
                "newPage": false,
                "searchKey": "parse.spaceChars",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const spaceChars"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst spaceChars = \" \\t\\r\\n\" // These are the space characters defined by Go itself.\n\n```\n\nTrimming spaces. If the action begins \"{{- \" rather than \"{{\", then all space/tab/newlines preceding the action are trimmed; conversely if it ends \" -}}\" the leading spaces are trimmed. This is done entirely in the lexer; the parser never sees it happen. We require an ASCII space (' ', \\t, \\r, \\n) to be present to avoid ambiguity with things like \"{{-3}}\". It reads better with the space present anyway. For simplicity, only ASCII does the job. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#trimMarker",
              "documentation": {
                "identifier": "trimMarker",
                "newPage": false,
                "searchKey": "parse.trimMarker",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const trimMarker"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst trimMarker // Attached to left/right delimiter, trims trailing spaces from preceding/following text.\n = ...\n```\n\nTrimming spaces. If the action begins \"{{- \" rather than \"{{\", then all space/tab/newlines preceding the action are trimmed; conversely if it ends \" -}}\" the leading spaces are trimmed. This is done entirely in the lexer; the parser never sees it happen. We require an ASCII space (' ', \\t, \\r, \\n) to be present to avoid ambiguity with things like \"{{-3}}\". It reads better with the space present anyway. For simplicity, only ASCII does the job. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#trimMarkerLen",
              "documentation": {
                "identifier": "trimMarkerLen",
                "newPage": false,
                "searchKey": "parse.trimMarkerLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const trimMarkerLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst trimMarkerLen = Pos(1 + 1) // marker plus space before or after\n\n```\n\nTrimming spaces. If the action begins \"{{- \" rather than \"{{\", then all space/tab/newlines preceding the action are trimmed; conversely if it ends \" -}}\" the leading spaces are trimmed. This is done entirely in the lexer; the parser never sees it happen. We require an ASCII space (' ', \\t, \\r, \\n) to be present to avoid ambiguity with things like \"{{-3}}\". It reads better with the space present anyway. For simplicity, only ASCII does the job. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#leftDelim",
              "documentation": {
                "identifier": "leftDelim",
                "newPage": false,
                "searchKey": "parse.leftDelim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const leftDelim"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst leftDelim = \"{{\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#rightDelim",
              "documentation": {
                "identifier": "rightDelim",
                "newPage": false,
                "searchKey": "parse.rightDelim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rightDelim"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rightDelim = \"}}\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#leftComment",
              "documentation": {
                "identifier": "leftComment",
                "newPage": false,
                "searchKey": "parse.leftComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const leftComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst leftComment = \"/*\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#rightComment",
              "documentation": {
                "identifier": "rightComment",
                "newPage": false,
                "searchKey": "parse.rightComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rightComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rightComment = \"*/\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeText",
              "documentation": {
                "identifier": "NodeText",
                "newPage": false,
                "searchKey": "parse.NodeText",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeText"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeText NodeType = iota // Plain text.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeAction",
              "documentation": {
                "identifier": "NodeAction",
                "newPage": false,
                "searchKey": "parse.NodeAction",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeAction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeAction // A non-control action such as a field evaluation.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeBool",
              "documentation": {
                "identifier": "NodeBool",
                "newPage": false,
                "searchKey": "parse.NodeBool",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeBool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeBool // A boolean constant.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeChain",
              "documentation": {
                "identifier": "NodeChain",
                "newPage": false,
                "searchKey": "parse.NodeChain",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeChain"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeChain // A sequence of field accesses.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeCommand",
              "documentation": {
                "identifier": "NodeCommand",
                "newPage": false,
                "searchKey": "parse.NodeCommand",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeCommand"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeCommand // An element of a pipeline.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeDot",
              "documentation": {
                "identifier": "NodeDot",
                "newPage": false,
                "searchKey": "parse.NodeDot",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeDot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeDot // The cursor, dot.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#nodeElse",
              "documentation": {
                "identifier": "nodeElse",
                "newPage": false,
                "searchKey": "parse.nodeElse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nodeElse"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nodeElse // An else action. Not added to tree.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#nodeEnd",
              "documentation": {
                "identifier": "nodeEnd",
                "newPage": false,
                "searchKey": "parse.nodeEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nodeEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nodeEnd // An end action. Not added to tree.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeField",
              "documentation": {
                "identifier": "NodeField",
                "newPage": false,
                "searchKey": "parse.NodeField",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeField"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeField // A field or method name.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeIdentifier",
              "documentation": {
                "identifier": "NodeIdentifier",
                "newPage": false,
                "searchKey": "parse.NodeIdentifier",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeIdentifier"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeIdentifier // An identifier; always a function name.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeIf",
              "documentation": {
                "identifier": "NodeIf",
                "newPage": false,
                "searchKey": "parse.NodeIf",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeIf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeIf // An if action.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeList",
              "documentation": {
                "identifier": "NodeList",
                "newPage": false,
                "searchKey": "parse.NodeList",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeList"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeList // A list of Nodes.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeNil",
              "documentation": {
                "identifier": "NodeNil",
                "newPage": false,
                "searchKey": "parse.NodeNil",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeNil"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeNil // An untyped nil constant.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeNumber",
              "documentation": {
                "identifier": "NodeNumber",
                "newPage": false,
                "searchKey": "parse.NodeNumber",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeNumber"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeNumber // A numerical constant.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodePipe",
              "documentation": {
                "identifier": "NodePipe",
                "newPage": false,
                "searchKey": "parse.NodePipe",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodePipe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodePipe // A pipeline of commands.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeRange",
              "documentation": {
                "identifier": "NodeRange",
                "newPage": false,
                "searchKey": "parse.NodeRange",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeRange"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeRange // A range action.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeString",
              "documentation": {
                "identifier": "NodeString",
                "newPage": false,
                "searchKey": "parse.NodeString",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeString // A string constant.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeTemplate",
              "documentation": {
                "identifier": "NodeTemplate",
                "newPage": false,
                "searchKey": "parse.NodeTemplate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeTemplate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeTemplate // A template invocation action.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeVariable",
              "documentation": {
                "identifier": "NodeVariable",
                "newPage": false,
                "searchKey": "parse.NodeVariable",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeVariable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeVariable // A $ variable.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeWith",
              "documentation": {
                "identifier": "NodeWith",
                "newPage": false,
                "searchKey": "parse.NodeWith",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeWith"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeWith // A with action.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeComment",
              "documentation": {
                "identifier": "NodeComment",
                "newPage": false,
                "searchKey": "parse.NodeComment",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NodeComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NodeComment // A comment.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#ParseComments",
              "documentation": {
                "identifier": "ParseComments",
                "newPage": false,
                "searchKey": "parse.ParseComments",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ParseComments"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ParseComments Mode = 1 << iota // parse comments and add them to AST\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#SkipFuncCheck",
              "documentation": {
                "identifier": "SkipFuncCheck",
                "newPage": false,
                "searchKey": "parse.SkipFuncCheck",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SkipFuncCheck"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SkipFuncCheck // do not check that functions are defined\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#noError",
              "documentation": {
                "identifier": "noError",
                "newPage": false,
                "searchKey": "parse.noError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const noError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst noError = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#hasError",
              "documentation": {
                "identifier": "hasError",
                "newPage": false,
                "searchKey": "parse.hasError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hasError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hasError = false\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/text/template/parse#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/text/template/parse#key",
              "documentation": {
                "identifier": "key",
                "newPage": false,
                "searchKey": "parse.key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar key = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#textFormat",
              "documentation": {
                "identifier": "textFormat",
                "newPage": false,
                "searchKey": "parse.textFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textFormat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textFormat = \"%s\" // Changed to \"%q\" in tests for better error messages.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemName",
              "documentation": {
                "identifier": "itemName",
                "newPage": false,
                "searchKey": "parse.itemName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var itemName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar itemName = ...\n```\n\nMake the types prettyprint. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tDot",
              "documentation": {
                "identifier": "tDot",
                "newPage": false,
                "searchKey": "parse.tDot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tDot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tDot = mkItem(itemDot, \".\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tBlock",
              "documentation": {
                "identifier": "tBlock",
                "newPage": false,
                "searchKey": "parse.tBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tBlock = mkItem(itemBlock, \"block\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tEOF",
              "documentation": {
                "identifier": "tEOF",
                "newPage": false,
                "searchKey": "parse.tEOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tEOF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tEOF = mkItem(itemEOF, \"\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tFor",
              "documentation": {
                "identifier": "tFor",
                "newPage": false,
                "searchKey": "parse.tFor",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tFor"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tFor = mkItem(itemIdentifier, \"for\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tLeft",
              "documentation": {
                "identifier": "tLeft",
                "newPage": false,
                "searchKey": "parse.tLeft",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tLeft"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tLeft = mkItem(itemLeftDelim, \"{{\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tLpar",
              "documentation": {
                "identifier": "tLpar",
                "newPage": false,
                "searchKey": "parse.tLpar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tLpar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tLpar = mkItem(itemLeftParen, \"(\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tPipe",
              "documentation": {
                "identifier": "tPipe",
                "newPage": false,
                "searchKey": "parse.tPipe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tPipe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tPipe = mkItem(itemPipe, \"|\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tQuote",
              "documentation": {
                "identifier": "tQuote",
                "newPage": false,
                "searchKey": "parse.tQuote",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tQuote"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tQuote = mkItem(itemString, `\"abc \\n\\t\\\" \"`)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tRange",
              "documentation": {
                "identifier": "tRange",
                "newPage": false,
                "searchKey": "parse.tRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tRange"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tRange = mkItem(itemRange, \"range\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tRight",
              "documentation": {
                "identifier": "tRight",
                "newPage": false,
                "searchKey": "parse.tRight",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tRight"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tRight = mkItem(itemRightDelim, \"}}\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tRpar",
              "documentation": {
                "identifier": "tRpar",
                "newPage": false,
                "searchKey": "parse.tRpar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tRpar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tRpar = mkItem(itemRightParen, \")\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tSpace",
              "documentation": {
                "identifier": "tSpace",
                "newPage": false,
                "searchKey": "parse.tSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tSpace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tSpace = mkItem(itemSpace, \" \")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#raw",
              "documentation": {
                "identifier": "raw",
                "newPage": false,
                "searchKey": "parse.raw",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var raw"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar raw = \"`\" + `abc\\n\\t\\\" ` + \"`\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#rawNL",
              "documentation": {
                "identifier": "rawNL",
                "newPage": false,
                "searchKey": "parse.rawNL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rawNL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rawNL = \"`now is{{\\n}}the time`\" // Contains newline inside raw quote.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tRawQuote",
              "documentation": {
                "identifier": "tRawQuote",
                "newPage": false,
                "searchKey": "parse.tRawQuote",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tRawQuote"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tRawQuote = mkItem(itemRawString, raw)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tRawQuoteNL",
              "documentation": {
                "identifier": "tRawQuoteNL",
                "newPage": false,
                "searchKey": "parse.tRawQuoteNL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tRawQuoteNL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tRawQuoteNL = mkItem(itemRawString, rawNL)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#lexTests",
              "documentation": {
                "identifier": "lexTests",
                "newPage": false,
                "searchKey": "parse.lexTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var lexTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lexTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#lexDelimTests",
              "documentation": {
                "identifier": "lexDelimTests",
                "newPage": false,
                "searchKey": "parse.lexDelimTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var lexDelimTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lexDelimTests = ...\n```\n\nSome easy cases from above, but with delimiters $$ and @@ \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tLeftDelim",
              "documentation": {
                "identifier": "tLeftDelim",
                "newPage": false,
                "searchKey": "parse.tLeftDelim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tLeftDelim"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tLeftDelim = mkItem(itemLeftDelim, \"$$\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#tRightDelim",
              "documentation": {
                "identifier": "tRightDelim",
                "newPage": false,
                "searchKey": "parse.tRightDelim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tRightDelim"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tRightDelim = mkItem(itemRightDelim, \"@@\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#lexPosTests",
              "documentation": {
                "identifier": "lexPosTests",
                "newPage": false,
                "searchKey": "parse.lexPosTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var lexPosTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lexPosTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#debug",
              "documentation": {
                "identifier": "debug",
                "newPage": false,
                "searchKey": "parse.debug",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var debug"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar debug = flag.Bool(\"debug\", false, \"show the errors produced by the main tests\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#numberTests",
              "documentation": {
                "identifier": "numberTests",
                "newPage": false,
                "searchKey": "parse.numberTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var numberTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar numberTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#parseTests",
              "documentation": {
                "identifier": "parseTests",
                "newPage": false,
                "searchKey": "parse.parseTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#builtins",
              "documentation": {
                "identifier": "builtins",
                "newPage": false,
                "searchKey": "parse.builtins",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var builtins"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar builtins = map[string]interface{}{\n\t\"printf\":   fmt.Sprintf,\n\t\"contains\": strings.Contains,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#isEmptyTests",
              "documentation": {
                "identifier": "isEmptyTests",
                "newPage": false,
                "searchKey": "parse.isEmptyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var isEmptyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isEmptyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#errorTests",
              "documentation": {
                "identifier": "errorTests",
                "newPage": false,
                "searchKey": "parse.errorTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errorTests = ...\n```\n\nAll failures, and the result is a string that must appear in the error message. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#sinkv",
              "documentation": {
                "identifier": "sinkv",
                "newPage": false,
                "searchKey": "parse.sinkv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sinkv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sinkv, sinkl string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#sinkl",
              "documentation": {
                "identifier": "sinkl",
                "newPage": false,
                "searchKey": "parse.sinkl",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sinkl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sinkv, sinkl string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/text/template/parse#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/text/template/parse#item",
              "documentation": {
                "identifier": "item",
                "newPage": false,
                "searchKey": "parse.item",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type item struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype item struct {\n\ttyp  itemType // The type of this item.\n\tpos  Pos      // The starting position, in bytes, of this item in the input string.\n\tval  string   // The value of this item.\n\tline int      // The line number at the start of this item.\n}\n```\n\nitem represents a token or text string returned from the scanner. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#mkItem",
                    "documentation": {
                      "identifier": "mkItem",
                      "newPage": false,
                      "searchKey": "parse.mkItem",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func mkItem(typ itemType, text string) item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc mkItem(typ itemType, text string) item\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#item.String",
                    "documentation": {
                      "identifier": "item.String",
                      "newPage": false,
                      "searchKey": "parse.item.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i item) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i item) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#itemType",
              "documentation": {
                "identifier": "itemType",
                "newPage": false,
                "searchKey": "parse.itemType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type itemType int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype itemType int\n```\n\nitemType identifies the type of lex items. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#itemType.String",
                    "documentation": {
                      "identifier": "itemType.String",
                      "newPage": false,
                      "searchKey": "parse.itemType.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i itemType) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i itemType) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#stateFn",
              "documentation": {
                "identifier": "stateFn",
                "newPage": false,
                "searchKey": "parse.stateFn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type stateFn func(*std/text/template/parse.lexer) std/text/template/parse.stateFn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stateFn func(*lexer) stateFn\n```\n\nstateFn represents the state of the scanner as a function that returns the next state. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#lexText",
                    "documentation": {
                      "identifier": "lexText",
                      "newPage": false,
                      "searchKey": "parse.lexText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexText(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexText(l *lexer) stateFn\n```\n\nlexText scans until an opening action delimiter, \"{{\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexLeftDelim",
                    "documentation": {
                      "identifier": "lexLeftDelim",
                      "newPage": false,
                      "searchKey": "parse.lexLeftDelim",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexLeftDelim(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexLeftDelim(l *lexer) stateFn\n```\n\nlexLeftDelim scans the left delimiter, which is known to be present, possibly with a trim marker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexComment",
                    "documentation": {
                      "identifier": "lexComment",
                      "newPage": false,
                      "searchKey": "parse.lexComment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexComment(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexComment(l *lexer) stateFn\n```\n\nlexComment scans a comment. The left comment marker is known to be present. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexRightDelim",
                    "documentation": {
                      "identifier": "lexRightDelim",
                      "newPage": false,
                      "searchKey": "parse.lexRightDelim",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexRightDelim(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexRightDelim(l *lexer) stateFn\n```\n\nlexRightDelim scans the right delimiter, which is known to be present, possibly with a trim marker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexInsideAction",
                    "documentation": {
                      "identifier": "lexInsideAction",
                      "newPage": false,
                      "searchKey": "parse.lexInsideAction",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexInsideAction(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexInsideAction(l *lexer) stateFn\n```\n\nlexInsideAction scans the elements inside action delimiters. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexSpace",
                    "documentation": {
                      "identifier": "lexSpace",
                      "newPage": false,
                      "searchKey": "parse.lexSpace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexSpace(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexSpace(l *lexer) stateFn\n```\n\nlexSpace scans a run of space characters. We have not consumed the first space, which is known to be present. Take care if there is a trim-marked right delimiter, which starts with a space. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexIdentifier",
                    "documentation": {
                      "identifier": "lexIdentifier",
                      "newPage": false,
                      "searchKey": "parse.lexIdentifier",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexIdentifier(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexIdentifier(l *lexer) stateFn\n```\n\nlexIdentifier scans an alphanumeric. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexField",
                    "documentation": {
                      "identifier": "lexField",
                      "newPage": false,
                      "searchKey": "parse.lexField",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexField(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexField(l *lexer) stateFn\n```\n\nlexField scans a field: .Alphanumeric. The . has been scanned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexVariable",
                    "documentation": {
                      "identifier": "lexVariable",
                      "newPage": false,
                      "searchKey": "parse.lexVariable",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexVariable(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexVariable(l *lexer) stateFn\n```\n\nlexVariable scans a Variable: $Alphanumeric. The $ has been scanned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexFieldOrVariable",
                    "documentation": {
                      "identifier": "lexFieldOrVariable",
                      "newPage": false,
                      "searchKey": "parse.lexFieldOrVariable",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexFieldOrVariable(l *lexer, typ itemType) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexFieldOrVariable(l *lexer, typ itemType) stateFn\n```\n\nlexVariable scans a field or variable: [.$]Alphanumeric. The . or $ has been scanned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexChar",
                    "documentation": {
                      "identifier": "lexChar",
                      "newPage": false,
                      "searchKey": "parse.lexChar",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexChar(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexChar(l *lexer) stateFn\n```\n\nlexChar scans a character constant. The initial quote is already scanned. Syntax checking is done by the parser. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexNumber",
                    "documentation": {
                      "identifier": "lexNumber",
                      "newPage": false,
                      "searchKey": "parse.lexNumber",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexNumber(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexNumber(l *lexer) stateFn\n```\n\nlexNumber scans a number: decimal, octal, hex, float, or imaginary. This isn't a perfect number scanner - for instance it accepts \".\" and \"0x0.2\" and \"089\" - but when it's wrong the input is invalid and the parser (via strconv) will notice. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexQuote",
                    "documentation": {
                      "identifier": "lexQuote",
                      "newPage": false,
                      "searchKey": "parse.lexQuote",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexQuote(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexQuote(l *lexer) stateFn\n```\n\nlexQuote scans a quoted string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexRawQuote",
                    "documentation": {
                      "identifier": "lexRawQuote",
                      "newPage": false,
                      "searchKey": "parse.lexRawQuote",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lexRawQuote(l *lexer) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lexRawQuote(l *lexer) stateFn\n```\n\nlexRawQuote scans a raw quoted string. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#lexer",
              "documentation": {
                "identifier": "lexer",
                "newPage": false,
                "searchKey": "parse.lexer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type lexer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lexer struct {\n\tname        string    // the name of the input; used only for error reports\n\tinput       string    // the string being scanned\n\tleftDelim   string    // start of action\n\trightDelim  string    // end of action\n\temitComment bool      // emit itemComment tokens.\n\tpos         Pos       // current position in the input\n\tstart       Pos       // start position of this item\n\twidth       Pos       // width of last rune read from input\n\titems       chan item // channel of scanned items\n\tparenDepth  int       // nesting depth of ( ) exprs\n\tline        int       // 1+number of newlines seen\n\tstartLine   int       // start line of this item\n}\n```\n\nlexer holds the state of the scanner. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#lex",
                    "documentation": {
                      "identifier": "lex",
                      "newPage": false,
                      "searchKey": "parse.lex",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lex(name, input, left, right string, emitComment bool) *lexer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lex(name, input, left, right string, emitComment bool) *lexer\n```\n\nlex creates a new scanner for the input string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.next",
                    "documentation": {
                      "identifier": "lexer.next",
                      "newPage": false,
                      "searchKey": "parse.lexer.next",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) next() rune"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) next() rune\n```\n\nnext returns the next rune in the input. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.peek",
                    "documentation": {
                      "identifier": "lexer.peek",
                      "newPage": false,
                      "searchKey": "parse.lexer.peek",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) peek() rune"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) peek() rune\n```\n\npeek returns but does not consume the next rune in the input. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.backup",
                    "documentation": {
                      "identifier": "lexer.backup",
                      "newPage": false,
                      "searchKey": "parse.lexer.backup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) backup()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) backup()\n```\n\nbackup steps back one rune. Can only be called once per call of next. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.emit",
                    "documentation": {
                      "identifier": "lexer.emit",
                      "newPage": false,
                      "searchKey": "parse.lexer.emit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) emit(t itemType)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) emit(t itemType)\n```\n\nemit passes an item back to the client. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.ignore",
                    "documentation": {
                      "identifier": "lexer.ignore",
                      "newPage": false,
                      "searchKey": "parse.lexer.ignore",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) ignore()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) ignore()\n```\n\nignore skips over the pending input before this point. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.accept",
                    "documentation": {
                      "identifier": "lexer.accept",
                      "newPage": false,
                      "searchKey": "parse.lexer.accept",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) accept(valid string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) accept(valid string) bool\n```\n\naccept consumes the next rune if it's from the valid set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.acceptRun",
                    "documentation": {
                      "identifier": "lexer.acceptRun",
                      "newPage": false,
                      "searchKey": "parse.lexer.acceptRun",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) acceptRun(valid string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) acceptRun(valid string)\n```\n\nacceptRun consumes a run of runes from the valid set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.errorf",
                    "documentation": {
                      "identifier": "lexer.errorf",
                      "newPage": false,
                      "searchKey": "parse.lexer.errorf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) errorf(format string, args ...interface{}) stateFn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) errorf(format string, args ...interface{}) stateFn\n```\n\nerrorf returns an error token and terminates the scan by passing back a nil pointer that will be the next state, terminating l.nextItem. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.nextItem",
                    "documentation": {
                      "identifier": "lexer.nextItem",
                      "newPage": false,
                      "searchKey": "parse.lexer.nextItem",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) nextItem() item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) nextItem() item\n```\n\nnextItem returns the next item from the input. Called by the parser, not in the lexing goroutine. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.drain",
                    "documentation": {
                      "identifier": "lexer.drain",
                      "newPage": false,
                      "searchKey": "parse.lexer.drain",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) drain()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) drain()\n```\n\ndrain drains the output so the lexing goroutine will exit. Called by the parser, not in the lexing goroutine. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.run",
                    "documentation": {
                      "identifier": "lexer.run",
                      "newPage": false,
                      "searchKey": "parse.lexer.run",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) run()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) run()\n```\n\nrun runs the state machine for the lexer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.atRightDelim",
                    "documentation": {
                      "identifier": "lexer.atRightDelim",
                      "newPage": false,
                      "searchKey": "parse.lexer.atRightDelim",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) atRightDelim() (delim, trimSpaces bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) atRightDelim() (delim, trimSpaces bool)\n```\n\natRightDelim reports whether the lexer is at a right delimiter, possibly preceded by a trim marker. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.atTerminator",
                    "documentation": {
                      "identifier": "lexer.atTerminator",
                      "newPage": false,
                      "searchKey": "parse.lexer.atTerminator",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) atTerminator() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) atTerminator() bool\n```\n\natTerminator reports whether the input is at valid termination character to appear after an identifier. Breaks .X.Y into two pieces. Also catches cases like \"$x+2\" not being acceptable without a space, in case we decide one day to implement arithmetic. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#lexer.scanNumber",
                    "documentation": {
                      "identifier": "lexer.scanNumber",
                      "newPage": false,
                      "searchKey": "parse.lexer.scanNumber",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lexer) scanNumber() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lexer) scanNumber() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#Node",
              "documentation": {
                "identifier": "Node",
                "newPage": false,
                "searchKey": "parse.Node",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Node interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Node interface {\n\tType() NodeType\n\tString() string\n\t// Copy does a deep copy of the Node and all its components.\n\t// To avoid type assertions, some XxxNodes also have specialized\n\t// CopyXxx methods that return *XxxNode.\n\tCopy() Node\n\tPosition() Pos // byte position of start of node in full original input string\n\t// tree returns the containing *Tree.\n\t// It is unexported so all implementations of Node are in this package.\n\ttree() *Tree\n\t// writeTo writes the String output to the builder.\n\twriteTo(*strings.Builder)\n}\n```\n\nA Node is an element in the parse tree. The interface is trivial. The interface contains an unexported method so that only types local to this package can satisfy it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NodeType",
              "documentation": {
                "identifier": "NodeType",
                "newPage": false,
                "searchKey": "parse.NodeType",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NodeType int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NodeType int\n```\n\nNodeType identifies the type of a parse tree node. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#NodeType.Type",
                    "documentation": {
                      "identifier": "NodeType.Type",
                      "newPage": false,
                      "searchKey": "parse.NodeType.Type",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t NodeType) Type() NodeType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t NodeType) Type() NodeType\n```\n\nType returns itself and provides an easy default implementation for embedding in a Node. Embedded in all non-trivial Nodes. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#Pos",
              "documentation": {
                "identifier": "Pos",
                "newPage": false,
                "searchKey": "parse.Pos",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Pos int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Pos int\n```\n\nPos represents a byte position in the original input text from which this template was parsed. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#rightTrimLength",
                    "documentation": {
                      "identifier": "rightTrimLength",
                      "newPage": false,
                      "searchKey": "parse.rightTrimLength",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func rightTrimLength(s string) Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc rightTrimLength(s string) Pos\n```\n\nrightTrimLength returns the length of the spaces at the end of the string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#leftTrimLength",
                    "documentation": {
                      "identifier": "leftTrimLength",
                      "newPage": false,
                      "searchKey": "parse.leftTrimLength",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func leftTrimLength(s string) Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc leftTrimLength(s string) Pos\n```\n\nleftTrimLength returns the length of the spaces at the beginning of the string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Pos.Position",
                    "documentation": {
                      "identifier": "Pos.Position",
                      "newPage": false,
                      "searchKey": "parse.Pos.Position",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Pos) Position() Pos"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Pos) Position() Pos\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#ListNode",
              "documentation": {
                "identifier": "ListNode",
                "newPage": false,
                "searchKey": "parse.ListNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ListNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ListNode struct {\n\tNodeType\n\tPos\n\ttr    *Tree\n\tNodes []Node // The element nodes in lexical order.\n}\n```\n\nListNode holds a sequence of nodes. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#ListNode.append",
                    "documentation": {
                      "identifier": "ListNode.append",
                      "newPage": false,
                      "searchKey": "parse.ListNode.append",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *ListNode) append(n Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *ListNode) append(n Node)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ListNode.tree",
                    "documentation": {
                      "identifier": "ListNode.tree",
                      "newPage": false,
                      "searchKey": "parse.ListNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *ListNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *ListNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ListNode.String",
                    "documentation": {
                      "identifier": "ListNode.String",
                      "newPage": false,
                      "searchKey": "parse.ListNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *ListNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *ListNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ListNode.writeTo",
                    "documentation": {
                      "identifier": "ListNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.ListNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *ListNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *ListNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ListNode.CopyList",
                    "documentation": {
                      "identifier": "ListNode.CopyList",
                      "newPage": false,
                      "searchKey": "parse.ListNode.CopyList",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *ListNode) CopyList() *ListNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *ListNode) CopyList() *ListNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ListNode.Copy",
                    "documentation": {
                      "identifier": "ListNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.ListNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *ListNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *ListNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TextNode",
              "documentation": {
                "identifier": "TextNode",
                "newPage": false,
                "searchKey": "parse.TextNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TextNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TextNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tText []byte // The text; may span newlines.\n}\n```\n\nTextNode holds plain text. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#TextNode.String",
                    "documentation": {
                      "identifier": "TextNode.String",
                      "newPage": false,
                      "searchKey": "parse.TextNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TextNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TextNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#TextNode.writeTo",
                    "documentation": {
                      "identifier": "TextNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.TextNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TextNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TextNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#TextNode.tree",
                    "documentation": {
                      "identifier": "TextNode.tree",
                      "newPage": false,
                      "searchKey": "parse.TextNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TextNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TextNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#TextNode.Copy",
                    "documentation": {
                      "identifier": "TextNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.TextNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TextNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TextNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#CommentNode",
              "documentation": {
                "identifier": "CommentNode",
                "newPage": false,
                "searchKey": "parse.CommentNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommentNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommentNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tText string // Comment text.\n}\n```\n\nCommentNode holds a comment. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#CommentNode.String",
                    "documentation": {
                      "identifier": "CommentNode.String",
                      "newPage": false,
                      "searchKey": "parse.CommentNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommentNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommentNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommentNode.writeTo",
                    "documentation": {
                      "identifier": "CommentNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.CommentNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommentNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommentNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommentNode.tree",
                    "documentation": {
                      "identifier": "CommentNode.tree",
                      "newPage": false,
                      "searchKey": "parse.CommentNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommentNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommentNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommentNode.Copy",
                    "documentation": {
                      "identifier": "CommentNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.CommentNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommentNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommentNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#PipeNode",
              "documentation": {
                "identifier": "PipeNode",
                "newPage": false,
                "searchKey": "parse.PipeNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PipeNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PipeNode struct {\n\tNodeType\n\tPos\n\ttr       *Tree\n\tLine     int             // The line number in the input. Deprecated: Kept for compatibility.\n\tIsAssign bool            // The variables are being assigned, not declared.\n\tDecl     []*VariableNode // Variables in lexical order.\n\tCmds     []*CommandNode  // The commands in lexical order.\n}\n```\n\nPipeNode holds a pipeline with optional declaration \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#PipeNode.append",
                    "documentation": {
                      "identifier": "PipeNode.append",
                      "newPage": false,
                      "searchKey": "parse.PipeNode.append",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PipeNode) append(command *CommandNode)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PipeNode) append(command *CommandNode)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#PipeNode.String",
                    "documentation": {
                      "identifier": "PipeNode.String",
                      "newPage": false,
                      "searchKey": "parse.PipeNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PipeNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PipeNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#PipeNode.writeTo",
                    "documentation": {
                      "identifier": "PipeNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.PipeNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PipeNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PipeNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#PipeNode.tree",
                    "documentation": {
                      "identifier": "PipeNode.tree",
                      "newPage": false,
                      "searchKey": "parse.PipeNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PipeNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PipeNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#PipeNode.CopyPipe",
                    "documentation": {
                      "identifier": "PipeNode.CopyPipe",
                      "newPage": false,
                      "searchKey": "parse.PipeNode.CopyPipe",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PipeNode) CopyPipe() *PipeNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PipeNode) CopyPipe() *PipeNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#PipeNode.Copy",
                    "documentation": {
                      "identifier": "PipeNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.PipeNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *PipeNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *PipeNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#ActionNode",
              "documentation": {
                "identifier": "ActionNode",
                "newPage": false,
                "searchKey": "parse.ActionNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ActionNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ActionNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tLine int       // The line number in the input. Deprecated: Kept for compatibility.\n\tPipe *PipeNode // The pipeline in the action.\n}\n```\n\nActionNode holds an action (something bounded by delimiters). Control actions have their own nodes; ActionNode represents simple ones such as field evaluations and parenthesized pipelines. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#ActionNode.String",
                    "documentation": {
                      "identifier": "ActionNode.String",
                      "newPage": false,
                      "searchKey": "parse.ActionNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *ActionNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *ActionNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ActionNode.writeTo",
                    "documentation": {
                      "identifier": "ActionNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.ActionNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *ActionNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *ActionNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ActionNode.tree",
                    "documentation": {
                      "identifier": "ActionNode.tree",
                      "newPage": false,
                      "searchKey": "parse.ActionNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *ActionNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *ActionNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ActionNode.Copy",
                    "documentation": {
                      "identifier": "ActionNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.ActionNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *ActionNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *ActionNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#CommandNode",
              "documentation": {
                "identifier": "CommandNode",
                "newPage": false,
                "searchKey": "parse.CommandNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CommandNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CommandNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tArgs []Node // Arguments in lexical order: Identifier, field, or constant.\n}\n```\n\nCommandNode holds a command (a pipeline inside an evaluating action). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#CommandNode.append",
                    "documentation": {
                      "identifier": "CommandNode.append",
                      "newPage": false,
                      "searchKey": "parse.CommandNode.append",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommandNode) append(arg Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommandNode) append(arg Node)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommandNode.String",
                    "documentation": {
                      "identifier": "CommandNode.String",
                      "newPage": false,
                      "searchKey": "parse.CommandNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommandNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommandNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommandNode.writeTo",
                    "documentation": {
                      "identifier": "CommandNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.CommandNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommandNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommandNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommandNode.tree",
                    "documentation": {
                      "identifier": "CommandNode.tree",
                      "newPage": false,
                      "searchKey": "parse.CommandNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommandNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommandNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#CommandNode.Copy",
                    "documentation": {
                      "identifier": "CommandNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.CommandNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CommandNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CommandNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#IdentifierNode",
              "documentation": {
                "identifier": "IdentifierNode",
                "newPage": false,
                "searchKey": "parse.IdentifierNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IdentifierNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IdentifierNode struct {\n\tNodeType\n\tPos\n\ttr    *Tree\n\tIdent string // The identifier's name.\n}\n```\n\nIdentifierNode holds an identifier. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#NewIdentifier",
                    "documentation": {
                      "identifier": "NewIdentifier",
                      "newPage": false,
                      "searchKey": "parse.NewIdentifier",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewIdentifier(ident string) *IdentifierNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewIdentifier(ident string) *IdentifierNode\n```\n\nNewIdentifier returns a new IdentifierNode with the given identifier name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#IdentifierNode.SetPos",
                    "documentation": {
                      "identifier": "IdentifierNode.SetPos",
                      "newPage": false,
                      "searchKey": "parse.IdentifierNode.SetPos",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IdentifierNode) SetPos(pos Pos) *IdentifierNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IdentifierNode) SetPos(pos Pos) *IdentifierNode\n```\n\nSetPos sets the position. NewIdentifier is a public method so we can't modify its signature. Chained for convenience. TODO: fix one day? \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#IdentifierNode.SetTree",
                    "documentation": {
                      "identifier": "IdentifierNode.SetTree",
                      "newPage": false,
                      "searchKey": "parse.IdentifierNode.SetTree",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IdentifierNode) SetTree(t *Tree) *IdentifierNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IdentifierNode) SetTree(t *Tree) *IdentifierNode\n```\n\nSetTree sets the parent tree for the node. NewIdentifier is a public method so we can't modify its signature. Chained for convenience. TODO: fix one day? \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#IdentifierNode.String",
                    "documentation": {
                      "identifier": "IdentifierNode.String",
                      "newPage": false,
                      "searchKey": "parse.IdentifierNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IdentifierNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IdentifierNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#IdentifierNode.writeTo",
                    "documentation": {
                      "identifier": "IdentifierNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.IdentifierNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IdentifierNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IdentifierNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#IdentifierNode.tree",
                    "documentation": {
                      "identifier": "IdentifierNode.tree",
                      "newPage": false,
                      "searchKey": "parse.IdentifierNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IdentifierNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IdentifierNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#IdentifierNode.Copy",
                    "documentation": {
                      "identifier": "IdentifierNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.IdentifierNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IdentifierNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IdentifierNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#VariableNode",
              "documentation": {
                "identifier": "VariableNode",
                "newPage": false,
                "searchKey": "parse.VariableNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VariableNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VariableNode struct {\n\tNodeType\n\tPos\n\ttr    *Tree\n\tIdent []string // Variable name and fields in lexical order.\n}\n```\n\nVariableNode holds a list of variable names, possibly with chained field accesses. The dollar sign is part of the (first) name. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#VariableNode.String",
                    "documentation": {
                      "identifier": "VariableNode.String",
                      "newPage": false,
                      "searchKey": "parse.VariableNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *VariableNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *VariableNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#VariableNode.writeTo",
                    "documentation": {
                      "identifier": "VariableNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.VariableNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *VariableNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *VariableNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#VariableNode.tree",
                    "documentation": {
                      "identifier": "VariableNode.tree",
                      "newPage": false,
                      "searchKey": "parse.VariableNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *VariableNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *VariableNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#VariableNode.Copy",
                    "documentation": {
                      "identifier": "VariableNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.VariableNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *VariableNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *VariableNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#DotNode",
              "documentation": {
                "identifier": "DotNode",
                "newPage": false,
                "searchKey": "parse.DotNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type DotNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DotNode struct {\n\tNodeType\n\tPos\n\ttr *Tree\n}\n```\n\nDotNode holds the special identifier '.'. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#DotNode.Type",
                    "documentation": {
                      "identifier": "DotNode.Type",
                      "newPage": false,
                      "searchKey": "parse.DotNode.Type",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *DotNode) Type() NodeType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *DotNode) Type() NodeType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#DotNode.String",
                    "documentation": {
                      "identifier": "DotNode.String",
                      "newPage": false,
                      "searchKey": "parse.DotNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *DotNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *DotNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#DotNode.writeTo",
                    "documentation": {
                      "identifier": "DotNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.DotNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *DotNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *DotNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#DotNode.tree",
                    "documentation": {
                      "identifier": "DotNode.tree",
                      "newPage": false,
                      "searchKey": "parse.DotNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *DotNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *DotNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#DotNode.Copy",
                    "documentation": {
                      "identifier": "DotNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.DotNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *DotNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *DotNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NilNode",
              "documentation": {
                "identifier": "NilNode",
                "newPage": false,
                "searchKey": "parse.NilNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NilNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NilNode struct {\n\tNodeType\n\tPos\n\ttr *Tree\n}\n```\n\nNilNode holds the special identifier 'nil' representing an untyped nil constant. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#NilNode.Type",
                    "documentation": {
                      "identifier": "NilNode.Type",
                      "newPage": false,
                      "searchKey": "parse.NilNode.Type",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NilNode) Type() NodeType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NilNode) Type() NodeType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NilNode.String",
                    "documentation": {
                      "identifier": "NilNode.String",
                      "newPage": false,
                      "searchKey": "parse.NilNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NilNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NilNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NilNode.writeTo",
                    "documentation": {
                      "identifier": "NilNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.NilNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NilNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NilNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NilNode.tree",
                    "documentation": {
                      "identifier": "NilNode.tree",
                      "newPage": false,
                      "searchKey": "parse.NilNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NilNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NilNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NilNode.Copy",
                    "documentation": {
                      "identifier": "NilNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.NilNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NilNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NilNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#FieldNode",
              "documentation": {
                "identifier": "FieldNode",
                "newPage": false,
                "searchKey": "parse.FieldNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FieldNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FieldNode struct {\n\tNodeType\n\tPos\n\ttr    *Tree\n\tIdent []string // The identifiers in lexical order.\n}\n```\n\nFieldNode holds a field (identifier starting with '.'). The names may be chained ('.x.y'). The period is dropped from each ident. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#FieldNode.String",
                    "documentation": {
                      "identifier": "FieldNode.String",
                      "newPage": false,
                      "searchKey": "parse.FieldNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#FieldNode.writeTo",
                    "documentation": {
                      "identifier": "FieldNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.FieldNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#FieldNode.tree",
                    "documentation": {
                      "identifier": "FieldNode.tree",
                      "newPage": false,
                      "searchKey": "parse.FieldNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#FieldNode.Copy",
                    "documentation": {
                      "identifier": "FieldNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.FieldNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FieldNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FieldNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#ChainNode",
              "documentation": {
                "identifier": "ChainNode",
                "newPage": false,
                "searchKey": "parse.ChainNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChainNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChainNode struct {\n\tNodeType\n\tPos\n\ttr    *Tree\n\tNode  Node\n\tField []string // The identifiers in lexical order.\n}\n```\n\nChainNode holds a term followed by a chain of field accesses (identifier starting with '.'). The names may be chained ('.x.y'). The periods are dropped from each ident. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#ChainNode.Add",
                    "documentation": {
                      "identifier": "ChainNode.Add",
                      "newPage": false,
                      "searchKey": "parse.ChainNode.Add",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ChainNode) Add(field string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ChainNode) Add(field string)\n```\n\nAdd adds the named field (which should start with a period) to the end of the chain. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ChainNode.String",
                    "documentation": {
                      "identifier": "ChainNode.String",
                      "newPage": false,
                      "searchKey": "parse.ChainNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ChainNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ChainNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ChainNode.writeTo",
                    "documentation": {
                      "identifier": "ChainNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.ChainNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ChainNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ChainNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ChainNode.tree",
                    "documentation": {
                      "identifier": "ChainNode.tree",
                      "newPage": false,
                      "searchKey": "parse.ChainNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ChainNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ChainNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#ChainNode.Copy",
                    "documentation": {
                      "identifier": "ChainNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.ChainNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *ChainNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *ChainNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#BoolNode",
              "documentation": {
                "identifier": "BoolNode",
                "newPage": false,
                "searchKey": "parse.BoolNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BoolNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BoolNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tTrue bool // The value of the boolean constant.\n}\n```\n\nBoolNode holds a boolean constant. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#BoolNode.String",
                    "documentation": {
                      "identifier": "BoolNode.String",
                      "newPage": false,
                      "searchKey": "parse.BoolNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BoolNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BoolNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#BoolNode.writeTo",
                    "documentation": {
                      "identifier": "BoolNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.BoolNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BoolNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BoolNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#BoolNode.tree",
                    "documentation": {
                      "identifier": "BoolNode.tree",
                      "newPage": false,
                      "searchKey": "parse.BoolNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BoolNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BoolNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#BoolNode.Copy",
                    "documentation": {
                      "identifier": "BoolNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.BoolNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BoolNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BoolNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#NumberNode",
              "documentation": {
                "identifier": "NumberNode",
                "newPage": false,
                "searchKey": "parse.NumberNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type NumberNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NumberNode struct {\n\tNodeType\n\tPos\n\ttr         *Tree\n\tIsInt      bool       // Number has an integral value.\n\tIsUint     bool       // Number has an unsigned integral value.\n\tIsFloat    bool       // Number has a floating-point value.\n\tIsComplex  bool       // Number is complex.\n\tInt64      int64      // The signed integer value.\n\tUint64     uint64     // The unsigned integer value.\n\tFloat64    float64    // The floating-point value.\n\tComplex128 complex128 // The complex value.\n\tText       string     // The original textual representation from the input.\n}\n```\n\nNumberNode holds a number: signed or unsigned integer, float, or complex. The value is parsed and stored under all the types that can represent the value. This simulates in a small amount of code the behavior of Go's ideal constants. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#NumberNode.simplifyComplex",
                    "documentation": {
                      "identifier": "NumberNode.simplifyComplex",
                      "newPage": false,
                      "searchKey": "parse.NumberNode.simplifyComplex",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NumberNode) simplifyComplex()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NumberNode) simplifyComplex()\n```\n\nsimplifyComplex pulls out any other types that are represented by the complex number. These all require that the imaginary part be zero. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NumberNode.String",
                    "documentation": {
                      "identifier": "NumberNode.String",
                      "newPage": false,
                      "searchKey": "parse.NumberNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NumberNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NumberNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NumberNode.writeTo",
                    "documentation": {
                      "identifier": "NumberNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.NumberNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NumberNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NumberNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NumberNode.tree",
                    "documentation": {
                      "identifier": "NumberNode.tree",
                      "newPage": false,
                      "searchKey": "parse.NumberNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NumberNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NumberNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#NumberNode.Copy",
                    "documentation": {
                      "identifier": "NumberNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.NumberNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n *NumberNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n *NumberNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#StringNode",
              "documentation": {
                "identifier": "StringNode",
                "newPage": false,
                "searchKey": "parse.StringNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StringNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StringNode struct {\n\tNodeType\n\tPos\n\ttr     *Tree\n\tQuoted string // The original text of the string, with quotes.\n\tText   string // The string, after quote processing.\n}\n```\n\nStringNode holds a string constant. The value has been \"unquoted\". \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#StringNode.String",
                    "documentation": {
                      "identifier": "StringNode.String",
                      "newPage": false,
                      "searchKey": "parse.StringNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *StringNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *StringNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#StringNode.writeTo",
                    "documentation": {
                      "identifier": "StringNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.StringNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *StringNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *StringNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#StringNode.tree",
                    "documentation": {
                      "identifier": "StringNode.tree",
                      "newPage": false,
                      "searchKey": "parse.StringNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *StringNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *StringNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#StringNode.Copy",
                    "documentation": {
                      "identifier": "StringNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.StringNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *StringNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *StringNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#endNode",
              "documentation": {
                "identifier": "endNode",
                "newPage": false,
                "searchKey": "parse.endNode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type endNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype endNode struct {\n\tNodeType\n\tPos\n\ttr *Tree\n}\n```\n\nendNode represents an {{end}} action. It does not appear in the final parse tree. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#endNode.String",
                    "documentation": {
                      "identifier": "endNode.String",
                      "newPage": false,
                      "searchKey": "parse.endNode.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *endNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *endNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#endNode.writeTo",
                    "documentation": {
                      "identifier": "endNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.endNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *endNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *endNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#endNode.tree",
                    "documentation": {
                      "identifier": "endNode.tree",
                      "newPage": false,
                      "searchKey": "parse.endNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *endNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *endNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#endNode.Copy",
                    "documentation": {
                      "identifier": "endNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.endNode.Copy",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *endNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *endNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#elseNode",
              "documentation": {
                "identifier": "elseNode",
                "newPage": false,
                "searchKey": "parse.elseNode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type elseNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype elseNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tLine int // The line number in the input. Deprecated: Kept for compatibility.\n}\n```\n\nelseNode represents an {{else}} action. Does not appear in the final tree. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#elseNode.Type",
                    "documentation": {
                      "identifier": "elseNode.Type",
                      "newPage": false,
                      "searchKey": "parse.elseNode.Type",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *elseNode) Type() NodeType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *elseNode) Type() NodeType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#elseNode.String",
                    "documentation": {
                      "identifier": "elseNode.String",
                      "newPage": false,
                      "searchKey": "parse.elseNode.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *elseNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *elseNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#elseNode.writeTo",
                    "documentation": {
                      "identifier": "elseNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.elseNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *elseNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *elseNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#elseNode.tree",
                    "documentation": {
                      "identifier": "elseNode.tree",
                      "newPage": false,
                      "searchKey": "parse.elseNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *elseNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *elseNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#elseNode.Copy",
                    "documentation": {
                      "identifier": "elseNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.elseNode.Copy",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *elseNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *elseNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#BranchNode",
              "documentation": {
                "identifier": "BranchNode",
                "newPage": false,
                "searchKey": "parse.BranchNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BranchNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BranchNode struct {\n\tNodeType\n\tPos\n\ttr       *Tree\n\tLine     int       // The line number in the input. Deprecated: Kept for compatibility.\n\tPipe     *PipeNode // The pipeline to be evaluated.\n\tList     *ListNode // What to execute if the value is non-empty.\n\tElseList *ListNode // What to execute if the value is empty (nil if absent).\n}\n```\n\nBranchNode is the common representation of if, range, and with. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#BranchNode.String",
                    "documentation": {
                      "identifier": "BranchNode.String",
                      "newPage": false,
                      "searchKey": "parse.BranchNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BranchNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BranchNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#BranchNode.writeTo",
                    "documentation": {
                      "identifier": "BranchNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.BranchNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BranchNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BranchNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#BranchNode.tree",
                    "documentation": {
                      "identifier": "BranchNode.tree",
                      "newPage": false,
                      "searchKey": "parse.BranchNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BranchNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BranchNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#BranchNode.Copy",
                    "documentation": {
                      "identifier": "BranchNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.BranchNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *BranchNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *BranchNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#IfNode",
              "documentation": {
                "identifier": "IfNode",
                "newPage": false,
                "searchKey": "parse.IfNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfNode struct {\n\tBranchNode\n}\n```\n\nIfNode represents an {{if}} action and its commands. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#IfNode.Copy",
                    "documentation": {
                      "identifier": "IfNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.IfNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *IfNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *IfNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#RangeNode",
              "documentation": {
                "identifier": "RangeNode",
                "newPage": false,
                "searchKey": "parse.RangeNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RangeNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RangeNode struct {\n\tBranchNode\n}\n```\n\nRangeNode represents a {{range}} action and its commands. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#RangeNode.Copy",
                    "documentation": {
                      "identifier": "RangeNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.RangeNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RangeNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RangeNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#WithNode",
              "documentation": {
                "identifier": "WithNode",
                "newPage": false,
                "searchKey": "parse.WithNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type WithNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WithNode struct {\n\tBranchNode\n}\n```\n\nWithNode represents a {{with}} action and its commands. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#WithNode.Copy",
                    "documentation": {
                      "identifier": "WithNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.WithNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *WithNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *WithNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TemplateNode",
              "documentation": {
                "identifier": "TemplateNode",
                "newPage": false,
                "searchKey": "parse.TemplateNode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TemplateNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TemplateNode struct {\n\tNodeType\n\tPos\n\ttr   *Tree\n\tLine int       // The line number in the input. Deprecated: Kept for compatibility.\n\tName string    // The name of the template (unquoted).\n\tPipe *PipeNode // The command to evaluate as dot for the template.\n}\n```\n\nTemplateNode represents a {{template}} action. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#TemplateNode.String",
                    "documentation": {
                      "identifier": "TemplateNode.String",
                      "newPage": false,
                      "searchKey": "parse.TemplateNode.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TemplateNode) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TemplateNode) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#TemplateNode.writeTo",
                    "documentation": {
                      "identifier": "TemplateNode.writeTo",
                      "newPage": false,
                      "searchKey": "parse.TemplateNode.writeTo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TemplateNode) writeTo(sb *strings.Builder)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TemplateNode) writeTo(sb *strings.Builder)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#TemplateNode.tree",
                    "documentation": {
                      "identifier": "TemplateNode.tree",
                      "newPage": false,
                      "searchKey": "parse.TemplateNode.tree",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TemplateNode) tree() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TemplateNode) tree() *Tree\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#TemplateNode.Copy",
                    "documentation": {
                      "identifier": "TemplateNode.Copy",
                      "newPage": false,
                      "searchKey": "parse.TemplateNode.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TemplateNode) Copy() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TemplateNode) Copy() Node\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#Tree",
              "documentation": {
                "identifier": "Tree",
                "newPage": false,
                "searchKey": "parse.Tree",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tree struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tree struct {\n\tName      string    // name of the template represented by the tree.\n\tParseName string    // name of the top-level template during parsing, for error messages.\n\tRoot      *ListNode // top-level root of the tree.\n\tMode      Mode      // parsing mode.\n\ttext      string    // text parsed to create the template (or its parent)\n\t// Parsing only; cleared after parse.\n\tfuncs      []map[string]interface{}\n\tlex        *lexer\n\ttoken      [3]item // three-token lookahead for parser.\n\tpeekCount  int\n\tvars       []string // variables defined at the moment.\n\ttreeSet    map[string]*Tree\n\tactionLine int // line of left delim starting action\n\tmode       Mode\n}\n```\n\nTree is the representation of a single parsed template. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/text/template/parse#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "parse.New",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(name string, funcs ...map[string]interface{}) *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(name string, funcs ...map[string]interface{}) *Tree\n```\n\nNew allocates a new parse tree with the given name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newList",
                    "documentation": {
                      "identifier": "Tree.newList",
                      "newPage": false,
                      "searchKey": "parse.Tree.newList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newList(pos Pos) *ListNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newList(pos Pos) *ListNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newText",
                    "documentation": {
                      "identifier": "Tree.newText",
                      "newPage": false,
                      "searchKey": "parse.Tree.newText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newText(pos Pos, text string) *TextNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newText(pos Pos, text string) *TextNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newComment",
                    "documentation": {
                      "identifier": "Tree.newComment",
                      "newPage": false,
                      "searchKey": "parse.Tree.newComment",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newComment(pos Pos, text string) *CommentNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newComment(pos Pos, text string) *CommentNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newPipeline",
                    "documentation": {
                      "identifier": "Tree.newPipeline",
                      "newPage": false,
                      "searchKey": "parse.Tree.newPipeline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newPipeline(pos Pos, line int, vars []*VariableNode) *PipeNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newPipeline(pos Pos, line int, vars []*VariableNode) *PipeNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newAction",
                    "documentation": {
                      "identifier": "Tree.newAction",
                      "newPage": false,
                      "searchKey": "parse.Tree.newAction",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newAction(pos Pos, line int, pipe *PipeNode) *ActionNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newAction(pos Pos, line int, pipe *PipeNode) *ActionNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newCommand",
                    "documentation": {
                      "identifier": "Tree.newCommand",
                      "newPage": false,
                      "searchKey": "parse.Tree.newCommand",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newCommand(pos Pos) *CommandNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newCommand(pos Pos) *CommandNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newVariable",
                    "documentation": {
                      "identifier": "Tree.newVariable",
                      "newPage": false,
                      "searchKey": "parse.Tree.newVariable",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newVariable(pos Pos, ident string) *VariableNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newVariable(pos Pos, ident string) *VariableNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newDot",
                    "documentation": {
                      "identifier": "Tree.newDot",
                      "newPage": false,
                      "searchKey": "parse.Tree.newDot",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newDot(pos Pos) *DotNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newDot(pos Pos) *DotNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newNil",
                    "documentation": {
                      "identifier": "Tree.newNil",
                      "newPage": false,
                      "searchKey": "parse.Tree.newNil",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newNil(pos Pos) *NilNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newNil(pos Pos) *NilNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newField",
                    "documentation": {
                      "identifier": "Tree.newField",
                      "newPage": false,
                      "searchKey": "parse.Tree.newField",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newField(pos Pos, ident string) *FieldNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newField(pos Pos, ident string) *FieldNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newChain",
                    "documentation": {
                      "identifier": "Tree.newChain",
                      "newPage": false,
                      "searchKey": "parse.Tree.newChain",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newChain(pos Pos, node Node) *ChainNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newChain(pos Pos, node Node) *ChainNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newBool",
                    "documentation": {
                      "identifier": "Tree.newBool",
                      "newPage": false,
                      "searchKey": "parse.Tree.newBool",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newBool(pos Pos, true bool) *BoolNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newBool(pos Pos, true bool) *BoolNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newNumber",
                    "documentation": {
                      "identifier": "Tree.newNumber",
                      "newPage": false,
                      "searchKey": "parse.Tree.newNumber",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newNumber(pos Pos, text string, typ itemType) (*NumberNode, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newNumber(pos Pos, text string, typ itemType) (*NumberNode, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newString",
                    "documentation": {
                      "identifier": "Tree.newString",
                      "newPage": false,
                      "searchKey": "parse.Tree.newString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newString(pos Pos, orig, text string) *StringNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newString(pos Pos, orig, text string) *StringNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newEnd",
                    "documentation": {
                      "identifier": "Tree.newEnd",
                      "newPage": false,
                      "searchKey": "parse.Tree.newEnd",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newEnd(pos Pos) *endNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newEnd(pos Pos) *endNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newElse",
                    "documentation": {
                      "identifier": "Tree.newElse",
                      "newPage": false,
                      "searchKey": "parse.Tree.newElse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newElse(pos Pos, line int) *elseNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newElse(pos Pos, line int) *elseNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newIf",
                    "documentation": {
                      "identifier": "Tree.newIf",
                      "newPage": false,
                      "searchKey": "parse.Tree.newIf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newIf(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *IfNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newIf(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *IfNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newRange",
                    "documentation": {
                      "identifier": "Tree.newRange",
                      "newPage": false,
                      "searchKey": "parse.Tree.newRange",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newRange(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *RangeNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newRange(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *RangeNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newWith",
                    "documentation": {
                      "identifier": "Tree.newWith",
                      "newPage": false,
                      "searchKey": "parse.Tree.newWith",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newWith(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *WithNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newWith(pos Pos, line int, pipe *PipeNode, list, elseList *ListNode) *WithNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.newTemplate",
                    "documentation": {
                      "identifier": "Tree.newTemplate",
                      "newPage": false,
                      "searchKey": "parse.Tree.newTemplate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) newTemplate(pos Pos, line int, name string, pipe *PipeNode) *TemplateNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) newTemplate(pos Pos, line int, name string, pipe *PipeNode) *TemplateNode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.Copy",
                    "documentation": {
                      "identifier": "Tree.Copy",
                      "newPage": false,
                      "searchKey": "parse.Tree.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) Copy() *Tree"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) Copy() *Tree\n```\n\nCopy returns a copy of the Tree. Any parsing state is discarded. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.next",
                    "documentation": {
                      "identifier": "Tree.next",
                      "newPage": false,
                      "searchKey": "parse.Tree.next",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) next() item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) next() item\n```\n\nnext returns the next token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.backup",
                    "documentation": {
                      "identifier": "Tree.backup",
                      "newPage": false,
                      "searchKey": "parse.Tree.backup",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) backup()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) backup()\n```\n\nbackup backs the input stream up one token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.backup2",
                    "documentation": {
                      "identifier": "Tree.backup2",
                      "newPage": false,
                      "searchKey": "parse.Tree.backup2",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) backup2(t1 item)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) backup2(t1 item)\n```\n\nbackup2 backs the input stream up two tokens. The zeroth token is already there. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.backup3",
                    "documentation": {
                      "identifier": "Tree.backup3",
                      "newPage": false,
                      "searchKey": "parse.Tree.backup3",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) backup3(t2, t1 item)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) backup3(t2, t1 item)\n```\n\nbackup3 backs the input stream up three tokens The zeroth token is already there. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.peek",
                    "documentation": {
                      "identifier": "Tree.peek",
                      "newPage": false,
                      "searchKey": "parse.Tree.peek",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) peek() item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) peek() item\n```\n\npeek returns but does not consume the next token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.nextNonSpace",
                    "documentation": {
                      "identifier": "Tree.nextNonSpace",
                      "newPage": false,
                      "searchKey": "parse.Tree.nextNonSpace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) nextNonSpace() (token item)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) nextNonSpace() (token item)\n```\n\nnextNonSpace returns the next non-space token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.peekNonSpace",
                    "documentation": {
                      "identifier": "Tree.peekNonSpace",
                      "newPage": false,
                      "searchKey": "parse.Tree.peekNonSpace",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) peekNonSpace() item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) peekNonSpace() item\n```\n\npeekNonSpace returns but does not consume the next non-space token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.ErrorContext",
                    "documentation": {
                      "identifier": "Tree.ErrorContext",
                      "newPage": false,
                      "searchKey": "parse.Tree.ErrorContext",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) ErrorContext(n Node) (location, context string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) ErrorContext(n Node) (location, context string)\n```\n\nErrorContext returns a textual representation of the location of the node in the input text. The receiver is only used when the node does not have a pointer to the tree inside, which can occur in old code. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.errorf",
                    "documentation": {
                      "identifier": "Tree.errorf",
                      "newPage": false,
                      "searchKey": "parse.Tree.errorf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) errorf(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) errorf(format string, args ...interface{})\n```\n\nerrorf formats the error and terminates processing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.error",
                    "documentation": {
                      "identifier": "Tree.error",
                      "newPage": false,
                      "searchKey": "parse.Tree.error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) error(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) error(err error)\n```\n\nerror terminates processing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.expect",
                    "documentation": {
                      "identifier": "Tree.expect",
                      "newPage": false,
                      "searchKey": "parse.Tree.expect",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) expect(expected itemType, context string) item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) expect(expected itemType, context string) item\n```\n\nexpect consumes the next token and guarantees it has the required type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.expectOneOf",
                    "documentation": {
                      "identifier": "Tree.expectOneOf",
                      "newPage": false,
                      "searchKey": "parse.Tree.expectOneOf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) expectOneOf(expected1, expected2 itemType, context string) item"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) expectOneOf(expected1, expected2 itemType, context string) item\n```\n\nexpectOneOf consumes the next token and guarantees it has one of the required types. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.unexpected",
                    "documentation": {
                      "identifier": "Tree.unexpected",
                      "newPage": false,
                      "searchKey": "parse.Tree.unexpected",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) unexpected(token item, context string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) unexpected(token item, context string)\n```\n\nunexpected complains about the token and terminates processing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.recover",
                    "documentation": {
                      "identifier": "Tree.recover",
                      "newPage": false,
                      "searchKey": "parse.Tree.recover",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) recover(errp *error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) recover(errp *error)\n```\n\nrecover is the handler that turns panics into returns from the top level of Parse. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.startParse",
                    "documentation": {
                      "identifier": "Tree.startParse",
                      "newPage": false,
                      "searchKey": "parse.Tree.startParse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) startParse(funcs []map[string]interface{}, lex *lexer, treeSet map[string]*Tree)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) startParse(funcs []map[string]interface{}, lex *lexer, treeSet map[string]*Tree)\n```\n\nstartParse initializes the parser, using the lexer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.stopParse",
                    "documentation": {
                      "identifier": "Tree.stopParse",
                      "newPage": false,
                      "searchKey": "parse.Tree.stopParse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) stopParse()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) stopParse()\n```\n\nstopParse terminates parsing. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.Parse",
                    "documentation": {
                      "identifier": "Tree.Parse",
                      "newPage": false,
                      "searchKey": "parse.Tree.Parse",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) Parse(text, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) Parse(text, leftDelim, rightDelim string, treeSet map[string]*Tree, funcs ...map[string]interface{}) (tree *Tree, err error)\n```\n\nParse parses the template definition string to construct a representation of the template for execution. If either action delimiter string is empty, the default (\"{{\" or \"}}\") is used. Embedded template definitions are added to the treeSet map. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.add",
                    "documentation": {
                      "identifier": "Tree.add",
                      "newPage": false,
                      "searchKey": "parse.Tree.add",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) add()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) add()\n```\n\nadd adds tree to t.treeSet. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.parse",
                    "documentation": {
                      "identifier": "Tree.parse",
                      "newPage": false,
                      "searchKey": "parse.Tree.parse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) parse()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) parse()\n```\n\nparse is the top-level parser for a template, essentially the same as itemList except it also parses {{define}} actions. It runs to EOF. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.parseDefinition",
                    "documentation": {
                      "identifier": "Tree.parseDefinition",
                      "newPage": false,
                      "searchKey": "parse.Tree.parseDefinition",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) parseDefinition()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) parseDefinition()\n```\n\nparseDefinition parses a {{define}} ...  {{end}} template definition and installs the definition in t.treeSet. The \"define\" keyword has already been scanned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.itemList",
                    "documentation": {
                      "identifier": "Tree.itemList",
                      "newPage": false,
                      "searchKey": "parse.Tree.itemList",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) itemList() (list *ListNode, next Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) itemList() (list *ListNode, next Node)\n```\n\nitemList: \n\n```\ntextOrAction*\n\n```\nTerminates at {{end}} or {{else}}, returned separately. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.textOrAction",
                    "documentation": {
                      "identifier": "Tree.textOrAction",
                      "newPage": false,
                      "searchKey": "parse.Tree.textOrAction",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) textOrAction() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) textOrAction() Node\n```\n\ntextOrAction: \n\n```\ntext | comment | action\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.clearActionLine",
                    "documentation": {
                      "identifier": "Tree.clearActionLine",
                      "newPage": false,
                      "searchKey": "parse.Tree.clearActionLine",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) clearActionLine()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) clearActionLine()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.action",
                    "documentation": {
                      "identifier": "Tree.action",
                      "newPage": false,
                      "searchKey": "parse.Tree.action",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) action() (n Node)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) action() (n Node)\n```\n\nAction: \n\n```\ncontrol\ncommand (\"|\" command)*\n\n```\nLeft delim is past. Now get actions. First word could be a keyword such as range. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.pipeline",
                    "documentation": {
                      "identifier": "Tree.pipeline",
                      "newPage": false,
                      "searchKey": "parse.Tree.pipeline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) pipeline(context string, end itemType) (pipe *PipeNode)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) pipeline(context string, end itemType) (pipe *PipeNode)\n```\n\nPipeline: \n\n```\ndeclarations? command ('|' command)*\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.checkPipeline",
                    "documentation": {
                      "identifier": "Tree.checkPipeline",
                      "newPage": false,
                      "searchKey": "parse.Tree.checkPipeline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) checkPipeline(pipe *PipeNode, context string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) checkPipeline(pipe *PipeNode, context string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.parseControl",
                    "documentation": {
                      "identifier": "Tree.parseControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.parseControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) parseControl(allowElseIf bool, context string) (pos Pos, line int, pipe *PipeNode, list, elseList *ListNode)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) parseControl(allowElseIf bool, context string) (pos Pos, line int, pipe *PipeNode, list, elseList *ListNode)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.ifControl",
                    "documentation": {
                      "identifier": "Tree.ifControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.ifControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) ifControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) ifControl() Node\n```\n\nIf: \n\n```\n{{if pipeline}} itemList {{end}}\n{{if pipeline}} itemList {{else}} itemList {{end}}\n\n```\nIf keyword is past. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.rangeControl",
                    "documentation": {
                      "identifier": "Tree.rangeControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.rangeControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) rangeControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) rangeControl() Node\n```\n\nRange: \n\n```\n{{range pipeline}} itemList {{end}}\n{{range pipeline}} itemList {{else}} itemList {{end}}\n\n```\nRange keyword is past. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.withControl",
                    "documentation": {
                      "identifier": "Tree.withControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.withControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) withControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) withControl() Node\n```\n\nWith: \n\n```\n{{with pipeline}} itemList {{end}}\n{{with pipeline}} itemList {{else}} itemList {{end}}\n\n```\nIf keyword is past. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.endControl",
                    "documentation": {
                      "identifier": "Tree.endControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.endControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) endControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) endControl() Node\n```\n\nEnd: \n\n```\n{{end}}\n\n```\nEnd keyword is past. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.elseControl",
                    "documentation": {
                      "identifier": "Tree.elseControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.elseControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) elseControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) elseControl() Node\n```\n\nElse: \n\n```\n{{else}}\n\n```\nElse keyword is past. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.blockControl",
                    "documentation": {
                      "identifier": "Tree.blockControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.blockControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) blockControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) blockControl() Node\n```\n\nBlock: \n\n```\n{{block stringValue pipeline}}\n\n```\nBlock keyword is past. The name must be something that can evaluate to a string. The pipeline is mandatory. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.templateControl",
                    "documentation": {
                      "identifier": "Tree.templateControl",
                      "newPage": false,
                      "searchKey": "parse.Tree.templateControl",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) templateControl() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) templateControl() Node\n```\n\nTemplate: \n\n```\n{{template stringValue pipeline}}\n\n```\nTemplate keyword is past. The name must be something that can evaluate to a string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.parseTemplateName",
                    "documentation": {
                      "identifier": "Tree.parseTemplateName",
                      "newPage": false,
                      "searchKey": "parse.Tree.parseTemplateName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) parseTemplateName(token item, context string) (name string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) parseTemplateName(token item, context string) (name string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.command",
                    "documentation": {
                      "identifier": "Tree.command",
                      "newPage": false,
                      "searchKey": "parse.Tree.command",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) command() *CommandNode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) command() *CommandNode\n```\n\ncommand: \n\n```\noperand (space operand)*\n\n```\nspace-separated arguments up to a pipeline character or right delimiter. we consume the pipe character but leave the right delim to terminate the action. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.operand",
                    "documentation": {
                      "identifier": "Tree.operand",
                      "newPage": false,
                      "searchKey": "parse.Tree.operand",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) operand() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) operand() Node\n```\n\noperand: \n\n```\nterm .Field*\n\n```\nAn operand is a space-separated component of a command, a term possibly followed by field accesses. A nil return means the next item is not an operand. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.term",
                    "documentation": {
                      "identifier": "Tree.term",
                      "newPage": false,
                      "searchKey": "parse.Tree.term",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) term() Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) term() Node\n```\n\nterm: \n\n```\nliteral (number, string, nil, boolean)\nfunction (identifier)\n.\n.Field\n$\n'(' pipeline ')'\n\n```\nA term is a simple \"expression\". A nil return means the next item is not a term. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.hasFunction",
                    "documentation": {
                      "identifier": "Tree.hasFunction",
                      "newPage": false,
                      "searchKey": "parse.Tree.hasFunction",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) hasFunction(name string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) hasFunction(name string) bool\n```\n\nhasFunction reports if a function name exists in the Tree's maps. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.popVars",
                    "documentation": {
                      "identifier": "Tree.popVars",
                      "newPage": false,
                      "searchKey": "parse.Tree.popVars",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) popVars(n int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) popVars(n int)\n```\n\npopVars trims the variable list to the specified length \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.useVar",
                    "documentation": {
                      "identifier": "Tree.useVar",
                      "newPage": false,
                      "searchKey": "parse.Tree.useVar",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) useVar(pos Pos, name string) Node"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) useVar(pos Pos, name string) Node\n```\n\nuseVar returns a node for a variable reference. It errors if the variable is not defined. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/text/template/parse#Tree.parseLexer",
                    "documentation": {
                      "identifier": "Tree.parseLexer",
                      "newPage": false,
                      "searchKey": "parse.Tree.parseLexer",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Tree) parseLexer(lex *lexer) (tree *Tree, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Tree) parseLexer(lex *lexer) (tree *Tree, err error)\n```\n\nparseLexer is a local version of parse that lets us pass in the lexer instead of building it. We expect an error, so the tree set and funcs list are explicitly nil. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#Mode",
              "documentation": {
                "identifier": "Mode",
                "newPage": false,
                "searchKey": "parse.Mode",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Mode uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Mode uint\n```\n\nA mode value is a set of flags (or 0). Modes control parser behavior. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#lexTest",
              "documentation": {
                "identifier": "lexTest",
                "newPage": false,
                "searchKey": "parse.lexTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type lexTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lexTest struct {\n\tname  string\n\tinput string\n\titems []item\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#numberTest",
              "documentation": {
                "identifier": "numberTest",
                "newPage": false,
                "searchKey": "parse.numberTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type numberTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype numberTest struct {\n\ttext      string\n\tisInt     bool\n\tisUint    bool\n\tisFloat   bool\n\tisComplex bool\n\tint64\n\tuint64\n\tfloat64\n\tcomplex128\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#parseTest",
              "documentation": {
                "identifier": "parseTest",
                "newPage": false,
                "searchKey": "parse.parseTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type parseTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parseTest struct {\n\tname   string\n\tinput  string\n\tok     bool\n\tresult string // what the user would see in an error message.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#isEmptyTest",
              "documentation": {
                "identifier": "isEmptyTest",
                "newPage": false,
                "searchKey": "parse.isEmptyTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type isEmptyTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype isEmptyTest struct {\n\tname  string\n\tinput string\n\tempty bool\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/text/template/parse#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/text/template/parse#isSpace",
              "documentation": {
                "identifier": "isSpace",
                "newPage": false,
                "searchKey": "parse.isSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isSpace(r rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isSpace(r rune) bool\n```\n\nisSpace reports whether r is a space character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#isAlphaNumeric",
              "documentation": {
                "identifier": "isAlphaNumeric",
                "newPage": false,
                "searchKey": "parse.isAlphaNumeric",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isAlphaNumeric(r rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isAlphaNumeric(r rune) bool\n```\n\nisAlphaNumeric reports whether r is an alphabetic, digit, or underscore. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#hasLeftTrimMarker",
              "documentation": {
                "identifier": "hasLeftTrimMarker",
                "newPage": false,
                "searchKey": "parse.hasLeftTrimMarker",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hasLeftTrimMarker(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hasLeftTrimMarker(s string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#hasRightTrimMarker",
              "documentation": {
                "identifier": "hasRightTrimMarker",
                "newPage": false,
                "searchKey": "parse.hasRightTrimMarker",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func hasRightTrimMarker(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hasRightTrimMarker(s string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#Parse",
              "documentation": {
                "identifier": "Parse",
                "newPage": false,
                "searchKey": "parse.Parse",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Parse(name, text, leftDelim, rightDelim string, funcs ...map[string]interface{}) (map[string]*Tree, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Parse(name, text, leftDelim, rightDelim string, funcs ...map[string]interface{}) (map[string]*Tree, error)\n```\n\nParse returns a map from template name to parse.Tree, created by parsing the templates described in the argument string. The top-level template will be given the specified name. If an error is encountered, parsing stops and an empty map is returned with the error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#IsEmptyTree",
              "documentation": {
                "identifier": "IsEmptyTree",
                "newPage": false,
                "searchKey": "parse.IsEmptyTree",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsEmptyTree(n Node) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsEmptyTree(n Node) bool\n```\n\nIsEmptyTree reports whether this tree (node) is empty of everything but space or comments. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#collect",
              "documentation": {
                "identifier": "collect",
                "newPage": false,
                "searchKey": "parse.collect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func collect(t *lexTest, left, right string) (items []item)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc collect(t *lexTest, left, right string) (items []item)\n```\n\ncollect gathers the emitted items into a slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#equal",
              "documentation": {
                "identifier": "equal",
                "newPage": false,
                "searchKey": "parse.equal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func equal(i1, i2 []item, checkPos bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc equal(i1, i2 []item, checkPos bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestLex",
              "documentation": {
                "identifier": "TestLex",
                "newPage": false,
                "searchKey": "parse.TestLex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestDelims",
              "documentation": {
                "identifier": "TestDelims",
                "newPage": false,
                "searchKey": "parse.TestDelims",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDelims(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDelims(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestPos",
              "documentation": {
                "identifier": "TestPos",
                "newPage": false,
                "searchKey": "parse.TestPos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPos(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPos(t *testing.T)\n```\n\nThe other tests don't check position, to make the test cases easier to construct. This one does. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestShutdown",
              "documentation": {
                "identifier": "TestShutdown",
                "newPage": false,
                "searchKey": "parse.TestShutdown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestShutdown(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestShutdown(t *testing.T)\n```\n\nTest that an error shuts down the lexing goroutine. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestNumberParse",
              "documentation": {
                "identifier": "TestNumberParse",
                "newPage": false,
                "searchKey": "parse.TestNumberParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNumberParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNumberParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#testParse",
              "documentation": {
                "identifier": "testParse",
                "newPage": false,
                "searchKey": "parse.testParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testParse(doCopy bool, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testParse(doCopy bool, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestParse",
              "documentation": {
                "identifier": "TestParse",
                "newPage": false,
                "searchKey": "parse.TestParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestParseCopy",
              "documentation": {
                "identifier": "TestParseCopy",
                "newPage": false,
                "searchKey": "parse.TestParseCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseCopy(t *testing.T)\n```\n\nSame as TestParse, but we copy the node first \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestParseWithComments",
              "documentation": {
                "identifier": "TestParseWithComments",
                "newPage": false,
                "searchKey": "parse.TestParseWithComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseWithComments(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseWithComments(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestSkipFuncCheck",
              "documentation": {
                "identifier": "TestSkipFuncCheck",
                "newPage": false,
                "searchKey": "parse.TestSkipFuncCheck",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSkipFuncCheck(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSkipFuncCheck(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestIsEmpty",
              "documentation": {
                "identifier": "TestIsEmpty",
                "newPage": false,
                "searchKey": "parse.TestIsEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestErrorContextWithTreeCopy",
              "documentation": {
                "identifier": "TestErrorContextWithTreeCopy",
                "newPage": false,
                "searchKey": "parse.TestErrorContextWithTreeCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorContextWithTreeCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorContextWithTreeCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestErrors",
              "documentation": {
                "identifier": "TestErrors",
                "newPage": false,
                "searchKey": "parse.TestErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestBlock",
              "documentation": {
                "identifier": "TestBlock",
                "newPage": false,
                "searchKey": "parse.TestBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#TestLineNum",
              "documentation": {
                "identifier": "TestLineNum",
                "newPage": false,
                "searchKey": "parse.TestLineNum",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineNum(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineNum(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#BenchmarkParseLarge",
              "documentation": {
                "identifier": "BenchmarkParseLarge",
                "newPage": false,
                "searchKey": "parse.BenchmarkParseLarge",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkParseLarge(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkParseLarge(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#BenchmarkVariableString",
              "documentation": {
                "identifier": "BenchmarkVariableString",
                "newPage": false,
                "searchKey": "parse.BenchmarkVariableString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkVariableString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkVariableString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/text/template/parse#BenchmarkListString",
              "documentation": {
                "identifier": "BenchmarkListString",
                "newPage": false,
                "searchKey": "parse.BenchmarkListString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkListString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkListString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
