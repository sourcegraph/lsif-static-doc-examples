{
  "pathID": "/flag",
  "documentation": {
    "identifier": "flag",
    "newPage": true,
    "searchKey": "flag",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package flag"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package flag implements command-line flag parsing. \n\n### hdr-UsageUsage\nDefine flags using flag.String(), Bool(), Int(), etc. \n\nThis declares an integer flag, -n, stored in the pointer nFlag, with type *int: \n\n```\nimport \"flag\"\nvar nFlag = flag.Int(\"n\", 1234, \"help message for flag n\")\n\n```\nIf you like, you can bind the flag to a variable using the Var() functions. \n\n```\nvar flagvar int\nfunc init() {\n\tflag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n\n```\nOr you can create custom flags that satisfy the Value interface (with pointer receivers) and couple them to flag parsing by \n\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n\n```\nFor such flags, the default value is just the initial value of the variable. \n\nAfter all flags are defined, call \n\n```\nflag.Parse()\n\n```\nto parse the command line into the defined flags. \n\nFlags may then be used directly. If you're using the flags themselves, they are all pointers; if you bind to variables, they're values. \n\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n\n```\nAfter parsing, the arguments following the flags are available as the slice flag.Args() or individually as flag.Arg(i). The arguments are indexed from 0 through flag.NArg()-1. \n\n### hdr-Command_line_flag_syntaxCommand line flag syntax\nThe following forms are permitted: \n\n```\n-flag\n-flag=x\n-flag x  // non-boolean flags only\n\n```\nOne or two minus signs may be used; they are equivalent. The last form is not permitted for boolean flags because the meaning of the command \n\n```\ncmd -x *\n\n```\nwhere * is a Unix shell wildcard, will change if there is a file called 0, false, etc. You must use the -flag=false form to turn off a boolean flag. \n\nFlag parsing stops just before the first non-flag argument (\"-\" is a non-flag argument) or after the terminator \"--\". \n\nInteger flags accept 1234, 0664, 0x1234 and may be negative. Boolean flags may be: \n\n```\n1, 0, t, f, T, F, true, false, TRUE, FALSE, True, False\n\n```\nDuration flags accept any input valid for time.ParseDuration. \n\nThe default set of command-line flags is controlled by top-level functions.  The FlagSet type allows one to define independent sets of flags, such as to implement subcommands in a command-line interface. The methods of FlagSet are analogous to the top-level functions for the command-line flag set. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/flag#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/flag#ContinueOnError",
              "documentation": {
                "identifier": "ContinueOnError",
                "newPage": false,
                "searchKey": "flag.ContinueOnError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ContinueOnError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ContinueOnError ErrorHandling = iota // Return a descriptive error.\n\n```\n\nThese constants cause FlagSet.Parse to behave as described if the parse fails. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#ExitOnError",
              "documentation": {
                "identifier": "ExitOnError",
                "newPage": false,
                "searchKey": "flag.ExitOnError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExitOnError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExitOnError // Call os.Exit(2) or for -h/-help Exit(0).\n\n```\n\nThese constants cause FlagSet.Parse to behave as described if the parse fails. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#PanicOnError",
              "documentation": {
                "identifier": "PanicOnError",
                "newPage": false,
                "searchKey": "flag.PanicOnError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PanicOnError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PanicOnError // Call panic with a descriptive error.\n\n```\n\nThese constants cause FlagSet.Parse to behave as described if the parse fails. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/flag#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/flag#ErrHelp",
              "documentation": {
                "identifier": "ErrHelp",
                "newPage": false,
                "searchKey": "flag.ErrHelp",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrHelp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrHelp = errors.New(\"flag: help requested\")\n```\n\nErrHelp is the error returned if the -help or -h flag is invoked but no such flag is defined. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#errParse",
              "documentation": {
                "identifier": "errParse",
                "newPage": false,
                "searchKey": "flag.errParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errParse"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errParse = errors.New(\"parse error\")\n```\n\nerrParse is returned by Set if a flag's value fails to parse, such as with an invalid integer for Int. It then gets wrapped through failf to provide more information. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#errRange",
              "documentation": {
                "identifier": "errRange",
                "newPage": false,
                "searchKey": "flag.errRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errRange"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errRange = errors.New(\"value out of range\")\n```\n\nerrRange is returned by Set if a flag's value is out of range. It then gets wrapped through failf to provide more information. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Usage",
              "documentation": {
                "identifier": "Usage",
                "newPage": false,
                "searchKey": "flag.Usage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Usage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Usage = ...\n```\n\nUsage prints a usage message documenting all defined command-line flags to CommandLine's output, which by default is os.Stderr. It is called when an error occurs while parsing flags. The function is a variable that may be changed to point to a custom function. By default it prints a simple header and calls PrintDefaults; for details about the format of the output and how to control it, see the documentation for PrintDefaults. Custom usage functions may choose to exit the program; by default exiting happens anyway as the command line's error handling strategy is set to ExitOnError. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#CommandLine",
              "documentation": {
                "identifier": "CommandLine",
                "newPage": false,
                "searchKey": "flag.CommandLine",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var CommandLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar CommandLine = NewFlagSet(os.Args[0], ExitOnError)\n```\n\nCommandLine is the default set of command-line flags, parsed from os.Args. The top-level functions such as BoolVar, Arg, and so on are wrappers for the methods of CommandLine. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#DefaultUsage",
              "documentation": {
                "identifier": "DefaultUsage",
                "newPage": false,
                "searchKey": "flag.DefaultUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var DefaultUsage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar DefaultUsage = Usage\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/flag#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/flag#boolValue",
              "documentation": {
                "identifier": "boolValue",
                "newPage": false,
                "searchKey": "flag.boolValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type boolValue bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype boolValue bool\n```\n\n-- bool Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newBoolValue",
                    "documentation": {
                      "identifier": "newBoolValue",
                      "newPage": false,
                      "searchKey": "flag.newBoolValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newBoolValue(val bool, p *bool) *boolValue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newBoolValue(val bool, p *bool) *boolValue\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#boolValue.Set",
                    "documentation": {
                      "identifier": "boolValue.Set",
                      "newPage": false,
                      "searchKey": "flag.boolValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolValue) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolValue) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#boolValue.Get",
                    "documentation": {
                      "identifier": "boolValue.Get",
                      "newPage": false,
                      "searchKey": "flag.boolValue.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolValue) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolValue) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#boolValue.String",
                    "documentation": {
                      "identifier": "boolValue.String",
                      "newPage": false,
                      "searchKey": "flag.boolValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#boolValue.IsBoolFlag",
                    "documentation": {
                      "identifier": "boolValue.IsBoolFlag",
                      "newPage": false,
                      "searchKey": "flag.boolValue.IsBoolFlag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *boolValue) IsBoolFlag() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *boolValue) IsBoolFlag() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#boolFlag",
              "documentation": {
                "identifier": "boolFlag",
                "newPage": false,
                "searchKey": "flag.boolFlag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type boolFlag interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype boolFlag interface {\n\tValue\n\tIsBoolFlag() bool\n}\n```\n\noptional interface to indicate boolean flags that can be supplied without \"=value\" text \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#intValue",
              "documentation": {
                "identifier": "intValue",
                "newPage": false,
                "searchKey": "flag.intValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type intValue int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intValue int\n```\n\n-- int Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newIntValue",
                    "documentation": {
                      "identifier": "newIntValue",
                      "newPage": false,
                      "searchKey": "flag.newIntValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newIntValue(val int, p *int) *intValue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newIntValue(val int, p *int) *intValue\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#intValue.Set",
                    "documentation": {
                      "identifier": "intValue.Set",
                      "newPage": false,
                      "searchKey": "flag.intValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *intValue) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *intValue) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#intValue.Get",
                    "documentation": {
                      "identifier": "intValue.Get",
                      "newPage": false,
                      "searchKey": "flag.intValue.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *intValue) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *intValue) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#intValue.String",
                    "documentation": {
                      "identifier": "intValue.String",
                      "newPage": false,
                      "searchKey": "flag.intValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *intValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *intValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#int64Value",
              "documentation": {
                "identifier": "int64Value",
                "newPage": false,
                "searchKey": "flag.int64Value",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type int64Value int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype int64Value int64\n```\n\n-- int64 Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newInt64Value",
                    "documentation": {
                      "identifier": "newInt64Value",
                      "newPage": false,
                      "searchKey": "flag.newInt64Value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newInt64Value(val int64, p *int64) *int64Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newInt64Value(val int64, p *int64) *int64Value\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#int64Value.Set",
                    "documentation": {
                      "identifier": "int64Value.Set",
                      "newPage": false,
                      "searchKey": "flag.int64Value.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *int64Value) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *int64Value) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#int64Value.Get",
                    "documentation": {
                      "identifier": "int64Value.Get",
                      "newPage": false,
                      "searchKey": "flag.int64Value.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *int64Value) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *int64Value) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#int64Value.String",
                    "documentation": {
                      "identifier": "int64Value.String",
                      "newPage": false,
                      "searchKey": "flag.int64Value.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *int64Value) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *int64Value) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#uintValue",
              "documentation": {
                "identifier": "uintValue",
                "newPage": false,
                "searchKey": "flag.uintValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type uintValue uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype uintValue uint\n```\n\n-- uint Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newUintValue",
                    "documentation": {
                      "identifier": "newUintValue",
                      "newPage": false,
                      "searchKey": "flag.newUintValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newUintValue(val uint, p *uint) *uintValue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newUintValue(val uint, p *uint) *uintValue\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#uintValue.Set",
                    "documentation": {
                      "identifier": "uintValue.Set",
                      "newPage": false,
                      "searchKey": "flag.uintValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *uintValue) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *uintValue) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#uintValue.Get",
                    "documentation": {
                      "identifier": "uintValue.Get",
                      "newPage": false,
                      "searchKey": "flag.uintValue.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *uintValue) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *uintValue) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#uintValue.String",
                    "documentation": {
                      "identifier": "uintValue.String",
                      "newPage": false,
                      "searchKey": "flag.uintValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *uintValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *uintValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#uint64Value",
              "documentation": {
                "identifier": "uint64Value",
                "newPage": false,
                "searchKey": "flag.uint64Value",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type uint64Value uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype uint64Value uint64\n```\n\n-- uint64 Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newUint64Value",
                    "documentation": {
                      "identifier": "newUint64Value",
                      "newPage": false,
                      "searchKey": "flag.newUint64Value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newUint64Value(val uint64, p *uint64) *uint64Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newUint64Value(val uint64, p *uint64) *uint64Value\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#uint64Value.Set",
                    "documentation": {
                      "identifier": "uint64Value.Set",
                      "newPage": false,
                      "searchKey": "flag.uint64Value.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *uint64Value) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *uint64Value) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#uint64Value.Get",
                    "documentation": {
                      "identifier": "uint64Value.Get",
                      "newPage": false,
                      "searchKey": "flag.uint64Value.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *uint64Value) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *uint64Value) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#uint64Value.String",
                    "documentation": {
                      "identifier": "uint64Value.String",
                      "newPage": false,
                      "searchKey": "flag.uint64Value.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i *uint64Value) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i *uint64Value) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#stringValue",
              "documentation": {
                "identifier": "stringValue",
                "newPage": false,
                "searchKey": "flag.stringValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type stringValue string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stringValue string\n```\n\n-- string Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newStringValue",
                    "documentation": {
                      "identifier": "newStringValue",
                      "newPage": false,
                      "searchKey": "flag.newStringValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newStringValue(val string, p *string) *stringValue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newStringValue(val string, p *string) *stringValue\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#stringValue.Set",
                    "documentation": {
                      "identifier": "stringValue.Set",
                      "newPage": false,
                      "searchKey": "flag.stringValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *stringValue) Set(val string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *stringValue) Set(val string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#stringValue.Get",
                    "documentation": {
                      "identifier": "stringValue.Get",
                      "newPage": false,
                      "searchKey": "flag.stringValue.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *stringValue) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *stringValue) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#stringValue.String",
                    "documentation": {
                      "identifier": "stringValue.String",
                      "newPage": false,
                      "searchKey": "flag.stringValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *stringValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *stringValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#float64Value",
              "documentation": {
                "identifier": "float64Value",
                "newPage": false,
                "searchKey": "flag.float64Value",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type float64Value float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype float64Value float64\n```\n\n-- float64 Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newFloat64Value",
                    "documentation": {
                      "identifier": "newFloat64Value",
                      "newPage": false,
                      "searchKey": "flag.newFloat64Value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newFloat64Value(val float64, p *float64) *float64Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newFloat64Value(val float64, p *float64) *float64Value\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#float64Value.Set",
                    "documentation": {
                      "identifier": "float64Value.Set",
                      "newPage": false,
                      "searchKey": "flag.float64Value.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *float64Value) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *float64Value) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#float64Value.Get",
                    "documentation": {
                      "identifier": "float64Value.Get",
                      "newPage": false,
                      "searchKey": "flag.float64Value.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *float64Value) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *float64Value) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#float64Value.String",
                    "documentation": {
                      "identifier": "float64Value.String",
                      "newPage": false,
                      "searchKey": "flag.float64Value.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *float64Value) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *float64Value) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#durationValue",
              "documentation": {
                "identifier": "durationValue",
                "newPage": false,
                "searchKey": "flag.durationValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type durationValue time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype durationValue time.Duration\n```\n\n-- time.Duration Value \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#newDurationValue",
                    "documentation": {
                      "identifier": "newDurationValue",
                      "newPage": false,
                      "searchKey": "flag.newDurationValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newDurationValue(val time.Duration, p *time.Duration) *durationValue"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newDurationValue(val time.Duration, p *time.Duration) *durationValue\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#durationValue.Set",
                    "documentation": {
                      "identifier": "durationValue.Set",
                      "newPage": false,
                      "searchKey": "flag.durationValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *durationValue) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *durationValue) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#durationValue.Get",
                    "documentation": {
                      "identifier": "durationValue.Get",
                      "newPage": false,
                      "searchKey": "flag.durationValue.Get",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *durationValue) Get() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *durationValue) Get() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#durationValue.String",
                    "documentation": {
                      "identifier": "durationValue.String",
                      "newPage": false,
                      "searchKey": "flag.durationValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *durationValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *durationValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#funcValue",
              "documentation": {
                "identifier": "funcValue",
                "newPage": false,
                "searchKey": "flag.funcValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type funcValue func(string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype funcValue func(string) error\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#funcValue.Set",
                    "documentation": {
                      "identifier": "funcValue.Set",
                      "newPage": false,
                      "searchKey": "flag.funcValue.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f funcValue) Set(s string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f funcValue) Set(s string) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#funcValue.String",
                    "documentation": {
                      "identifier": "funcValue.String",
                      "newPage": false,
                      "searchKey": "flag.funcValue.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f funcValue) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f funcValue) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#Value",
              "documentation": {
                "identifier": "Value",
                "newPage": false,
                "searchKey": "flag.Value",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Value interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Value interface {\n\tString() string\n\tSet(string) error\n}\n```\n\nValue is the interface to the dynamic value stored in a flag. (The default value is represented as a string.) \n\nIf a Value has an IsBoolFlag() bool method returning true, the command-line parser makes -name equivalent to -name=true rather than using the next command-line argument. \n\nSet is called once, in command line order, for each flag present. The flag package may call the String method with a zero-valued receiver, such as a nil pointer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Getter",
              "documentation": {
                "identifier": "Getter",
                "newPage": false,
                "searchKey": "flag.Getter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Getter interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Getter interface {\n\tValue\n\tGet() interface{}\n}\n```\n\nGetter is an interface that allows the contents of a Value to be retrieved. It wraps the Value interface, rather than being part of it, because it appeared after Go 1 and its compatibility rules. All Value types provided by this package satisfy the Getter interface, except the type used by Func. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#ErrorHandling",
              "documentation": {
                "identifier": "ErrorHandling",
                "newPage": false,
                "searchKey": "flag.ErrorHandling",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ErrorHandling int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ErrorHandling int\n```\n\nErrorHandling defines how FlagSet.Parse behaves if the parse fails. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#FlagSet",
              "documentation": {
                "identifier": "FlagSet",
                "newPage": false,
                "searchKey": "flag.FlagSet",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FlagSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FlagSet struct {\n\t// Usage is the function called when an error occurs while parsing flags.\n\t// The field is a function (not a method) that may be changed to point to\n\t// a custom error handler. What happens after Usage is called depends\n\t// on the ErrorHandling setting; for the command line, this defaults\n\t// to ExitOnError, which exits the program after calling Usage.\n\tUsage func()\n\n\tname          string\n\tparsed        bool\n\tactual        map[string]*Flag\n\tformal        map[string]*Flag\n\targs          []string // arguments after flags\n\terrorHandling ErrorHandling\n\toutput        io.Writer // nil means stderr; use Output() accessor\n}\n```\n\nA FlagSet represents a set of defined flags. The zero value of a FlagSet has no name and has ContinueOnError error handling. \n\nFlag names must be unique within a FlagSet. An attempt to define a flag whose name is already in use will cause a panic. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#NewFlagSet",
                    "documentation": {
                      "identifier": "NewFlagSet",
                      "newPage": false,
                      "searchKey": "flag.NewFlagSet",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewFlagSet(name string, errorHandling ErrorHandling) *FlagSet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewFlagSet(name string, errorHandling ErrorHandling) *FlagSet\n```\n\nNewFlagSet returns a new, empty flag set with the specified name and error handling property. If the name is not empty, it will be printed in the default usage message and in error messages. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Output",
                    "documentation": {
                      "identifier": "FlagSet.Output",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Output",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Output() io.Writer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Output() io.Writer\n```\n\nOutput returns the destination for usage and error messages. os.Stderr is returned if output was not set or was set to nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Name",
                    "documentation": {
                      "identifier": "FlagSet.Name",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Name",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Name() string\n```\n\nName returns the name of the flag set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.ErrorHandling",
                    "documentation": {
                      "identifier": "FlagSet.ErrorHandling",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.ErrorHandling",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) ErrorHandling() ErrorHandling"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) ErrorHandling() ErrorHandling\n```\n\nErrorHandling returns the error handling behavior of the flag set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.SetOutput",
                    "documentation": {
                      "identifier": "FlagSet.SetOutput",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.SetOutput",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) SetOutput(output io.Writer)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) SetOutput(output io.Writer)\n```\n\nSetOutput sets the destination for usage and error messages. If output is nil, os.Stderr is used. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.VisitAll",
                    "documentation": {
                      "identifier": "FlagSet.VisitAll",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.VisitAll",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) VisitAll(fn func(*Flag))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) VisitAll(fn func(*Flag))\n```\n\nVisitAll visits the flags in lexicographical order, calling fn for each. It visits all flags, even those not set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Visit",
                    "documentation": {
                      "identifier": "FlagSet.Visit",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Visit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Visit(fn func(*Flag))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Visit(fn func(*Flag))\n```\n\nVisit visits the flags in lexicographical order, calling fn for each. It visits only those flags that have been set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Lookup",
                    "documentation": {
                      "identifier": "FlagSet.Lookup",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Lookup",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Lookup(name string) *Flag"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Lookup(name string) *Flag\n```\n\nLookup returns the Flag structure of the named flag, returning nil if none exists. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Set",
                    "documentation": {
                      "identifier": "FlagSet.Set",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Set(name, value string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Set(name, value string) error\n```\n\nSet sets the value of the named flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.PrintDefaults",
                    "documentation": {
                      "identifier": "FlagSet.PrintDefaults",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.PrintDefaults",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) PrintDefaults()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) PrintDefaults()\n```\n\nPrintDefaults prints, to standard error unless configured otherwise, the default values of all defined command-line flags in the set. See the documentation for the global function PrintDefaults for more information. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.defaultUsage",
                    "documentation": {
                      "identifier": "FlagSet.defaultUsage",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.defaultUsage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) defaultUsage()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) defaultUsage()\n```\n\ndefaultUsage is the default function to print a usage message. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.NFlag",
                    "documentation": {
                      "identifier": "FlagSet.NFlag",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.NFlag",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) NFlag() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) NFlag() int\n```\n\nNFlag returns the number of flags that have been set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Arg",
                    "documentation": {
                      "identifier": "FlagSet.Arg",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Arg",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Arg(i int) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Arg(i int) string\n```\n\nArg returns the i'th argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.NArg",
                    "documentation": {
                      "identifier": "FlagSet.NArg",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.NArg",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) NArg() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) NArg() int\n```\n\nNArg is the number of arguments remaining after flags have been processed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Args",
                    "documentation": {
                      "identifier": "FlagSet.Args",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Args",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Args() []string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Args() []string\n```\n\nArgs returns the non-flag arguments. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.BoolVar",
                    "documentation": {
                      "identifier": "FlagSet.BoolVar",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.BoolVar",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) BoolVar(p *bool, name string, value bool, usage string)\n```\n\nBoolVar defines a bool flag with specified name, default value, and usage string. The argument p points to a bool variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Bool",
                    "documentation": {
                      "identifier": "FlagSet.Bool",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Bool",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Bool(name string, value bool, usage string) *bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Bool(name string, value bool, usage string) *bool\n```\n\nBool defines a bool flag with specified name, default value, and usage string. The return value is the address of a bool variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.IntVar",
                    "documentation": {
                      "identifier": "FlagSet.IntVar",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.IntVar",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) IntVar(p *int, name string, value int, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) IntVar(p *int, name string, value int, usage string)\n```\n\nIntVar defines an int flag with specified name, default value, and usage string. The argument p points to an int variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Int",
                    "documentation": {
                      "identifier": "FlagSet.Int",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Int",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Int(name string, value int, usage string) *int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Int(name string, value int, usage string) *int\n```\n\nInt defines an int flag with specified name, default value, and usage string. The return value is the address of an int variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Int64Var",
                    "documentation": {
                      "identifier": "FlagSet.Int64Var",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Int64Var",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Int64Var(p *int64, name string, value int64, usage string)\n```\n\nInt64Var defines an int64 flag with specified name, default value, and usage string. The argument p points to an int64 variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Int64",
                    "documentation": {
                      "identifier": "FlagSet.Int64",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Int64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Int64(name string, value int64, usage string) *int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Int64(name string, value int64, usage string) *int64\n```\n\nInt64 defines an int64 flag with specified name, default value, and usage string. The return value is the address of an int64 variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.UintVar",
                    "documentation": {
                      "identifier": "FlagSet.UintVar",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.UintVar",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) UintVar(p *uint, name string, value uint, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) UintVar(p *uint, name string, value uint, usage string)\n```\n\nUintVar defines a uint flag with specified name, default value, and usage string. The argument p points to a uint variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Uint",
                    "documentation": {
                      "identifier": "FlagSet.Uint",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Uint",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Uint(name string, value uint, usage string) *uint"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Uint(name string, value uint, usage string) *uint\n```\n\nUint defines a uint flag with specified name, default value, and usage string. The return value is the address of a uint variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Uint64Var",
                    "documentation": {
                      "identifier": "FlagSet.Uint64Var",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Uint64Var",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Uint64Var(p *uint64, name string, value uint64, usage string)\n```\n\nUint64Var defines a uint64 flag with specified name, default value, and usage string. The argument p points to a uint64 variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Uint64",
                    "documentation": {
                      "identifier": "FlagSet.Uint64",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Uint64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Uint64(name string, value uint64, usage string) *uint64\n```\n\nUint64 defines a uint64 flag with specified name, default value, and usage string. The return value is the address of a uint64 variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.StringVar",
                    "documentation": {
                      "identifier": "FlagSet.StringVar",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.StringVar",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) StringVar(p *string, name string, value string, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) StringVar(p *string, name string, value string, usage string)\n```\n\nStringVar defines a string flag with specified name, default value, and usage string. The argument p points to a string variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.String",
                    "documentation": {
                      "identifier": "FlagSet.String",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) String(name string, value string, usage string) *string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) String(name string, value string, usage string) *string\n```\n\nString defines a string flag with specified name, default value, and usage string. The return value is the address of a string variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Float64Var",
                    "documentation": {
                      "identifier": "FlagSet.Float64Var",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Float64Var",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Float64Var(p *float64, name string, value float64, usage string)\n```\n\nFloat64Var defines a float64 flag with specified name, default value, and usage string. The argument p points to a float64 variable in which to store the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Float64",
                    "documentation": {
                      "identifier": "FlagSet.Float64",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Float64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Float64(name string, value float64, usage string) *float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Float64(name string, value float64, usage string) *float64\n```\n\nFloat64 defines a float64 flag with specified name, default value, and usage string. The return value is the address of a float64 variable that stores the value of the flag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.DurationVar",
                    "documentation": {
                      "identifier": "FlagSet.DurationVar",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.DurationVar",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) DurationVar(p *time.Duration, name string, value time.Duration, usage string)\n```\n\nDurationVar defines a time.Duration flag with specified name, default value, and usage string. The argument p points to a time.Duration variable in which to store the value of the flag. The flag accepts a value acceptable to time.ParseDuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Duration",
                    "documentation": {
                      "identifier": "FlagSet.Duration",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Duration",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Duration(name string, value time.Duration, usage string) *time.Duration\n```\n\nDuration defines a time.Duration flag with specified name, default value, and usage string. The return value is the address of a time.Duration variable that stores the value of the flag. The flag accepts a value acceptable to time.ParseDuration. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Func",
                    "documentation": {
                      "identifier": "FlagSet.Func",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Func",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Func(name, usage string, fn func(string) error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Func(name, usage string, fn func(string) error)\n```\n\nFunc defines a flag with the specified name and usage string. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Var",
                    "documentation": {
                      "identifier": "FlagSet.Var",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Var",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Var(value Value, name string, usage string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Var(value Value, name string, usage string)\n```\n\nVar defines a flag with the specified name and usage string. The type and value of the flag are represented by the first argument, of type Value, which typically holds a user-defined implementation of Value. For instance, the caller could create a flag that turns a comma-separated string into a slice of strings by giving the slice the methods of Value; in particular, Set would decompose the comma-separated string into the slice. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.sprintf",
                    "documentation": {
                      "identifier": "FlagSet.sprintf",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.sprintf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) sprintf(format string, a ...interface{}) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) sprintf(format string, a ...interface{}) string\n```\n\nsprintf formats the message, prints it to output, and returns it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.failf",
                    "documentation": {
                      "identifier": "FlagSet.failf",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.failf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) failf(format string, a ...interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) failf(format string, a ...interface{}) error\n```\n\nfailf prints to standard error a formatted error and usage message and returns the error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.usage",
                    "documentation": {
                      "identifier": "FlagSet.usage",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.usage",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) usage()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) usage()\n```\n\nusage calls the Usage method for the flag set if one is specified, or the appropriate default usage function otherwise. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.parseOne",
                    "documentation": {
                      "identifier": "FlagSet.parseOne",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.parseOne",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) parseOne() (bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) parseOne() (bool, error)\n```\n\nparseOne parses one flag. It reports whether a flag was seen. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Parse",
                    "documentation": {
                      "identifier": "FlagSet.Parse",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Parse",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Parse(arguments []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Parse(arguments []string) error\n```\n\nParse parses flag definitions from the argument list, which should not include the command name. Must be called after all flags in the FlagSet are defined and before flags are accessed by the program. The return value will be ErrHelp if -help or -h were set but not defined. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Parsed",
                    "documentation": {
                      "identifier": "FlagSet.Parsed",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Parsed",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Parsed() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Parsed() bool\n```\n\nParsed reports whether f.Parse has been called. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/flag#FlagSet.Init",
                    "documentation": {
                      "identifier": "FlagSet.Init",
                      "newPage": false,
                      "searchKey": "flag.FlagSet.Init",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FlagSet) Init(name string, errorHandling ErrorHandling)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FlagSet) Init(name string, errorHandling ErrorHandling)\n```\n\nInit sets the name and error handling property for a flag set. By default, the zero FlagSet uses an empty name and the ContinueOnError error handling policy. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/flag#Flag",
              "documentation": {
                "identifier": "Flag",
                "newPage": false,
                "searchKey": "flag.Flag",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Flag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Flag struct {\n\tName     string // name as it appears on command line\n\tUsage    string // help message\n\tValue    Value  // value as set\n\tDefValue string // default value (as text); for usage message\n}\n```\n\nA Flag represents the state of a flag. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/flag#Lookup",
                    "documentation": {
                      "identifier": "Lookup",
                      "newPage": false,
                      "searchKey": "flag.Lookup",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Lookup(name string) *Flag"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Lookup(name string) *Flag\n```\n\nLookup returns the Flag structure of the named command-line flag, returning nil if none exists. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/flag#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/flag#numError",
              "documentation": {
                "identifier": "numError",
                "newPage": false,
                "searchKey": "flag.numError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func numError(err error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc numError(err error) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#sortFlags",
              "documentation": {
                "identifier": "sortFlags",
                "newPage": false,
                "searchKey": "flag.sortFlags",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sortFlags(flags map[string]*Flag) []*Flag"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sortFlags(flags map[string]*Flag) []*Flag\n```\n\nsortFlags returns the flags as a slice in lexicographical sorted order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#VisitAll",
              "documentation": {
                "identifier": "VisitAll",
                "newPage": false,
                "searchKey": "flag.VisitAll",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func VisitAll(fn func(*Flag))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc VisitAll(fn func(*Flag))\n```\n\nVisitAll visits the command-line flags in lexicographical order, calling fn for each. It visits all flags, even those not set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Visit",
              "documentation": {
                "identifier": "Visit",
                "newPage": false,
                "searchKey": "flag.Visit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Visit(fn func(*Flag))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Visit(fn func(*Flag))\n```\n\nVisit visits the command-line flags in lexicographical order, calling fn for each. It visits only those flags that have been set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Set",
              "documentation": {
                "identifier": "Set",
                "newPage": false,
                "searchKey": "flag.Set",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Set(name, value string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Set(name, value string) error\n```\n\nSet sets the value of the named command-line flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#isZeroValue",
              "documentation": {
                "identifier": "isZeroValue",
                "newPage": false,
                "searchKey": "flag.isZeroValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isZeroValue(flag *Flag, value string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isZeroValue(flag *Flag, value string) bool\n```\n\nisZeroValue determines whether the string represents the zero value for a flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#UnquoteUsage",
              "documentation": {
                "identifier": "UnquoteUsage",
                "newPage": false,
                "searchKey": "flag.UnquoteUsage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnquoteUsage(flag *Flag) (name string, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnquoteUsage(flag *Flag) (name string, usage string)\n```\n\nUnquoteUsage extracts a back-quoted name from the usage string for a flag and returns it and the un-quoted usage. Given \"a `name` to show\" it returns (\"name\", \"a name to show\"). If there are no back quotes, the name is an educated guess of the type of the flag's value, or the empty string if the flag is boolean. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#PrintDefaults",
              "documentation": {
                "identifier": "PrintDefaults",
                "newPage": false,
                "searchKey": "flag.PrintDefaults",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PrintDefaults()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PrintDefaults()\n```\n\nPrintDefaults prints, to standard error unless configured otherwise, a usage message showing the default settings of all defined command-line flags. For an integer valued flag x, the default output has the form \n\n```\n-x int\n\tusage-message-for-x (default 7)\n\n```\nThe usage message will appear on a separate line for anything but a bool flag with a one-byte name. For bool flags, the type is omitted and if the flag name is one byte the usage message appears on the same line. The parenthetical default is omitted if the default is the zero value for the type. The listed type, here int, can be changed by placing a back-quoted name in the flag's usage string; the first such item in the message is taken to be a parameter name to show in the message and the back quotes are stripped from the message when displayed. For instance, given \n\n```\nflag.String(\"I\", \"\", \"search `directory` for include files\")\n\n```\nthe output will be \n\n```\n-I directory\n\tsearch directory for include files.\n\n```\nTo change the destination for flag messages, call CommandLine.SetOutput. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#NFlag",
              "documentation": {
                "identifier": "NFlag",
                "newPage": false,
                "searchKey": "flag.NFlag",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NFlag() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NFlag() int\n```\n\nNFlag returns the number of command-line flags that have been set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Arg",
              "documentation": {
                "identifier": "Arg",
                "newPage": false,
                "searchKey": "flag.Arg",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Arg(i int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Arg(i int) string\n```\n\nArg returns the i'th command-line argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#NArg",
              "documentation": {
                "identifier": "NArg",
                "newPage": false,
                "searchKey": "flag.NArg",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NArg() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NArg() int\n```\n\nNArg is the number of arguments remaining after flags have been processed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Args",
              "documentation": {
                "identifier": "Args",
                "newPage": false,
                "searchKey": "flag.Args",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Args() []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Args() []string\n```\n\nArgs returns the non-flag command-line arguments. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#BoolVar",
              "documentation": {
                "identifier": "BoolVar",
                "newPage": false,
                "searchKey": "flag.BoolVar",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BoolVar(p *bool, name string, value bool, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BoolVar(p *bool, name string, value bool, usage string)\n```\n\nBoolVar defines a bool flag with specified name, default value, and usage string. The argument p points to a bool variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Bool",
              "documentation": {
                "identifier": "Bool",
                "newPage": false,
                "searchKey": "flag.Bool",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Bool(name string, value bool, usage string) *bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Bool(name string, value bool, usage string) *bool\n```\n\nBool defines a bool flag with specified name, default value, and usage string. The return value is the address of a bool variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#IntVar",
              "documentation": {
                "identifier": "IntVar",
                "newPage": false,
                "searchKey": "flag.IntVar",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IntVar(p *int, name string, value int, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IntVar(p *int, name string, value int, usage string)\n```\n\nIntVar defines an int flag with specified name, default value, and usage string. The argument p points to an int variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Int",
              "documentation": {
                "identifier": "Int",
                "newPage": false,
                "searchKey": "flag.Int",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int(name string, value int, usage string) *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int(name string, value int, usage string) *int\n```\n\nInt defines an int flag with specified name, default value, and usage string. The return value is the address of an int variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Int64Var",
              "documentation": {
                "identifier": "Int64Var",
                "newPage": false,
                "searchKey": "flag.Int64Var",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int64Var(p *int64, name string, value int64, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int64Var(p *int64, name string, value int64, usage string)\n```\n\nInt64Var defines an int64 flag with specified name, default value, and usage string. The argument p points to an int64 variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Int64",
              "documentation": {
                "identifier": "Int64",
                "newPage": false,
                "searchKey": "flag.Int64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int64(name string, value int64, usage string) *int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int64(name string, value int64, usage string) *int64\n```\n\nInt64 defines an int64 flag with specified name, default value, and usage string. The return value is the address of an int64 variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#UintVar",
              "documentation": {
                "identifier": "UintVar",
                "newPage": false,
                "searchKey": "flag.UintVar",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UintVar(p *uint, name string, value uint, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UintVar(p *uint, name string, value uint, usage string)\n```\n\nUintVar defines a uint flag with specified name, default value, and usage string. The argument p points to a uint variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Uint",
              "documentation": {
                "identifier": "Uint",
                "newPage": false,
                "searchKey": "flag.Uint",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Uint(name string, value uint, usage string) *uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Uint(name string, value uint, usage string) *uint\n```\n\nUint defines a uint flag with specified name, default value, and usage string. The return value is the address of a uint variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Uint64Var",
              "documentation": {
                "identifier": "Uint64Var",
                "newPage": false,
                "searchKey": "flag.Uint64Var",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Uint64Var(p *uint64, name string, value uint64, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Uint64Var(p *uint64, name string, value uint64, usage string)\n```\n\nUint64Var defines a uint64 flag with specified name, default value, and usage string. The argument p points to a uint64 variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Uint64",
              "documentation": {
                "identifier": "Uint64",
                "newPage": false,
                "searchKey": "flag.Uint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Uint64(name string, value uint64, usage string) *uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Uint64(name string, value uint64, usage string) *uint64\n```\n\nUint64 defines a uint64 flag with specified name, default value, and usage string. The return value is the address of a uint64 variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#StringVar",
              "documentation": {
                "identifier": "StringVar",
                "newPage": false,
                "searchKey": "flag.StringVar",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func StringVar(p *string, name string, value string, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc StringVar(p *string, name string, value string, usage string)\n```\n\nStringVar defines a string flag with specified name, default value, and usage string. The argument p points to a string variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#String",
              "documentation": {
                "identifier": "String",
                "newPage": false,
                "searchKey": "flag.String",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func String(name string, value string, usage string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc String(name string, value string, usage string) *string\n```\n\nString defines a string flag with specified name, default value, and usage string. The return value is the address of a string variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Float64Var",
              "documentation": {
                "identifier": "Float64Var",
                "newPage": false,
                "searchKey": "flag.Float64Var",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float64Var(p *float64, name string, value float64, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float64Var(p *float64, name string, value float64, usage string)\n```\n\nFloat64Var defines a float64 flag with specified name, default value, and usage string. The argument p points to a float64 variable in which to store the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Float64",
              "documentation": {
                "identifier": "Float64",
                "newPage": false,
                "searchKey": "flag.Float64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float64(name string, value float64, usage string) *float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float64(name string, value float64, usage string) *float64\n```\n\nFloat64 defines a float64 flag with specified name, default value, and usage string. The return value is the address of a float64 variable that stores the value of the flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#DurationVar",
              "documentation": {
                "identifier": "DurationVar",
                "newPage": false,
                "searchKey": "flag.DurationVar",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DurationVar(p *time.Duration, name string, value time.Duration, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DurationVar(p *time.Duration, name string, value time.Duration, usage string)\n```\n\nDurationVar defines a time.Duration flag with specified name, default value, and usage string. The argument p points to a time.Duration variable in which to store the value of the flag. The flag accepts a value acceptable to time.ParseDuration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Duration",
              "documentation": {
                "identifier": "Duration",
                "newPage": false,
                "searchKey": "flag.Duration",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Duration(name string, value time.Duration, usage string) *time.Duration"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Duration(name string, value time.Duration, usage string) *time.Duration\n```\n\nDuration defines a time.Duration flag with specified name, default value, and usage string. The return value is the address of a time.Duration variable that stores the value of the flag. The flag accepts a value acceptable to time.ParseDuration. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Func",
              "documentation": {
                "identifier": "Func",
                "newPage": false,
                "searchKey": "flag.Func",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Func(name, usage string, fn func(string) error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Func(name, usage string, fn func(string) error)\n```\n\nFunc defines a flag with the specified name and usage string. Each time the flag is seen, fn is called with the value of the flag. If fn returns a non-nil error, it will be treated as a flag value parsing error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Var",
              "documentation": {
                "identifier": "Var",
                "newPage": false,
                "searchKey": "flag.Var",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Var(value Value, name string, usage string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Var(value Value, name string, usage string)\n```\n\nVar defines a flag with the specified name and usage string. The type and value of the flag are represented by the first argument, of type Value, which typically holds a user-defined implementation of Value. For instance, the caller could create a flag that turns a comma-separated string into a slice of strings by giving the slice the methods of Value; in particular, Set would decompose the comma-separated string into the slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Parse",
              "documentation": {
                "identifier": "Parse",
                "newPage": false,
                "searchKey": "flag.Parse",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Parse()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Parse()\n```\n\nParse parses the command-line flags from os.Args[1:]. Must be called after all flags are defined and before flags are accessed by the program. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#Parsed",
              "documentation": {
                "identifier": "Parsed",
                "newPage": false,
                "searchKey": "flag.Parsed",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Parsed() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Parsed() bool\n```\n\nParsed reports whether the command-line flags have been parsed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "flag.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#commandLineUsage",
              "documentation": {
                "identifier": "commandLineUsage",
                "newPage": false,
                "searchKey": "flag.commandLineUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func commandLineUsage()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc commandLineUsage()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/flag#ResetForTesting",
              "documentation": {
                "identifier": "ResetForTesting",
                "newPage": false,
                "searchKey": "flag.ResetForTesting",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ResetForTesting(usage func())"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ResetForTesting(usage func())\n```\n\nResetForTesting clears all flag state and sets the usage function as directed. After calling ResetForTesting, parse errors in flag handling will not exit the program. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
