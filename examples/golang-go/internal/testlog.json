{
  "pathID": "/internal/testlog",
  "documentation": {
    "identifier": "testlog",
    "newPage": true,
    "searchKey": "internal/testlog",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package testlog"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package testlog provides a back-channel communication path between tests and package os, so that cmd/go can see which environment variables and files a test consults. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/testlog#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/testlog#panicOnExit0",
              "documentation": {
                "identifier": "panicOnExit0",
                "newPage": false,
                "searchKey": "testlog.panicOnExit0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var panicOnExit0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar panicOnExit0 struct {\n\tmu  sync.Mutex\n\tval bool\n}\n```\n\npanicOnExit0 is the flag used for PanicOnExit0. This uses a lock because the value can be cleared via a timer call that may race with calls to os.Exit \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testlog#logger",
              "documentation": {
                "identifier": "logger",
                "newPage": false,
                "searchKey": "testlog.logger",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var logger"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar logger atomic.Value\n```\n\nlogger is the current logger Interface. We use an atomic.Value in case test startup is racing with goroutines started during init. That must not cause a race detector failure, although it will still result in limited visibility into exactly what those goroutines do. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/testlog#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/testlog#Interface",
              "documentation": {
                "identifier": "Interface",
                "newPage": false,
                "searchKey": "testlog.Interface",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Interface interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Interface interface {\n\tGetenv(key string)\n\tStat(file string)\n\tOpen(file string)\n\tChdir(dir string)\n}\n```\n\nInterface is the interface required of test loggers. The os package will invoke the interface's methods to indicate that it is inspecting the given environment variables or files. Multiple goroutines may call these methods simultaneously. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/testlog#Logger",
                    "documentation": {
                      "identifier": "Logger",
                      "newPage": false,
                      "searchKey": "testlog.Logger",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Logger() Interface"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Logger() Interface\n```\n\nLogger returns the current test logger implementation. It returns nil if there is no logger. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/testlog#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/testlog#PanicOnExit0",
              "documentation": {
                "identifier": "PanicOnExit0",
                "newPage": false,
                "searchKey": "testlog.PanicOnExit0",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PanicOnExit0() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PanicOnExit0() bool\n```\n\nPanicOnExit0 reports whether to panic on a call to os.Exit(0). This is in the testlog package because, like other definitions in package testlog, it is a hook between the testing package and the os package. This is used to ensure that an early call to os.Exit(0) does not cause a test to pass. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testlog#SetPanicOnExit0",
              "documentation": {
                "identifier": "SetPanicOnExit0",
                "newPage": false,
                "searchKey": "testlog.SetPanicOnExit0",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SetPanicOnExit0(v bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SetPanicOnExit0(v bool)\n```\n\nSetPanicOnExit0 sets panicOnExit0 to v. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testlog#SetLogger",
              "documentation": {
                "identifier": "SetLogger",
                "newPage": false,
                "searchKey": "testlog.SetLogger",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func SetLogger(impl Interface)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SetLogger(impl Interface)\n```\n\nSetLogger sets the test logger implementation for the current process. It must be called only once, at process startup. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testlog#Getenv",
              "documentation": {
                "identifier": "Getenv",
                "newPage": false,
                "searchKey": "testlog.Getenv",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Getenv(name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Getenv(name string)\n```\n\nGetenv calls Logger().Getenv, if a logger has been set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testlog#Open",
              "documentation": {
                "identifier": "Open",
                "newPage": false,
                "searchKey": "testlog.Open",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Open(name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Open(name string)\n```\n\nOpen calls Logger().Open, if a logger has been set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testlog#Stat",
              "documentation": {
                "identifier": "Stat",
                "newPage": false,
                "searchKey": "testlog.Stat",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Stat(name string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Stat(name string)\n```\n\nStat calls Logger().Stat, if a logger has been set. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
