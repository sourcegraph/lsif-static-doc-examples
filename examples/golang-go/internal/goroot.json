{
  "pathID": "/internal/goroot",
  "documentation": {
    "identifier": "goroot",
    "newPage": true,
    "searchKey": "internal/goroot",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package goroot"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/goroot#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/goroot#gccgoSearch",
              "documentation": {
                "identifier": "gccgoSearch",
                "newPage": false,
                "searchKey": "goroot.gccgoSearch",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var gccgoSearch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar gccgoSearch gccgoDirs\n```\n\ngccgoSearch is used to check whether a gccgo package exists in the standard library. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/goroot#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/goroot#gccgoDirs",
              "documentation": {
                "identifier": "gccgoDirs",
                "newPage": false,
                "searchKey": "goroot.gccgoDirs",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type gccgoDirs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gccgoDirs struct {\n\tonce sync.Once\n\tdirs []string\n}\n```\n\ngccgoSearch holds the gccgo search directories. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/goroot#gccgoDirs.init.gc.go",
                    "documentation": {
                      "identifier": "gccgoDirs.init.gc.go",
                      "newPage": false,
                      "searchKey": "goroot.gccgoDirs.init",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (gd *gccgoDirs) init()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (gd *gccgoDirs) init()\n```\n\ninit finds the gccgo search directories. If this fails it leaves dirs == nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/goroot#gccgoDirs.isStandard",
                    "documentation": {
                      "identifier": "gccgoDirs.isStandard",
                      "newPage": false,
                      "searchKey": "goroot.gccgoDirs.isStandard",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (gd *gccgoDirs) isStandard(path string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (gd *gccgoDirs) isStandard(path string) bool\n```\n\nisStandard reports whether path is a standard library for gccgo. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/goroot#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/goroot#IsStandardPackage",
              "documentation": {
                "identifier": "IsStandardPackage",
                "newPage": false,
                "searchKey": "goroot.IsStandardPackage",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsStandardPackage(goroot, compiler, path string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsStandardPackage(goroot, compiler, path string) bool\n```\n\nIsStandardPackage reports whether path is a standard package, given goroot and compiler. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
