{
  "pathID": "/internal/unsafeheader_test",
  "documentation": {
    "identifier": "unsafeheader_test",
    "newPage": true,
    "searchKey": "internal/unsafeheader_test",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package unsafeheader_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/unsafeheader_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/unsafeheader_test#unsafePointerType",
              "documentation": {
                "identifier": "unsafePointerType",
                "newPage": false,
                "searchKey": "unsafeheader_test.unsafePointerType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var unsafePointerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unsafePointerType = reflect.TypeOf(unsafe.Pointer(nil))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/unsafeheader_test#uintptrType",
              "documentation": {
                "identifier": "uintptrType",
                "newPage": false,
                "searchKey": "unsafeheader_test.uintptrType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uintptrType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uintptrType = reflect.TypeOf(uintptr(0))\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/unsafeheader_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/unsafeheader_test#TestTypeMatchesReflectType",
              "documentation": {
                "identifier": "TestTypeMatchesReflectType",
                "newPage": false,
                "searchKey": "unsafeheader_test.TestTypeMatchesReflectType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTypeMatchesReflectType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTypeMatchesReflectType(t *testing.T)\n```\n\nTestTypeMatchesReflectType ensures that the name and layout of the unsafeheader types matches the corresponding Header types in the reflect package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/unsafeheader_test#testHeaderMatchesReflect",
              "documentation": {
                "identifier": "testHeaderMatchesReflect",
                "newPage": false,
                "searchKey": "unsafeheader_test.testHeaderMatchesReflect",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHeaderMatchesReflect(t *testing.T, header, reflectHeader interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHeaderMatchesReflect(t *testing.T, header, reflectHeader interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/unsafeheader_test#typeCompatible",
              "documentation": {
                "identifier": "typeCompatible",
                "newPage": false,
                "searchKey": "unsafeheader_test.typeCompatible",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func typeCompatible(t, rt reflect.Type) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc typeCompatible(t, rt reflect.Type) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/unsafeheader_test#TestWriteThroughHeader",
              "documentation": {
                "identifier": "TestWriteThroughHeader",
                "newPage": false,
                "searchKey": "unsafeheader_test.TestWriteThroughHeader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteThroughHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteThroughHeader(t *testing.T)\n```\n\nTestWriteThroughHeader ensures that the headers in the unsafeheader package can successfully mutate variables of the corresponding built-in types. \n\nThis test is expected to fail under -race (which implicitly enables -d=checkptr) if the runtime views the header types as incompatible with the underlying built-in types. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
