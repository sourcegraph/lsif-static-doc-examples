{
  "pathID": "/internal/reflectlite",
  "documentation": {
    "identifier": "reflectlite",
    "newPage": true,
    "searchKey": "internal/reflectlite",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package reflectlite"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package reflectlite implements lightweight version of reflect, not using any package except for \"runtime\" and \"unsafe\". \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/reflectlite#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/reflectlite#Invalid",
              "documentation": {
                "identifier": "Invalid",
                "newPage": false,
                "searchKey": "reflectlite.Invalid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Invalid"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Invalid Kind = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Bool",
              "documentation": {
                "identifier": "Bool",
                "newPage": false,
                "searchKey": "reflectlite.Bool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Int",
              "documentation": {
                "identifier": "Int",
                "newPage": false,
                "searchKey": "reflectlite.Int",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Int8",
              "documentation": {
                "identifier": "Int8",
                "newPage": false,
                "searchKey": "reflectlite.Int8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Int8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Int16",
              "documentation": {
                "identifier": "Int16",
                "newPage": false,
                "searchKey": "reflectlite.Int16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Int16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Int16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Int32",
              "documentation": {
                "identifier": "Int32",
                "newPage": false,
                "searchKey": "reflectlite.Int32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Int64",
              "documentation": {
                "identifier": "Int64",
                "newPage": false,
                "searchKey": "reflectlite.Int64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Uint",
              "documentation": {
                "identifier": "Uint",
                "newPage": false,
                "searchKey": "reflectlite.Uint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Uint\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Uint8",
              "documentation": {
                "identifier": "Uint8",
                "newPage": false,
                "searchKey": "reflectlite.Uint8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Uint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Uint16",
              "documentation": {
                "identifier": "Uint16",
                "newPage": false,
                "searchKey": "reflectlite.Uint16",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Uint16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Uint32",
              "documentation": {
                "identifier": "Uint32",
                "newPage": false,
                "searchKey": "reflectlite.Uint32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Uint64",
              "documentation": {
                "identifier": "Uint64",
                "newPage": false,
                "searchKey": "reflectlite.Uint64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Uintptr",
              "documentation": {
                "identifier": "Uintptr",
                "newPage": false,
                "searchKey": "reflectlite.Uintptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Float32",
              "documentation": {
                "identifier": "Float32",
                "newPage": false,
                "searchKey": "reflectlite.Float32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Float64",
              "documentation": {
                "identifier": "Float64",
                "newPage": false,
                "searchKey": "reflectlite.Float64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Complex64",
              "documentation": {
                "identifier": "Complex64",
                "newPage": false,
                "searchKey": "reflectlite.Complex64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Complex64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Complex64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Complex128",
              "documentation": {
                "identifier": "Complex128",
                "newPage": false,
                "searchKey": "reflectlite.Complex128",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Complex128"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Complex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Array",
              "documentation": {
                "identifier": "Array",
                "newPage": false,
                "searchKey": "reflectlite.Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Array"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Array\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Chan",
              "documentation": {
                "identifier": "Chan",
                "newPage": false,
                "searchKey": "reflectlite.Chan",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Chan"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Chan\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Func",
              "documentation": {
                "identifier": "Func",
                "newPage": false,
                "searchKey": "reflectlite.Func",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Func"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Func\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Interface",
              "documentation": {
                "identifier": "Interface",
                "newPage": false,
                "searchKey": "reflectlite.Interface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Interface\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Map",
              "documentation": {
                "identifier": "Map",
                "newPage": false,
                "searchKey": "reflectlite.Map",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Map"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Map\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Ptr",
              "documentation": {
                "identifier": "Ptr",
                "newPage": false,
                "searchKey": "reflectlite.Ptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Ptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Ptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Slice",
              "documentation": {
                "identifier": "Slice",
                "newPage": false,
                "searchKey": "reflectlite.Slice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Slice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Slice\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#String",
              "documentation": {
                "identifier": "String",
                "newPage": false,
                "searchKey": "reflectlite.String",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const String"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst String\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Struct",
              "documentation": {
                "identifier": "Struct",
                "newPage": false,
                "searchKey": "reflectlite.Struct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Struct\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#UnsafePointer",
              "documentation": {
                "identifier": "UnsafePointer",
                "newPage": false,
                "searchKey": "reflectlite.UnsafePointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnsafePointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnsafePointer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#tflagUncommon",
              "documentation": {
                "identifier": "tflagUncommon",
                "newPage": false,
                "searchKey": "reflectlite.tflagUncommon",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tflagUncommon"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tflagUncommon tflag = 1 << 0\n```\n\ntflagUncommon means that there is a pointer, *uncommonType, just beyond the outer type structure. \n\nFor example, if t.Kind() == Struct and t.tflag&tflagUncommon != 0, then t has uncommonType data and it can be accessed as: \n\n```\ntype tUncommon struct {\n\tstructType\n\tu uncommonType\n}\nu := &(*tUncommon)(unsafe.Pointer(t)).u\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#tflagExtraStar",
              "documentation": {
                "identifier": "tflagExtraStar",
                "newPage": false,
                "searchKey": "reflectlite.tflagExtraStar",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tflagExtraStar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tflagExtraStar tflag = 1 << 1\n```\n\ntflagExtraStar means the name in the str field has an extraneous '*' prefix. This is because for most types T in a program, the type *T also exists and reusing the str data saves binary size. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#tflagNamed",
              "documentation": {
                "identifier": "tflagNamed",
                "newPage": false,
                "searchKey": "reflectlite.tflagNamed",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tflagNamed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tflagNamed tflag = 1 << 2\n```\n\ntflagNamed means the type has a name. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#tflagRegularMemory",
              "documentation": {
                "identifier": "tflagRegularMemory",
                "newPage": false,
                "searchKey": "reflectlite.tflagRegularMemory",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tflagRegularMemory"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tflagRegularMemory tflag = 1 << 3\n```\n\ntflagRegularMemory means that equal and hash functions can treat this type as a single region of t.size bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#recvDir",
              "documentation": {
                "identifier": "recvDir",
                "newPage": false,
                "searchKey": "reflectlite.recvDir",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const recvDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst recvDir chanDir = 1 << iota // <-chan\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#sendDir",
              "documentation": {
                "identifier": "sendDir",
                "newPage": false,
                "searchKey": "reflectlite.sendDir",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const sendDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sendDir // chan<-\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#bothDir",
              "documentation": {
                "identifier": "bothDir",
                "newPage": false,
                "searchKey": "reflectlite.bothDir",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const bothDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst bothDir = recvDir | sendDir // chan\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#kindDirectIface",
              "documentation": {
                "identifier": "kindDirectIface",
                "newPage": false,
                "searchKey": "reflectlite.kindDirectIface",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const kindDirectIface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst kindDirectIface = 1 << 5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#kindGCProg",
              "documentation": {
                "identifier": "kindGCProg",
                "newPage": false,
                "searchKey": "reflectlite.kindGCProg",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const kindGCProg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst kindGCProg = 1 << 6 // Type.gc points to GC program\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#kindMask",
              "documentation": {
                "identifier": "kindMask",
                "newPage": false,
                "searchKey": "reflectlite.kindMask",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const kindMask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst kindMask = (1 << 5) - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#ptrSize",
              "documentation": {
                "identifier": "ptrSize",
                "newPage": false,
                "searchKey": "reflectlite.ptrSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ptrSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ptrSize = 4 << (^uintptr(0) >> 63) // unsafe.Sizeof(uintptr(0)) but an ideal const\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagKindWidth",
              "documentation": {
                "identifier": "flagKindWidth",
                "newPage": false,
                "searchKey": "reflectlite.flagKindWidth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagKindWidth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagKindWidth = 5 // there are 27 kinds\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagKindMask",
              "documentation": {
                "identifier": "flagKindMask",
                "newPage": false,
                "searchKey": "reflectlite.flagKindMask",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagKindMask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagKindMask flag = 1<<flagKindWidth - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagStickyRO",
              "documentation": {
                "identifier": "flagStickyRO",
                "newPage": false,
                "searchKey": "reflectlite.flagStickyRO",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagStickyRO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagStickyRO flag = 1 << 5\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagEmbedRO",
              "documentation": {
                "identifier": "flagEmbedRO",
                "newPage": false,
                "searchKey": "reflectlite.flagEmbedRO",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagEmbedRO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagEmbedRO flag = 1 << 6\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagIndir",
              "documentation": {
                "identifier": "flagIndir",
                "newPage": false,
                "searchKey": "reflectlite.flagIndir",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagIndir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagIndir flag = 1 << 7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagAddr",
              "documentation": {
                "identifier": "flagAddr",
                "newPage": false,
                "searchKey": "reflectlite.flagAddr",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagAddr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagAddr flag = 1 << 8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagMethod",
              "documentation": {
                "identifier": "flagMethod",
                "newPage": false,
                "searchKey": "reflectlite.flagMethod",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagMethod"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagMethod flag = 1 << 9\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagMethodShift",
              "documentation": {
                "identifier": "flagMethodShift",
                "newPage": false,
                "searchKey": "reflectlite.flagMethodShift",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagMethodShift"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagMethodShift = 10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flagRO",
              "documentation": {
                "identifier": "flagRO",
                "newPage": false,
                "searchKey": "reflectlite.flagRO",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const flagRO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst flagRO flag = flagStickyRO | flagEmbedRO\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/reflectlite#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/reflectlite#kindNames",
              "documentation": {
                "identifier": "kindNames",
                "newPage": false,
                "searchKey": "reflectlite.kindNames",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var kindNames"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar kindNames = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#dummy",
              "documentation": {
                "identifier": "dummy",
                "newPage": false,
                "searchKey": "reflectlite.dummy",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dummy"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dummy struct {\n\tb bool\n\tx interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#pinUnexpMethI",
              "documentation": {
                "identifier": "pinUnexpMethI",
                "newPage": false,
                "searchKey": "reflectlite.pinUnexpMethI",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pinUnexpMethI"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pinUnexpMethI = pinUnexpMeth(EmbedWithUnexpMeth{})\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/reflectlite#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/reflectlite#Type",
              "documentation": {
                "identifier": "Type",
                "newPage": false,
                "searchKey": "reflectlite.Type",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Type interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Type interface {\n\n\t// Name returns the type's name within its package for a defined type.\n\t// For other (non-defined) types it returns the empty string.\n\tName() string\n\n\t// PkgPath returns a defined type's package path, that is, the import path\n\t// that uniquely identifies the package, such as \"encoding/base64\".\n\t// If the type was predeclared (string, error) or not defined (*T, struct{},\n\t// []int, or A where A is an alias for a non-defined type), the package path\n\t// will be the empty string.\n\tPkgPath() string\n\n\t// Size returns the number of bytes needed to store\n\t// a value of the given type; it is analogous to unsafe.Sizeof.\n\tSize() uintptr\n\n\t// Kind returns the specific kind of this type.\n\tKind() Kind\n\n\t// Implements reports whether the type implements the interface type u.\n\tImplements(u Type) bool\n\n\t// AssignableTo reports whether a value of the type is assignable to type u.\n\tAssignableTo(u Type) bool\n\n\t// Comparable reports whether values of this type are comparable.\n\tComparable() bool\n\n\t// String returns a string representation of the type.\n\t// The string representation may use shortened package names\n\t// (e.g., base64 instead of \"encoding/base64\") and is not\n\t// guaranteed to be unique among types. To test for type identity,\n\t// compare the Types directly.\n\tString() string\n\n\t// Elem returns a type's element type.\n\t// It panics if the type's Kind is not Ptr.\n\tElem() Type\n\n\tcommon() *rtype\n\tuncommon() *uncommonType\n}\n```\n\nType is the representation of a Go type. \n\nNot all methods apply to all kinds of types. Restrictions, if any, are noted in the documentation for each method. Use the Kind method to find out the kind of type before calling kind-specific methods. Calling a method inappropriate to the kind of type causes a run-time panic. \n\nType values are comparable, such as with the == operator, so they can be used as map keys. Two Type values are equal if they represent identical types. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#TypeOf",
                    "documentation": {
                      "identifier": "TypeOf",
                      "newPage": false,
                      "searchKey": "reflectlite.TypeOf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func TypeOf(i interface{}) Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc TypeOf(i interface{}) Type\n```\n\nTypeOf returns the reflection Type that represents the dynamic type of i. If i is a nil interface value, TypeOf returns nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#toType",
                    "documentation": {
                      "identifier": "toType",
                      "newPage": false,
                      "searchKey": "reflectlite.toType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func toType(t *rtype) Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc toType(t *rtype) Type\n```\n\ntoType converts from a *rtype to a Type that can be returned to the client of package reflect. In gc, the only concern is that a nil *rtype must be replaced by a nil Type, but in gccgo this function takes care of ensuring that multiple *rtype for the same type are coalesced into a single Type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#TField",
                    "documentation": {
                      "identifier": "TField",
                      "newPage": false,
                      "searchKey": "reflectlite.TField",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func TField(typ Type, i int) Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc TField(typ Type, i int) Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#StructFieldType",
                    "documentation": {
                      "identifier": "StructFieldType",
                      "newPage": false,
                      "searchKey": "reflectlite.StructFieldType",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func StructFieldType(t *structType, i int) Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc StructFieldType(t *structType, i int) Type\n```\n\nField returns the i'th struct field. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Kind",
              "documentation": {
                "identifier": "Kind",
                "newPage": false,
                "searchKey": "reflectlite.Kind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Kind uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Kind uint\n```\n\nA Kind represents the specific kind of type that a Type represents. The zero Kind is not a valid kind. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Kind.String",
                    "documentation": {
                      "identifier": "Kind.String",
                      "newPage": false,
                      "searchKey": "reflectlite.Kind.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k Kind) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k Kind) String() string\n```\n\nString returns the name of k. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#tflag",
              "documentation": {
                "identifier": "tflag",
                "newPage": false,
                "searchKey": "reflectlite.tflag",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type tflag uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tflag uint8\n```\n\ntflag is used by an rtype to signal what extra type information is available in the memory directly following the rtype value. \n\ntflag values must be kept in sync with copies in: \n\n```\ncmd/compile/internal/gc/reflect.go\ncmd/link/internal/ld/decodesym.go\nruntime/type.go\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#rtype",
              "documentation": {
                "identifier": "rtype",
                "newPage": false,
                "searchKey": "reflectlite.rtype",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rtype struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rtype struct {\n\tsize       uintptr\n\tptrdata    uintptr // number of bytes in the type that can contain pointers\n\thash       uint32  // hash of type; avoids computation in hash tables\n\ttflag      tflag   // extra type information flags\n\talign      uint8   // alignment of variable with this type\n\tfieldAlign uint8   // alignment of struct field with this type\n\tkind       uint8   // enumeration for C\n\t// function for comparing objects of this type\n\t// (ptr to object A, ptr to object B) -> ==?\n\tequal     func(unsafe.Pointer, unsafe.Pointer) bool\n\tgcdata    *byte   // garbage collection data\n\tstr       nameOff // string form\n\tptrToThis typeOff // type for pointer to this type, may be zero\n}\n```\n\nrtype is the common implementation of most values. It is embedded in other struct types. \n\nrtype must be kept in sync with ../runtime/type.go:/^type._type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.nameOff",
                    "documentation": {
                      "identifier": "rtype.nameOff",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.nameOff",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) nameOff(off nameOff) name"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) nameOff(off nameOff) name\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.typeOff",
                    "documentation": {
                      "identifier": "rtype.typeOff",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.typeOff",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) typeOff(off typeOff) *rtype"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) typeOff(off typeOff) *rtype\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.uncommon",
                    "documentation": {
                      "identifier": "rtype.uncommon",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.uncommon",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) uncommon() *uncommonType"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) uncommon() *uncommonType\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.String",
                    "documentation": {
                      "identifier": "rtype.String",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.String",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) String() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Size",
                    "documentation": {
                      "identifier": "rtype.Size",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Size",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Size() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Size() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Kind",
                    "documentation": {
                      "identifier": "rtype.Kind",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Kind",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Kind() Kind"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Kind() Kind\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.pointers",
                    "documentation": {
                      "identifier": "rtype.pointers",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.pointers",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) pointers() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) pointers() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.common",
                    "documentation": {
                      "identifier": "rtype.common",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.common",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) common() *rtype"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) common() *rtype\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.exportedMethods",
                    "documentation": {
                      "identifier": "rtype.exportedMethods",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.exportedMethods",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) exportedMethods() []method"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) exportedMethods() []method\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.NumMethod",
                    "documentation": {
                      "identifier": "rtype.NumMethod",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.NumMethod",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) NumMethod() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) NumMethod() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.PkgPath",
                    "documentation": {
                      "identifier": "rtype.PkgPath",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.PkgPath",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) PkgPath() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) PkgPath() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.hasName",
                    "documentation": {
                      "identifier": "rtype.hasName",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.hasName",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) hasName() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) hasName() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Name",
                    "documentation": {
                      "identifier": "rtype.Name",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Name",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.chanDir",
                    "documentation": {
                      "identifier": "rtype.chanDir",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.chanDir",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) chanDir() chanDir"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) chanDir() chanDir\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Elem",
                    "documentation": {
                      "identifier": "rtype.Elem",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Elem",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Elem() Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Elem() Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.In",
                    "documentation": {
                      "identifier": "rtype.In",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.In",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) In(i int) Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) In(i int) Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Key",
                    "documentation": {
                      "identifier": "rtype.Key",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Key",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Key() Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Key() Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Len",
                    "documentation": {
                      "identifier": "rtype.Len",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Len",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.NumField",
                    "documentation": {
                      "identifier": "rtype.NumField",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.NumField",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) NumField() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) NumField() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.NumIn",
                    "documentation": {
                      "identifier": "rtype.NumIn",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.NumIn",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) NumIn() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) NumIn() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.NumOut",
                    "documentation": {
                      "identifier": "rtype.NumOut",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.NumOut",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) NumOut() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) NumOut() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Out",
                    "documentation": {
                      "identifier": "rtype.Out",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Out",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Out(i int) Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Out(i int) Type\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Implements",
                    "documentation": {
                      "identifier": "rtype.Implements",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Implements",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Implements(u Type) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Implements(u Type) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.AssignableTo",
                    "documentation": {
                      "identifier": "rtype.AssignableTo",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.AssignableTo",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) AssignableTo(u Type) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) AssignableTo(u Type) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#rtype.Comparable",
                    "documentation": {
                      "identifier": "rtype.Comparable",
                      "newPage": false,
                      "searchKey": "reflectlite.rtype.Comparable",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *rtype) Comparable() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *rtype) Comparable() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#method",
              "documentation": {
                "identifier": "method",
                "newPage": false,
                "searchKey": "reflectlite.method",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type method struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype method struct {\n\tname nameOff // name of method\n\tmtyp typeOff // method type (without receiver)\n\tifn  textOff // fn used in interface call (one-word receiver)\n\ttfn  textOff // fn used for normal method call\n}\n```\n\nMethod on non-interface type \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#uncommonType",
              "documentation": {
                "identifier": "uncommonType",
                "newPage": false,
                "searchKey": "reflectlite.uncommonType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type uncommonType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype uncommonType struct {\n\tpkgPath nameOff // import path; empty for built-in types like int, string\n\tmcount  uint16  // number of methods\n\txcount  uint16  // number of exported methods\n\tmoff    uint32  // offset from this uncommontype to [mcount]method\n\t_       uint32  // unused\n}\n```\n\nuncommonType is present only for defined types or types with methods (if T is a defined type, the uncommonTypes for T and *T have methods). Using a pointer to this struct reduces the overall size required to describe a non-defined type with no methods. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#uncommonType.methods",
                    "documentation": {
                      "identifier": "uncommonType.methods",
                      "newPage": false,
                      "searchKey": "reflectlite.uncommonType.methods",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *uncommonType) methods() []method"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *uncommonType) methods() []method\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#uncommonType.exportedMethods",
                    "documentation": {
                      "identifier": "uncommonType.exportedMethods",
                      "newPage": false,
                      "searchKey": "reflectlite.uncommonType.exportedMethods",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *uncommonType) exportedMethods() []method"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *uncommonType) exportedMethods() []method\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#chanDir",
              "documentation": {
                "identifier": "chanDir",
                "newPage": false,
                "searchKey": "reflectlite.chanDir",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type chanDir int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype chanDir int\n```\n\nchanDir represents a channel type's direction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#arrayType",
              "documentation": {
                "identifier": "arrayType",
                "newPage": false,
                "searchKey": "reflectlite.arrayType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type arrayType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype arrayType struct {\n\trtype\n\telem  *rtype // array element type\n\tslice *rtype // slice type\n\tlen   uintptr\n}\n```\n\narrayType represents a fixed array type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#chanType",
              "documentation": {
                "identifier": "chanType",
                "newPage": false,
                "searchKey": "reflectlite.chanType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type chanType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype chanType struct {\n\trtype\n\telem *rtype  // channel element type\n\tdir  uintptr // channel direction (chanDir)\n}\n```\n\nchanType represents a channel type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#funcType",
              "documentation": {
                "identifier": "funcType",
                "newPage": false,
                "searchKey": "reflectlite.funcType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type funcType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype funcType struct {\n\trtype\n\tinCount  uint16\n\toutCount uint16 // top bit is set if last input parameter is ...\n}\n```\n\nfuncType represents a function type. \n\nA *rtype for each in and out parameter is stored in an array that directly follows the funcType (and possibly its uncommonType). So a function type with one method, one input, and one output is: \n\n```\nstruct {\n\tfuncType\n\tuncommonType\n\t[2]*rtype    // [0] is in, [1] is out\n}\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#funcType.in",
                    "documentation": {
                      "identifier": "funcType.in",
                      "newPage": false,
                      "searchKey": "reflectlite.funcType.in",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *funcType) in() []*rtype"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *funcType) in() []*rtype\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#funcType.out",
                    "documentation": {
                      "identifier": "funcType.out",
                      "newPage": false,
                      "searchKey": "reflectlite.funcType.out",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *funcType) out() []*rtype"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *funcType) out() []*rtype\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#imethod",
              "documentation": {
                "identifier": "imethod",
                "newPage": false,
                "searchKey": "reflectlite.imethod",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type imethod struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype imethod struct {\n\tname nameOff // name of method\n\ttyp  typeOff // .(*FuncType) underneath\n}\n```\n\nimethod represents a method on an interface type \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#interfaceType",
              "documentation": {
                "identifier": "interfaceType",
                "newPage": false,
                "searchKey": "reflectlite.interfaceType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type interfaceType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype interfaceType struct {\n\trtype\n\tpkgPath name      // import path\n\tmethods []imethod // sorted by hash\n}\n```\n\ninterfaceType represents an interface type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#interfaceType.NumMethod",
                    "documentation": {
                      "identifier": "interfaceType.NumMethod",
                      "newPage": false,
                      "searchKey": "reflectlite.interfaceType.NumMethod",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *interfaceType) NumMethod() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *interfaceType) NumMethod() int\n```\n\nNumMethod returns the number of interface methods in the type's method set. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#mapType",
              "documentation": {
                "identifier": "mapType",
                "newPage": false,
                "searchKey": "reflectlite.mapType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapType struct {\n\trtype\n\tkey    *rtype // map key type\n\telem   *rtype // map element (value) type\n\tbucket *rtype // internal bucket structure\n\t// function for hashing keys (ptr to key, seed) -> hash\n\thasher     func(unsafe.Pointer, uintptr) uintptr\n\tkeysize    uint8  // size of key slot\n\tvaluesize  uint8  // size of value slot\n\tbucketsize uint16 // size of bucket\n\tflags      uint32\n}\n```\n\nmapType represents a map type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#ptrType",
              "documentation": {
                "identifier": "ptrType",
                "newPage": false,
                "searchKey": "reflectlite.ptrType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ptrType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ptrType struct {\n\trtype\n\telem *rtype // pointer element (pointed at) type\n}\n```\n\nptrType represents a pointer type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#sliceType",
              "documentation": {
                "identifier": "sliceType",
                "newPage": false,
                "searchKey": "reflectlite.sliceType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sliceType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sliceType struct {\n\trtype\n\telem *rtype // slice element type\n}\n```\n\nsliceType represents a slice type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#structField",
              "documentation": {
                "identifier": "structField",
                "newPage": false,
                "searchKey": "reflectlite.structField",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type structField struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structField struct {\n\tname        name    // name is always non-empty\n\ttyp         *rtype  // type of field\n\toffsetEmbed uintptr // byte offset of field<<1 | isEmbedded\n}\n```\n\nStruct field \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#structField.offset",
                    "documentation": {
                      "identifier": "structField.offset",
                      "newPage": false,
                      "searchKey": "reflectlite.structField.offset",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *structField) offset() uintptr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *structField) offset() uintptr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#structField.embedded",
                    "documentation": {
                      "identifier": "structField.embedded",
                      "newPage": false,
                      "searchKey": "reflectlite.structField.embedded",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *structField) embedded() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *structField) embedded() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#structType",
              "documentation": {
                "identifier": "structType",
                "newPage": false,
                "searchKey": "reflectlite.structType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type structType struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structType struct {\n\trtype\n\tpkgPath name\n\tfields  []structField // sorted by offset\n}\n```\n\nstructType represents a struct type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#name",
              "documentation": {
                "identifier": "name",
                "newPage": false,
                "searchKey": "reflectlite.name",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type name struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype name struct {\n\tbytes *byte\n}\n```\n\nname is an encoded type name with optional extra data. \n\nThe first byte is a bit field containing: \n\n```\n1<<0 the name is exported\n1<<1 tag data follows the name\n1<<2 pkgPath nameOff follows the name and tag\n\n```\nThe next two bytes are the data length: \n\n```\nl := uint16(data[1])<<8 | uint16(data[2])\n\n```\nBytes [3:3+l] are the string data. \n\nIf tag data follows then bytes 3+l and 3+l+1 are the tag length, with the data following. \n\nIf the import path follows, then 4 bytes at the end of the data form a nameOff. The import path is only set for concrete methods that are defined in a different package than their type. \n\nIf a name starts with \"*\", then the exported bit represents whether the pointed to type is exported. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.data",
                    "documentation": {
                      "identifier": "name.data",
                      "newPage": false,
                      "searchKey": "reflectlite.name.data",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) data(off int, whySafe string) *byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) data(off int, whySafe string) *byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.isExported",
                    "documentation": {
                      "identifier": "name.isExported",
                      "newPage": false,
                      "searchKey": "reflectlite.name.isExported",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) isExported() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) isExported() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.hasTag",
                    "documentation": {
                      "identifier": "name.hasTag",
                      "newPage": false,
                      "searchKey": "reflectlite.name.hasTag",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) hasTag() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) hasTag() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.readVarint",
                    "documentation": {
                      "identifier": "name.readVarint",
                      "newPage": false,
                      "searchKey": "reflectlite.name.readVarint",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) readVarint(off int) (int, int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) readVarint(off int) (int, int)\n```\n\nreadVarint parses a varint as encoded by encoding/binary. It returns the number of encoded bytes and the encoded value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.name",
                    "documentation": {
                      "identifier": "name.name",
                      "newPage": false,
                      "searchKey": "reflectlite.name.name",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) name() (s string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) name() (s string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.tag",
                    "documentation": {
                      "identifier": "name.tag",
                      "newPage": false,
                      "searchKey": "reflectlite.name.tag",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) tag() (s string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) tag() (s string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#name.pkgPath",
                    "documentation": {
                      "identifier": "name.pkgPath",
                      "newPage": false,
                      "searchKey": "reflectlite.name.pkgPath",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n name) pkgPath() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n name) pkgPath() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#nameOff",
              "documentation": {
                "identifier": "nameOff",
                "newPage": false,
                "searchKey": "reflectlite.nameOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nameOff int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nameOff int32 // offset to a name\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#typeOff",
              "documentation": {
                "identifier": "typeOff",
                "newPage": false,
                "searchKey": "reflectlite.typeOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeOff int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeOff int32 // offset to an *rtype\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#textOff",
              "documentation": {
                "identifier": "textOff",
                "newPage": false,
                "searchKey": "reflectlite.textOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type textOff int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype textOff int32 // offset from top of text section\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#structTypeUncommon",
              "documentation": {
                "identifier": "structTypeUncommon",
                "newPage": false,
                "searchKey": "reflectlite.structTypeUncommon",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type structTypeUncommon struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structTypeUncommon struct {\n\tstructType\n\tu uncommonType\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Value",
              "documentation": {
                "identifier": "Value",
                "newPage": false,
                "searchKey": "reflectlite.Value",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Value struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Value struct {\n\t// typ holds the type of the value represented by a Value.\n\ttyp *rtype\n\n\t// Pointer-valued data or, if flagIndir is set, pointer to data.\n\t// Valid when either flagIndir is set or typ.pointers() is true.\n\tptr unsafe.Pointer\n\n\t// flag holds metadata about the value.\n\t// The lowest bits are flag bits:\n\t//\t- flagStickyRO: obtained via unexported not embedded field, so read-only\n\t//\t- flagEmbedRO: obtained via unexported embedded field, so read-only\n\t//\t- flagIndir: val holds a pointer to the data\n\t//\t- flagAddr: v.CanAddr is true (implies flagIndir)\n\t// Value cannot represent method values.\n\t// The next five bits give the Kind of the value.\n\t// This repeats typ.Kind() except for method values.\n\t// The remaining 23+ bits give a method number for method values.\n\t// If flag.kind() != Func, code can assume that flagMethod is unset.\n\t// If ifaceIndir(typ), code can assume that flagIndir is set.\n\tflag\n}\n```\n\nValue is the reflection interface to a Go value. \n\nNot all methods apply to all kinds of values. Restrictions, if any, are noted in the documentation for each method. Use the Kind method to find out the kind of value before calling kind-specific methods. Calling a method inappropriate to the kind of type causes a run time panic. \n\nThe zero Value represents no value. Its IsValid method returns false, its Kind method returns Invalid, its String method returns \"<invalid Value>\", and all other methods panic. Most functions and methods never return an invalid value. If one does, its documentation states the conditions explicitly. \n\nA Value can be used concurrently by multiple goroutines provided that the underlying Go value can be used concurrently for the equivalent direct operations. \n\nTo compare two Values, compare the results of the Interface method. Using == on two Values does not compare the underlying values they represent. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#unpackEface",
                    "documentation": {
                      "identifier": "unpackEface",
                      "newPage": false,
                      "searchKey": "reflectlite.unpackEface",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func unpackEface(i interface{}) Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc unpackEface(i interface{}) Value\n```\n\nunpackEface converts the empty interface i to a Value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#ValueOf",
                    "documentation": {
                      "identifier": "ValueOf",
                      "newPage": false,
                      "searchKey": "reflectlite.ValueOf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ValueOf(i interface{}) Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ValueOf(i interface{}) Value\n```\n\nValueOf returns a new Value initialized to the concrete value stored in the interface i. ValueOf(nil) returns the zero Value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Field",
                    "documentation": {
                      "identifier": "Field",
                      "newPage": false,
                      "searchKey": "reflectlite.Field",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Field(v Value, i int) Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Field(v Value, i int) Value\n```\n\nField returns the i'th field of the struct v. It panics if v's Kind is not Struct or i is out of range. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Zero",
                    "documentation": {
                      "identifier": "Zero",
                      "newPage": false,
                      "searchKey": "reflectlite.Zero",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Zero(typ Type) Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Zero(typ Type) Value\n```\n\nZero returns a Value representing the zero value for the specified type. The result is different from the zero value of the Value struct, which represents no value at all. For example, Zero(TypeOf(42)) returns a Value with Kind Int and value 0. The returned value is neither addressable nor settable. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.pointer",
                    "documentation": {
                      "identifier": "Value.pointer",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.pointer",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) pointer() unsafe.Pointer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) pointer() unsafe.Pointer\n```\n\npointer returns the underlying pointer represented by v. v.Kind() must be Ptr, Map, Chan, Func, or UnsafePointer \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.CanSet",
                    "documentation": {
                      "identifier": "Value.CanSet",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.CanSet",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) CanSet() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) CanSet() bool\n```\n\nCanSet reports whether the value of v can be changed. A Value can be changed only if it is addressable and was not obtained by the use of unexported struct fields. If CanSet returns false, calling Set or any type-specific setter (e.g., SetBool, SetInt) will panic. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.Elem",
                    "documentation": {
                      "identifier": "Value.Elem",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.Elem",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Elem() Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Elem() Value\n```\n\nElem returns the value that the interface v contains or that the pointer v points to. It panics if v's Kind is not Interface or Ptr. It returns the zero Value if v is nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.IsNil",
                    "documentation": {
                      "identifier": "Value.IsNil",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.IsNil",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) IsNil() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) IsNil() bool\n```\n\nIsNil reports whether its argument v is nil. The argument must be a chan, func, interface, map, pointer, or slice value; if it is not, IsNil panics. Note that IsNil is not always equivalent to a regular comparison with nil in Go. For example, if v was created by calling ValueOf with an uninitialized interface variable i, i==nil will be true but v.IsNil will panic as v will be the zero Value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.IsValid",
                    "documentation": {
                      "identifier": "Value.IsValid",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.IsValid",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) IsValid() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) IsValid() bool\n```\n\nIsValid reports whether v represents a value. It returns false if v is the zero Value. If IsValid returns false, all other methods except String panic. Most functions and methods never return an invalid Value. If one does, its documentation states the conditions explicitly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.Kind",
                    "documentation": {
                      "identifier": "Value.Kind",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.Kind",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Kind() Kind"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Kind() Kind\n```\n\nKind returns v's Kind. If v is the zero Value (IsValid returns false), Kind returns Invalid. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.Len",
                    "documentation": {
                      "identifier": "Value.Len",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Len() int\n```\n\nLen returns v's length. It panics if v's Kind is not Array, Chan, Map, Slice, or String. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.numMethod",
                    "documentation": {
                      "identifier": "Value.numMethod",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.numMethod",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) numMethod() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) numMethod() int\n```\n\nNumMethod returns the number of exported methods in the value's method set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.Set",
                    "documentation": {
                      "identifier": "Value.Set",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.Set",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Set(x Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Set(x Value)\n```\n\nSet assigns x to the value v. It panics if CanSet returns false. As in Go, x's value must be assignable to v's type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.Type",
                    "documentation": {
                      "identifier": "Value.Type",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.Type",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) Type() Type"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) Type() Type\n```\n\nType returns v's type. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#Value.assignTo",
                    "documentation": {
                      "identifier": "Value.assignTo",
                      "newPage": false,
                      "searchKey": "reflectlite.Value.assignTo",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Value) assignTo(context string, dst *rtype, target unsafe.Pointer) Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Value) assignTo(context string, dst *rtype, target unsafe.Pointer) Value\n```\n\nassignTo returns a value v that can be assigned directly to typ. It panics if v is not assignable to typ. For a conversion to an interface type, target is a suggested scratch space to use. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#flag",
              "documentation": {
                "identifier": "flag",
                "newPage": false,
                "searchKey": "reflectlite.flag",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type flag uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype flag uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#flag.kind",
                    "documentation": {
                      "identifier": "flag.kind",
                      "newPage": false,
                      "searchKey": "reflectlite.flag.kind",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f flag) kind() Kind"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f flag) kind() Kind\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#flag.ro",
                    "documentation": {
                      "identifier": "flag.ro",
                      "newPage": false,
                      "searchKey": "reflectlite.flag.ro",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f flag) ro() flag"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f flag) ro() flag\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#flag.mustBeExported",
                    "documentation": {
                      "identifier": "flag.mustBeExported",
                      "newPage": false,
                      "searchKey": "reflectlite.flag.mustBeExported",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f flag) mustBeExported()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f flag) mustBeExported()\n```\n\nmustBeExported panics if f records that the value was obtained using an unexported field. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/reflectlite#flag.mustBeAssignable",
                    "documentation": {
                      "identifier": "flag.mustBeAssignable",
                      "newPage": false,
                      "searchKey": "reflectlite.flag.mustBeAssignable",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f flag) mustBeAssignable()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f flag) mustBeAssignable()\n```\n\nmustBeAssignable panics if f records that the value is not assignable, which is to say that either it was obtained using an unexported field or it is not addressable. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#ValueError",
              "documentation": {
                "identifier": "ValueError",
                "newPage": false,
                "searchKey": "reflectlite.ValueError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValueError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValueError struct {\n\tMethod string\n\tKind   Kind\n}\n```\n\nA ValueError occurs when a Value method is invoked on a Value that does not support it. Such cases are documented in the description of each method. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#ValueError.Error",
                    "documentation": {
                      "identifier": "ValueError.Error",
                      "newPage": false,
                      "searchKey": "reflectlite.ValueError.Error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *ValueError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *ValueError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#emptyInterface",
              "documentation": {
                "identifier": "emptyInterface",
                "newPage": false,
                "searchKey": "reflectlite.emptyInterface",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type emptyInterface struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype emptyInterface struct {\n\ttyp  *rtype\n\tword unsafe.Pointer\n}\n```\n\nemptyInterface is the header for an interface{} value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#EmbedWithUnexpMeth",
              "documentation": {
                "identifier": "EmbedWithUnexpMeth",
                "newPage": false,
                "searchKey": "reflectlite.EmbedWithUnexpMeth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmbedWithUnexpMeth struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmbedWithUnexpMeth struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/reflectlite#EmbedWithUnexpMeth.f",
                    "documentation": {
                      "identifier": "EmbedWithUnexpMeth.f",
                      "newPage": false,
                      "searchKey": "reflectlite.EmbedWithUnexpMeth.f",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (EmbedWithUnexpMeth) f()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (EmbedWithUnexpMeth) f()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#pinUnexpMeth",
              "documentation": {
                "identifier": "pinUnexpMeth",
                "newPage": false,
                "searchKey": "reflectlite.pinUnexpMeth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pinUnexpMeth interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pinUnexpMeth interface {\n\tf()\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#Buffer",
              "documentation": {
                "identifier": "Buffer",
                "newPage": false,
                "searchKey": "reflectlite.Buffer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Buffer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Buffer struct {\n\tbuf []byte\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/reflectlite#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/reflectlite#Swapper",
              "documentation": {
                "identifier": "Swapper",
                "newPage": false,
                "searchKey": "reflectlite.Swapper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Swapper(slice interface{}) func(i, j int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Swapper(slice interface{}) func(i, j int)\n```\n\nSwapper returns a function that swaps the elements in the provided slice. \n\nSwapper panics if the provided interface is not a slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#resolveNameOff",
              "documentation": {
                "identifier": "resolveNameOff",
                "newPage": false,
                "searchKey": "reflectlite.resolveNameOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveNameOff(ptrInModule unsafe.Pointer, off int32) unsafe.Pointer\n```\n\nresolveNameOff resolves a name offset from a base pointer. The (*rtype).nameOff method is a convenience wrapper for this function. Implemented in the runtime package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#resolveTypeOff",
              "documentation": {
                "identifier": "resolveTypeOff",
                "newPage": false,
                "searchKey": "reflectlite.resolveTypeOff",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolveTypeOff(rtype unsafe.Pointer, off int32) unsafe.Pointer\n```\n\nresolveTypeOff resolves an *rtype offset from a base type. The (*rtype).typeOff method is a convenience wrapper for this function. Implemented in the runtime package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#add",
              "documentation": {
                "identifier": "add",
                "newPage": false,
                "searchKey": "reflectlite.add",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc add(p unsafe.Pointer, x uintptr, whySafe string) unsafe.Pointer\n```\n\nadd returns p+x. \n\nThe whySafe string is ignored, so that the function still inlines as efficiently as p+x, but all call sites should use the string to record why the addition is safe, which is to say why the addition does not cause x to advance to the very end of p's allocation and therefore point incorrectly at the next block in memory. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#implements",
              "documentation": {
                "identifier": "implements",
                "newPage": false,
                "searchKey": "reflectlite.implements",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func implements(T, V *rtype) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc implements(T, V *rtype) bool\n```\n\nimplements reports whether the type V implements the interface type T. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#directlyAssignable",
              "documentation": {
                "identifier": "directlyAssignable",
                "newPage": false,
                "searchKey": "reflectlite.directlyAssignable",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func directlyAssignable(T, V *rtype) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc directlyAssignable(T, V *rtype) bool\n```\n\ndirectlyAssignable reports whether a value x of type V can be directly assigned (using memmove) to a value of type T. [https://golang.org/doc/go_spec.html#Assignability](https://golang.org/doc/go_spec.html#Assignability) Ignoring the interface rules (implemented elsewhere) and the ideal constant rules (no ideal constants at run time). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#haveIdenticalType",
              "documentation": {
                "identifier": "haveIdenticalType",
                "newPage": false,
                "searchKey": "reflectlite.haveIdenticalType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func haveIdenticalType(T, V Type, cmpTags bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc haveIdenticalType(T, V Type, cmpTags bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#haveIdenticalUnderlyingType",
              "documentation": {
                "identifier": "haveIdenticalUnderlyingType",
                "newPage": false,
                "searchKey": "reflectlite.haveIdenticalUnderlyingType",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func haveIdenticalUnderlyingType(T, V *rtype, cmpTags bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc haveIdenticalUnderlyingType(T, V *rtype, cmpTags bool) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#ifaceIndir",
              "documentation": {
                "identifier": "ifaceIndir",
                "newPage": false,
                "searchKey": "reflectlite.ifaceIndir",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ifaceIndir(t *rtype) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ifaceIndir(t *rtype) bool\n```\n\nifaceIndir reports whether t is stored indirectly in an interface value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#packEface",
              "documentation": {
                "identifier": "packEface",
                "newPage": false,
                "searchKey": "reflectlite.packEface",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func packEface(v Value) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc packEface(v Value) interface{}\n```\n\npackEface converts v to the empty interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#methodName",
              "documentation": {
                "identifier": "methodName",
                "newPage": false,
                "searchKey": "reflectlite.methodName",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func methodName() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc methodName() string\n```\n\nmethodName returns the name of the calling method, assumed to be two stack frames above. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#valueInterface",
              "documentation": {
                "identifier": "valueInterface",
                "newPage": false,
                "searchKey": "reflectlite.valueInterface",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func valueInterface(v Value) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc valueInterface(v Value) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#chanlen",
              "documentation": {
                "identifier": "chanlen",
                "newPage": false,
                "searchKey": "reflectlite.chanlen",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func chanlen(unsafe.Pointer) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc chanlen(unsafe.Pointer) int\n```\n\nimplemented in runtime: \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#maplen",
              "documentation": {
                "identifier": "maplen",
                "newPage": false,
                "searchKey": "reflectlite.maplen",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func maplen(unsafe.Pointer) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc maplen(unsafe.Pointer) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#unsafe_New",
              "documentation": {
                "identifier": "unsafe_New",
                "newPage": false,
                "searchKey": "reflectlite.unsafe_New",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unsafe_New(*rtype) unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unsafe_New(*rtype) unsafe.Pointer\n```\n\nimplemented in package runtime \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#arrayAt",
              "documentation": {
                "identifier": "arrayAt",
                "newPage": false,
                "searchKey": "reflectlite.arrayAt",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc arrayAt(p unsafe.Pointer, i int, eltSize uintptr, whySafe string) unsafe.Pointer\n```\n\narrayAt returns the i-th element of p, an array whose elements are eltSize bytes wide. The array pointed at by p must have at least i+1 elements: it is invalid (but impossible to check here) to pass i >= len, because then the result will point outside the array. whySafe must explain why i < len. (Passing \"i < len\" is fine; the benefit is to surface this assumption at the call site.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#ifaceE2I",
              "documentation": {
                "identifier": "ifaceE2I",
                "newPage": false,
                "searchKey": "reflectlite.ifaceE2I",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ifaceE2I(t *rtype, src interface{}, dst unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ifaceE2I(t *rtype, src interface{}, dst unsafe.Pointer)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#typedmemmove",
              "documentation": {
                "identifier": "typedmemmove",
                "newPage": false,
                "searchKey": "reflectlite.typedmemmove",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func typedmemmove(t *rtype, dst, src unsafe.Pointer)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc typedmemmove(t *rtype, dst, src unsafe.Pointer)\n```\n\ntypedmemmove copies a value of type t to dst from src. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#escapes",
              "documentation": {
                "identifier": "escapes",
                "newPage": false,
                "searchKey": "reflectlite.escapes",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func escapes(x interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escapes(x interface{})\n```\n\nDummy annotation marking that the value x escapes, for use in cases where the reflect code is so clever that the compiler cannot follow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#ToInterface",
              "documentation": {
                "identifier": "ToInterface",
                "newPage": false,
                "searchKey": "reflectlite.ToInterface",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ToInterface(v Value) (i interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ToInterface(v Value) (i interface{})\n```\n\nToInterface returns v's current value as an interface{}. It is equivalent to: \n\n```\nvar i interface{} = (v's underlying value)\n\n```\nIt panics if the Value was obtained by accessing unexported struct fields. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/reflectlite#FirstMethodNameBytes",
              "documentation": {
                "identifier": "FirstMethodNameBytes",
                "newPage": false,
                "searchKey": "reflectlite.FirstMethodNameBytes",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func FirstMethodNameBytes(t Type) *byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc FirstMethodNameBytes(t Type) *byte\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
