{
  "pathID": "/internal/singleflight",
  "documentation": {
    "identifier": "singleflight",
    "newPage": true,
    "searchKey": "internal/singleflight",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package singleflight"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package singleflight provides a duplicate function call suppression mechanism. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/singleflight#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/singleflight#call",
              "documentation": {
                "identifier": "call",
                "newPage": false,
                "searchKey": "singleflight.call",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type call struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype call struct {\n\twg sync.WaitGroup\n\n\t// These fields are written once before the WaitGroup is done\n\t// and are only read after the WaitGroup is done.\n\tval interface{}\n\terr error\n\n\t// These fields are read and written with the singleflight\n\t// mutex held before the WaitGroup is done, and are read but\n\t// not written after the WaitGroup is done.\n\tdups  int\n\tchans []chan<- Result\n}\n```\n\ncall is an in-flight or completed singleflight.Do call \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/singleflight#Group",
              "documentation": {
                "identifier": "Group",
                "newPage": false,
                "searchKey": "singleflight.Group",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Group struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Group struct {\n\tmu sync.Mutex       // protects m\n\tm  map[string]*call // lazily initialized\n}\n```\n\nGroup represents a class of work and forms a namespace in which units of work can be executed with duplicate suppression. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/singleflight#Group.Do",
                    "documentation": {
                      "identifier": "Group.Do",
                      "newPage": false,
                      "searchKey": "singleflight.Group.Do",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Group) Do(key string, fn func() (interface{}, error)) (v interface{}, err error, shared bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Group) Do(key string, fn func() (interface{}, error)) (v interface{}, err error, shared bool)\n```\n\nDo executes and returns the results of the given function, making sure that only one execution is in-flight for a given key at a time. If a duplicate comes in, the duplicate caller waits for the original to complete and receives the same results. The return value shared indicates whether v was given to multiple callers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/singleflight#Group.DoChan",
                    "documentation": {
                      "identifier": "Group.DoChan",
                      "newPage": false,
                      "searchKey": "singleflight.Group.DoChan",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Group) DoChan(key string, fn func() (interface{}, error)) (<-chan Result, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Group) DoChan(key string, fn func() (interface{}, error)) (<-chan Result, bool)\n```\n\nDoChan is like Do but returns a channel that will receive the results when they are ready. The second result is true if the function will eventually be called, false if it will not (because there is a pending request with this key). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/singleflight#Group.doCall",
                    "documentation": {
                      "identifier": "Group.doCall",
                      "newPage": false,
                      "searchKey": "singleflight.Group.doCall",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Group) doCall(c *call, key string, fn func() (interface{}, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Group) doCall(c *call, key string, fn func() (interface{}, error))\n```\n\ndoCall handles the single call for a key. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/singleflight#Group.ForgetUnshared",
                    "documentation": {
                      "identifier": "Group.ForgetUnshared",
                      "newPage": false,
                      "searchKey": "singleflight.Group.ForgetUnshared",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *Group) ForgetUnshared(key string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *Group) ForgetUnshared(key string) bool\n```\n\nForgetUnshared tells the singleflight to forget about a key if it is not shared with any other goroutines. Future calls to Do for a forgotten key will call the function rather than waiting for an earlier call to complete. Returns whether the key was forgotten or unknown--that is, whether no other goroutines are waiting for the result. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/singleflight#Result",
              "documentation": {
                "identifier": "Result",
                "newPage": false,
                "searchKey": "singleflight.Result",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Result struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Result struct {\n\tVal    interface{}\n\tErr    error\n\tShared bool\n}\n```\n\nResult holds the results of Do, so they can be passed on a channel. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/singleflight#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/singleflight#TestDo",
              "documentation": {
                "identifier": "TestDo",
                "newPage": false,
                "searchKey": "singleflight.TestDo",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/singleflight#TestDoErr",
              "documentation": {
                "identifier": "TestDoErr",
                "newPage": false,
                "searchKey": "singleflight.TestDoErr",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDoErr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDoErr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/singleflight#TestDoDupSuppress",
              "documentation": {
                "identifier": "TestDoDupSuppress",
                "newPage": false,
                "searchKey": "singleflight.TestDoDupSuppress",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDoDupSuppress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDoDupSuppress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
