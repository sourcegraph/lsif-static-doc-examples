{
  "pathID": "/internal/testenv",
  "documentation": {
    "identifier": "testenv",
    "newPage": true,
    "searchKey": "internal/testenv",
    "tags": [
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package testenv"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package testenv provides information about what functionality is available in different testing environments run by the Go team. \n\nIt is an internal package because these details are specific to the Go team's test setup (on build.golang.org) and not fundamental to tests in general. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/testenv#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/testenv#execPaths",
              "documentation": {
                "identifier": "execPaths",
                "newPage": false,
                "searchKey": "testenv.execPaths",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var execPaths"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar execPaths sync.Map // path -> error\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#haveCGO",
              "documentation": {
                "identifier": "haveCGO",
                "newPage": false,
                "searchKey": "testenv.haveCGO",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var haveCGO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar haveCGO bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#flaky",
              "documentation": {
                "identifier": "flaky",
                "newPage": false,
                "searchKey": "testenv.flaky",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var flaky"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar flaky = flag.Bool(\"flaky\", false, \"run known-flaky tests too\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/testenv#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/testenv#Builder",
              "documentation": {
                "identifier": "Builder",
                "newPage": false,
                "searchKey": "testenv.Builder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Builder() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Builder() string\n```\n\nBuilder reports the name of the builder running this test (for example, \"linux-amd64\" or \"windows-386-gce\"). If the test is not running on the build infrastructure, Builder returns the empty string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasGoBuild",
              "documentation": {
                "identifier": "HasGoBuild",
                "newPage": false,
                "searchKey": "testenv.HasGoBuild",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasGoBuild() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasGoBuild() bool\n```\n\nHasGoBuild reports whether the current system can build programs with `go build' and then run them with os.StartProcess or exec.Command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveGoBuild",
              "documentation": {
                "identifier": "MustHaveGoBuild",
                "newPage": false,
                "searchKey": "testenv.MustHaveGoBuild",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveGoBuild(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveGoBuild(t testing.TB)\n```\n\nMustHaveGoBuild checks that the current system can build programs with `go build' and then run them with os.StartProcess or exec.Command. If not, MustHaveGoBuild calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasGoRun",
              "documentation": {
                "identifier": "HasGoRun",
                "newPage": false,
                "searchKey": "testenv.HasGoRun",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasGoRun() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasGoRun() bool\n```\n\nHasGoRun reports whether the current system can run programs with `go run.' \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveGoRun",
              "documentation": {
                "identifier": "MustHaveGoRun",
                "newPage": false,
                "searchKey": "testenv.MustHaveGoRun",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveGoRun(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveGoRun(t testing.TB)\n```\n\nMustHaveGoRun checks that the current system can run programs with `go run.' If not, MustHaveGoRun calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#GoToolPath",
              "documentation": {
                "identifier": "GoToolPath",
                "newPage": false,
                "searchKey": "testenv.GoToolPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GoToolPath(t testing.TB) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GoToolPath(t testing.TB) string\n```\n\nGoToolPath reports the path to the Go tool. It is a convenience wrapper around GoTool. If the tool is unavailable GoToolPath calls t.Skip. If the tool should be available and isn't, GoToolPath calls t.Fatal. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#GoTool",
              "documentation": {
                "identifier": "GoTool",
                "newPage": false,
                "searchKey": "testenv.GoTool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GoTool() (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GoTool() (string, error)\n```\n\nGoTool reports the path to the Go tool. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasExec",
              "documentation": {
                "identifier": "HasExec",
                "newPage": false,
                "searchKey": "testenv.HasExec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasExec() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasExec() bool\n```\n\nHasExec reports whether the current system can start new processes using os.StartProcess or (more commonly) exec.Command. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasSrc",
              "documentation": {
                "identifier": "HasSrc",
                "newPage": false,
                "searchKey": "testenv.HasSrc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasSrc() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasSrc() bool\n```\n\nHasSrc reports whether the entire source tree is available under GOROOT. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveExec",
              "documentation": {
                "identifier": "MustHaveExec",
                "newPage": false,
                "searchKey": "testenv.MustHaveExec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveExec(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveExec(t testing.TB)\n```\n\nMustHaveExec checks that the current system can start new processes using os.StartProcess or (more commonly) exec.Command. If not, MustHaveExec calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveExecPath",
              "documentation": {
                "identifier": "MustHaveExecPath",
                "newPage": false,
                "searchKey": "testenv.MustHaveExecPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveExecPath(t testing.TB, path string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveExecPath(t testing.TB, path string)\n```\n\nMustHaveExecPath checks that the current system can start the named executable using os.StartProcess or (more commonly) exec.Command. If not, MustHaveExecPath calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasExternalNetwork",
              "documentation": {
                "identifier": "HasExternalNetwork",
                "newPage": false,
                "searchKey": "testenv.HasExternalNetwork",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasExternalNetwork() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasExternalNetwork() bool\n```\n\nHasExternalNetwork reports whether the current system can use external (non-localhost) networks. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveExternalNetwork",
              "documentation": {
                "identifier": "MustHaveExternalNetwork",
                "newPage": false,
                "searchKey": "testenv.MustHaveExternalNetwork",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveExternalNetwork(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveExternalNetwork(t testing.TB)\n```\n\nMustHaveExternalNetwork checks that the current system can use external (non-localhost) networks. If not, MustHaveExternalNetwork calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasCGO",
              "documentation": {
                "identifier": "HasCGO",
                "newPage": false,
                "searchKey": "testenv.HasCGO",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasCGO() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasCGO() bool\n```\n\nHasCGO reports whether the current system can use cgo. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveCGO",
              "documentation": {
                "identifier": "MustHaveCGO",
                "newPage": false,
                "searchKey": "testenv.MustHaveCGO",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveCGO(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveCGO(t testing.TB)\n```\n\nMustHaveCGO calls t.Skip if cgo is not available. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#CanInternalLink",
              "documentation": {
                "identifier": "CanInternalLink",
                "newPage": false,
                "searchKey": "testenv.CanInternalLink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func CanInternalLink() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CanInternalLink() bool\n```\n\nCanInternalLink reports whether the current system can link programs with internal linking. (This is the opposite of cmd/internal/sys.MustLinkExternal. Keep them in sync.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustInternalLink",
              "documentation": {
                "identifier": "MustInternalLink",
                "newPage": false,
                "searchKey": "testenv.MustInternalLink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustInternalLink(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustInternalLink(t testing.TB)\n```\n\nMustInternalLink checks that the current system can link programs with internal linking. If not, MustInternalLink calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasSymlink",
              "documentation": {
                "identifier": "HasSymlink",
                "newPage": false,
                "searchKey": "testenv.HasSymlink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasSymlink() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasSymlink() bool\n```\n\nHasSymlink reports whether the current system can use os.Symlink. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveSymlink",
              "documentation": {
                "identifier": "MustHaveSymlink",
                "newPage": false,
                "searchKey": "testenv.MustHaveSymlink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveSymlink(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveSymlink(t testing.TB)\n```\n\nMustHaveSymlink reports whether the current system can use os.Symlink. If not, MustHaveSymlink calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#HasLink",
              "documentation": {
                "identifier": "HasLink",
                "newPage": false,
                "searchKey": "testenv.HasLink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func HasLink() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HasLink() bool\n```\n\nHasLink reports whether the current system can use os.Link. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#MustHaveLink",
              "documentation": {
                "identifier": "MustHaveLink",
                "newPage": false,
                "searchKey": "testenv.MustHaveLink",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func MustHaveLink(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MustHaveLink(t testing.TB)\n```\n\nMustHaveLink reports whether the current system can use os.Link. If not, MustHaveLink calls t.Skip with an explanation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#SkipFlaky",
              "documentation": {
                "identifier": "SkipFlaky",
                "newPage": false,
                "searchKey": "testenv.SkipFlaky",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func SkipFlaky(t testing.TB, issue int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SkipFlaky(t testing.TB, issue int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#SkipFlakyNet",
              "documentation": {
                "identifier": "SkipFlakyNet",
                "newPage": false,
                "searchKey": "testenv.SkipFlakyNet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func SkipFlakyNet(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SkipFlakyNet(t testing.TB)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#CleanCmdEnv",
              "documentation": {
                "identifier": "CleanCmdEnv",
                "newPage": false,
                "searchKey": "testenv.CleanCmdEnv",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func CleanCmdEnv(cmd *exec.Cmd) *exec.Cmd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CleanCmdEnv(cmd *exec.Cmd) *exec.Cmd\n```\n\nCleanCmdEnv will fill cmd.Env with the environment, excluding certain variables that could modify the behavior of the Go tools such as GODEBUG and GOTRACEBACK. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#CPUIsSlow",
              "documentation": {
                "identifier": "CPUIsSlow",
                "newPage": false,
                "searchKey": "testenv.CPUIsSlow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func CPUIsSlow() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CPUIsSlow() bool\n```\n\nCPUIsSlow reports whether the CPU running the test is suspected to be slow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#SkipIfShortAndSlow",
              "documentation": {
                "identifier": "SkipIfShortAndSlow",
                "newPage": false,
                "searchKey": "testenv.SkipIfShortAndSlow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func SkipIfShortAndSlow(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SkipIfShortAndSlow(t testing.TB)\n```\n\nSkipIfShortAndSlow skips t if -short is set and the CPU running the test is suspected to be slow. \n\n(This is useful for CPU-intensive tests that otherwise complete quickly.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#init.testenv_cgo.go",
              "documentation": {
                "identifier": "init.testenv_cgo.go",
                "newPage": false,
                "searchKey": "testenv.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/testenv#hasSymlink",
              "documentation": {
                "identifier": "hasSymlink",
                "newPage": false,
                "searchKey": "testenv.hasSymlink",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hasSymlink() (ok bool, reason string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hasSymlink() (ok bool, reason string)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
