{
  "pathID": "/internal/trace",
  "documentation": {
    "identifier": "trace",
    "newPage": true,
    "searchKey": "internal/trace",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package trace"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/internal/trace#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/trace#UtilSTW",
              "documentation": {
                "identifier": "UtilSTW",
                "newPage": false,
                "searchKey": "trace.UtilSTW",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UtilSTW"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UtilSTW UtilFlags = 1 << iota\n```\n\nUtilSTW means utilization should account for STW events. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UtilBackground",
              "documentation": {
                "identifier": "UtilBackground",
                "newPage": false,
                "searchKey": "trace.UtilBackground",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UtilBackground"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UtilBackground\n```\n\nUtilBackground means utilization should account for background mark workers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UtilAssist",
              "documentation": {
                "identifier": "UtilAssist",
                "newPage": false,
                "searchKey": "trace.UtilAssist",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UtilAssist"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UtilAssist\n```\n\nUtilAssist means utilization should account for mark assists. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UtilSweep",
              "documentation": {
                "identifier": "UtilSweep",
                "newPage": false,
                "searchKey": "trace.UtilSweep",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UtilSweep"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UtilSweep\n```\n\nUtilSweep means utilization should account for sweeping. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UtilPerProc",
              "documentation": {
                "identifier": "UtilPerProc",
                "newPage": false,
                "searchKey": "trace.UtilPerProc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UtilPerProc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UtilPerProc\n```\n\nUtilPerProc means each P should be given a separate utilization function. Otherwise, there is a single function and each P is given a fraction of the utilization. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#mudDegree",
              "documentation": {
                "identifier": "mudDegree",
                "newPage": false,
                "searchKey": "trace.mudDegree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const mudDegree"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mudDegree = 1024\n```\n\nmudDegree is the number of buckets in the MUD summary histogram. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gDead",
              "documentation": {
                "identifier": "gDead",
                "newPage": false,
                "searchKey": "trace.gDead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gDead"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gDead gStatus = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gRunnable",
              "documentation": {
                "identifier": "gRunnable",
                "newPage": false,
                "searchKey": "trace.gRunnable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gRunnable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gRunnable\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gRunning",
              "documentation": {
                "identifier": "gRunning",
                "newPage": false,
                "searchKey": "trace.gRunning",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gRunning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gRunning\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gWaiting",
              "documentation": {
                "identifier": "gWaiting",
                "newPage": false,
                "searchKey": "trace.gWaiting",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const gWaiting"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst gWaiting\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#unordered",
              "documentation": {
                "identifier": "unordered",
                "newPage": false,
                "searchKey": "trace.unordered",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const unordered"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst unordered = ^uint64(0)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#garbage",
              "documentation": {
                "identifier": "garbage",
                "newPage": false,
                "searchKey": "trace.garbage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const garbage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst garbage = ^uint64(0) - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#noseq",
              "documentation": {
                "identifier": "noseq",
                "newPage": false,
                "searchKey": "trace.noseq",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const noseq"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst noseq = ^uint64(0)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#seqinc",
              "documentation": {
                "identifier": "seqinc",
                "newPage": false,
                "searchKey": "trace.seqinc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const seqinc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst seqinc = ^uint64(0) - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#FakeP",
              "documentation": {
                "identifier": "FakeP",
                "newPage": false,
                "searchKey": "trace.FakeP",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const FakeP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst FakeP = 1000000 + iota\n```\n\nSpecial P identifiers: \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TimerP",
              "documentation": {
                "identifier": "TimerP",
                "newPage": false,
                "searchKey": "trace.TimerP",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TimerP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TimerP // depicts timer unblocks\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#NetpollP",
              "documentation": {
                "identifier": "NetpollP",
                "newPage": false,
                "searchKey": "trace.NetpollP",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NetpollP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NetpollP // depicts network unblocks\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#SyscallP",
              "documentation": {
                "identifier": "SyscallP",
                "newPage": false,
                "searchKey": "trace.SyscallP",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SyscallP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SyscallP // depicts returns from syscalls\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#GCP",
              "documentation": {
                "identifier": "GCP",
                "newPage": false,
                "searchKey": "trace.GCP",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const GCP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst GCP // depicts GC state\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvNone",
              "documentation": {
                "identifier": "EvNone",
                "newPage": false,
                "searchKey": "trace.EvNone",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvNone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvNone = 0 // unused\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvBatch",
              "documentation": {
                "identifier": "EvBatch",
                "newPage": false,
                "searchKey": "trace.EvBatch",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvBatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvBatch = 1 // start of per-P batch of events [pid, timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvFrequency",
              "documentation": {
                "identifier": "EvFrequency",
                "newPage": false,
                "searchKey": "trace.EvFrequency",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvFrequency"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvFrequency = 2 // contains tracer timer frequency [frequency (ticks per second)]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvStack",
              "documentation": {
                "identifier": "EvStack",
                "newPage": false,
                "searchKey": "trace.EvStack",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvStack"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvStack // stack [stack id, number of PCs, array of {PC, func string ID, file string ID, line}]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGomaxprocs",
              "documentation": {
                "identifier": "EvGomaxprocs",
                "newPage": false,
                "searchKey": "trace.EvGomaxprocs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGomaxprocs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGomaxprocs = 4 // current value of GOMAXPROCS [timestamp, GOMAXPROCS, stack id]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvProcStart",
              "documentation": {
                "identifier": "EvProcStart",
                "newPage": false,
                "searchKey": "trace.EvProcStart",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvProcStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvProcStart = 5 // start of P [timestamp, thread id]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvProcStop",
              "documentation": {
                "identifier": "EvProcStop",
                "newPage": false,
                "searchKey": "trace.EvProcStop",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvProcStop"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvProcStop = 6 // stop of P [timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCStart",
              "documentation": {
                "identifier": "EvGCStart",
                "newPage": false,
                "searchKey": "trace.EvGCStart",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCStart = 7 // GC start [timestamp, seq, stack id]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCDone",
              "documentation": {
                "identifier": "EvGCDone",
                "newPage": false,
                "searchKey": "trace.EvGCDone",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCDone = 8 // GC done [timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCSTWStart",
              "documentation": {
                "identifier": "EvGCSTWStart",
                "newPage": false,
                "searchKey": "trace.EvGCSTWStart",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCSTWStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCSTWStart = 9 // GC mark termination start [timestamp, kind]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCSTWDone",
              "documentation": {
                "identifier": "EvGCSTWDone",
                "newPage": false,
                "searchKey": "trace.EvGCSTWDone",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCSTWDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCSTWDone = 10 // GC mark termination done [timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCSweepStart",
              "documentation": {
                "identifier": "EvGCSweepStart",
                "newPage": false,
                "searchKey": "trace.EvGCSweepStart",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCSweepStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCSweepStart = 11 // GC sweep start [timestamp, stack id]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCSweepDone",
              "documentation": {
                "identifier": "EvGCSweepDone",
                "newPage": false,
                "searchKey": "trace.EvGCSweepDone",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCSweepDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCSweepDone = 12 // GC sweep done [timestamp, swept, reclaimed]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoCreate",
              "documentation": {
                "identifier": "EvGoCreate",
                "newPage": false,
                "searchKey": "trace.EvGoCreate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoCreate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoCreate = 13 // goroutine creation [timestamp, new goroutine id, new stack id, stack id]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoStart",
              "documentation": {
                "identifier": "EvGoStart",
                "newPage": false,
                "searchKey": "trace.EvGoStart",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoStart = 14 // goroutine starts running [timestamp, goroutine id, seq]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoEnd",
              "documentation": {
                "identifier": "EvGoEnd",
                "newPage": false,
                "searchKey": "trace.EvGoEnd",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoEnd = 15 // goroutine ends [timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoStop",
              "documentation": {
                "identifier": "EvGoStop",
                "newPage": false,
                "searchKey": "trace.EvGoStop",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoStop"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoStop = 16 // goroutine stops (like in select{}) [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoSched",
              "documentation": {
                "identifier": "EvGoSched",
                "newPage": false,
                "searchKey": "trace.EvGoSched",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoSched"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoSched = 17 // goroutine calls Gosched [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoPreempt",
              "documentation": {
                "identifier": "EvGoPreempt",
                "newPage": false,
                "searchKey": "trace.EvGoPreempt",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoPreempt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoPreempt = 18 // goroutine is preempted [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoSleep",
              "documentation": {
                "identifier": "EvGoSleep",
                "newPage": false,
                "searchKey": "trace.EvGoSleep",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoSleep"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoSleep = 19 // goroutine calls Sleep [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlock",
              "documentation": {
                "identifier": "EvGoBlock",
                "newPage": false,
                "searchKey": "trace.EvGoBlock",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlock = 20 // goroutine blocks [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoUnblock",
              "documentation": {
                "identifier": "EvGoUnblock",
                "newPage": false,
                "searchKey": "trace.EvGoUnblock",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoUnblock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoUnblock = 21 // goroutine is unblocked [timestamp, goroutine id, seq, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockSend",
              "documentation": {
                "identifier": "EvGoBlockSend",
                "newPage": false,
                "searchKey": "trace.EvGoBlockSend",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockSend"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockSend = 22 // goroutine blocks on chan send [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockRecv",
              "documentation": {
                "identifier": "EvGoBlockRecv",
                "newPage": false,
                "searchKey": "trace.EvGoBlockRecv",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockRecv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockRecv = 23 // goroutine blocks on chan recv [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockSelect",
              "documentation": {
                "identifier": "EvGoBlockSelect",
                "newPage": false,
                "searchKey": "trace.EvGoBlockSelect",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockSelect"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockSelect = 24 // goroutine blocks on select [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockSync",
              "documentation": {
                "identifier": "EvGoBlockSync",
                "newPage": false,
                "searchKey": "trace.EvGoBlockSync",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockSync"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockSync = 25 // goroutine blocks on Mutex/RWMutex [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockCond",
              "documentation": {
                "identifier": "EvGoBlockCond",
                "newPage": false,
                "searchKey": "trace.EvGoBlockCond",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockCond"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockCond = 26 // goroutine blocks on Cond [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockNet",
              "documentation": {
                "identifier": "EvGoBlockNet",
                "newPage": false,
                "searchKey": "trace.EvGoBlockNet",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockNet"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockNet = 27 // goroutine blocks on network [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoSysCall",
              "documentation": {
                "identifier": "EvGoSysCall",
                "newPage": false,
                "searchKey": "trace.EvGoSysCall",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoSysCall"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoSysCall = 28 // syscall enter [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoSysExit",
              "documentation": {
                "identifier": "EvGoSysExit",
                "newPage": false,
                "searchKey": "trace.EvGoSysExit",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoSysExit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoSysExit = 29 // syscall exit [timestamp, goroutine id, seq, real timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoSysBlock",
              "documentation": {
                "identifier": "EvGoSysBlock",
                "newPage": false,
                "searchKey": "trace.EvGoSysBlock",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoSysBlock"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoSysBlock = 30 // syscall blocks [timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoWaiting",
              "documentation": {
                "identifier": "EvGoWaiting",
                "newPage": false,
                "searchKey": "trace.EvGoWaiting",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoWaiting"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoWaiting // denotes that goroutine is blocked when tracing starts [timestamp, goroutine id]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoInSyscall",
              "documentation": {
                "identifier": "EvGoInSyscall",
                "newPage": false,
                "searchKey": "trace.EvGoInSyscall",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoInSyscall"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoInSyscall // denotes that goroutine is in syscall when tracing starts [timestamp, goroutine id]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvHeapAlloc",
              "documentation": {
                "identifier": "EvHeapAlloc",
                "newPage": false,
                "searchKey": "trace.EvHeapAlloc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvHeapAlloc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvHeapAlloc = 33 // gcController.heapLive change [timestamp, heap live bytes]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvHeapGoal",
              "documentation": {
                "identifier": "EvHeapGoal",
                "newPage": false,
                "searchKey": "trace.EvHeapGoal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvHeapGoal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvHeapGoal = 34 // gcController.heapGoal change [timestamp, heap goal bytes]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvTimerGoroutine",
              "documentation": {
                "identifier": "EvTimerGoroutine",
                "newPage": false,
                "searchKey": "trace.EvTimerGoroutine",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvTimerGoroutine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvTimerGoroutine = 35 // denotes timer goroutine [timer goroutine id]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvFutileWakeup",
              "documentation": {
                "identifier": "EvFutileWakeup",
                "newPage": false,
                "searchKey": "trace.EvFutileWakeup",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvFutileWakeup"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvFutileWakeup // denotes that the previous wakeup of this goroutine was futile [timestamp]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvString",
              "documentation": {
                "identifier": "EvString",
                "newPage": false,
                "searchKey": "trace.EvString",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvString = 37 // string dictionary entry [ID, length, string]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoStartLocal",
              "documentation": {
                "identifier": "EvGoStartLocal",
                "newPage": false,
                "searchKey": "trace.EvGoStartLocal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoStartLocal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoStartLocal // goroutine starts running on the same P as the last event [timestamp, goroutine id]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoUnblockLocal",
              "documentation": {
                "identifier": "EvGoUnblockLocal",
                "newPage": false,
                "searchKey": "trace.EvGoUnblockLocal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoUnblockLocal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoUnblockLocal // goroutine is unblocked on the same P as the last event [timestamp, goroutine id, stack]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoSysExitLocal",
              "documentation": {
                "identifier": "EvGoSysExitLocal",
                "newPage": false,
                "searchKey": "trace.EvGoSysExitLocal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoSysExitLocal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoSysExitLocal // syscall exit on the same P as the last event [timestamp, goroutine id, real timestamp]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoStartLabel",
              "documentation": {
                "identifier": "EvGoStartLabel",
                "newPage": false,
                "searchKey": "trace.EvGoStartLabel",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoStartLabel"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoStartLabel // goroutine starts running with label [timestamp, goroutine id, seq, label string id]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGoBlockGC",
              "documentation": {
                "identifier": "EvGoBlockGC",
                "newPage": false,
                "searchKey": "trace.EvGoBlockGC",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGoBlockGC"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGoBlockGC = 42 // goroutine blocks on GC assist [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCMarkAssistStart",
              "documentation": {
                "identifier": "EvGCMarkAssistStart",
                "newPage": false,
                "searchKey": "trace.EvGCMarkAssistStart",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCMarkAssistStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCMarkAssistStart = 43 // GC mark assist start [timestamp, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvGCMarkAssistDone",
              "documentation": {
                "identifier": "EvGCMarkAssistDone",
                "newPage": false,
                "searchKey": "trace.EvGCMarkAssistDone",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvGCMarkAssistDone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvGCMarkAssistDone = 44 // GC mark assist done [timestamp]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvUserTaskCreate",
              "documentation": {
                "identifier": "EvUserTaskCreate",
                "newPage": false,
                "searchKey": "trace.EvUserTaskCreate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvUserTaskCreate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvUserTaskCreate // trace.NewContext [timestamp, internal task id, internal parent id, stack, name string]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvUserTaskEnd",
              "documentation": {
                "identifier": "EvUserTaskEnd",
                "newPage": false,
                "searchKey": "trace.EvUserTaskEnd",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvUserTaskEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvUserTaskEnd = 46 // end of task [timestamp, internal task id, stack]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvUserRegion",
              "documentation": {
                "identifier": "EvUserRegion",
                "newPage": false,
                "searchKey": "trace.EvUserRegion",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvUserRegion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvUserRegion // trace.WithRegion [timestamp, internal task id, mode(0:start, 1:end), stack, name string]\n = ...\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvUserLog",
              "documentation": {
                "identifier": "EvUserLog",
                "newPage": false,
                "searchKey": "trace.EvUserLog",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvUserLog"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvUserLog = 48 // trace.Log [timestamp, internal id, key string id, stack, value string]\n\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EvCount",
              "documentation": {
                "identifier": "EvCount",
                "newPage": false,
                "searchKey": "trace.EvCount",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const EvCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst EvCount = 49\n```\n\nEvent types in the trace. Verbatim copy from src/runtime/trace.go with the \"trace\" prefix removed. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/trace#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/trace#bandsPerSeries",
              "documentation": {
                "identifier": "bandsPerSeries",
                "newPage": false,
                "searchKey": "trace.bandsPerSeries",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var bandsPerSeries"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bandsPerSeries = 1000\n```\n\nbandsPerSeries is the number of bands to divide each series into. This is only changed by tests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#ErrTimeOrder",
              "documentation": {
                "identifier": "ErrTimeOrder",
                "newPage": false,
                "searchKey": "trace.ErrTimeOrder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrTimeOrder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrTimeOrder = fmt.Errorf(\"time stamps out of order\")\n```\n\nErrTimeOrder is returned by Parse when the trace contains time stamps that do not respect actual event ordering. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#BreakTimestampsForTesting",
              "documentation": {
                "identifier": "BreakTimestampsForTesting",
                "newPage": false,
                "searchKey": "trace.BreakTimestampsForTesting",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var BreakTimestampsForTesting"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar BreakTimestampsForTesting bool\n```\n\nBreakTimestampsForTesting causes the parser to randomly alter timestamps (for testing of broken cputicks). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#EventDescriptions",
              "documentation": {
                "identifier": "EventDescriptions",
                "newPage": false,
                "searchKey": "trace.EventDescriptions",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var EventDescriptions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar EventDescriptions = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/trace#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/trace#MutatorUtil",
              "documentation": {
                "identifier": "MutatorUtil",
                "newPage": false,
                "searchKey": "trace.MutatorUtil",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MutatorUtil struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MutatorUtil struct {\n\tTime int64\n\t// Util is the mean mutator utilization starting at Time. This\n\t// is in the range [0, 1].\n\tUtil float64\n}\n```\n\nMutatorUtil is a change in mutator utilization at a particular time. Mutator utilization functions are represented as a time-ordered []MutatorUtil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UtilFlags",
              "documentation": {
                "identifier": "UtilFlags",
                "newPage": false,
                "searchKey": "trace.UtilFlags",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UtilFlags int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UtilFlags int\n```\n\nUtilFlags controls the behavior of MutatorUtilization. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#totalUtil",
              "documentation": {
                "identifier": "totalUtil",
                "newPage": false,
                "searchKey": "trace.totalUtil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type totalUtil float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype totalUtil float64\n```\n\ntotalUtil is total utilization, measured in nanoseconds. This is a separate type primarily to distinguish it from mean utilization, which is also a float64. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#totalUtilOf",
                    "documentation": {
                      "identifier": "totalUtilOf",
                      "newPage": false,
                      "searchKey": "trace.totalUtilOf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func totalUtilOf(meanUtil float64, dur int64) totalUtil"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc totalUtilOf(meanUtil float64, dur int64) totalUtil\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#totalUtil.mean",
                    "documentation": {
                      "identifier": "totalUtil.mean",
                      "newPage": false,
                      "searchKey": "trace.totalUtil.mean",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u totalUtil) mean(dur time.Duration) float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u totalUtil) mean(dur time.Duration) float64\n```\n\nmean returns the mean utilization over dur. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#MMUCurve",
              "documentation": {
                "identifier": "MMUCurve",
                "newPage": false,
                "searchKey": "trace.MMUCurve",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MMUCurve struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MMUCurve struct {\n\tseries []mmuSeries\n}\n```\n\nAn MMUCurve is the minimum mutator utilization curve across multiple window sizes. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#NewMMUCurve",
                    "documentation": {
                      "identifier": "NewMMUCurve",
                      "newPage": false,
                      "searchKey": "trace.NewMMUCurve",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewMMUCurve(utils [][]MutatorUtil) *MMUCurve"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewMMUCurve(utils [][]MutatorUtil) *MMUCurve\n```\n\nNewMMUCurve returns an MMU curve for the given mutator utilization function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#MMUCurve.MMU",
                    "documentation": {
                      "identifier": "MMUCurve.MMU",
                      "newPage": false,
                      "searchKey": "trace.MMUCurve.MMU",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *MMUCurve) MMU(window time.Duration) (mmu float64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *MMUCurve) MMU(window time.Duration) (mmu float64)\n```\n\nMMU returns the minimum mutator utilization for the given time window. This is the minimum utilization for all windows of this duration across the execution. The returned value is in the range [0, 1]. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#MMUCurve.Examples",
                    "documentation": {
                      "identifier": "MMUCurve.Examples",
                      "newPage": false,
                      "searchKey": "trace.MMUCurve.Examples",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *MMUCurve) Examples(window time.Duration, n int) (worst []UtilWindow)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *MMUCurve) Examples(window time.Duration, n int) (worst []UtilWindow)\n```\n\nExamples returns n specific examples of the lowest mutator utilization for the given window size. The returned windows will be disjoint (otherwise there would be a huge number of mostly-overlapping windows at the single lowest point). There are no guarantees on which set of disjoint windows this returns. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#MMUCurve.MUD",
                    "documentation": {
                      "identifier": "MMUCurve.MUD",
                      "newPage": false,
                      "searchKey": "trace.MMUCurve.MUD",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *MMUCurve) MUD(window time.Duration, quantiles []float64) []float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *MMUCurve) MUD(window time.Duration, quantiles []float64) []float64\n```\n\nMUD returns mutator utilization distribution quantiles for the given window size. \n\nThe mutator utilization distribution is the distribution of mean mutator utilization across all windows of the given window size in the trace. \n\nThe minimum mutator utilization is the minimum (0th percentile) of this distribution. (However, if only the minimum is desired, it's more efficient to use the MMU method.) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#MMUCurve.mmu",
                    "documentation": {
                      "identifier": "MMUCurve.mmu",
                      "newPage": false,
                      "searchKey": "trace.MMUCurve.mmu",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *MMUCurve) mmu(window time.Duration, acc *accumulator)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *MMUCurve) mmu(window time.Duration, acc *accumulator)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#mmuSeries",
              "documentation": {
                "identifier": "mmuSeries",
                "newPage": false,
                "searchKey": "trace.mmuSeries",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mmuSeries struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mmuSeries struct {\n\tutil []MutatorUtil\n\t// sums[j] is the cumulative sum of util[:j].\n\tsums []totalUtil\n\t// bands summarizes util in non-overlapping bands of duration\n\t// bandDur.\n\tbands []mmuBand\n\t// bandDur is the duration of each band.\n\tbandDur int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#newMMUSeries",
                    "documentation": {
                      "identifier": "newMMUSeries",
                      "newPage": false,
                      "searchKey": "trace.newMMUSeries",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newMMUSeries(util []MutatorUtil) mmuSeries"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newMMUSeries(util []MutatorUtil) mmuSeries\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#mmuSeries.bandTime",
                    "documentation": {
                      "identifier": "mmuSeries.bandTime",
                      "newPage": false,
                      "searchKey": "trace.mmuSeries.bandTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *mmuSeries) bandTime(i int) (start, end int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *mmuSeries) bandTime(i int) (start, end int64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#mmuSeries.mkBandUtil",
                    "documentation": {
                      "identifier": "mmuSeries.mkBandUtil",
                      "newPage": false,
                      "searchKey": "trace.mmuSeries.mkBandUtil",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *mmuSeries) mkBandUtil(series int, window time.Duration) []bandUtil"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *mmuSeries) mkBandUtil(series int, window time.Duration) []bandUtil\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#mmuSeries.bandMMU",
                    "documentation": {
                      "identifier": "mmuSeries.bandMMU",
                      "newPage": false,
                      "searchKey": "trace.mmuSeries.bandMMU",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *mmuSeries) bandMMU(bandIdx int, window time.Duration, acc *accumulator)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *mmuSeries) bandMMU(bandIdx int, window time.Duration, acc *accumulator)\n```\n\nbandMMU computes the precise minimum mutator utilization for windows with a left edge in band bandIdx. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#mmuBand",
              "documentation": {
                "identifier": "mmuBand",
                "newPage": false,
                "searchKey": "trace.mmuBand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mmuBand struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mmuBand struct {\n\t// minUtil is the minimum instantaneous mutator utilization in\n\t// this band.\n\tminUtil float64\n\t// cumUtil is the cumulative total mutator utilization between\n\t// time 0 and the left edge of this band.\n\tcumUtil totalUtil\n\n\t// integrator is the integrator for the left edge of this\n\t// band.\n\tintegrator integrator\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#bandUtil",
              "documentation": {
                "identifier": "bandUtil",
                "newPage": false,
                "searchKey": "trace.bandUtil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type bandUtil struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bandUtil struct {\n\t// Utilization series index\n\tseries int\n\t// Band index\n\ti int\n\t// Lower bound of mutator utilization for all windows\n\t// with a left edge in this band.\n\tutilBound float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#bandUtilHeap",
              "documentation": {
                "identifier": "bandUtilHeap",
                "newPage": false,
                "searchKey": "trace.bandUtilHeap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type bandUtilHeap []trace.bandUtil"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bandUtilHeap []bandUtil\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#bandUtilHeap.Len",
                    "documentation": {
                      "identifier": "bandUtilHeap.Len",
                      "newPage": false,
                      "searchKey": "trace.bandUtilHeap.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h bandUtilHeap) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h bandUtilHeap) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#bandUtilHeap.Less",
                    "documentation": {
                      "identifier": "bandUtilHeap.Less",
                      "newPage": false,
                      "searchKey": "trace.bandUtilHeap.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h bandUtilHeap) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h bandUtilHeap) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#bandUtilHeap.Swap",
                    "documentation": {
                      "identifier": "bandUtilHeap.Swap",
                      "newPage": false,
                      "searchKey": "trace.bandUtilHeap.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h bandUtilHeap) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h bandUtilHeap) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#bandUtilHeap.Push",
                    "documentation": {
                      "identifier": "bandUtilHeap.Push",
                      "newPage": false,
                      "searchKey": "trace.bandUtilHeap.Push",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *bandUtilHeap) Push(x interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *bandUtilHeap) Push(x interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#bandUtilHeap.Pop",
                    "documentation": {
                      "identifier": "bandUtilHeap.Pop",
                      "newPage": false,
                      "searchKey": "trace.bandUtilHeap.Pop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *bandUtilHeap) Pop() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *bandUtilHeap) Pop() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UtilWindow",
              "documentation": {
                "identifier": "UtilWindow",
                "newPage": false,
                "searchKey": "trace.UtilWindow",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UtilWindow struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UtilWindow struct {\n\tTime int64\n\t// MutatorUtil is the mean mutator utilization in this window.\n\tMutatorUtil float64\n}\n```\n\nUtilWindow is a specific window at Time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#utilHeap",
              "documentation": {
                "identifier": "utilHeap",
                "newPage": false,
                "searchKey": "trace.utilHeap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type utilHeap []trace.UtilWindow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype utilHeap []UtilWindow\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#utilHeap.Len",
                    "documentation": {
                      "identifier": "utilHeap.Len",
                      "newPage": false,
                      "searchKey": "trace.utilHeap.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h utilHeap) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h utilHeap) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#utilHeap.Less",
                    "documentation": {
                      "identifier": "utilHeap.Less",
                      "newPage": false,
                      "searchKey": "trace.utilHeap.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h utilHeap) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h utilHeap) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#utilHeap.Swap",
                    "documentation": {
                      "identifier": "utilHeap.Swap",
                      "newPage": false,
                      "searchKey": "trace.utilHeap.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h utilHeap) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h utilHeap) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#utilHeap.Push",
                    "documentation": {
                      "identifier": "utilHeap.Push",
                      "newPage": false,
                      "searchKey": "trace.utilHeap.Push",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *utilHeap) Push(x interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *utilHeap) Push(x interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#utilHeap.Pop",
                    "documentation": {
                      "identifier": "utilHeap.Pop",
                      "newPage": false,
                      "searchKey": "trace.utilHeap.Pop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *utilHeap) Pop() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *utilHeap) Pop() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#accumulator",
              "documentation": {
                "identifier": "accumulator",
                "newPage": false,
                "searchKey": "trace.accumulator",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type accumulator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype accumulator struct {\n\tmmu float64\n\n\t// bound is the mutator utilization bound where adding any\n\t// mutator utilization above this bound cannot affect the\n\t// accumulated statistics.\n\tbound float64\n\n\t// Worst N window tracking\n\tnWorst int\n\twHeap  utilHeap\n\n\t// Mutator utilization distribution tracking\n\tmud *mud\n\t// preciseMass is the distribution mass that must be precise\n\t// before accumulation is stopped.\n\tpreciseMass float64\n\t// lastTime and lastMU are the previous point added to the\n\t// windowed mutator utilization function.\n\tlastTime int64\n\tlastMU   float64\n}\n```\n\nAn accumulator takes a windowed mutator utilization function and tracks various statistics for that function. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#accumulator.resetTime",
                    "documentation": {
                      "identifier": "accumulator.resetTime",
                      "newPage": false,
                      "searchKey": "trace.accumulator.resetTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (acc *accumulator) resetTime()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (acc *accumulator) resetTime()\n```\n\nresetTime declares a discontinuity in the windowed mutator utilization function by resetting the current time. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#accumulator.addMU",
                    "documentation": {
                      "identifier": "accumulator.addMU",
                      "newPage": false,
                      "searchKey": "trace.accumulator.addMU",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (acc *accumulator) addMU(time int64, mu float64, window time.Duration) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (acc *accumulator) addMU(time int64, mu float64, window time.Duration) bool\n```\n\naddMU adds a point to the windowed mutator utilization function at (time, mu). This must be called for monotonically increasing values of time. \n\nIt returns true if further calls to addMU would be pointless. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#integrator",
              "documentation": {
                "identifier": "integrator",
                "newPage": false,
                "searchKey": "trace.integrator",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type integrator struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype integrator struct {\n\tu *mmuSeries\n\t// pos is the index in u.util of the current time's non-strict\n\t// predecessor.\n\tpos int\n}\n```\n\nAn integrator tracks a position in a utilization function and integrates it. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#integrator.advance",
                    "documentation": {
                      "identifier": "integrator.advance",
                      "newPage": false,
                      "searchKey": "trace.integrator.advance",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (in *integrator) advance(time int64) totalUtil"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (in *integrator) advance(time int64) totalUtil\n```\n\nadvance returns the integral of the utilization function from 0 to time. advance must be called on monotonically increasing values of times. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#integrator.next",
                    "documentation": {
                      "identifier": "integrator.next",
                      "newPage": false,
                      "searchKey": "trace.integrator.next",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (in *integrator) next(time int64) int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (in *integrator) next(time int64) int64\n```\n\nnext returns the smallest time t' > time of a change in the utilization function. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#GDesc",
              "documentation": {
                "identifier": "GDesc",
                "newPage": false,
                "searchKey": "trace.GDesc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GDesc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GDesc struct {\n\tID           uint64\n\tName         string\n\tPC           uint64\n\tCreationTime int64\n\tStartTime    int64\n\tEndTime      int64\n\n\t// List of regions in the goroutine, sorted based on the start time.\n\tRegions []*UserRegionDesc\n\n\t// Statistics of execution time during the goroutine execution.\n\tGExecutionStat\n\n\t*gdesc // private part.\n}\n```\n\nGDesc contains statistics and execution details of a single goroutine. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#GDesc.snapshotStat",
                    "documentation": {
                      "identifier": "GDesc.snapshotStat",
                      "newPage": false,
                      "searchKey": "trace.GDesc.snapshotStat",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *GDesc) snapshotStat(lastTs, activeGCStartTime int64) (ret GExecutionStat)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *GDesc) snapshotStat(lastTs, activeGCStartTime int64) (ret GExecutionStat)\n```\n\nsnapshotStat returns the snapshot of the goroutine execution statistics. This is called as we process the ordered trace event stream. lastTs and activeGCStartTime are used to process pending statistics if this is called before any goroutine end event. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#GDesc.finalize",
                    "documentation": {
                      "identifier": "GDesc.finalize",
                      "newPage": false,
                      "searchKey": "trace.GDesc.finalize",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g *GDesc) finalize(lastTs, activeGCStartTime int64, trigger *Event)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g *GDesc) finalize(lastTs, activeGCStartTime int64, trigger *Event)\n```\n\nfinalize is called when processing a goroutine end event or at the end of trace processing. This finalizes the execution stat and any active regions in the goroutine, in which case trigger is nil. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#UserRegionDesc",
              "documentation": {
                "identifier": "UserRegionDesc",
                "newPage": false,
                "searchKey": "trace.UserRegionDesc",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UserRegionDesc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UserRegionDesc struct {\n\tTaskID uint64\n\tName   string\n\n\t// Region start event. Normally EvUserRegion start event or nil,\n\t// but can be EvGoCreate event if the region is a synthetic\n\t// region representing task inheritance from the parent goroutine.\n\tStart *Event\n\n\t// Region end event. Normally EvUserRegion end event or nil,\n\t// but can be EvGoStop or EvGoEnd event if the goroutine\n\t// terminated without explicitly ending the region.\n\tEnd *Event\n\n\tGExecutionStat\n}\n```\n\nUserRegionDesc represents a region and goroutine execution stats while the region was active. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#GExecutionStat",
              "documentation": {
                "identifier": "GExecutionStat",
                "newPage": false,
                "searchKey": "trace.GExecutionStat",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GExecutionStat struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GExecutionStat struct {\n\tExecTime      int64\n\tSchedWaitTime int64\n\tIOTime        int64\n\tBlockTime     int64\n\tSyscallTime   int64\n\tGCTime        int64\n\tSweepTime     int64\n\tTotalTime     int64\n}\n```\n\nGExecutionStat contains statistics about a goroutine's execution during a period of time. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#GExecutionStat.sub",
                    "documentation": {
                      "identifier": "GExecutionStat.sub",
                      "newPage": false,
                      "searchKey": "trace.GExecutionStat.sub",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s GExecutionStat) sub(v GExecutionStat) (r GExecutionStat)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s GExecutionStat) sub(v GExecutionStat) (r GExecutionStat)\n```\n\nsub returns the stats v-s. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gdesc",
              "documentation": {
                "identifier": "gdesc",
                "newPage": false,
                "searchKey": "trace.gdesc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gdesc struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gdesc struct {\n\tlastStartTime    int64\n\tblockNetTime     int64\n\tblockSyncTime    int64\n\tblockSyscallTime int64\n\tblockSweepTime   int64\n\tblockGCTime      int64\n\tblockSchedTime   int64\n\n\tactiveRegions []*UserRegionDesc // stack of active regions\n}\n```\n\ngdesc is a private part of GDesc that is required only during analysis. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#mud",
              "documentation": {
                "identifier": "mud",
                "newPage": false,
                "searchKey": "trace.mud",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mud struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mud struct {\n\tsorted, unsorted []edge\n\n\t// trackMass is the inverse cumulative sum to track as the\n\t// distribution is updated.\n\ttrackMass float64\n\t// trackBucket is the bucket in which trackMass falls. If the\n\t// total mass of the distribution is < trackMass, this is\n\t// len(hist).\n\ttrackBucket int\n\t// trackSum is the cumulative sum of hist[:trackBucket]. Once\n\t// trackSum >= trackMass, trackBucket must be recomputed.\n\ttrackSum float64\n\n\t// hist is a hierarchical histogram of distribution mass.\n\thist [mudDegree]float64\n}\n```\n\nmud is an updatable mutator utilization distribution. \n\nThis is a continuous distribution of duration over mutator utilization. For example, the integral from mutator utilization a to b is the total duration during which the mutator utilization was in the range [a, b]. \n\nThis distribution is *not* normalized (it is not a probability distribution). This makes it easier to work with as it's being updated. \n\nIt is represented as the sum of scaled uniform distribution functions and Dirac delta functions (which are treated as degenerate uniform distributions). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#mud.add",
                    "documentation": {
                      "identifier": "mud.add",
                      "newPage": false,
                      "searchKey": "trace.mud.add",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *mud) add(l, r, area float64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *mud) add(l, r, area float64)\n```\n\nadd adds a uniform function over [l, r] scaled so the total weight of the uniform is area. If l==r, this adds a Dirac delta function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#mud.setTrackMass",
                    "documentation": {
                      "identifier": "mud.setTrackMass",
                      "newPage": false,
                      "searchKey": "trace.mud.setTrackMass",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *mud) setTrackMass(mass float64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *mud) setTrackMass(mass float64)\n```\n\nsetTrackMass sets the mass to track the inverse cumulative sum for. \n\nSpecifically, mass is a cumulative duration, and the mutator utilization bounds for this duration can be queried using approxInvCumulativeSum. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#mud.approxInvCumulativeSum",
                    "documentation": {
                      "identifier": "mud.approxInvCumulativeSum",
                      "newPage": false,
                      "searchKey": "trace.mud.approxInvCumulativeSum",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *mud) approxInvCumulativeSum() (float64, float64, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *mud) approxInvCumulativeSum() (float64, float64, bool)\n```\n\napproxInvCumulativeSum is like invCumulativeSum, but specifically operates on the tracked mass and returns an upper and lower bound approximation of the inverse cumulative sum. \n\nThe true inverse cumulative sum will be in the range [lower, upper). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#mud.invCumulativeSum",
                    "documentation": {
                      "identifier": "mud.invCumulativeSum",
                      "newPage": false,
                      "searchKey": "trace.mud.invCumulativeSum",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *mud) invCumulativeSum(y float64) (float64, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *mud) invCumulativeSum(y float64) (float64, bool)\n```\n\ninvCumulativeSum returns x such that the integral of d from -∞ to x is y. If the total weight of d is less than y, it returns the maximum of the distribution and false. \n\nSpecifically, y is a cumulative duration, and invCumulativeSum returns the mutator utilization x such that at least y time has been spent with mutator utilization <= x. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#edge",
              "documentation": {
                "identifier": "edge",
                "newPage": false,
                "searchKey": "trace.edge",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type edge struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype edge struct {\n\t// At x, the function increases by y.\n\tx, delta float64\n\t// Additionally at x is a Dirac delta function with area dirac.\n\tdirac float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#eventBatch",
              "documentation": {
                "identifier": "eventBatch",
                "newPage": false,
                "searchKey": "trace.eventBatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type eventBatch struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eventBatch struct {\n\tevents   []*Event\n\tselected bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#orderEvent",
              "documentation": {
                "identifier": "orderEvent",
                "newPage": false,
                "searchKey": "trace.orderEvent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type orderEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype orderEvent struct {\n\tev    *Event\n\tbatch int\n\tg     uint64\n\tinit  gState\n\tnext  gState\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gStatus",
              "documentation": {
                "identifier": "gStatus",
                "newPage": false,
                "searchKey": "trace.gStatus",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gStatus int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gStatus int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#gState",
              "documentation": {
                "identifier": "gState",
                "newPage": false,
                "searchKey": "trace.gState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type gState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype gState struct {\n\tseq    uint64\n\tstatus gStatus\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#stateTransition",
                    "documentation": {
                      "identifier": "stateTransition",
                      "newPage": false,
                      "searchKey": "trace.stateTransition",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func stateTransition(ev *Event) (g uint64, init, next gState)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc stateTransition(ev *Event) (g uint64, init, next gState)\n```\n\nstateTransition returns goroutine state (sequence and status) when the event becomes ready for merging (init) and the goroutine state after the event (next). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#orderEventList",
              "documentation": {
                "identifier": "orderEventList",
                "newPage": false,
                "searchKey": "trace.orderEventList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type orderEventList []trace.orderEvent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype orderEventList []orderEvent\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#orderEventList.Len",
                    "documentation": {
                      "identifier": "orderEventList.Len",
                      "newPage": false,
                      "searchKey": "trace.orderEventList.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l orderEventList) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l orderEventList) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#orderEventList.Less",
                    "documentation": {
                      "identifier": "orderEventList.Less",
                      "newPage": false,
                      "searchKey": "trace.orderEventList.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l orderEventList) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l orderEventList) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#orderEventList.Swap",
                    "documentation": {
                      "identifier": "orderEventList.Swap",
                      "newPage": false,
                      "searchKey": "trace.orderEventList.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l orderEventList) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l orderEventList) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#eventList",
              "documentation": {
                "identifier": "eventList",
                "newPage": false,
                "searchKey": "trace.eventList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type eventList []*trace.Event"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eventList []*Event\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#eventList.Len",
                    "documentation": {
                      "identifier": "eventList.Len",
                      "newPage": false,
                      "searchKey": "trace.eventList.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l eventList) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l eventList) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#eventList.Less",
                    "documentation": {
                      "identifier": "eventList.Less",
                      "newPage": false,
                      "searchKey": "trace.eventList.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l eventList) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l eventList) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#eventList.Swap",
                    "documentation": {
                      "identifier": "eventList.Swap",
                      "newPage": false,
                      "searchKey": "trace.eventList.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l eventList) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l eventList) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#eventSeqList",
              "documentation": {
                "identifier": "eventSeqList",
                "newPage": false,
                "searchKey": "trace.eventSeqList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type eventSeqList []*trace.Event"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eventSeqList []*Event\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#eventSeqList.Len",
                    "documentation": {
                      "identifier": "eventSeqList.Len",
                      "newPage": false,
                      "searchKey": "trace.eventSeqList.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l eventSeqList) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l eventSeqList) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#eventSeqList.Less",
                    "documentation": {
                      "identifier": "eventSeqList.Less",
                      "newPage": false,
                      "searchKey": "trace.eventSeqList.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l eventSeqList) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l eventSeqList) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#eventSeqList.Swap",
                    "documentation": {
                      "identifier": "eventSeqList.Swap",
                      "newPage": false,
                      "searchKey": "trace.eventSeqList.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l eventSeqList) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l eventSeqList) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#Event",
              "documentation": {
                "identifier": "Event",
                "newPage": false,
                "searchKey": "trace.Event",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Event struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Event struct {\n\tOff   int       // offset in input file (for debugging and error reporting)\n\tType  byte      // one of Ev*\n\tseq   int64     // sequence number\n\tTs    int64     // timestamp in nanoseconds\n\tP     int       // P on which the event happened (can be one of TimerP, NetpollP, SyscallP)\n\tG     uint64    // G on which the event happened\n\tStkID uint64    // unique stack ID\n\tStk   []*Frame  // stack trace (can be empty)\n\tArgs  [3]uint64 // event-type-specific arguments\n\tSArgs []string  // event-type-specific string args\n\t// linked event (can be nil), depends on event type:\n\t// for GCStart: the GCStop\n\t// for GCSTWStart: the GCSTWDone\n\t// for GCSweepStart: the GCSweepDone\n\t// for GoCreate: first GoStart of the created goroutine\n\t// for GoStart/GoStartLabel: the associated GoEnd, GoBlock or other blocking event\n\t// for GoSched/GoPreempt: the next GoStart\n\t// for GoBlock and other blocking events: the unblock event\n\t// for GoUnblock: the associated GoStart\n\t// for blocking GoSysCall: the associated GoSysExit\n\t// for GoSysExit: the next GoStart\n\t// for GCMarkAssistStart: the associated GCMarkAssistDone\n\t// for UserTaskCreate: the UserTaskEnd\n\t// for UserRegion: if the start region, the corresponding UserRegion end event\n\tLink *Event\n}\n```\n\nEvent describes one event in the trace. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#Event.String",
                    "documentation": {
                      "identifier": "Event.String",
                      "newPage": false,
                      "searchKey": "trace.Event.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ev *Event) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ev *Event) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#Frame",
              "documentation": {
                "identifier": "Frame",
                "newPage": false,
                "searchKey": "trace.Frame",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Frame struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Frame struct {\n\tPC   uint64\n\tFn   string\n\tFile string\n\tLine int\n}\n```\n\nFrame is a frame in stack traces. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#ParseResult",
              "documentation": {
                "identifier": "ParseResult",
                "newPage": false,
                "searchKey": "trace.ParseResult",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ParseResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ParseResult struct {\n\t// Events is the sorted list of Events in the trace.\n\tEvents []*Event\n\t// Stacks is the stack traces keyed by stack IDs from the trace.\n\tStacks map[uint64][]*Frame\n}\n```\n\nParseResult is the result of Parse. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#Parse",
                    "documentation": {
                      "identifier": "Parse",
                      "newPage": false,
                      "searchKey": "trace.Parse",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Parse(r io.Reader, bin string) (ParseResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Parse(r io.Reader, bin string) (ParseResult, error)\n```\n\nParse parses, post-processes and verifies the trace. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#parse",
                    "documentation": {
                      "identifier": "parse",
                      "newPage": false,
                      "searchKey": "trace.parse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parse(r io.Reader, bin string) (int, ParseResult, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parse(r io.Reader, bin string) (int, ParseResult, error)\n```\n\nparse parses, post-processes and verifies the trace. It returns the trace version and the list of events. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#rawEvent",
              "documentation": {
                "identifier": "rawEvent",
                "newPage": false,
                "searchKey": "trace.rawEvent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type rawEvent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rawEvent struct {\n\toff   int\n\ttyp   byte\n\targs  []uint64\n\tsargs []string\n}\n```\n\nrawEvent is a helper type used during parsing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#Writer",
              "documentation": {
                "identifier": "Writer",
                "newPage": false,
                "searchKey": "trace.Writer",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Writer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Writer struct {\n\tbytes.Buffer\n}\n```\n\nWriter is a test trace writer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/internal/trace#NewWriter",
                    "documentation": {
                      "identifier": "NewWriter",
                      "newPage": false,
                      "searchKey": "trace.NewWriter",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewWriter() *Writer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewWriter() *Writer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/internal/trace#Writer.Emit",
                    "documentation": {
                      "identifier": "Writer.Emit",
                      "newPage": false,
                      "searchKey": "trace.Writer.Emit",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Emit(typ byte, args ...uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Emit(typ byte, args ...uint64)\n```\n\nEmit writes an event record to the trace. See Event types for valid types and required arguments. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/internal/trace#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/internal/trace#MutatorUtilization",
              "documentation": {
                "identifier": "MutatorUtilization",
                "newPage": false,
                "searchKey": "trace.MutatorUtilization",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MutatorUtilization(events []*Event, flags UtilFlags) [][]MutatorUtil"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MutatorUtilization(events []*Event, flags UtilFlags) [][]MutatorUtil\n```\n\nMutatorUtilization returns a set of mutator utilization functions for the given trace. Each function will always end with 0 utilization. The bounds of each function are implicit in the first and last event; outside of these bounds each function is undefined. \n\nIf the UtilPerProc flag is not given, this always returns a single utilization function. Otherwise, it returns one function per P. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#addUtil",
              "documentation": {
                "identifier": "addUtil",
                "newPage": false,
                "searchKey": "trace.addUtil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addUtil(util []MutatorUtil, mu MutatorUtil) []MutatorUtil"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addUtil(util []MutatorUtil, mu MutatorUtil) []MutatorUtil\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#GoroutineStats",
              "documentation": {
                "identifier": "GoroutineStats",
                "newPage": false,
                "searchKey": "trace.GoroutineStats",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func GoroutineStats(events []*Event) map[uint64]*GDesc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GoroutineStats(events []*Event) map[uint64]*GDesc\n```\n\nGoroutineStats generates statistics for all goroutines in the trace. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#RelatedGoroutines",
              "documentation": {
                "identifier": "RelatedGoroutines",
                "newPage": false,
                "searchKey": "trace.RelatedGoroutines",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RelatedGoroutines(events []*Event, goid uint64) map[uint64]bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RelatedGoroutines(events []*Event, goid uint64) map[uint64]bool\n```\n\nRelatedGoroutines finds a set of goroutines related to goroutine goid. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#order1007",
              "documentation": {
                "identifier": "order1007",
                "newPage": false,
                "searchKey": "trace.order1007",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func order1007(m map[int][]*Event) (events []*Event, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc order1007(m map[int][]*Event) (events []*Event, err error)\n```\n\norder1007 merges a set of per-P event batches into a single, consistent stream. The high level idea is as follows. Events within an individual batch are in correct order, because they are emitted by a single P. So we need to produce a correct interleaving of the batches. To do this we take first unmerged event from each batch (frontier). Then choose subset that is \"ready\" to be merged, that is, events for which all dependencies are already merged. Then we choose event with the lowest timestamp from the subset, merge it and repeat. This approach ensures that we form a consistent stream even if timestamps are incorrect (condition observed on some machines). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#transitionReady",
              "documentation": {
                "identifier": "transitionReady",
                "newPage": false,
                "searchKey": "trace.transitionReady",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func transitionReady(g uint64, curr, init gState) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc transitionReady(g uint64, curr, init gState) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#transition",
              "documentation": {
                "identifier": "transition",
                "newPage": false,
                "searchKey": "trace.transition",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func transition(gs map[uint64]gState, g uint64, init, next gState)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc transition(gs map[uint64]gState, g uint64, init, next gState)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#order1005",
              "documentation": {
                "identifier": "order1005",
                "newPage": false,
                "searchKey": "trace.order1005",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func order1005(m map[int][]*Event) (events []*Event, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc order1005(m map[int][]*Event) (events []*Event, err error)\n```\n\norder1005 merges a set of per-P event batches into a single, consistent stream. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#goCmd",
              "documentation": {
                "identifier": "goCmd",
                "newPage": false,
                "searchKey": "trace.goCmd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func goCmd() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc goCmd() string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#readTrace",
              "documentation": {
                "identifier": "readTrace",
                "newPage": false,
                "searchKey": "trace.readTrace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readTrace(r io.Reader) (ver int, events []rawEvent, strings map[uint64]string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readTrace(r io.Reader) (ver int, events []rawEvent, strings map[uint64]string, err error)\n```\n\nreadTrace does wire-format parsing and verification. It does not care about specific event types and argument meaning. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#readStr",
              "documentation": {
                "identifier": "readStr",
                "newPage": false,
                "searchKey": "trace.readStr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readStr(r io.Reader, off0 int) (s string, off int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readStr(r io.Reader, off0 int) (s string, off int, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#parseHeader",
              "documentation": {
                "identifier": "parseHeader",
                "newPage": false,
                "searchKey": "trace.parseHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseHeader(buf []byte) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseHeader(buf []byte) (int, error)\n```\n\nparseHeader parses trace header of the form \"go 1.7 trace\\x00\\x00\\x00\\x00\" and returns parsed version as 1007. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#parseEvents",
              "documentation": {
                "identifier": "parseEvents",
                "newPage": false,
                "searchKey": "trace.parseEvents",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseEvents(ver int, rawEvents []rawEvent, strings map[uint64]string) (events []*Event, stacks map[uint64][]*Frame, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseEvents(ver int, rawEvents []rawEvent, strings map[uint64]string) (events []*Event, stacks map[uint64][]*Frame, err error)\n```\n\nParse events transforms raw events into events. It does analyze and verify per-event-type arguments. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#removeFutile",
              "documentation": {
                "identifier": "removeFutile",
                "newPage": false,
                "searchKey": "trace.removeFutile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func removeFutile(events []*Event) []*Event"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc removeFutile(events []*Event) []*Event\n```\n\nremoveFutile removes all constituents of futile wakeups (block, unblock, start). For example, a goroutine was unblocked on a mutex, but another goroutine got ahead and acquired the mutex before the first goroutine is scheduled, so the first goroutine has to block again. Such wakeups happen on buffered channels and sync.Mutex, but are generally not interesting for end user. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#postProcessTrace",
              "documentation": {
                "identifier": "postProcessTrace",
                "newPage": false,
                "searchKey": "trace.postProcessTrace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func postProcessTrace(ver int, events []*Event) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc postProcessTrace(ver int, events []*Event) error\n```\n\npostProcessTrace does inter-event verification and information restoration. The resulting trace is guaranteed to be consistent (for example, a P does not run two Gs at the same time, or a G is indeed blocked before an unblock event). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#symbolize",
              "documentation": {
                "identifier": "symbolize",
                "newPage": false,
                "searchKey": "trace.symbolize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func symbolize(events []*Event, bin string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc symbolize(events []*Event, bin string) error\n```\n\nsymbolize attaches func/file/line info to stack traces. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#readVal",
              "documentation": {
                "identifier": "readVal",
                "newPage": false,
                "searchKey": "trace.readVal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readVal(r io.Reader, off0 int) (v uint64, off int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readVal(r io.Reader, off0 int) (v uint64, off int, err error)\n```\n\nreadVal reads unsigned base-128 value from r. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#Print",
              "documentation": {
                "identifier": "Print",
                "newPage": false,
                "searchKey": "trace.Print",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Print(events []*Event)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Print(events []*Event)\n```\n\nPrint dumps events to stdout. For debugging. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#PrintEvent",
              "documentation": {
                "identifier": "PrintEvent",
                "newPage": false,
                "searchKey": "trace.PrintEvent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PrintEvent(ev *Event)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PrintEvent(ev *Event)\n```\n\nPrintEvent dumps the event to stdout. For debugging. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#argNum",
              "documentation": {
                "identifier": "argNum",
                "newPage": false,
                "searchKey": "trace.argNum",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func argNum(raw rawEvent, ver int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc argNum(raw rawEvent, ver int) int\n```\n\nargNum returns total number of args for the event accounting for timestamps, sequence numbers and differences between trace format versions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#appendVarint",
              "documentation": {
                "identifier": "appendVarint",
                "newPage": false,
                "searchKey": "trace.appendVarint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendVarint(buf []byte, v uint64) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendVarint(buf []byte, v uint64) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#aeq",
              "documentation": {
                "identifier": "aeq",
                "newPage": false,
                "searchKey": "trace.aeq",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func aeq(x, y float64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc aeq(x, y float64) bool\n```\n\naeq returns true if x and y are equal up to 8 digits (1 part in 100 million). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestMMU",
              "documentation": {
                "identifier": "TestMMU",
                "newPage": false,
                "searchKey": "trace.TestMMU",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMMU(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMMU(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestMMUTrace",
              "documentation": {
                "identifier": "TestMMUTrace",
                "newPage": false,
                "searchKey": "trace.TestMMUTrace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMMUTrace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMMUTrace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#BenchmarkMMU",
              "documentation": {
                "identifier": "BenchmarkMMU",
                "newPage": false,
                "searchKey": "trace.BenchmarkMMU",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMMU(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMMU(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#mmuSlow",
              "documentation": {
                "identifier": "mmuSlow",
                "newPage": false,
                "searchKey": "trace.mmuSlow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mmuSlow(util []MutatorUtil, window time.Duration) (mmu float64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mmuSlow(util []MutatorUtil, window time.Duration) (mmu float64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestMUD",
              "documentation": {
                "identifier": "TestMUD",
                "newPage": false,
                "searchKey": "trace.TestMUD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMUD(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMUD(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestMUDTracking",
              "documentation": {
                "identifier": "TestMUDTracking",
                "newPage": false,
                "searchKey": "trace.TestMUDTracking",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMUDTracking(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMUDTracking(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestCorruptedInputs",
              "documentation": {
                "identifier": "TestCorruptedInputs",
                "newPage": false,
                "searchKey": "trace.TestCorruptedInputs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCorruptedInputs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCorruptedInputs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestParseCanned",
              "documentation": {
                "identifier": "TestParseCanned",
                "newPage": false,
                "searchKey": "trace.TestParseCanned",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseCanned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseCanned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestParseVersion",
              "documentation": {
                "identifier": "TestParseVersion",
                "newPage": false,
                "searchKey": "trace.TestParseVersion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseVersion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseVersion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/internal/trace#TestTimestampOverflow",
              "documentation": {
                "identifier": "TestTimestampOverflow",
                "newPage": false,
                "searchKey": "trace.TestTimestampOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimestampOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimestampOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
