{
  "pathID": "/hash/crc32",
  "documentation": {
    "identifier": "crc32",
    "newPage": true,
    "searchKey": "hash/crc32",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package crc32"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package crc32 implements the 32-bit cyclic redundancy check, or CRC-32, checksum. See [https://en.wikipedia.org/wiki/Cyclic_redundancy_check](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) for information. \n\nPolynomials are represented in LSB-first form also known as reversed representation. \n\nSee [https://en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials](https://en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials) for information. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/hash/crc32#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/crc32#Castagnoli",
              "documentation": {
                "identifier": "Castagnoli",
                "newPage": false,
                "searchKey": "crc32.Castagnoli",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Castagnoli"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Castagnoli = 0x82f63b78\n```\n\nPredefined polynomials. \n\nCastagnoli's polynomial, used in iSCSI. Has better error detection characteristics than IEEE. [https://dx.doi.org/10.1109/26.231911](https://dx.doi.org/10.1109/26.231911) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#IEEE",
              "documentation": {
                "identifier": "IEEE",
                "newPage": false,
                "searchKey": "crc32.IEEE",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const IEEE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IEEE = 0xedb88320\n```\n\nPredefined polynomials. \n\nIEEE is by far and away the most common CRC-32 polynomial. Used by ethernet (IEEE 802.3), v.42, fddi, gzip, zip, png, ... \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#Koopman",
              "documentation": {
                "identifier": "Koopman",
                "newPage": false,
                "searchKey": "crc32.Koopman",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Koopman"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Koopman = 0xeb31d82e\n```\n\nPredefined polynomials. \n\nKoopman's polynomial. Also has better error detection characteristics than IEEE. [https://dx.doi.org/10.1109/DSN.2002.1028931](https://dx.doi.org/10.1109/DSN.2002.1028931) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#Size",
              "documentation": {
                "identifier": "Size",
                "newPage": false,
                "searchKey": "crc32.Size",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Size"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Size = 4\n```\n\nThe size of a CRC-32 checksum in bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliK1",
              "documentation": {
                "identifier": "castagnoliK1",
                "newPage": false,
                "searchKey": "crc32.castagnoliK1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const castagnoliK1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst castagnoliK1 = 168\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliK2",
              "documentation": {
                "identifier": "castagnoliK2",
                "newPage": false,
                "searchKey": "crc32.castagnoliK2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const castagnoliK2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst castagnoliK2 = 1344\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#magic",
              "documentation": {
                "identifier": "magic",
                "newPage": false,
                "searchKey": "crc32.magic",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst magic = \"crc\\x01\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#marshaledSize",
              "documentation": {
                "identifier": "marshaledSize",
                "newPage": false,
                "searchKey": "crc32.marshaledSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const marshaledSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst marshaledSize = len(magic) + 4 + 4\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#slicing8Cutoff",
              "documentation": {
                "identifier": "slicing8Cutoff",
                "newPage": false,
                "searchKey": "crc32.slicing8Cutoff",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const slicing8Cutoff"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst slicing8Cutoff = 16\n```\n\nUse slicing-by-8 when payload >= this value. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/crc32#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/crc32#IEEETable",
              "documentation": {
                "identifier": "IEEETable",
                "newPage": false,
                "searchKey": "crc32.IEEETable",
                "tags": [
                  "variable",
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var IEEETable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar IEEETable = simpleMakeTable(IEEE)\n```\n\nIEEETable is the table for the IEEE polynomial. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archIeeeTable8",
              "documentation": {
                "identifier": "archIeeeTable8",
                "newPage": false,
                "searchKey": "crc32.archIeeeTable8",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var archIeeeTable8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar archIeeeTable8 *slicing8Table\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliArchImpl",
              "documentation": {
                "identifier": "castagnoliArchImpl",
                "newPage": false,
                "searchKey": "crc32.castagnoliArchImpl",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var castagnoliArchImpl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar castagnoliArchImpl bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliOnce",
              "documentation": {
                "identifier": "castagnoliOnce",
                "newPage": false,
                "searchKey": "crc32.castagnoliOnce",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var castagnoliOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar castagnoliOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliSSE42TableK1",
              "documentation": {
                "identifier": "castagnoliSSE42TableK1",
                "newPage": false,
                "searchKey": "crc32.castagnoliSSE42TableK1",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var castagnoliSSE42TableK1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar castagnoliSSE42TableK1 *sse42Table\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliSSE42TableK2",
              "documentation": {
                "identifier": "castagnoliSSE42TableK2",
                "newPage": false,
                "searchKey": "crc32.castagnoliSSE42TableK2",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var castagnoliSSE42TableK2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar castagnoliSSE42TableK2 *sse42Table\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliTable",
              "documentation": {
                "identifier": "castagnoliTable",
                "newPage": false,
                "searchKey": "crc32.castagnoliTable",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var castagnoliTable"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar castagnoliTable *Table\n```\n\ncastagnoliTable points to a lazily initialized Table for the Castagnoli polynomial. MakeTable will always return this value when asked to make a Castagnoli table so we can compare against it to find when the caller is using this polynomial. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliTable8",
              "documentation": {
                "identifier": "castagnoliTable8",
                "newPage": false,
                "searchKey": "crc32.castagnoliTable8",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var castagnoliTable8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar castagnoliTable8 *slicing8Table\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#golden",
              "documentation": {
                "identifier": "golden",
                "newPage": false,
                "searchKey": "crc32.golden",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var golden"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar golden = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#haveCastagnoli",
              "documentation": {
                "identifier": "haveCastagnoli",
                "newPage": false,
                "searchKey": "crc32.haveCastagnoli",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var haveCastagnoli"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar haveCastagnoli uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#ieeeArchImpl",
              "documentation": {
                "identifier": "ieeeArchImpl",
                "newPage": false,
                "searchKey": "crc32.ieeeArchImpl",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ieeeArchImpl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ieeeArchImpl bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#ieeeOnce",
              "documentation": {
                "identifier": "ieeeOnce",
                "newPage": false,
                "searchKey": "crc32.ieeeOnce",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ieeeOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ieeeOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#ieeeTable8",
              "documentation": {
                "identifier": "ieeeTable8",
                "newPage": false,
                "searchKey": "crc32.ieeeTable8",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ieeeTable8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ieeeTable8 *slicing8Table\n```\n\nieeeTable8 is the slicing8Table for IEEE \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#updateCastagnoli",
              "documentation": {
                "identifier": "updateCastagnoli",
                "newPage": false,
                "searchKey": "crc32.updateCastagnoli",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateCastagnoli"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateCastagnoli func(crc uint32, p []byte) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#updateIEEE",
              "documentation": {
                "identifier": "updateIEEE",
                "newPage": false,
                "searchKey": "crc32.updateIEEE",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateIEEE"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateIEEE func(crc uint32, p []byte) uint32\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/crc32#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/crc32#Table",
              "documentation": {
                "identifier": "Table",
                "newPage": false,
                "searchKey": "crc32.Table",
                "tags": [
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Table [256]uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Table [256]uint32\n```\n\nTable is a 256-word table representing the polynomial for efficient processing. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/crc32#MakeTable",
                    "documentation": {
                      "identifier": "MakeTable",
                      "newPage": false,
                      "searchKey": "crc32.MakeTable",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeTable(poly uint32) *Table"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeTable(poly uint32) *Table\n```\n\nMakeTable returns a Table constructed from the specified polynomial. The contents of this Table must not be modified. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#simpleMakeTable",
                    "documentation": {
                      "identifier": "simpleMakeTable",
                      "newPage": false,
                      "searchKey": "crc32.simpleMakeTable",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func simpleMakeTable(poly uint32) *Table"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc simpleMakeTable(poly uint32) *Table\n```\n\nsimpleMakeTable allocates and constructs a Table for the specified polynomial. The table is suitable for use with the simple algorithm (simpleUpdate). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#digest",
              "documentation": {
                "identifier": "digest",
                "newPage": false,
                "searchKey": "crc32.digest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type digest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype digest struct {\n\tcrc uint32\n\ttab *Table\n}\n```\n\ndigest represents the partial evaluation of a checksum. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.BlockSize",
                    "documentation": {
                      "identifier": "digest.BlockSize",
                      "newPage": false,
                      "searchKey": "crc32.digest.BlockSize",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) BlockSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.MarshalBinary",
                    "documentation": {
                      "identifier": "digest.MarshalBinary",
                      "newPage": false,
                      "searchKey": "crc32.digest.MarshalBinary",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) MarshalBinary() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) MarshalBinary() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.Reset",
                    "documentation": {
                      "identifier": "digest.Reset",
                      "newPage": false,
                      "searchKey": "crc32.digest.Reset",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Reset()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.Size",
                    "documentation": {
                      "identifier": "digest.Size",
                      "newPage": false,
                      "searchKey": "crc32.digest.Size",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Size() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Size() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.Sum",
                    "documentation": {
                      "identifier": "digest.Sum",
                      "newPage": false,
                      "searchKey": "crc32.digest.Sum",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Sum(in []byte) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Sum(in []byte) []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.Sum32",
                    "documentation": {
                      "identifier": "digest.Sum32",
                      "newPage": false,
                      "searchKey": "crc32.digest.Sum32",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Sum32() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Sum32() uint32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.UnmarshalBinary",
                    "documentation": {
                      "identifier": "digest.UnmarshalBinary",
                      "newPage": false,
                      "searchKey": "crc32.digest.UnmarshalBinary",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) UnmarshalBinary(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) UnmarshalBinary(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/crc32#digest.Write",
                    "documentation": {
                      "identifier": "digest.Write",
                      "newPage": false,
                      "searchKey": "crc32.digest.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#slicing8Table",
              "documentation": {
                "identifier": "slicing8Table",
                "newPage": false,
                "searchKey": "crc32.slicing8Table",
                "tags": [
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type slicing8Table [8]crc32.Table"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype slicing8Table [8]Table\n```\n\nslicing8Table is array of 8 Tables, used by the slicing-by-8 algorithm. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/crc32#slicingMakeTable",
                    "documentation": {
                      "identifier": "slicingMakeTable",
                      "newPage": false,
                      "searchKey": "crc32.slicingMakeTable",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func slicingMakeTable(poly uint32) *slicing8Table"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc slicingMakeTable(poly uint32) *slicing8Table\n```\n\nslicingMakeTable constructs a slicing8Table for the specified polynomial. The table is suitable for use with the slicing-by-8 algorithm (slicingUpdate). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#sse42Table",
              "documentation": {
                "identifier": "sse42Table",
                "newPage": false,
                "searchKey": "crc32.sse42Table",
                "tags": [
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sse42Table [4]crc32.Table"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sse42Table [4]Table\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#test",
              "documentation": {
                "identifier": "test",
                "newPage": false,
                "searchKey": "crc32.test",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype test struct {\n\tieee, castagnoli    uint32\n\tin                  string\n\thalfStateIEEE       string // IEEE marshaled hash state after first half of in written, used by TestGoldenMarshal\n\thalfStateCastagnoli string // Castagnoli marshaled hash state after first half of in written, used by TestGoldenMarshal\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/crc32#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/crc32#BenchmarkCRC32",
              "documentation": {
                "identifier": "BenchmarkCRC32",
                "newPage": false,
                "searchKey": "crc32.BenchmarkCRC32",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCRC32(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCRC32(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#Checksum",
              "documentation": {
                "identifier": "Checksum",
                "newPage": false,
                "searchKey": "crc32.Checksum",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Checksum(data []byte, tab *Table) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Checksum(data []byte, tab *Table) uint32\n```\n\nChecksum returns the CRC-32 checksum of data using the polynomial represented by the Table. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#ChecksumIEEE",
              "documentation": {
                "identifier": "ChecksumIEEE",
                "newPage": false,
                "searchKey": "crc32.ChecksumIEEE",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ChecksumIEEE(data []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ChecksumIEEE(data []byte) uint32\n```\n\nChecksumIEEE returns the CRC-32 checksum of data using the IEEE polynomial. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#New",
              "documentation": {
                "identifier": "New",
                "newPage": false,
                "searchKey": "crc32.New",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func New(tab *Table) hash.Hash32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc New(tab *Table) hash.Hash32\n```\n\nNew creates a new hash.Hash32 computing the CRC-32 checksum using the polynomial represented by the Table. Its Sum method will lay the value out in big-endian byte order. The returned Hash32 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#NewIEEE",
              "documentation": {
                "identifier": "NewIEEE",
                "newPage": false,
                "searchKey": "crc32.NewIEEE",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewIEEE() hash.Hash32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewIEEE() hash.Hash32\n```\n\nNewIEEE creates a new hash.Hash32 computing the CRC-32 checksum using the IEEE polynomial. Its Sum method will lay the value out in big-endian byte order. The returned Hash32 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestArchCastagnoli",
              "documentation": {
                "identifier": "TestArchCastagnoli",
                "newPage": false,
                "searchKey": "crc32.TestArchCastagnoli",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArchCastagnoli(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArchCastagnoli(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestArchIEEE",
              "documentation": {
                "identifier": "TestArchIEEE",
                "newPage": false,
                "searchKey": "crc32.TestArchIEEE",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestArchIEEE(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestArchIEEE(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestCastagnoliRace",
              "documentation": {
                "identifier": "TestCastagnoliRace",
                "newPage": false,
                "searchKey": "crc32.TestCastagnoliRace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCastagnoliRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCastagnoliRace(t *testing.T)\n```\n\nFirst test, so that it can be the one to initialize castagnoliTable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestGolden",
              "documentation": {
                "identifier": "TestGolden",
                "newPage": false,
                "searchKey": "crc32.TestGolden",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGolden(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGolden(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestGoldenMarshal",
              "documentation": {
                "identifier": "TestGoldenMarshal",
                "newPage": false,
                "searchKey": "crc32.TestGoldenMarshal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoldenMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoldenMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestMarshalTableMismatch",
              "documentation": {
                "identifier": "TestMarshalTableMismatch",
                "newPage": false,
                "searchKey": "crc32.TestMarshalTableMismatch",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalTableMismatch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalTableMismatch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestSimple",
              "documentation": {
                "identifier": "TestSimple",
                "newPage": false,
                "searchKey": "crc32.TestSimple",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSimple(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSimple(t *testing.T)\n```\n\nTestSimple tests the simple generic algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#TestSlicing",
              "documentation": {
                "identifier": "TestSlicing",
                "newPage": false,
                "searchKey": "crc32.TestSlicing",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSlicing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSlicing(t *testing.T)\n```\n\nTestSimple tests the slicing-by-8 algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#Update",
              "documentation": {
                "identifier": "Update",
                "newPage": false,
                "searchKey": "crc32.Update",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Update(crc uint32, tab *Table, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Update(crc uint32, tab *Table, p []byte) uint32\n```\n\nUpdate returns the result of adding the bytes in p to the crc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#appendUint32",
              "documentation": {
                "identifier": "appendUint32",
                "newPage": false,
                "searchKey": "crc32.appendUint32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendUint32(b []byte, x uint32) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendUint32(b []byte, x uint32) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archAvailableCastagnoli",
              "documentation": {
                "identifier": "archAvailableCastagnoli",
                "newPage": false,
                "searchKey": "crc32.archAvailableCastagnoli",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAvailableCastagnoli() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAvailableCastagnoli() bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archAvailableIEEE",
              "documentation": {
                "identifier": "archAvailableIEEE",
                "newPage": false,
                "searchKey": "crc32.archAvailableIEEE",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func archAvailableIEEE() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archAvailableIEEE() bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archInitCastagnoli",
              "documentation": {
                "identifier": "archInitCastagnoli",
                "newPage": false,
                "searchKey": "crc32.archInitCastagnoli",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func archInitCastagnoli()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archInitCastagnoli()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archInitIEEE",
              "documentation": {
                "identifier": "archInitIEEE",
                "newPage": false,
                "searchKey": "crc32.archInitIEEE",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func archInitIEEE()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archInitIEEE()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archUpdateCastagnoli",
              "documentation": {
                "identifier": "archUpdateCastagnoli",
                "newPage": false,
                "searchKey": "crc32.archUpdateCastagnoli",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func archUpdateCastagnoli(crc uint32, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archUpdateCastagnoli(crc uint32, p []byte) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#archUpdateIEEE",
              "documentation": {
                "identifier": "archUpdateIEEE",
                "newPage": false,
                "searchKey": "crc32.archUpdateIEEE",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func archUpdateIEEE(crc uint32, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc archUpdateIEEE(crc uint32, p []byte) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#benchmark",
              "documentation": {
                "identifier": "benchmark",
                "newPage": false,
                "searchKey": "crc32.benchmark",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmark(b *testing.B, h hash.Hash32, n, alignment int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmark(b *testing.B, h hash.Hash32, n, alignment int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#benchmarkAll",
              "documentation": {
                "identifier": "benchmarkAll",
                "newPage": false,
                "searchKey": "crc32.benchmarkAll",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkAll(h hash.Hash32) func(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkAll(h hash.Hash32) func(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliInit",
              "documentation": {
                "identifier": "castagnoliInit",
                "newPage": false,
                "searchKey": "crc32.castagnoliInit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func castagnoliInit()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc castagnoliInit()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliSSE42",
              "documentation": {
                "identifier": "castagnoliSSE42",
                "newPage": false,
                "searchKey": "crc32.castagnoliSSE42",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func castagnoliSSE42(crc uint32, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc castagnoliSSE42(crc uint32, p []byte) uint32\n```\n\ncastagnoliSSE42 is defined in crc32_amd64.s and uses the SSE 4.2 CRC32 instruction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliSSE42Triple",
              "documentation": {
                "identifier": "castagnoliSSE42Triple",
                "newPage": false,
                "searchKey": "crc32.castagnoliSSE42Triple",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func castagnoliSSE42Triple(crcA, crcB, crcC uint32,..."
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc castagnoliSSE42Triple(\n\tcrcA, crcB, crcC uint32,\n\ta, b, c []byte,\n\trounds uint32,\n) (retA uint32, retB uint32, retC uint32)\n```\n\ncastagnoliSSE42Triple is defined in crc32_amd64.s and uses the SSE 4.2 CRC32 instruction. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#castagnoliShift",
              "documentation": {
                "identifier": "castagnoliShift",
                "newPage": false,
                "searchKey": "crc32.castagnoliShift",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func castagnoliShift(table *sse42Table, crc uint32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc castagnoliShift(table *sse42Table, crc uint32) uint32\n```\n\ncastagnoliShift computes the CRC32-C of K1 or K2 zeroes (depending on the table given) with the given initial crc value. This corresponds to CRC(crc, O) in the description in updateCastagnoli. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#ieeeCLMUL",
              "documentation": {
                "identifier": "ieeeCLMUL",
                "newPage": false,
                "searchKey": "crc32.ieeeCLMUL",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ieeeCLMUL(crc uint32, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ieeeCLMUL(crc uint32, p []byte) uint32\n```\n\nieeeCLMUL is defined in crc_amd64.s and uses the PCLMULQDQ instruction as well as SSE 4.1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#ieeeInit",
              "documentation": {
                "identifier": "ieeeInit",
                "newPage": false,
                "searchKey": "crc32.ieeeInit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ieeeInit()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ieeeInit()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#readUint32",
              "documentation": {
                "identifier": "readUint32",
                "newPage": false,
                "searchKey": "crc32.readUint32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readUint32(b []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readUint32(b []byte) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#simplePopulateTable",
              "documentation": {
                "identifier": "simplePopulateTable",
                "newPage": false,
                "searchKey": "crc32.simplePopulateTable",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func simplePopulateTable(poly uint32, t *Table)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc simplePopulateTable(poly uint32, t *Table)\n```\n\nsimplePopulateTable constructs a Table for the specified polynomial, suitable for use with simpleUpdate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#simpleUpdate",
              "documentation": {
                "identifier": "simpleUpdate",
                "newPage": false,
                "searchKey": "crc32.simpleUpdate",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func simpleUpdate(crc uint32, tab *Table, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc simpleUpdate(crc uint32, tab *Table, p []byte) uint32\n```\n\nsimpleUpdate uses the simple algorithm to update the CRC, given a table that was previously computed using simpleMakeTable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#slicingUpdate",
              "documentation": {
                "identifier": "slicingUpdate",
                "newPage": false,
                "searchKey": "crc32.slicingUpdate",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func slicingUpdate(crc uint32, tab *slicing8Table, p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc slicingUpdate(crc uint32, tab *slicing8Table, p []byte) uint32\n```\n\nslicingUpdate uses the slicing-by-8 algorithm to update the CRC, given a table that was previously computed using slicingMakeTable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#tableSum",
              "documentation": {
                "identifier": "tableSum",
                "newPage": false,
                "searchKey": "crc32.tableSum",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func tableSum(t *Table) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tableSum(t *Table) uint32\n```\n\ntableSum returns the IEEE checksum of table t. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#testCrossCheck",
              "documentation": {
                "identifier": "testCrossCheck",
                "newPage": false,
                "searchKey": "crc32.testCrossCheck",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCrossCheck(t *testing.T, crcFunc1, crcFunc2 func(crc uint32, b []byte) uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCrossCheck(t *testing.T, crcFunc1, crcFunc2 func(crc uint32, b []byte) uint32)\n```\n\ntestCrossCheck generates random buffers of various lengths and verifies that the two \"update\" functions return the same result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#testGoldenCastagnoli",
              "documentation": {
                "identifier": "testGoldenCastagnoli",
                "newPage": false,
                "searchKey": "crc32.testGoldenCastagnoli",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testGoldenCastagnoli(t *testing.T, crcFunc func(b []byte) uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testGoldenCastagnoli(t *testing.T, crcFunc func(b []byte) uint32)\n```\n\ntestGoldenCastagnoli verifies that the given function returns correct IEEE checksums. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/crc32#testGoldenIEEE",
              "documentation": {
                "identifier": "testGoldenIEEE",
                "newPage": false,
                "searchKey": "crc32.testGoldenIEEE",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testGoldenIEEE(t *testing.T, crcFunc func(b []byte) uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testGoldenIEEE(t *testing.T, crcFunc func(b []byte) uint32)\n```\n\ntestGoldenIEEE verifies that the given function returns correct IEEE checksums. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
