{
  "pathID": "/hash/maphash",
  "documentation": {
    "identifier": "maphash",
    "newPage": true,
    "searchKey": "hash/maphash",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package maphash"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package maphash provides hash functions on byte sequences. These hash functions are intended to be used to implement hash tables or other data structures that need to map arbitrary strings or byte sequences to a uniform distribution on unsigned 64-bit integers. Each different instance of a hash table or data structure should use its own Seed. \n\nThe hash functions are not cryptographically secure. (See crypto/sha256 and crypto/sha512 for cryptographic use.) \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/hash/maphash#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/maphash#bufSize",
              "documentation": {
                "identifier": "bufSize",
                "newPage": false,
                "searchKey": "maphash.bufSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const bufSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst bufSize = 128\n```\n\nbufSize is the size of the Hash write buffer. The buffer ensures that writes depend only on the sequence of bytes, not the sequence of WriteByte/Write/WriteString calls, by always calling rthash with a full buffer (except for the tail). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#hashSize",
              "documentation": {
                "identifier": "hashSize",
                "newPage": false,
                "searchKey": "maphash.hashSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hashSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hashSize = 64\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/maphash#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/maphash#fixedSeed",
              "documentation": {
                "identifier": "fixedSeed",
                "newPage": false,
                "searchKey": "maphash.fixedSeed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fixedSeed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fixedSeed = MakeSeed()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/maphash#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/maphash#Seed",
              "documentation": {
                "identifier": "Seed",
                "newPage": false,
                "searchKey": "maphash.Seed",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Seed struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Seed struct {\n\ts uint64\n}\n```\n\nA Seed is a random value that selects the specific hash function computed by a Hash. If two Hashes use the same Seeds, they will compute the same hash values for any given input. If two Hashes use different Seeds, they are very likely to compute distinct hash values for any given input. \n\nA Seed must be initialized by calling MakeSeed. The zero seed is uninitialized and not valid for use with Hash's SetSeed method. \n\nEach Seed value is local to a single process and cannot be serialized or otherwise recreated in a different process. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/maphash#MakeSeed",
                    "documentation": {
                      "identifier": "MakeSeed",
                      "newPage": false,
                      "searchKey": "maphash.MakeSeed",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func MakeSeed() Seed"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc MakeSeed() Seed\n```\n\nMakeSeed returns a new random seed. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#Hash",
              "documentation": {
                "identifier": "Hash",
                "newPage": false,
                "searchKey": "maphash.Hash",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Hash struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Hash struct {\n\t_     [0]func()     // not comparable\n\tseed  Seed          // initial seed used for this hash\n\tstate Seed          // current hash of all flushed bytes\n\tbuf   [bufSize]byte // unflushed byte buffer\n\tn     int           // number of unflushed bytes\n}\n```\n\nA Hash computes a seeded hash of a byte sequence. \n\nThe zero Hash is a valid Hash ready to use. A zero Hash chooses a random seed for itself during the first call to a Reset, Write, Seed, or Sum64 method. For control over the seed, use SetSeed. \n\nThe computed hash values depend only on the initial seed and the sequence of bytes provided to the Hash object, not on the way in which the bytes are provided. For example, the three sequences \n\n```\nh.Write([]byte{'f','o','o'})\nh.WriteByte('f'); h.WriteByte('o'); h.WriteByte('o')\nh.WriteString(\"foo\")\n\n```\nall have the same effect. \n\nHashes are intended to be collision-resistant, even for situations where an adversary controls the byte sequences being hashed. \n\nA Hash is not safe for concurrent use by multiple goroutines, but a Seed is. If multiple goroutines must compute the same seeded hash, each can declare its own Hash and call SetSeed with a common Seed. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.initSeed",
                    "documentation": {
                      "identifier": "Hash.initSeed",
                      "newPage": false,
                      "searchKey": "maphash.Hash.initSeed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) initSeed()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) initSeed()\n```\n\ninitSeed seeds the hash if necessary. initSeed is called lazily before any operation that actually uses h.seed/h.state. Note that this does not include Write/WriteByte/WriteString in the case where they only add to h.buf. (If they write too much, they call h.flush, which does call h.initSeed.) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.WriteByte",
                    "documentation": {
                      "identifier": "Hash.WriteByte",
                      "newPage": false,
                      "searchKey": "maphash.Hash.WriteByte",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) WriteByte(b byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) WriteByte(b byte) error\n```\n\nWriteByte adds b to the sequence of bytes hashed by h. It never fails; the error result is for implementing io.ByteWriter. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.Write",
                    "documentation": {
                      "identifier": "Hash.Write",
                      "newPage": false,
                      "searchKey": "maphash.Hash.Write",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) Write(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) Write(b []byte) (int, error)\n```\n\nWrite adds b to the sequence of bytes hashed by h. It always writes all of b and never fails; the count and error result are for implementing io.Writer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.WriteString",
                    "documentation": {
                      "identifier": "Hash.WriteString",
                      "newPage": false,
                      "searchKey": "maphash.Hash.WriteString",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) WriteString(s string) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) WriteString(s string) (int, error)\n```\n\nWriteString adds the bytes of s to the sequence of bytes hashed by h. It always writes all of s and never fails; the count and error result are for implementing io.StringWriter. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.Seed",
                    "documentation": {
                      "identifier": "Hash.Seed",
                      "newPage": false,
                      "searchKey": "maphash.Hash.Seed",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) Seed() Seed"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) Seed() Seed\n```\n\nSeed returns h's seed value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.SetSeed",
                    "documentation": {
                      "identifier": "Hash.SetSeed",
                      "newPage": false,
                      "searchKey": "maphash.Hash.SetSeed",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) SetSeed(seed Seed)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) SetSeed(seed Seed)\n```\n\nSetSeed sets h to use seed, which must have been returned by MakeSeed or by another Hash's Seed method. Two Hash objects with the same seed behave identically. Two Hash objects with different seeds will very likely behave differently. Any bytes added to h before this call will be discarded. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.Reset",
                    "documentation": {
                      "identifier": "Hash.Reset",
                      "newPage": false,
                      "searchKey": "maphash.Hash.Reset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) Reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) Reset()\n```\n\nReset discards all bytes added to h. (The seed remains the same.) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.flush",
                    "documentation": {
                      "identifier": "Hash.flush",
                      "newPage": false,
                      "searchKey": "maphash.Hash.flush",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) flush()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) flush()\n```\n\nprecondition: buffer is full. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.Sum64",
                    "documentation": {
                      "identifier": "Hash.Sum64",
                      "newPage": false,
                      "searchKey": "maphash.Hash.Sum64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) Sum64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) Sum64() uint64\n```\n\nSum64 returns h's current 64-bit value, which depends on h's seed and the sequence of bytes added to h since the last call to Reset or SetSeed. \n\nAll bits of the Sum64 result are close to uniformly and independently distributed, so it can be safely reduced by using bit masking, shifting, or modular arithmetic. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.Sum",
                    "documentation": {
                      "identifier": "Hash.Sum",
                      "newPage": false,
                      "searchKey": "maphash.Hash.Sum",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) Sum(b []byte) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) Sum(b []byte) []byte\n```\n\nSum appends the hash's current 64-bit value to b. It exists for implementing hash.Hash. For direct calls, it is more efficient to use Sum64. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.Size",
                    "documentation": {
                      "identifier": "Hash.Size",
                      "newPage": false,
                      "searchKey": "maphash.Hash.Size",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) Size() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) Size() int\n```\n\nSize returns h's hash value size, 8 bytes. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#Hash.BlockSize",
                    "documentation": {
                      "identifier": "Hash.BlockSize",
                      "newPage": false,
                      "searchKey": "maphash.Hash.BlockSize",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *Hash) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *Hash) BlockSize() int\n```\n\nBlockSize returns h's block size. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#hashSet",
              "documentation": {
                "identifier": "hashSet",
                "newPage": false,
                "searchKey": "maphash.hashSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type hashSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype hashSet struct {\n\tm map[uint64]struct{} // set of hashes added\n\tn int                 // number of hashes added\n}\n```\n\nA hashSet measures the frequency of hash collisions. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/maphash#newHashSet",
                    "documentation": {
                      "identifier": "newHashSet",
                      "newPage": false,
                      "searchKey": "maphash.newHashSet",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newHashSet() *hashSet"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newHashSet() *hashSet\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#hashSet.add",
                    "documentation": {
                      "identifier": "hashSet.add",
                      "newPage": false,
                      "searchKey": "maphash.hashSet.add",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *hashSet) add(h uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *hashSet) add(h uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#hashSet.addS",
                    "documentation": {
                      "identifier": "hashSet.addS",
                      "newPage": false,
                      "searchKey": "maphash.hashSet.addS",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *hashSet) addS(x string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *hashSet) addS(x string)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#hashSet.addB",
                    "documentation": {
                      "identifier": "hashSet.addB",
                      "newPage": false,
                      "searchKey": "maphash.hashSet.addB",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *hashSet) addB(x []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *hashSet) addB(x []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#hashSet.addS_seed",
                    "documentation": {
                      "identifier": "hashSet.addS_seed",
                      "newPage": false,
                      "searchKey": "maphash.hashSet.addS_seed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *hashSet) addS_seed(x string, seed Seed)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *hashSet) addS_seed(x string, seed Seed)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#hashSet.check",
                    "documentation": {
                      "identifier": "hashSet.check",
                      "newPage": false,
                      "searchKey": "maphash.hashSet.check",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *hashSet) check(t *testing.T)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *hashSet) check(t *testing.T)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#key",
              "documentation": {
                "identifier": "key",
                "newPage": false,
                "searchKey": "maphash.key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type key interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype key interface {\n\tclear()              // set bits all to 0\n\trandom(r *rand.Rand) // set key to something random\n\tbits() int           // how many bits key has\n\tflipBit(i int)       // flip bit i of the key\n\thash() uint64        // hash the key\n\tname() string        // for error reporting\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#bytesKey",
              "documentation": {
                "identifier": "bytesKey",
                "newPage": false,
                "searchKey": "maphash.bytesKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type bytesKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bytesKey struct {\n\tb []byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/maphash#bytesKey.clear",
                    "documentation": {
                      "identifier": "bytesKey.clear",
                      "newPage": false,
                      "searchKey": "maphash.bytesKey.clear",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *bytesKey) clear()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *bytesKey) clear()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#bytesKey.random",
                    "documentation": {
                      "identifier": "bytesKey.random",
                      "newPage": false,
                      "searchKey": "maphash.bytesKey.random",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *bytesKey) random(r *rand.Rand)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *bytesKey) random(r *rand.Rand)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#bytesKey.bits",
                    "documentation": {
                      "identifier": "bytesKey.bits",
                      "newPage": false,
                      "searchKey": "maphash.bytesKey.bits",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *bytesKey) bits() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *bytesKey) bits() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#bytesKey.flipBit",
                    "documentation": {
                      "identifier": "bytesKey.flipBit",
                      "newPage": false,
                      "searchKey": "maphash.bytesKey.flipBit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *bytesKey) flipBit(i int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *bytesKey) flipBit(i int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#bytesKey.hash",
                    "documentation": {
                      "identifier": "bytesKey.hash",
                      "newPage": false,
                      "searchKey": "maphash.bytesKey.hash",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *bytesKey) hash() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *bytesKey) hash() uint64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/maphash#bytesKey.name",
                    "documentation": {
                      "identifier": "bytesKey.name",
                      "newPage": false,
                      "searchKey": "maphash.bytesKey.name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k *bytesKey) name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k *bytesKey) name() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/maphash#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/maphash#runtime_fastrand",
              "documentation": {
                "identifier": "runtime_fastrand",
                "newPage": false,
                "searchKey": "maphash.runtime_fastrand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_fastrand() uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_fastrand() uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#rthash",
              "documentation": {
                "identifier": "rthash",
                "newPage": false,
                "searchKey": "maphash.rthash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func rthash(ptr *byte, len int, seed uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rthash(ptr *byte, len int, seed uint64) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#runtime_memhash",
              "documentation": {
                "identifier": "runtime_memhash",
                "newPage": false,
                "searchKey": "maphash.runtime_memhash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runtime_memhash(p unsafe.Pointer, seed, s uintptr) uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runtime_memhash(p unsafe.Pointer, seed, s uintptr) uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestUnseededHash",
              "documentation": {
                "identifier": "TestUnseededHash",
                "newPage": false,
                "searchKey": "maphash.TestUnseededHash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnseededHash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnseededHash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSeededHash",
              "documentation": {
                "identifier": "TestSeededHash",
                "newPage": false,
                "searchKey": "maphash.TestSeededHash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSeededHash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSeededHash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestHashGrouping",
              "documentation": {
                "identifier": "TestHashGrouping",
                "newPage": false,
                "searchKey": "maphash.TestHashGrouping",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHashGrouping(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHashGrouping(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestHashBytesVsString",
              "documentation": {
                "identifier": "TestHashBytesVsString",
                "newPage": false,
                "searchKey": "maphash.TestHashBytesVsString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHashBytesVsString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHashBytesVsString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestHashHighBytes",
              "documentation": {
                "identifier": "TestHashHighBytes",
                "newPage": false,
                "searchKey": "maphash.TestHashHighBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHashHighBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHashHighBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestRepeat",
              "documentation": {
                "identifier": "TestRepeat",
                "newPage": false,
                "searchKey": "maphash.TestRepeat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepeat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepeat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSeedFromSum64",
              "documentation": {
                "identifier": "TestSeedFromSum64",
                "newPage": false,
                "searchKey": "maphash.TestSeedFromSum64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSeedFromSum64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSeedFromSum64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSeedFromSeed",
              "documentation": {
                "identifier": "TestSeedFromSeed",
                "newPage": false,
                "searchKey": "maphash.TestSeedFromSeed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSeedFromSeed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSeedFromSeed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSeedFromFlush",
              "documentation": {
                "identifier": "TestSeedFromFlush",
                "newPage": false,
                "searchKey": "maphash.TestSeedFromFlush",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSeedFromFlush(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSeedFromFlush(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSeedFromReset",
              "documentation": {
                "identifier": "TestSeedFromReset",
                "newPage": false,
                "searchKey": "maphash.TestSeedFromReset",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSeedFromReset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSeedFromReset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#benchmarkSize",
              "documentation": {
                "identifier": "benchmarkSize",
                "newPage": false,
                "searchKey": "maphash.benchmarkSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkSize(b *testing.B, size int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkSize(b *testing.B, size int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#BenchmarkHash8Bytes",
              "documentation": {
                "identifier": "BenchmarkHash8Bytes",
                "newPage": false,
                "searchKey": "maphash.BenchmarkHash8Bytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash8Bytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash8Bytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#BenchmarkHash320Bytes",
              "documentation": {
                "identifier": "BenchmarkHash320Bytes",
                "newPage": false,
                "searchKey": "maphash.BenchmarkHash320Bytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash320Bytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash320Bytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#BenchmarkHash1K",
              "documentation": {
                "identifier": "BenchmarkHash1K",
                "newPage": false,
                "searchKey": "maphash.BenchmarkHash1K",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash1K(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash1K(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#BenchmarkHash8K",
              "documentation": {
                "identifier": "BenchmarkHash8K",
                "newPage": false,
                "searchKey": "maphash.BenchmarkHash8K",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkHash8K(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkHash8K(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherSanity",
              "documentation": {
                "identifier": "TestSmhasherSanity",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherSanity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSanity(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSanity(t *testing.T)\n```\n\nSanity checks. hash should not depend on values outside key. hash should not depend on alignment. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#bytesHash",
              "documentation": {
                "identifier": "bytesHash",
                "newPage": false,
                "searchKey": "maphash.bytesHash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func bytesHash(b []byte) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bytesHash(b []byte) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#stringHash",
              "documentation": {
                "identifier": "stringHash",
                "newPage": false,
                "searchKey": "maphash.stringHash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringHash(s string) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringHash(s string) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#randBytes",
              "documentation": {
                "identifier": "randBytes",
                "newPage": false,
                "searchKey": "maphash.randBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func randBytes(r *rand.Rand, b []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randBytes(r *rand.Rand, b []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherAppendedZeros",
              "documentation": {
                "identifier": "TestSmhasherAppendedZeros",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherAppendedZeros",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherAppendedZeros(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherAppendedZeros(t *testing.T)\n```\n\na string plus adding zeros must make distinct hashes \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherSmallKeys",
              "documentation": {
                "identifier": "TestSmhasherSmallKeys",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherSmallKeys",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSmallKeys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSmallKeys(t *testing.T)\n```\n\nAll 0-3 byte strings have distinct hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherZeros",
              "documentation": {
                "identifier": "TestSmhasherZeros",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherZeros",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherZeros(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherZeros(t *testing.T)\n```\n\nDifferent length strings of all zeros have distinct hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherTwoNonzero",
              "documentation": {
                "identifier": "TestSmhasherTwoNonzero",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherTwoNonzero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherTwoNonzero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherTwoNonzero(t *testing.T)\n```\n\nStrings with up to two nonzero bytes all have distinct hashes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#twoNonZero",
              "documentation": {
                "identifier": "twoNonZero",
                "newPage": false,
                "searchKey": "maphash.twoNonZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func twoNonZero(h *hashSet, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc twoNonZero(h *hashSet, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherCyclic",
              "documentation": {
                "identifier": "TestSmhasherCyclic",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherCyclic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherCyclic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherCyclic(t *testing.T)\n```\n\nTest strings with repeats, like \"abcdabcdabcdabcd...\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherSparse",
              "documentation": {
                "identifier": "TestSmhasherSparse",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherSparse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSparse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSparse(t *testing.T)\n```\n\nTest strings with only a few bits set \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#sparse",
              "documentation": {
                "identifier": "sparse",
                "newPage": false,
                "searchKey": "maphash.sparse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sparse(t *testing.T, n int, k int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sparse(t *testing.T, n int, k int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#setbits",
              "documentation": {
                "identifier": "setbits",
                "newPage": false,
                "searchKey": "maphash.setbits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func setbits(h *hashSet, b []byte, i int, k int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setbits(h *hashSet, b []byte, i int, k int)\n```\n\nset up to k bits at index i and greater \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherPermutation",
              "documentation": {
                "identifier": "TestSmhasherPermutation",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherPermutation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherPermutation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherPermutation(t *testing.T)\n```\n\nTest all possible combinations of n blocks from the set s. \"permutation\" is a bad name here, but it is what Smhasher uses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#permutation",
              "documentation": {
                "identifier": "permutation",
                "newPage": false,
                "searchKey": "maphash.permutation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func permutation(t *testing.T, s []uint32, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc permutation(t *testing.T, s []uint32, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#genPerm",
              "documentation": {
                "identifier": "genPerm",
                "newPage": false,
                "searchKey": "maphash.genPerm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func genPerm(h *hashSet, b []byte, s []uint32, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc genPerm(h *hashSet, b []byte, s []uint32, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherAvalanche",
              "documentation": {
                "identifier": "TestSmhasherAvalanche",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherAvalanche",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherAvalanche(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherAvalanche(t *testing.T)\n```\n\nFlipping a single bit of a key should flip each output bit with 50% probability. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#avalancheTest1",
              "documentation": {
                "identifier": "avalancheTest1",
                "newPage": false,
                "searchKey": "maphash.avalancheTest1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func avalancheTest1(t *testing.T, k key)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc avalancheTest1(t *testing.T, k key)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherWindowed",
              "documentation": {
                "identifier": "TestSmhasherWindowed",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherWindowed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherWindowed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherWindowed(t *testing.T)\n```\n\nAll bit rotations of a set of distinct keys \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#windowed",
              "documentation": {
                "identifier": "windowed",
                "newPage": false,
                "searchKey": "maphash.windowed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func windowed(t *testing.T, k key)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc windowed(t *testing.T, k key)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherText",
              "documentation": {
                "identifier": "TestSmhasherText",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherText(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherText(t *testing.T)\n```\n\nAll keys of the form prefix + [A-Za-z0-9]*N + suffix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#text",
              "documentation": {
                "identifier": "text",
                "newPage": false,
                "searchKey": "maphash.text",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func text(t *testing.T, prefix, suffix string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc text(t *testing.T, prefix, suffix string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/maphash#TestSmhasherSeed",
              "documentation": {
                "identifier": "TestSmhasherSeed",
                "newPage": false,
                "searchKey": "maphash.TestSmhasherSeed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSmhasherSeed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSmhasherSeed(t *testing.T)\n```\n\nMake sure different seed values generate different hashes. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
