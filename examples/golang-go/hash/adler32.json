{
  "pathID": "/hash/adler32",
  "documentation": {
    "identifier": "adler32",
    "newPage": true,
    "searchKey": "hash/adler32",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package adler32"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package adler32 implements the Adler-32 checksum. \n\nIt is defined in RFC 1950: \n\n```\nAdler-32 is composed of two sums accumulated per byte: s1 is\nthe sum of all bytes, s2 is the sum of all s1 values. Both sums\nare done modulo 65521. s1 is initialized to 1, s2 to zero.  The\nAdler-32 checksum is stored as s2*65536 + s1 in most-\nsignificant-byte first (network) order.\n\n```\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/hash/adler32#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/adler32#mod",
              "documentation": {
                "identifier": "mod",
                "newPage": false,
                "searchKey": "adler32.mod",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const mod"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mod = 65521\n```\n\nmod is the largest prime that is less than 65536. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#nmax",
              "documentation": {
                "identifier": "nmax",
                "newPage": false,
                "searchKey": "adler32.nmax",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const nmax"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nmax = 5552\n```\n\nnmax is the largest n such that 255 * n * (n+1) / 2 + (n+1) * (mod-1) <= 2^32-1. It is mentioned in RFC 1950 (search for \"5552\"). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#Size",
              "documentation": {
                "identifier": "Size",
                "newPage": false,
                "searchKey": "adler32.Size",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const Size"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Size = 4\n```\n\nThe size of an Adler-32 checksum in bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#magic",
              "documentation": {
                "identifier": "magic",
                "newPage": false,
                "searchKey": "adler32.magic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const magic"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst magic = \"adl\\x01\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#marshaledSize",
              "documentation": {
                "identifier": "marshaledSize",
                "newPage": false,
                "searchKey": "adler32.marshaledSize",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const marshaledSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst marshaledSize = len(magic) + 4\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/adler32#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/adler32#golden",
              "documentation": {
                "identifier": "golden",
                "newPage": false,
                "searchKey": "adler32.golden",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var golden"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar golden = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/adler32#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/adler32#digest",
              "documentation": {
                "identifier": "digest",
                "newPage": false,
                "searchKey": "adler32.digest",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type digest uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype digest uint32\n```\n\ndigest represents the partial evaluation of a checksum. The low 16 bits are s1, the high 16 bits are s2. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/hash/adler32#update",
                    "documentation": {
                      "identifier": "update",
                      "newPage": false,
                      "searchKey": "adler32.update",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func update(d digest, p []byte) digest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc update(d digest, p []byte) digest\n```\n\nAdd p to the running checksum d. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.Reset",
                    "documentation": {
                      "identifier": "digest.Reset",
                      "newPage": false,
                      "searchKey": "adler32.digest.Reset",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Reset()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.Size",
                    "documentation": {
                      "identifier": "digest.Size",
                      "newPage": false,
                      "searchKey": "adler32.digest.Size",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Size() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Size() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.BlockSize",
                    "documentation": {
                      "identifier": "digest.BlockSize",
                      "newPage": false,
                      "searchKey": "adler32.digest.BlockSize",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) BlockSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.MarshalBinary",
                    "documentation": {
                      "identifier": "digest.MarshalBinary",
                      "newPage": false,
                      "searchKey": "adler32.digest.MarshalBinary",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) MarshalBinary() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) MarshalBinary() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.UnmarshalBinary",
                    "documentation": {
                      "identifier": "digest.UnmarshalBinary",
                      "newPage": false,
                      "searchKey": "adler32.digest.UnmarshalBinary",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) UnmarshalBinary(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) UnmarshalBinary(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.Write",
                    "documentation": {
                      "identifier": "digest.Write",
                      "newPage": false,
                      "searchKey": "adler32.digest.Write",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Write(p []byte) (nn int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Write(p []byte) (nn int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.Sum32",
                    "documentation": {
                      "identifier": "digest.Sum32",
                      "newPage": false,
                      "searchKey": "adler32.digest.Sum32",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Sum32() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Sum32() uint32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/hash/adler32#digest.Sum",
                    "documentation": {
                      "identifier": "digest.Sum",
                      "newPage": false,
                      "searchKey": "adler32.digest.Sum",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *digest) Sum(in []byte) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *digest) Sum(in []byte) []byte\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/hash/adler32#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/hash/adler32#New",
              "documentation": {
                "identifier": "New",
                "newPage": false,
                "searchKey": "adler32.New",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func New() hash.Hash32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc New() hash.Hash32\n```\n\nNew returns a new hash.Hash32 computing the Adler-32 checksum. Its Sum method will lay the value out in big-endian byte order. The returned Hash32 also implements encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#appendUint32",
              "documentation": {
                "identifier": "appendUint32",
                "newPage": false,
                "searchKey": "adler32.appendUint32",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendUint32(b []byte, x uint32) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendUint32(b []byte, x uint32) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#readUint32",
              "documentation": {
                "identifier": "readUint32",
                "newPage": false,
                "searchKey": "adler32.readUint32",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readUint32(b []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readUint32(b []byte) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#Checksum",
              "documentation": {
                "identifier": "Checksum",
                "newPage": false,
                "searchKey": "adler32.Checksum",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Checksum(data []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Checksum(data []byte) uint32\n```\n\nChecksum returns the Adler-32 checksum of data. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#checksum",
              "documentation": {
                "identifier": "checksum",
                "newPage": false,
                "searchKey": "adler32.checksum",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checksum(p []byte) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checksum(p []byte) uint32\n```\n\nchecksum is a slow but simple implementation of the Adler-32 checksum. It is a straight port of the sample code in RFC 1950 section 9. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#TestGolden",
              "documentation": {
                "identifier": "TestGolden",
                "newPage": false,
                "searchKey": "adler32.TestGolden",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGolden(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGolden(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#TestGoldenMarshal",
              "documentation": {
                "identifier": "TestGoldenMarshal",
                "newPage": false,
                "searchKey": "adler32.TestGoldenMarshal",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoldenMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoldenMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/hash/adler32#BenchmarkAdler32KB",
              "documentation": {
                "identifier": "BenchmarkAdler32KB",
                "newPage": false,
                "searchKey": "adler32.BenchmarkAdler32KB",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkAdler32KB(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkAdler32KB(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
