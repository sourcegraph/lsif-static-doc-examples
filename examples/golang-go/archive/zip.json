{
  "pathID": "/archive/zip",
  "documentation": {
    "identifier": "zip",
    "newPage": true,
    "searchKey": "archive/zip",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package zip"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package zip provides support for reading and writing ZIP archives. \n\nSee: [https://www.pkware.com/appnote](https://www.pkware.com/appnote) \n\nThis package does not support disk spanning. \n\nA note about ZIP64: \n\nTo be backwards compatible the FileHeader has both 32 and 64 bit Size fields. The 64 bit fields will always contain the correct value and for normal archives both fields will be the same. For files requiring the ZIP64 format the 32 bit fields will be 0xffffffff and the 64 bit fields must be used instead. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/archive/zip#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/archive/zip#Deflate",
              "documentation": {
                "identifier": "Deflate",
                "newPage": false,
                "searchKey": "zip.Deflate",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Deflate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Deflate uint16 = 8 // DEFLATE compressed\n\n```\n\nCompression methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#Store",
              "documentation": {
                "identifier": "Store",
                "newPage": false,
                "searchKey": "zip.Store",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Store"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Store uint16 = 0 // no compression\n\n```\n\nCompression methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#creatorFAT",
              "documentation": {
                "identifier": "creatorFAT",
                "newPage": false,
                "searchKey": "zip.creatorFAT",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const creatorFAT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst creatorFAT = 0\n```\n\nConstants for the first byte in CreatorVersion. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#creatorMacOSX",
              "documentation": {
                "identifier": "creatorMacOSX",
                "newPage": false,
                "searchKey": "zip.creatorMacOSX",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const creatorMacOSX"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst creatorMacOSX = 19\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#creatorNTFS",
              "documentation": {
                "identifier": "creatorNTFS",
                "newPage": false,
                "searchKey": "zip.creatorNTFS",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const creatorNTFS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst creatorNTFS = 11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#creatorUnix",
              "documentation": {
                "identifier": "creatorUnix",
                "newPage": false,
                "searchKey": "zip.creatorUnix",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const creatorUnix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst creatorUnix = 3\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#creatorVFAT",
              "documentation": {
                "identifier": "creatorVFAT",
                "newPage": false,
                "searchKey": "zip.creatorVFAT",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const creatorVFAT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst creatorVFAT = 14\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#dataDescriptor64Len",
              "documentation": {
                "identifier": "dataDescriptor64Len",
                "newPage": false,
                "searchKey": "zip.dataDescriptor64Len",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const dataDescriptor64Len"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dataDescriptor64Len = 24 // two uint32: signature, crc32 | two uint64: compressed size, size\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#dataDescriptorLen",
              "documentation": {
                "identifier": "dataDescriptorLen",
                "newPage": false,
                "searchKey": "zip.dataDescriptorLen",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const dataDescriptorLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dataDescriptorLen = 16 // four uint32: descriptor signature, crc32, compressed size, size\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#dataDescriptorSignature",
              "documentation": {
                "identifier": "dataDescriptorSignature",
                "newPage": false,
                "searchKey": "zip.dataDescriptorSignature",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const dataDescriptorSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dataDescriptorSignature = 0x08074b50 // de-facto standard; required by OS X Finder\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directory64EndLen",
              "documentation": {
                "identifier": "directory64EndLen",
                "newPage": false,
                "searchKey": "zip.directory64EndLen",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directory64EndLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directory64EndLen = 56 // + extra\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directory64EndSignature",
              "documentation": {
                "identifier": "directory64EndSignature",
                "newPage": false,
                "searchKey": "zip.directory64EndSignature",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directory64EndSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directory64EndSignature = 0x06064b50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directory64LocLen",
              "documentation": {
                "identifier": "directory64LocLen",
                "newPage": false,
                "searchKey": "zip.directory64LocLen",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directory64LocLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directory64LocLen = 20 //\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directory64LocSignature",
              "documentation": {
                "identifier": "directory64LocSignature",
                "newPage": false,
                "searchKey": "zip.directory64LocSignature",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directory64LocSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directory64LocSignature = 0x07064b50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directoryEndLen",
              "documentation": {
                "identifier": "directoryEndLen",
                "newPage": false,
                "searchKey": "zip.directoryEndLen",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directoryEndLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directoryEndLen = 22 // + comment\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directoryEndSignature",
              "documentation": {
                "identifier": "directoryEndSignature",
                "newPage": false,
                "searchKey": "zip.directoryEndSignature",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directoryEndSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directoryEndSignature = 0x06054b50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directoryHeaderLen",
              "documentation": {
                "identifier": "directoryHeaderLen",
                "newPage": false,
                "searchKey": "zip.directoryHeaderLen",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directoryHeaderLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directoryHeaderLen = 46 // + filename + extra + comment\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directoryHeaderSignature",
              "documentation": {
                "identifier": "directoryHeaderSignature",
                "newPage": false,
                "searchKey": "zip.directoryHeaderSignature",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const directoryHeaderSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst directoryHeaderSignature = 0x02014b50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#extTimeExtraID",
              "documentation": {
                "identifier": "extTimeExtraID",
                "newPage": false,
                "searchKey": "zip.extTimeExtraID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const extTimeExtraID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst extTimeExtraID = 0x5455 // Extended timestamp\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileHeaderLen",
              "documentation": {
                "identifier": "fileHeaderLen",
                "newPage": false,
                "searchKey": "zip.fileHeaderLen",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const fileHeaderLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fileHeaderLen = 30 // + filename + extra\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileHeaderSignature",
              "documentation": {
                "identifier": "fileHeaderSignature",
                "newPage": false,
                "searchKey": "zip.fileHeaderSignature",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const fileHeaderSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fileHeaderSignature = 0x04034b50\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#infoZipUnixExtraID",
              "documentation": {
                "identifier": "infoZipUnixExtraID",
                "newPage": false,
                "searchKey": "zip.infoZipUnixExtraID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const infoZipUnixExtraID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst infoZipUnixExtraID = 0x5855 // Info-ZIP Unix extension\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#msdosDir",
              "documentation": {
                "identifier": "msdosDir",
                "newPage": false,
                "searchKey": "zip.msdosDir",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const msdosDir"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst msdosDir = 0x10\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#msdosReadOnly",
              "documentation": {
                "identifier": "msdosReadOnly",
                "newPage": false,
                "searchKey": "zip.msdosReadOnly",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const msdosReadOnly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst msdosReadOnly = 0x01\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#ntfsExtraID",
              "documentation": {
                "identifier": "ntfsExtraID",
                "newPage": false,
                "searchKey": "zip.ntfsExtraID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ntfsExtraID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ntfsExtraID = 0x000a // NTFS\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFBLK",
              "documentation": {
                "identifier": "s_IFBLK",
                "newPage": false,
                "searchKey": "zip.s_IFBLK",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFBLK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFBLK = 0x6000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFCHR",
              "documentation": {
                "identifier": "s_IFCHR",
                "newPage": false,
                "searchKey": "zip.s_IFCHR",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFCHR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFCHR = 0x2000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFDIR",
              "documentation": {
                "identifier": "s_IFDIR",
                "newPage": false,
                "searchKey": "zip.s_IFDIR",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFDIR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFDIR = 0x4000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFIFO",
              "documentation": {
                "identifier": "s_IFIFO",
                "newPage": false,
                "searchKey": "zip.s_IFIFO",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFIFO"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFIFO = 0x1000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFLNK",
              "documentation": {
                "identifier": "s_IFLNK",
                "newPage": false,
                "searchKey": "zip.s_IFLNK",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFLNK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFLNK = 0xa000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFMT",
              "documentation": {
                "identifier": "s_IFMT",
                "newPage": false,
                "searchKey": "zip.s_IFMT",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFMT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFMT = 0xf000\n```\n\nUnix constants. The specification doesn't mention them, but these seem to be the values agreed on by tools. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFREG",
              "documentation": {
                "identifier": "s_IFREG",
                "newPage": false,
                "searchKey": "zip.s_IFREG",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFREG"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFREG = 0x8000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_IFSOCK",
              "documentation": {
                "identifier": "s_IFSOCK",
                "newPage": false,
                "searchKey": "zip.s_IFSOCK",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_IFSOCK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_IFSOCK = 0xc000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_ISGID",
              "documentation": {
                "identifier": "s_ISGID",
                "newPage": false,
                "searchKey": "zip.s_ISGID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_ISGID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_ISGID = 0x400\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_ISUID",
              "documentation": {
                "identifier": "s_ISUID",
                "newPage": false,
                "searchKey": "zip.s_ISUID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_ISUID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_ISUID = 0x800\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#s_ISVTX",
              "documentation": {
                "identifier": "s_ISVTX",
                "newPage": false,
                "searchKey": "zip.s_ISVTX",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const s_ISVTX"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst s_ISVTX = 0x200\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#uint16max",
              "documentation": {
                "identifier": "uint16max",
                "newPage": false,
                "searchKey": "zip.uint16max",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uint16max"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uint16max = (1 << 16) - 1\n```\n\nLimits for non zip64 files. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#uint32max",
              "documentation": {
                "identifier": "uint32max",
                "newPage": false,
                "searchKey": "zip.uint32max",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uint32max"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uint32max = (1 << 32) - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#unixExtraID",
              "documentation": {
                "identifier": "unixExtraID",
                "newPage": false,
                "searchKey": "zip.unixExtraID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const unixExtraID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst unixExtraID = 0x000d // UNIX\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#zip64ExtraID",
              "documentation": {
                "identifier": "zip64ExtraID",
                "newPage": false,
                "searchKey": "zip.zip64ExtraID",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const zip64ExtraID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst zip64ExtraID = 0x0001 // Zip64 extended information\n\n```\n\nExtra header IDs. \n\nIDs 0..31 are reserved for official use by PKWARE. IDs above that range are defined by third-party vendors. Since ZIP lacked high precision timestamps (nor a official specification of the timezone used for the date fields), many competing extra fields have been invented. Pervasive use effectively makes them \"official\". \n\nSee [http://mdfs.net/Docs/Comp/Archiving/Zip/ExtraField](http://mdfs.net/Docs/Comp/Archiving/Zip/ExtraField) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#zipVersion20",
              "documentation": {
                "identifier": "zipVersion20",
                "newPage": false,
                "searchKey": "zip.zipVersion20",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const zipVersion20"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst zipVersion20 = 20 // 2.0\n\n```\n\nVersion numbers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#zipVersion45",
              "documentation": {
                "identifier": "zipVersion45",
                "newPage": false,
                "searchKey": "zip.zipVersion45",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const zipVersion45"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst zipVersion45 = 45 // 4.5 (reads and writes zip64 archives)\n\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/archive/zip#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/archive/zip#ErrAlgorithm",
              "documentation": {
                "identifier": "ErrAlgorithm",
                "newPage": false,
                "searchKey": "zip.ErrAlgorithm",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrAlgorithm"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrAlgorithm = errors.New(\"zip: unsupported compression algorithm\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#ErrChecksum",
              "documentation": {
                "identifier": "ErrChecksum",
                "newPage": false,
                "searchKey": "zip.ErrChecksum",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrChecksum"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrChecksum = errors.New(\"zip: checksum error\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#ErrFormat",
              "documentation": {
                "identifier": "ErrFormat",
                "newPage": false,
                "searchKey": "zip.ErrFormat",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrFormat"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrFormat = errors.New(\"zip: not a valid zip file\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#compressors",
              "documentation": {
                "identifier": "compressors",
                "newPage": false,
                "searchKey": "zip.compressors",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var compressors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar compressors sync.Map // map[uint16]Compressor\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#decompressors",
              "documentation": {
                "identifier": "decompressors",
                "newPage": false,
                "searchKey": "zip.decompressors",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var decompressors"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar decompressors sync.Map // map[uint16]Decompressor\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#dotFile",
              "documentation": {
                "identifier": "dotFile",
                "newPage": false,
                "searchKey": "zip.dotFile",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dotFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dotFile = &fileListEntry{name: \"./\", isDir: true}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#errDiscardedBytes",
              "documentation": {
                "identifier": "errDiscardedBytes",
                "newPage": false,
                "searchKey": "zip.errDiscardedBytes",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errDiscardedBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errDiscardedBytes = errors.New(\"ReadAt of discarded bytes\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#errLongExtra",
              "documentation": {
                "identifier": "errLongExtra",
                "newPage": false,
                "searchKey": "zip.errLongExtra",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errLongExtra"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errLongExtra = errors.New(\"zip: FileHeader.Extra too long\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#errLongName",
              "documentation": {
                "identifier": "errLongName",
                "newPage": false,
                "searchKey": "zip.errLongName",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errLongName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errLongName = errors.New(\"zip: FileHeader.Name too long\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#flateReaderPool",
              "documentation": {
                "identifier": "flateReaderPool",
                "newPage": false,
                "searchKey": "zip.flateReaderPool",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var flateReaderPool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar flateReaderPool sync.Pool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#flateWriterPool",
              "documentation": {
                "identifier": "flateWriterPool",
                "newPage": false,
                "searchKey": "zip.flateWriterPool",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var flateWriterPool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar flateWriterPool sync.Pool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#tests",
              "documentation": {
                "identifier": "tests",
                "newPage": false,
                "searchKey": "zip.tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#writeTests",
              "documentation": {
                "identifier": "writeTests",
                "newPage": false,
                "searchKey": "zip.writeTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var writeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar writeTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/archive/zip#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/archive/zip#Compressor",
              "documentation": {
                "identifier": "Compressor",
                "newPage": false,
                "searchKey": "zip.Compressor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Compressor func(w io.Writer) (io.WriteCloser, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Compressor func(w io.Writer) (io.WriteCloser, error)\n```\n\nA Compressor returns a new compressing writer, writing to w. The WriteCloser's Close method must be used to flush pending data to w. The Compressor itself must be safe to invoke from multiple goroutines simultaneously, but each returned writer will be used only by one goroutine at a time. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#compressor",
                    "documentation": {
                      "identifier": "compressor",
                      "newPage": false,
                      "searchKey": "zip.compressor",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func compressor(method uint16) Compressor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc compressor(method uint16) Compressor\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#Decompressor",
              "documentation": {
                "identifier": "Decompressor",
                "newPage": false,
                "searchKey": "zip.Decompressor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Decompressor func(r io.Reader) io.ReadCloser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Decompressor func(r io.Reader) io.ReadCloser\n```\n\nA Decompressor returns a new decompressing reader, reading from r. The ReadCloser's Close method must be used to release associated resources. The Decompressor itself must be safe to invoke from multiple goroutines simultaneously, but each returned reader will be used only by one goroutine at a time. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#decompressor",
                    "documentation": {
                      "identifier": "decompressor",
                      "newPage": false,
                      "searchKey": "zip.decompressor",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func decompressor(method uint16) Decompressor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc decompressor(method uint16) Decompressor\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#File",
              "documentation": {
                "identifier": "File",
                "newPage": false,
                "searchKey": "zip.File",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type File struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype File struct {\n\tFileHeader\n\tzip          *Reader\n\tzipr         io.ReaderAt\n\theaderOffset int64\n\tzip64        bool  // zip64 extended information extra field presence\n\tdescErr      error // error reading the data descriptor during init\n}\n```\n\nA File is a single file in a ZIP archive. The file information is in the embedded FileHeader. The file content can be accessed by calling Open. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#File.DataOffset",
                    "documentation": {
                      "identifier": "File.DataOffset",
                      "newPage": false,
                      "searchKey": "zip.File.DataOffset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) DataOffset() (offset int64, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) DataOffset() (offset int64, err error)\n```\n\nDataOffset returns the offset of the file's possibly-compressed data, relative to the beginning of the zip file. \n\nMost callers should instead use Open, which transparently decompresses data and verifies checksums. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#File.Open",
                    "documentation": {
                      "identifier": "File.Open",
                      "newPage": false,
                      "searchKey": "zip.File.Open",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) Open() (io.ReadCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) Open() (io.ReadCloser, error)\n```\n\nOpen returns a ReadCloser that provides access to the File's contents. Multiple files may be read concurrently. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#File.OpenRaw",
                    "documentation": {
                      "identifier": "File.OpenRaw",
                      "newPage": false,
                      "searchKey": "zip.File.OpenRaw",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) OpenRaw() (io.Reader, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) OpenRaw() (io.Reader, error)\n```\n\nOpenRaw returns a Reader that provides access to the File's contents without decompression. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#File.findBodyOffset",
                    "documentation": {
                      "identifier": "File.findBodyOffset",
                      "newPage": false,
                      "searchKey": "zip.File.findBodyOffset",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) findBodyOffset() (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) findBodyOffset() (int64, error)\n```\n\nfindBodyOffset does the minimum work to verify the file has a header and returns the file body offset. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#File.readDataDescriptor",
                    "documentation": {
                      "identifier": "File.readDataDescriptor",
                      "newPage": false,
                      "searchKey": "zip.File.readDataDescriptor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *File) readDataDescriptor()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *File) readDataDescriptor()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#FileHeader",
              "documentation": {
                "identifier": "FileHeader",
                "newPage": false,
                "searchKey": "zip.FileHeader",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileHeader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileHeader struct {\n\t// Name is the name of the file.\n\t//\n\t// It must be a relative path, not start with a drive letter (such as \"C:\"),\n\t// and must use forward slashes instead of back slashes. A trailing slash\n\t// indicates that this file is a directory and should have no data.\n\t//\n\t// When reading zip files, the Name field is populated from\n\t// the zip file directly and is not validated for correctness.\n\t// It is the caller's responsibility to sanitize it as\n\t// appropriate, including canonicalizing slash directions,\n\t// validating that paths are relative, and preventing path\n\t// traversal through filenames (\"../../../\").\n\tName string\n\n\t// Comment is any arbitrary user-defined string shorter than 64KiB.\n\tComment string\n\n\t// NonUTF8 indicates that Name and Comment are not encoded in UTF-8.\n\t//\n\t// By specification, the only other encoding permitted should be CP-437,\n\t// but historically many ZIP readers interpret Name and Comment as whatever\n\t// the system's local character encoding happens to be.\n\t//\n\t// This flag should only be set if the user intends to encode a non-portable\n\t// ZIP file for a specific localized region. Otherwise, the Writer\n\t// automatically sets the ZIP format's UTF-8 flag for valid UTF-8 strings.\n\tNonUTF8 bool\n\n\tCreatorVersion uint16\n\tReaderVersion  uint16\n\tFlags          uint16\n\n\t// Method is the compression method. If zero, Store is used.\n\tMethod uint16\n\n\t// Modified is the modified time of the file.\n\t//\n\t// When reading, an extended timestamp is preferred over the legacy MS-DOS\n\t// date field, and the offset between the times is used as the timezone.\n\t// If only the MS-DOS date is present, the timezone is assumed to be UTC.\n\t//\n\t// When writing, an extended timestamp (which is timezone-agnostic) is\n\t// always emitted. The legacy MS-DOS date field is encoded according to the\n\t// location of the Modified time.\n\tModified     time.Time\n\tModifiedTime uint16 // Deprecated: Legacy MS-DOS date; use Modified instead.\n\tModifiedDate uint16 // Deprecated: Legacy MS-DOS time; use Modified instead.\n\n\tCRC32              uint32\n\tCompressedSize     uint32 // Deprecated: Use CompressedSize64 instead.\n\tUncompressedSize   uint32 // Deprecated: Use UncompressedSize64 instead.\n\tCompressedSize64   uint64\n\tUncompressedSize64 uint64\n\tExtra              []byte\n\tExternalAttrs      uint32 // Meaning depends on CreatorVersion\n}\n```\n\nFileHeader describes a file within a zip file. See the zip spec for details. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#FileInfoHeader",
                    "documentation": {
                      "identifier": "FileInfoHeader",
                      "newPage": false,
                      "searchKey": "zip.FileInfoHeader",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func FileInfoHeader(fi fs.FileInfo) (*FileHeader, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc FileInfoHeader(fi fs.FileInfo) (*FileHeader, error)\n```\n\nFileInfoHeader creates a partially-populated FileHeader from an fs.FileInfo. Because fs.FileInfo's Name method returns only the base name of the file it describes, it may be necessary to modify the Name field of the returned header to provide the full path name of the file. If compression is desired, callers should set the FileHeader.Method field; it is unset by default. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.FileInfo",
                    "documentation": {
                      "identifier": "FileHeader.FileInfo",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.FileInfo",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *FileHeader) FileInfo() fs.FileInfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *FileHeader) FileInfo() fs.FileInfo\n```\n\nFileInfo returns an fs.FileInfo for the FileHeader. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.ModTime",
                    "documentation": {
                      "identifier": "FileHeader.ModTime",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.ModTime",
                      "tags": [
                        "method",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *FileHeader) ModTime() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *FileHeader) ModTime() time.Time\n```\n\nModTime returns the modification time in UTC using the legacy ModifiedDate and ModifiedTime fields. \n\nDeprecated: Use Modified instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.Mode",
                    "documentation": {
                      "identifier": "FileHeader.Mode",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.Mode",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *FileHeader) Mode() (mode fs.FileMode)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *FileHeader) Mode() (mode fs.FileMode)\n```\n\nMode returns the permission and mode bits for the FileHeader. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.SetModTime",
                    "documentation": {
                      "identifier": "FileHeader.SetModTime",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.SetModTime",
                      "tags": [
                        "method",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *FileHeader) SetModTime(t time.Time)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *FileHeader) SetModTime(t time.Time)\n```\n\nSetModTime sets the Modified, ModifiedTime, and ModifiedDate fields to the given time in UTC. \n\nDeprecated: Use Modified instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.SetMode",
                    "documentation": {
                      "identifier": "FileHeader.SetMode",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.SetMode",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *FileHeader) SetMode(mode fs.FileMode)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *FileHeader) SetMode(mode fs.FileMode)\n```\n\nSetMode changes the permission and mode bits for the FileHeader. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.hasDataDescriptor",
                    "documentation": {
                      "identifier": "FileHeader.hasDataDescriptor",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.hasDataDescriptor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *FileHeader) hasDataDescriptor() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *FileHeader) hasDataDescriptor() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#FileHeader.isZip64",
                    "documentation": {
                      "identifier": "FileHeader.isZip64",
                      "newPage": false,
                      "searchKey": "zip.FileHeader.isZip64",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *FileHeader) isZip64() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *FileHeader) isZip64() bool\n```\n\nisZip64 reports whether the file size exceeds the 32 bit limit \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#ReadCloser",
              "documentation": {
                "identifier": "ReadCloser",
                "newPage": false,
                "searchKey": "zip.ReadCloser",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReadCloser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReadCloser struct {\n\tf *os.File\n\tReader\n}\n```\n\nA ReadCloser is a Reader that must be closed when no longer needed. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#OpenReader",
                    "documentation": {
                      "identifier": "OpenReader",
                      "newPage": false,
                      "searchKey": "zip.OpenReader",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func OpenReader(name string) (*ReadCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc OpenReader(name string) (*ReadCloser, error)\n```\n\nOpenReader will open the Zip file specified by name and return a ReadCloser. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#ReadCloser.Close",
                    "documentation": {
                      "identifier": "ReadCloser.Close",
                      "newPage": false,
                      "searchKey": "zip.ReadCloser.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc *ReadCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc *ReadCloser) Close() error\n```\n\nClose closes the Zip file, rendering it unusable for I/O. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#Reader",
              "documentation": {
                "identifier": "Reader",
                "newPage": false,
                "searchKey": "zip.Reader",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Reader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Reader struct {\n\tr             io.ReaderAt\n\tFile          []*File\n\tComment       string\n\tdecompressors map[uint16]Decompressor\n\n\t// fileList is a list of files sorted by ename,\n\t// for use by the Open method.\n\tfileListOnce sync.Once\n\tfileList     []fileListEntry\n}\n```\n\nA Reader serves content from a ZIP archive. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#NewReader",
                    "documentation": {
                      "identifier": "NewReader",
                      "newPage": false,
                      "searchKey": "zip.NewReader",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewReader(r io.ReaderAt, size int64) (*Reader, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewReader(r io.ReaderAt, size int64) (*Reader, error)\n```\n\nNewReader returns a new Reader reading from r, which is assumed to have the given size in bytes. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.Open",
                    "documentation": {
                      "identifier": "Reader.Open",
                      "newPage": false,
                      "searchKey": "zip.Reader.Open",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) Open(name string) (fs.File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) Open(name string) (fs.File, error)\n```\n\nOpen opens the named file in the ZIP archive, using the semantics of fs.FS.Open: paths are always slash separated, with no leading / or ../ elements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.RegisterDecompressor",
                    "documentation": {
                      "identifier": "Reader.RegisterDecompressor",
                      "newPage": false,
                      "searchKey": "zip.Reader.RegisterDecompressor",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (z *Reader) RegisterDecompressor(method uint16, dcomp Decompressor)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (z *Reader) RegisterDecompressor(method uint16, dcomp Decompressor)\n```\n\nRegisterDecompressor registers or overrides a custom decompressor for a specific method ID. If a decompressor for a given method is not found, Reader will default to looking up the decompressor at the package level. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.decompressor",
                    "documentation": {
                      "identifier": "Reader.decompressor",
                      "newPage": false,
                      "searchKey": "zip.Reader.decompressor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (z *Reader) decompressor(method uint16) Decompressor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (z *Reader) decompressor(method uint16) Decompressor\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.init.reader.go",
                    "documentation": {
                      "identifier": "Reader.init.reader.go",
                      "newPage": false,
                      "searchKey": "zip.Reader.init",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (z *Reader) init(r io.ReaderAt, size int64) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (z *Reader) init(r io.ReaderAt, size int64) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.initFileList",
                    "documentation": {
                      "identifier": "Reader.initFileList",
                      "newPage": false,
                      "searchKey": "zip.Reader.initFileList",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) initFileList()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) initFileList()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.openLookup",
                    "documentation": {
                      "identifier": "Reader.openLookup",
                      "newPage": false,
                      "searchKey": "zip.Reader.openLookup",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) openLookup(name string) *fileListEntry"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) openLookup(name string) *fileListEntry\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Reader.openReadDir",
                    "documentation": {
                      "identifier": "Reader.openReadDir",
                      "newPage": false,
                      "searchKey": "zip.Reader.openReadDir",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) openReadDir(dir string) []fileListEntry"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) openReadDir(dir string) []fileListEntry\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#WriteTest",
              "documentation": {
                "identifier": "WriteTest",
                "newPage": false,
                "searchKey": "zip.WriteTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type WriteTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WriteTest struct {\n\tName   string\n\tData   []byte\n\tMethod uint16\n\tMode   fs.FileMode\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#Writer",
              "documentation": {
                "identifier": "Writer",
                "newPage": false,
                "searchKey": "zip.Writer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Writer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Writer struct {\n\tcw          *countWriter\n\tdir         []*header\n\tlast        *fileWriter\n\tclosed      bool\n\tcompressors map[uint16]Compressor\n\tcomment     string\n\n\t// testHookCloseSizeOffset if non-nil is called with the size\n\t// of offset of the central directory at Close.\n\ttestHookCloseSizeOffset func(size, offset uint64)\n}\n```\n\nWriter implements a zip file writer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#NewWriter",
                    "documentation": {
                      "identifier": "NewWriter",
                      "newPage": false,
                      "searchKey": "zip.NewWriter",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewWriter(w io.Writer) *Writer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewWriter(w io.Writer) *Writer\n```\n\nNewWriter returns a new Writer writing a zip file to w. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.Close",
                    "documentation": {
                      "identifier": "Writer.Close",
                      "newPage": false,
                      "searchKey": "zip.Writer.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Close() error\n```\n\nClose finishes writing the zip file by writing the central directory. It does not close the underlying writer. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.Copy",
                    "documentation": {
                      "identifier": "Writer.Copy",
                      "newPage": false,
                      "searchKey": "zip.Writer.Copy",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Copy(f *File) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Copy(f *File) error\n```\n\nCopy copies the file f (obtained from a Reader) into w. It copies the raw form directly bypassing decompression, compression, and validation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.Create",
                    "documentation": {
                      "identifier": "Writer.Create",
                      "newPage": false,
                      "searchKey": "zip.Writer.Create",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Create(name string) (io.Writer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Create(name string) (io.Writer, error)\n```\n\nCreate adds a file to the zip file using the provided name. It returns a Writer to which the file contents should be written. The file contents will be compressed using the Deflate method. The name must be a relative path: it must not start with a drive letter (e.g. C:) or leading slash, and only forward slashes are allowed. To create a directory instead of a file, add a trailing slash to the name. The file's contents must be written to the io.Writer before the next call to Create, CreateHeader, or Close. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.CreateHeader",
                    "documentation": {
                      "identifier": "Writer.CreateHeader",
                      "newPage": false,
                      "searchKey": "zip.Writer.CreateHeader",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) CreateHeader(fh *FileHeader) (io.Writer, error)\n```\n\nCreateHeader adds a file to the zip archive using the provided FileHeader for the file metadata. Writer takes ownership of fh and may mutate its fields. The caller must not modify fh after calling CreateHeader. \n\nThis returns a Writer to which the file contents should be written. The file's contents must be written to the io.Writer before the next call to Create, CreateHeader, CreateRaw, or Close. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.CreateRaw",
                    "documentation": {
                      "identifier": "Writer.CreateRaw",
                      "newPage": false,
                      "searchKey": "zip.Writer.CreateRaw",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) CreateRaw(fh *FileHeader) (io.Writer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) CreateRaw(fh *FileHeader) (io.Writer, error)\n```\n\nCreateRaw adds a file to the zip archive using the provided FileHeader and returns a Writer to which the file contents should be written. The file's contents must be written to the io.Writer before the next call to Create, CreateHeader, CreateRaw, or Close. \n\nIn contrast to CreateHeader, the bytes passed to Writer are not compressed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.Flush",
                    "documentation": {
                      "identifier": "Writer.Flush",
                      "newPage": false,
                      "searchKey": "zip.Writer.Flush",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Flush() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Flush() error\n```\n\nFlush flushes any buffered data to the underlying writer. Calling Flush is not normally necessary; calling Close is sufficient. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.RegisterCompressor",
                    "documentation": {
                      "identifier": "Writer.RegisterCompressor",
                      "newPage": false,
                      "searchKey": "zip.Writer.RegisterCompressor",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) RegisterCompressor(method uint16, comp Compressor)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) RegisterCompressor(method uint16, comp Compressor)\n```\n\nRegisterCompressor registers or overrides a custom compressor for a specific method ID. If a compressor for a given method is not found, Writer will default to looking up the compressor at the package level. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.SetComment",
                    "documentation": {
                      "identifier": "Writer.SetComment",
                      "newPage": false,
                      "searchKey": "zip.Writer.SetComment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) SetComment(comment string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) SetComment(comment string) error\n```\n\nSetComment sets the end-of-central-directory comment field. It can only be called before Close. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.SetOffset",
                    "documentation": {
                      "identifier": "Writer.SetOffset",
                      "newPage": false,
                      "searchKey": "zip.Writer.SetOffset",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) SetOffset(n int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) SetOffset(n int64)\n```\n\nSetOffset sets the offset of the beginning of the zip data within the underlying writer. It should be used when the zip data is appended to an existing file, such as a binary executable. It must be called before any data is written. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.compressor",
                    "documentation": {
                      "identifier": "Writer.compressor",
                      "newPage": false,
                      "searchKey": "zip.Writer.compressor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) compressor(method uint16) Compressor"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) compressor(method uint16) Compressor\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#Writer.prepare",
                    "documentation": {
                      "identifier": "Writer.prepare",
                      "newPage": false,
                      "searchKey": "zip.Writer.prepare",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) prepare(fh *FileHeader) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) prepare(fh *FileHeader) error\n```\n\nprepare performs the bookkeeping operations required at the start of CreateHeader and CreateRaw. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#ZipTest",
              "documentation": {
                "identifier": "ZipTest",
                "newPage": false,
                "searchKey": "zip.ZipTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ZipTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ZipTest struct {\n\tName     string\n\tSource   func() (r io.ReaderAt, size int64) // if non-nil, used instead of testdata/<Name> file\n\tComment  string\n\tFile     []ZipTestFile\n\tObscured bool  // needed for Apple notarization (golang.org/issue/34986)\n\tError    error // the error that Opening this file should return\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#ZipTestFile",
              "documentation": {
                "identifier": "ZipTestFile",
                "newPage": false,
                "searchKey": "zip.ZipTestFile",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ZipTestFile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ZipTestFile struct {\n\tName     string\n\tMode     fs.FileMode\n\tNonUTF8  bool\n\tModTime  time.Time\n\tModified time.Time\n\n\t// Information describing expected zip file content.\n\t// First, reading the entire content should produce the error ContentErr.\n\t// Second, if ContentErr==nil, the content should match Content.\n\t// If content is large, an alternative to setting Content is to set File,\n\t// which names a file in the testdata/ directory containing the\n\t// uncompressed expected content.\n\t// If content is very large, an alternative to setting Content or File\n\t// is to set Size, which will then be checked against the header-reported size\n\t// but will bypass the decompressing of the actual data.\n\t// This last option is used for testing very large (multi-GB) compressed files.\n\tContentErr error\n\tContent    []byte\n\tFile       string\n\tSize       uint64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#checksumReader",
              "documentation": {
                "identifier": "checksumReader",
                "newPage": false,
                "searchKey": "zip.checksumReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type checksumReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype checksumReader struct {\n\trc    io.ReadCloser\n\thash  hash.Hash32\n\tnread uint64 // number of bytes read so far\n\tf     *File\n\terr   error // sticky error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#checksumReader.Close",
                    "documentation": {
                      "identifier": "checksumReader.Close",
                      "newPage": false,
                      "searchKey": "zip.checksumReader.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *checksumReader) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *checksumReader) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#checksumReader.Read",
                    "documentation": {
                      "identifier": "checksumReader.Read",
                      "newPage": false,
                      "searchKey": "zip.checksumReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *checksumReader) Read(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *checksumReader) Read(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#checksumReader.Stat",
                    "documentation": {
                      "identifier": "checksumReader.Stat",
                      "newPage": false,
                      "searchKey": "zip.checksumReader.Stat",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *checksumReader) Stat() (fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *checksumReader) Stat() (fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#countWriter",
              "documentation": {
                "identifier": "countWriter",
                "newPage": false,
                "searchKey": "zip.countWriter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type countWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countWriter struct {\n\tw     io.Writer\n\tcount int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#countWriter.Write",
                    "documentation": {
                      "identifier": "countWriter.Write",
                      "newPage": false,
                      "searchKey": "zip.countWriter.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *countWriter) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *countWriter) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#dataDescriptor",
              "documentation": {
                "identifier": "dataDescriptor",
                "newPage": false,
                "searchKey": "zip.dataDescriptor",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dataDescriptor struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dataDescriptor struct {\n\tcrc32            uint32\n\tcompressedSize   uint64\n\tuncompressedSize uint64\n}\n```\n\ndataDescriptor holds the data descriptor that optionally follows the file contents in the zip file. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#readDataDescriptor",
                    "documentation": {
                      "identifier": "readDataDescriptor",
                      "newPage": false,
                      "searchKey": "zip.readDataDescriptor",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func readDataDescriptor(r io.Reader, zip64 bool) (*dataDescriptor, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc readDataDescriptor(r io.Reader, zip64 bool) (*dataDescriptor, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#dirWriter",
              "documentation": {
                "identifier": "dirWriter",
                "newPage": false,
                "searchKey": "zip.dirWriter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dirWriter struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dirWriter struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#dirWriter.Write",
                    "documentation": {
                      "identifier": "dirWriter.Write",
                      "newPage": false,
                      "searchKey": "zip.dirWriter.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dirWriter) Write(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dirWriter) Write(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#directoryEnd",
              "documentation": {
                "identifier": "directoryEnd",
                "newPage": false,
                "searchKey": "zip.directoryEnd",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type directoryEnd struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype directoryEnd struct {\n\tdiskNbr            uint32 // unused\n\tdirDiskNbr         uint32 // unused\n\tdirRecordsThisDisk uint64 // unused\n\tdirectoryRecords   uint64\n\tdirectorySize      uint64\n\tdirectoryOffset    uint64 // relative to file\n\tcommentLen         uint16\n\tcomment            string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#readDirectoryEnd",
                    "documentation": {
                      "identifier": "readDirectoryEnd",
                      "newPage": false,
                      "searchKey": "zip.readDirectoryEnd",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func readDirectoryEnd(r io.ReaderAt, size int64) (dir *directoryEnd, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc readDirectoryEnd(r io.ReaderAt, size int64) (dir *directoryEnd, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fakeHash32",
              "documentation": {
                "identifier": "fakeHash32",
                "newPage": false,
                "searchKey": "zip.fakeHash32",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeHash32 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeHash32 struct {\n\thash.Hash32\n}\n```\n\nfakeHash32 is a dummy Hash32 that always returns 0. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#fakeHash32.Sum32",
                    "documentation": {
                      "identifier": "fakeHash32.Sum32",
                      "newPage": false,
                      "searchKey": "zip.fakeHash32.Sum32",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fakeHash32) Sum32() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fakeHash32) Sum32() uint32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fakeHash32.Write",
                    "documentation": {
                      "identifier": "fakeHash32.Write",
                      "newPage": false,
                      "searchKey": "zip.fakeHash32.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fakeHash32) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fakeHash32) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileInfoDirEntry",
              "documentation": {
                "identifier": "fileInfoDirEntry",
                "newPage": false,
                "searchKey": "zip.fileInfoDirEntry",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileInfoDirEntry interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileInfoDirEntry interface {\n\tfs.FileInfo\n\tfs.DirEntry\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileListEntry",
              "documentation": {
                "identifier": "fileListEntry",
                "newPage": false,
                "searchKey": "zip.fileListEntry",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileListEntry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileListEntry struct {\n\tname  string\n\tfile  *File\n\tisDir bool\n}\n```\n\nA fileListEntry is a File and its ename. If file == nil, the fileListEntry describes a directory without metadata. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.Info",
                    "documentation": {
                      "identifier": "fileListEntry.Info",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.Info",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) Info() (fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) Info() (fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.IsDir",
                    "documentation": {
                      "identifier": "fileListEntry.IsDir",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.IsDir",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) IsDir() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) IsDir() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.ModTime",
                    "documentation": {
                      "identifier": "fileListEntry.ModTime",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.ModTime",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) ModTime() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) ModTime() time.Time\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.Mode",
                    "documentation": {
                      "identifier": "fileListEntry.Mode",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.Mode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) Mode() fs.FileMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) Mode() fs.FileMode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.Name",
                    "documentation": {
                      "identifier": "fileListEntry.Name",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.Name",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) Name() string\n```\n\nOnly used for directories. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.Size",
                    "documentation": {
                      "identifier": "fileListEntry.Size",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.Size",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.Sys",
                    "documentation": {
                      "identifier": "fileListEntry.Sys",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.Sys",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) Sys() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) Sys() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.Type",
                    "documentation": {
                      "identifier": "fileListEntry.Type",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.Type",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fileListEntry) Type() fs.FileMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fileListEntry) Type() fs.FileMode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileListEntry.stat",
                    "documentation": {
                      "identifier": "fileListEntry.stat",
                      "newPage": false,
                      "searchKey": "zip.fileListEntry.stat",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *fileListEntry) stat() fileInfoDirEntry"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *fileListEntry) stat() fileInfoDirEntry\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileWriter",
              "documentation": {
                "identifier": "fileWriter",
                "newPage": false,
                "searchKey": "zip.fileWriter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileWriter struct {\n\t*header\n\tzipw      io.Writer\n\trawCount  *countWriter\n\tcomp      io.WriteCloser\n\tcompCount *countWriter\n\tcrc32     hash.Hash32\n\tclosed    bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#fileWriter.Write",
                    "documentation": {
                      "identifier": "fileWriter.Write",
                      "newPage": false,
                      "searchKey": "zip.fileWriter.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *fileWriter) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *fileWriter) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileWriter.close",
                    "documentation": {
                      "identifier": "fileWriter.close",
                      "newPage": false,
                      "searchKey": "zip.fileWriter.close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *fileWriter) close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *fileWriter) close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#fileWriter.writeDataDescriptor",
                    "documentation": {
                      "identifier": "fileWriter.writeDataDescriptor",
                      "newPage": false,
                      "searchKey": "zip.fileWriter.writeDataDescriptor",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *fileWriter) writeDataDescriptor() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *fileWriter) writeDataDescriptor() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#header",
              "documentation": {
                "identifier": "header",
                "newPage": false,
                "searchKey": "zip.header",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type header struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype header struct {\n\t*FileHeader\n\toffset uint64\n\traw    bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#headerFileInfo",
              "documentation": {
                "identifier": "headerFileInfo",
                "newPage": false,
                "searchKey": "zip.headerFileInfo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type headerFileInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype headerFileInfo struct {\n\tfh *FileHeader\n}\n```\n\nheaderFileInfo implements fs.FileInfo. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.Info",
                    "documentation": {
                      "identifier": "headerFileInfo.Info",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.Info",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) Info() (fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) Info() (fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.IsDir",
                    "documentation": {
                      "identifier": "headerFileInfo.IsDir",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.IsDir",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) IsDir() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) IsDir() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.ModTime",
                    "documentation": {
                      "identifier": "headerFileInfo.ModTime",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.ModTime",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) ModTime() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) ModTime() time.Time\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.Mode",
                    "documentation": {
                      "identifier": "headerFileInfo.Mode",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.Mode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) Mode() fs.FileMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) Mode() fs.FileMode\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.Name",
                    "documentation": {
                      "identifier": "headerFileInfo.Name",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.Name",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.Size",
                    "documentation": {
                      "identifier": "headerFileInfo.Size",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.Size",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.Sys",
                    "documentation": {
                      "identifier": "headerFileInfo.Sys",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.Sys",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) Sys() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) Sys() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#headerFileInfo.Type",
                    "documentation": {
                      "identifier": "headerFileInfo.Type",
                      "newPage": false,
                      "searchKey": "zip.headerFileInfo.Type",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fi headerFileInfo) Type() fs.FileMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fi headerFileInfo) Type() fs.FileMode\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#nopCloser",
              "documentation": {
                "identifier": "nopCloser",
                "newPage": false,
                "searchKey": "zip.nopCloser",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nopCloser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nopCloser struct {\n\tio.Writer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#nopCloser.Close",
                    "documentation": {
                      "identifier": "nopCloser.Close",
                      "newPage": false,
                      "searchKey": "zip.nopCloser.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w nopCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w nopCloser) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#openDir",
              "documentation": {
                "identifier": "openDir",
                "newPage": false,
                "searchKey": "zip.openDir",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type openDir struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype openDir struct {\n\te      *fileListEntry\n\tfiles  []fileListEntry\n\toffset int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#openDir.Close",
                    "documentation": {
                      "identifier": "openDir.Close",
                      "newPage": false,
                      "searchKey": "zip.openDir.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *openDir) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *openDir) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#openDir.Read",
                    "documentation": {
                      "identifier": "openDir.Read",
                      "newPage": false,
                      "searchKey": "zip.openDir.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *openDir) Read([]byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *openDir) Read([]byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#openDir.ReadDir",
                    "documentation": {
                      "identifier": "openDir.ReadDir",
                      "newPage": false,
                      "searchKey": "zip.openDir.ReadDir",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *openDir) ReadDir(count int) ([]fs.DirEntry, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *openDir) ReadDir(count int) ([]fs.DirEntry, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#openDir.Stat",
                    "documentation": {
                      "identifier": "openDir.Stat",
                      "newPage": false,
                      "searchKey": "zip.openDir.Stat",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *openDir) Stat() (fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *openDir) Stat() (fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#pooledFlateReader",
              "documentation": {
                "identifier": "pooledFlateReader",
                "newPage": false,
                "searchKey": "zip.pooledFlateReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pooledFlateReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pooledFlateReader struct {\n\tmu sync.Mutex // guards Close and Read\n\tfr io.ReadCloser\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#pooledFlateReader.Close",
                    "documentation": {
                      "identifier": "pooledFlateReader.Close",
                      "newPage": false,
                      "searchKey": "zip.pooledFlateReader.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *pooledFlateReader) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *pooledFlateReader) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#pooledFlateReader.Read",
                    "documentation": {
                      "identifier": "pooledFlateReader.Read",
                      "newPage": false,
                      "searchKey": "zip.pooledFlateReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *pooledFlateReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *pooledFlateReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#pooledFlateWriter",
              "documentation": {
                "identifier": "pooledFlateWriter",
                "newPage": false,
                "searchKey": "zip.pooledFlateWriter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type pooledFlateWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pooledFlateWriter struct {\n\tmu sync.Mutex // guards Close and Write\n\tfw *flate.Writer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#pooledFlateWriter.Close",
                    "documentation": {
                      "identifier": "pooledFlateWriter.Close",
                      "newPage": false,
                      "searchKey": "zip.pooledFlateWriter.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *pooledFlateWriter) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *pooledFlateWriter) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#pooledFlateWriter.Write",
                    "documentation": {
                      "identifier": "pooledFlateWriter.Write",
                      "newPage": false,
                      "searchKey": "zip.pooledFlateWriter.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *pooledFlateWriter) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *pooledFlateWriter) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#readBuf",
              "documentation": {
                "identifier": "readBuf",
                "newPage": false,
                "searchKey": "zip.readBuf",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type readBuf []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype readBuf []byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#readBuf.sub",
                    "documentation": {
                      "identifier": "readBuf.sub",
                      "newPage": false,
                      "searchKey": "zip.readBuf.sub",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *readBuf) sub(n int) readBuf"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *readBuf) sub(n int) readBuf\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#readBuf.uint16",
                    "documentation": {
                      "identifier": "readBuf.uint16",
                      "newPage": false,
                      "searchKey": "zip.readBuf.uint16",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *readBuf) uint16() uint16"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *readBuf) uint16() uint16\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#readBuf.uint32",
                    "documentation": {
                      "identifier": "readBuf.uint32",
                      "newPage": false,
                      "searchKey": "zip.readBuf.uint32",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *readBuf) uint32() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *readBuf) uint32() uint32\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#readBuf.uint64",
                    "documentation": {
                      "identifier": "readBuf.uint64",
                      "newPage": false,
                      "searchKey": "zip.readBuf.uint64",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *readBuf) uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *readBuf) uint64() uint64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#readBuf.uint8",
                    "documentation": {
                      "identifier": "readBuf.uint8",
                      "newPage": false,
                      "searchKey": "zip.readBuf.uint8",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *readBuf) uint8() uint8"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *readBuf) uint8() uint8\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#repeatedByte",
              "documentation": {
                "identifier": "repeatedByte",
                "newPage": false,
                "searchKey": "zip.repeatedByte",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type repeatedByte struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repeatedByte struct {\n\toff int64\n\tb   byte\n\tn   int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#rleBuffer",
              "documentation": {
                "identifier": "rleBuffer",
                "newPage": false,
                "searchKey": "zip.rleBuffer",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rleBuffer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rleBuffer struct {\n\tbuf []repeatedByte\n}\n```\n\nrleBuffer is a run-length-encoded byte buffer. It's an io.Writer (like a bytes.Buffer) and also an io.ReaderAt, allowing random-access reads. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#testZip64",
                    "documentation": {
                      "identifier": "testZip64",
                      "newPage": false,
                      "searchKey": "zip.testZip64",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func testZip64(t testing.TB, size int64) *rleBuffer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc testZip64(t testing.TB, size int64) *rleBuffer\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#rleBuffer.ReadAt",
                    "documentation": {
                      "identifier": "rleBuffer.ReadAt",
                      "newPage": false,
                      "searchKey": "zip.rleBuffer.ReadAt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rleBuffer) ReadAt(p []byte, off int64) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rleBuffer) ReadAt(p []byte, off int64) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#rleBuffer.Size",
                    "documentation": {
                      "identifier": "rleBuffer.Size",
                      "newPage": false,
                      "searchKey": "zip.rleBuffer.Size",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rleBuffer) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rleBuffer) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#rleBuffer.Write",
                    "documentation": {
                      "identifier": "rleBuffer.Write",
                      "newPage": false,
                      "searchKey": "zip.rleBuffer.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *rleBuffer) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *rleBuffer) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#sizedReaderAt",
              "documentation": {
                "identifier": "sizedReaderAt",
                "newPage": false,
                "searchKey": "zip.sizedReaderAt",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sizedReaderAt interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sizedReaderAt interface {\n\tio.ReaderAt\n\tSize() int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#suffixSaver",
              "documentation": {
                "identifier": "suffixSaver",
                "newPage": false,
                "searchKey": "zip.suffixSaver",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type suffixSaver struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype suffixSaver struct {\n\tkeep  int\n\tbuf   []byte\n\tstart int\n\tsize  int64\n}\n```\n\nsuffixSaver is an io.Writer & io.ReaderAt that remembers the last 0 to 'keep' bytes of data written to it. Call Suffix to get the suffix bytes. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#suffixSaver.ReadAt",
                    "documentation": {
                      "identifier": "suffixSaver.ReadAt",
                      "newPage": false,
                      "searchKey": "zip.suffixSaver.ReadAt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ss *suffixSaver) ReadAt(p []byte, off int64) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ss *suffixSaver) ReadAt(p []byte, off int64) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#suffixSaver.Size",
                    "documentation": {
                      "identifier": "suffixSaver.Size",
                      "newPage": false,
                      "searchKey": "zip.suffixSaver.Size",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ss *suffixSaver) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ss *suffixSaver) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#suffixSaver.Suffix",
                    "documentation": {
                      "identifier": "suffixSaver.Suffix",
                      "newPage": false,
                      "searchKey": "zip.suffixSaver.Suffix",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ss *suffixSaver) Suffix() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ss *suffixSaver) Suffix() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#suffixSaver.Write",
                    "documentation": {
                      "identifier": "suffixSaver.Write",
                      "newPage": false,
                      "searchKey": "zip.suffixSaver.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ss *suffixSaver) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ss *suffixSaver) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#writeBuf",
              "documentation": {
                "identifier": "writeBuf",
                "newPage": false,
                "searchKey": "zip.writeBuf",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type writeBuf []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype writeBuf []byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#writeBuf.uint16",
                    "documentation": {
                      "identifier": "writeBuf.uint16",
                      "newPage": false,
                      "searchKey": "zip.writeBuf.uint16",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *writeBuf) uint16(v uint16)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *writeBuf) uint16(v uint16)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#writeBuf.uint32",
                    "documentation": {
                      "identifier": "writeBuf.uint32",
                      "newPage": false,
                      "searchKey": "zip.writeBuf.uint32",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *writeBuf) uint32(v uint32)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *writeBuf) uint32(v uint32)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#writeBuf.uint64",
                    "documentation": {
                      "identifier": "writeBuf.uint64",
                      "newPage": false,
                      "searchKey": "zip.writeBuf.uint64",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *writeBuf) uint64(v uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *writeBuf) uint64(v uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/archive/zip#writeBuf.uint8",
                    "documentation": {
                      "identifier": "writeBuf.uint8",
                      "newPage": false,
                      "searchKey": "zip.writeBuf.uint8",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *writeBuf) uint8(v uint8)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *writeBuf) uint8(v uint8)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#zeros",
              "documentation": {
                "identifier": "zeros",
                "newPage": false,
                "searchKey": "zip.zeros",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type zeros struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype zeros struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/archive/zip#zeros.Read",
                    "documentation": {
                      "identifier": "zeros.Read",
                      "newPage": false,
                      "searchKey": "zip.zeros.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (zeros) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (zeros) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/archive/zip#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/archive/zip#BenchmarkCompressedZipGarbage",
              "documentation": {
                "identifier": "BenchmarkCompressedZipGarbage",
                "newPage": false,
                "searchKey": "zip.BenchmarkCompressedZipGarbage",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompressedZipGarbage(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompressedZipGarbage(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#BenchmarkZip64Test",
              "documentation": {
                "identifier": "BenchmarkZip64Test",
                "newPage": false,
                "searchKey": "zip.BenchmarkZip64Test",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkZip64Test(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkZip64Test(b *testing.B)\n```\n\nJust benchmarking how fast the Zip64 test above is. Not related to our zip performance, since the test above disabled CRC32 and flate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#BenchmarkZip64TestSizes",
              "documentation": {
                "identifier": "BenchmarkZip64TestSizes",
                "newPage": false,
                "searchKey": "zip.BenchmarkZip64TestSizes",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkZip64TestSizes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkZip64TestSizes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#RegisterCompressor",
              "documentation": {
                "identifier": "RegisterCompressor",
                "newPage": false,
                "searchKey": "zip.RegisterCompressor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RegisterCompressor(method uint16, comp Compressor)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RegisterCompressor(method uint16, comp Compressor)\n```\n\nRegisterCompressor registers custom compressors for a specified method ID. The common methods Store and Deflate are built in. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#RegisterDecompressor",
              "documentation": {
                "identifier": "RegisterDecompressor",
                "newPage": false,
                "searchKey": "zip.RegisterDecompressor",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RegisterDecompressor(method uint16, dcomp Decompressor)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RegisterDecompressor(method uint16, dcomp Decompressor)\n```\n\nRegisterDecompressor allows custom decompressors for a specified method ID. The common methods Store and Deflate are built in. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestCVE202127919",
              "documentation": {
                "identifier": "TestCVE202127919",
                "newPage": false,
                "searchKey": "zip.TestCVE202127919",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCVE202127919(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCVE202127919(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestCVE202133196",
              "documentation": {
                "identifier": "TestCVE202133196",
                "newPage": false,
                "searchKey": "zip.TestCVE202133196",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCVE202133196(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCVE202133196(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestFS",
              "documentation": {
                "identifier": "TestFS",
                "newPage": false,
                "searchKey": "zip.TestFS",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestFSModTime",
              "documentation": {
                "identifier": "TestFSModTime",
                "newPage": false,
                "searchKey": "zip.TestFSModTime",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFSModTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFSModTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestFileHeaderRoundTrip",
              "documentation": {
                "identifier": "TestFileHeaderRoundTrip",
                "newPage": false,
                "searchKey": "zip.TestFileHeaderRoundTrip",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileHeaderRoundTrip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileHeaderRoundTrip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestFileHeaderRoundTrip64",
              "documentation": {
                "identifier": "TestFileHeaderRoundTrip64",
                "newPage": false,
                "searchKey": "zip.TestFileHeaderRoundTrip64",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileHeaderRoundTrip64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileHeaderRoundTrip64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestFileHeaderRoundTripModified",
              "documentation": {
                "identifier": "TestFileHeaderRoundTripModified",
                "newPage": false,
                "searchKey": "zip.TestFileHeaderRoundTripModified",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileHeaderRoundTripModified(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileHeaderRoundTripModified(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestFileHeaderRoundTripWithoutModified",
              "documentation": {
                "identifier": "TestFileHeaderRoundTripWithoutModified",
                "newPage": false,
                "searchKey": "zip.TestFileHeaderRoundTripWithoutModified",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileHeaderRoundTripWithoutModified(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileHeaderRoundTripWithoutModified(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestHeaderIgnoredSize",
              "documentation": {
                "identifier": "TestHeaderIgnoredSize",
                "newPage": false,
                "searchKey": "zip.TestHeaderIgnoredSize",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaderIgnoredSize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaderIgnoredSize(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestHeaderInvalidTagAndSize",
              "documentation": {
                "identifier": "TestHeaderInvalidTagAndSize",
                "newPage": false,
                "searchKey": "zip.TestHeaderInvalidTagAndSize",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaderInvalidTagAndSize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaderInvalidTagAndSize(t *testing.T)\n```\n\nIssue 4302. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestHeaderTooLongErr",
              "documentation": {
                "identifier": "TestHeaderTooLongErr",
                "newPage": false,
                "searchKey": "zip.TestHeaderTooLongErr",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaderTooLongErr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaderTooLongErr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestHeaderTooShort",
              "documentation": {
                "identifier": "TestHeaderTooShort",
                "newPage": false,
                "searchKey": "zip.TestHeaderTooShort",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaderTooShort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaderTooShort(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestInvalidFiles",
              "documentation": {
                "identifier": "TestInvalidFiles",
                "newPage": false,
                "searchKey": "zip.TestInvalidFiles",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidFiles(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidFiles(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestIssue10956",
              "documentation": {
                "identifier": "TestIssue10956",
                "newPage": false,
                "searchKey": "zip.TestIssue10956",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue10956(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue10956(t *testing.T)\n```\n\nVerify that this particular malformed zip file is rejected. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestIssue10957",
              "documentation": {
                "identifier": "TestIssue10957",
                "newPage": false,
                "searchKey": "zip.TestIssue10957",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue10957(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue10957(t *testing.T)\n```\n\nVerify we return ErrUnexpectedEOF when length is short. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestIssue11146",
              "documentation": {
                "identifier": "TestIssue11146",
                "newPage": false,
                "searchKey": "zip.TestIssue11146",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue11146(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue11146(t *testing.T)\n```\n\nVerify we return ErrUnexpectedEOF when reading truncated data descriptor. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestIssue12449",
              "documentation": {
                "identifier": "TestIssue12449",
                "newPage": false,
                "searchKey": "zip.TestIssue12449",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue12449(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue12449(t *testing.T)\n```\n\nVerify we do not treat non-zip64 archives as zip64 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestIssue8186",
              "documentation": {
                "identifier": "TestIssue8186",
                "newPage": false,
                "searchKey": "zip.TestIssue8186",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue8186(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue8186(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestModTime",
              "documentation": {
                "identifier": "TestModTime",
                "newPage": false,
                "searchKey": "zip.TestModTime",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestModTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestModTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestOver65kFiles",
              "documentation": {
                "identifier": "TestOver65kFiles",
                "newPage": false,
                "searchKey": "zip.TestOver65kFiles",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOver65kFiles(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOver65kFiles(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestRLEBuffer",
              "documentation": {
                "identifier": "TestRLEBuffer",
                "newPage": false,
                "searchKey": "zip.TestRLEBuffer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRLEBuffer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRLEBuffer(t *testing.T)\n```\n\nJust testing the rleBuffer used in the Zip64 test above. Not used by the zip code. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestReadDataDescriptor",
              "documentation": {
                "identifier": "TestReadDataDescriptor",
                "newPage": false,
                "searchKey": "zip.TestReadDataDescriptor",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadDataDescriptor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadDataDescriptor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestReader",
              "documentation": {
                "identifier": "TestReader",
                "newPage": false,
                "searchKey": "zip.TestReader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReader(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestSuffixSaver",
              "documentation": {
                "identifier": "TestSuffixSaver",
                "newPage": false,
                "searchKey": "zip.TestSuffixSaver",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSuffixSaver(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSuffixSaver(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriter",
              "documentation": {
                "identifier": "TestWriter",
                "newPage": false,
                "searchKey": "zip.TestWriter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterComment",
              "documentation": {
                "identifier": "TestWriterComment",
                "newPage": false,
                "searchKey": "zip.TestWriterComment",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterComment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterComment(t *testing.T)\n```\n\nTestWriterComment is test for EOCD comment read/write. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterCopy",
              "documentation": {
                "identifier": "TestWriterCopy",
                "newPage": false,
                "searchKey": "zip.TestWriterCopy",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterCreateRaw",
              "documentation": {
                "identifier": "TestWriterCreateRaw",
                "newPage": false,
                "searchKey": "zip.TestWriterCreateRaw",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterCreateRaw(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterCreateRaw(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterDir",
              "documentation": {
                "identifier": "TestWriterDir",
                "newPage": false,
                "searchKey": "zip.TestWriterDir",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterDir(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterDir(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterDirAttributes",
              "documentation": {
                "identifier": "TestWriterDirAttributes",
                "newPage": false,
                "searchKey": "zip.TestWriterDirAttributes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterDirAttributes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterDirAttributes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterFlush",
              "documentation": {
                "identifier": "TestWriterFlush",
                "newPage": false,
                "searchKey": "zip.TestWriterFlush",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterFlush(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterFlush(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterOffset",
              "documentation": {
                "identifier": "TestWriterOffset",
                "newPage": false,
                "searchKey": "zip.TestWriterOffset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterOffset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterOffset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterTime",
              "documentation": {
                "identifier": "TestWriterTime",
                "newPage": false,
                "searchKey": "zip.TestWriterTime",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestWriterUTF8",
              "documentation": {
                "identifier": "TestWriterUTF8",
                "newPage": false,
                "searchKey": "zip.TestWriterUTF8",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterUTF8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterUTF8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestZeroLengthHeader",
              "documentation": {
                "identifier": "TestZeroLengthHeader",
                "newPage": false,
                "searchKey": "zip.TestZeroLengthHeader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroLengthHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroLengthHeader(t *testing.T)\n```\n\nIssue 4393. It is valid to have an extra data header which contains no body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestZip64",
              "documentation": {
                "identifier": "TestZip64",
                "newPage": false,
                "searchKey": "zip.TestZip64",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZip64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZip64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestZip64DirectoryOffset",
              "documentation": {
                "identifier": "TestZip64DirectoryOffset",
                "newPage": false,
                "searchKey": "zip.TestZip64DirectoryOffset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZip64DirectoryOffset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZip64DirectoryOffset(t *testing.T)\n```\n\nTests that we generate a zip64 file if the directory at offset 0xFFFFFFFF, but not before. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestZip64EdgeCase",
              "documentation": {
                "identifier": "TestZip64EdgeCase",
                "newPage": false,
                "searchKey": "zip.TestZip64EdgeCase",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZip64EdgeCase(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZip64EdgeCase(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestZip64LargeDirectory",
              "documentation": {
                "identifier": "TestZip64LargeDirectory",
                "newPage": false,
                "searchKey": "zip.TestZip64LargeDirectory",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZip64LargeDirectory(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZip64LargeDirectory(t *testing.T)\n```\n\nZip64 is required if the total size of the records is uint32max. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#TestZip64ManyRecords",
              "documentation": {
                "identifier": "TestZip64ManyRecords",
                "newPage": false,
                "searchKey": "zip.TestZip64ManyRecords",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZip64ManyRecords(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZip64ManyRecords(t *testing.T)\n```\n\nAt 16k records, we need to generate a zip64 file. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#biggestZipBytes",
              "documentation": {
                "identifier": "biggestZipBytes",
                "newPage": false,
                "searchKey": "zip.biggestZipBytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func biggestZipBytes() []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc biggestZipBytes() []byte\n```\n\nbiggestZipBytes returns the bytes of a zip file biggest.zip that contains a zip file bigger.zip that contains a zip file big.zip that contains big.file, which contains 2³²-1 zeros. The big.zip file is interesting because it has no zip64 header, much like the innermost zip files in the well-known 42.zip. \n\nbiggest.zip was generated by changing isZip64 to use > uint32max instead of >= uint32max and then running this program: \n\n```\npackage main\n\nimport (\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n)\n\ntype zeros struct{}\n\nfunc (zeros) Read(b []byte) (int, error) {\n\tfor i := range b {\n\t\tb[i] = 0\n\t}\n\treturn len(b), nil\n}\n\nfunc main() {\n\tbigZip := makeZip(\"big.file\", io.LimitReader(zeros{}, 1<<32-1))\n\tif err := os.WriteFile(\"/tmp/big.zip\", bigZip, 0666); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbiggerZip := makeZip(\"big.zip\", bytes.NewReader(bigZip))\n\tif err := os.WriteFile(\"/tmp/bigger.zip\", biggerZip, 0666); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tbiggestZip := makeZip(\"bigger.zip\", bytes.NewReader(biggerZip))\n\tif err := os.WriteFile(\"/tmp/biggest.zip\", biggestZip, 0666); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc makeZip(name string, r io.Reader) []byte {\n\tvar buf bytes.Buffer\n\tw := zip.NewWriter(&buf)\n\twf, err := w.Create(name)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif _, err = io.Copy(wf, r); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := w.Close(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn buf.Bytes()\n}\n\n```\nThe 4 GB of zeros compresses to 4 MB, which compresses to 20 kB, which compresses to 1252 bytes (in the hex dump below). \n\nIt's here in hex for the same reason as rZipBytes above: to avoid problems with on-disk virus scanners or other zip processors. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#detectUTF8",
              "documentation": {
                "identifier": "detectUTF8",
                "newPage": false,
                "searchKey": "zip.detectUTF8",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func detectUTF8(s string) (valid, require bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc detectUTF8(s string) (valid, require bool)\n```\n\ndetectUTF8 reports whether s is a valid UTF-8 string, and whether the string must be considered UTF-8 encoding (i.e., not compatible with CP-437, ASCII, or any other common encoding). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#equalTimeAndZone",
              "documentation": {
                "identifier": "equalTimeAndZone",
                "newPage": false,
                "searchKey": "zip.equalTimeAndZone",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func equalTimeAndZone(t1, t2 time.Time) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc equalTimeAndZone(t1, t2 time.Time) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileEntryLess",
              "documentation": {
                "identifier": "fileEntryLess",
                "newPage": false,
                "searchKey": "zip.fileEntryLess",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fileEntryLess(x, y string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fileEntryLess(x, y string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#fileModeToUnixMode",
              "documentation": {
                "identifier": "fileModeToUnixMode",
                "newPage": false,
                "searchKey": "zip.fileModeToUnixMode",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fileModeToUnixMode(mode fs.FileMode) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fileModeToUnixMode(mode fs.FileMode) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#findDirectory64End",
              "documentation": {
                "identifier": "findDirectory64End",
                "newPage": false,
                "searchKey": "zip.findDirectory64End",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findDirectory64End(r io.ReaderAt, directoryEndOffset int64) (int64, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findDirectory64End(r io.ReaderAt, directoryEndOffset int64) (int64, error)\n```\n\nfindDirectory64End tries to read the zip64 locator just before the directory end and returns the offset of the zip64 directory end if found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#findSignatureInBlock",
              "documentation": {
                "identifier": "findSignatureInBlock",
                "newPage": false,
                "searchKey": "zip.findSignatureInBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func findSignatureInBlock(b []byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc findSignatureInBlock(b []byte) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#generatesZip64",
              "documentation": {
                "identifier": "generatesZip64",
                "newPage": false,
                "searchKey": "zip.generatesZip64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func generatesZip64(t *testing.T, f func(w *Writer)) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc generatesZip64(t *testing.T, f func(w *Writer)) bool\n```\n\ngeneratesZip64 reports whether f wrote a zip64 file. f is also responsible for closing w. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#init.register.go",
              "documentation": {
                "identifier": "init.register.go",
                "newPage": false,
                "searchKey": "zip.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#memset",
              "documentation": {
                "identifier": "memset",
                "newPage": false,
                "searchKey": "zip.memset",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func memset(a []byte, b byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc memset(a []byte, b byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#messWith",
              "documentation": {
                "identifier": "messWith",
                "newPage": false,
                "searchKey": "zip.messWith",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func messWith(fileName string, corrupter func(b []byte)) (r io.ReaderAt, size int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc messWith(fileName string, corrupter func(b []byte)) (r io.ReaderAt, size int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#min",
              "documentation": {
                "identifier": "min",
                "newPage": false,
                "searchKey": "zip.min",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func min(x, y int64) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc min(x, y int64) int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#min64",
              "documentation": {
                "identifier": "min64",
                "newPage": false,
                "searchKey": "zip.min64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func min64(x, y uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc min64(x, y uint64) uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#msDosTimeToTime",
              "documentation": {
                "identifier": "msDosTimeToTime",
                "newPage": false,
                "searchKey": "zip.msDosTimeToTime",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func msDosTimeToTime(dosDate, dosTime uint16) time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc msDosTimeToTime(dosDate, dosTime uint16) time.Time\n```\n\nmsDosTimeToTime converts an MS-DOS date and time into a time.Time. The resolution is 2s. See: [https://msdn.microsoft.com/en-us/library/ms724247(v=VS.85).aspx](https://msdn.microsoft.com/en-us/library/ms724247(v=VS.85).aspx) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#msdosModeToFileMode",
              "documentation": {
                "identifier": "msdosModeToFileMode",
                "newPage": false,
                "searchKey": "zip.msdosModeToFileMode",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func msdosModeToFileMode(m uint32) (mode fs.FileMode)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc msdosModeToFileMode(m uint32) (mode fs.FileMode)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#newFlateReader",
              "documentation": {
                "identifier": "newFlateReader",
                "newPage": false,
                "searchKey": "zip.newFlateReader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newFlateReader(r io.Reader) io.ReadCloser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newFlateReader(r io.Reader) io.ReadCloser\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#newFlateWriter",
              "documentation": {
                "identifier": "newFlateWriter",
                "newPage": false,
                "searchKey": "zip.newFlateWriter",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newFlateWriter(w io.Writer) io.WriteCloser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newFlateWriter(w io.Writer) io.WriteCloser\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#rZipBytes",
              "documentation": {
                "identifier": "rZipBytes",
                "newPage": false,
                "searchKey": "zip.rZipBytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rZipBytes() []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rZipBytes() []byte\n```\n\nrZipBytes returns the bytes of a recursive zip file, without putting it on disk and triggering certain virus scanners. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#readDirectory64End",
              "documentation": {
                "identifier": "readDirectory64End",
                "newPage": false,
                "searchKey": "zip.readDirectory64End",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readDirectory64End(r io.ReaderAt, offset int64, d *directoryEnd) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readDirectory64End(r io.ReaderAt, offset int64, d *directoryEnd) (err error)\n```\n\nreadDirectory64End reads the zip64 directory end and updates the directory end with the zip64 directory end values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#readDirectoryHeader",
              "documentation": {
                "identifier": "readDirectoryHeader",
                "newPage": false,
                "searchKey": "zip.readDirectoryHeader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readDirectoryHeader(f *File, r io.Reader) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readDirectoryHeader(f *File, r io.Reader) error\n```\n\nreadDirectoryHeader attempts to read a directory header from r. It returns io.ErrUnexpectedEOF if it cannot read a complete header, and ErrFormat if it doesn't find a valid header signature. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#readTestFile",
              "documentation": {
                "identifier": "readTestFile",
                "newPage": false,
                "searchKey": "zip.readTestFile",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readTestFile(t *testing.T, zt ZipTest, ft ZipTestFile, f *File, raw []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readTestFile(t *testing.T, zt ZipTest, ft ZipTestFile, f *File, raw []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#readTestZip",
              "documentation": {
                "identifier": "readTestZip",
                "newPage": false,
                "searchKey": "zip.readTestZip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func readTestZip(t *testing.T, zt ZipTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readTestZip(t *testing.T, zt ZipTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#returnBigZipBytes",
              "documentation": {
                "identifier": "returnBigZipBytes",
                "newPage": false,
                "searchKey": "zip.returnBigZipBytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func returnBigZipBytes() (r io.ReaderAt, size int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc returnBigZipBytes() (r io.ReaderAt, size int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#returnCorruptCRC32Zip",
              "documentation": {
                "identifier": "returnCorruptCRC32Zip",
                "newPage": false,
                "searchKey": "zip.returnCorruptCRC32Zip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func returnCorruptCRC32Zip() (r io.ReaderAt, size int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc returnCorruptCRC32Zip() (r io.ReaderAt, size int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#returnCorruptNotStreamedZip",
              "documentation": {
                "identifier": "returnCorruptNotStreamedZip",
                "newPage": false,
                "searchKey": "zip.returnCorruptNotStreamedZip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func returnCorruptNotStreamedZip() (r io.ReaderAt, size int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc returnCorruptNotStreamedZip() (r io.ReaderAt, size int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#returnRecursiveZip",
              "documentation": {
                "identifier": "returnRecursiveZip",
                "newPage": false,
                "searchKey": "zip.returnRecursiveZip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func returnRecursiveZip() (r io.ReaderAt, size int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc returnRecursiveZip() (r io.ReaderAt, size int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#split",
              "documentation": {
                "identifier": "split",
                "newPage": false,
                "searchKey": "zip.split",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func split(name string) (dir, elem string, isDir bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc split(name string) (dir, elem string, isDir bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#suffixIsZip64",
              "documentation": {
                "identifier": "suffixIsZip64",
                "newPage": false,
                "searchKey": "zip.suffixIsZip64",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func suffixIsZip64(t *testing.T, zip sizedReaderAt) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc suffixIsZip64(t *testing.T, zip sizedReaderAt) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#testCreate",
              "documentation": {
                "identifier": "testCreate",
                "newPage": false,
                "searchKey": "zip.testCreate",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCreate(t *testing.T, w *Writer, wt *WriteTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCreate(t *testing.T, w *Writer, wt *WriteTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#testFileMode",
              "documentation": {
                "identifier": "testFileMode",
                "newPage": false,
                "searchKey": "zip.testFileMode",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testFileMode(t *testing.T, f *File, want fs.FileMode)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testFileMode(t *testing.T, f *File, want fs.FileMode)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#testHeaderRoundTrip",
              "documentation": {
                "identifier": "testHeaderRoundTrip",
                "newPage": false,
                "searchKey": "zip.testHeaderRoundTrip",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHeaderRoundTrip(fh *FileHeader, wantUncompressedSize uint32, wantUncompressedSize64 uint64, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHeaderRoundTrip(fh *FileHeader, wantUncompressedSize uint32, wantUncompressedSize64 uint64, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#testReadFile",
              "documentation": {
                "identifier": "testReadFile",
                "newPage": false,
                "searchKey": "zip.testReadFile",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testReadFile(t *testing.T, f *File, wt *WriteTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testReadFile(t *testing.T, f *File, wt *WriteTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#testValidHeader",
              "documentation": {
                "identifier": "testValidHeader",
                "newPage": false,
                "searchKey": "zip.testValidHeader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testValidHeader(h *FileHeader, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testValidHeader(h *FileHeader, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#testZip64DirectoryRecordLength",
              "documentation": {
                "identifier": "testZip64DirectoryRecordLength",
                "newPage": false,
                "searchKey": "zip.testZip64DirectoryRecordLength",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testZip64DirectoryRecordLength(buf *rleBuffer, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testZip64DirectoryRecordLength(buf *rleBuffer, t *testing.T)\n```\n\nIssue 9857 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#timeToMsDosTime",
              "documentation": {
                "identifier": "timeToMsDosTime",
                "newPage": false,
                "searchKey": "zip.timeToMsDosTime",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func timeToMsDosTime(t time.Time) (fDate uint16, fTime uint16)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timeToMsDosTime(t time.Time) (fDate uint16, fTime uint16)\n```\n\ntimeToMsDosTime converts a time.Time to an MS-DOS date and time. The resolution is 2s. See: [https://msdn.microsoft.com/en-us/library/ms724274(v=VS.85).aspx](https://msdn.microsoft.com/en-us/library/ms724274(v=VS.85).aspx) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#timeZone",
              "documentation": {
                "identifier": "timeZone",
                "newPage": false,
                "searchKey": "zip.timeZone",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func timeZone(offset time.Duration) *time.Location"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc timeZone(offset time.Duration) *time.Location\n```\n\ntimeZone returns a *time.Location based on the provided offset. If the offset is non-sensible, then this uses an offset of zero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#toValidName",
              "documentation": {
                "identifier": "toValidName",
                "newPage": false,
                "searchKey": "zip.toValidName",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toValidName(name string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toValidName(name string) string\n```\n\ntoValidName coerces name to be a valid name for fs.FS.Open. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#unixModeToFileMode",
              "documentation": {
                "identifier": "unixModeToFileMode",
                "newPage": false,
                "searchKey": "zip.unixModeToFileMode",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unixModeToFileMode(m uint32) fs.FileMode"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unixModeToFileMode(m uint32) fs.FileMode\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/archive/zip#writeHeader",
              "documentation": {
                "identifier": "writeHeader",
                "newPage": false,
                "searchKey": "zip.writeHeader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeHeader(w io.Writer, h *header) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeHeader(w io.Writer, h *header) error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
