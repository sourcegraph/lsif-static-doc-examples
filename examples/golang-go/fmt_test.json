{
  "pathID": "/fmt_test",
  "documentation": {
    "identifier": "fmt_test",
    "newPage": true,
    "searchKey": "fmt_test",
    "tags": [
      "package",
      "private"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package fmt_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/fmt_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/fmt_test#intCount",
              "documentation": {
                "identifier": "intCount",
                "newPage": false,
                "searchKey": "fmt_test.intCount",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const intCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst intCount = 800\n```\n\n800 is small enough to not overflow the stack when using gccgo on a platform that does not support split stack. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/fmt_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/fmt_test#NaN",
              "documentation": {
                "identifier": "NaN",
                "newPage": false,
                "searchKey": "fmt_test.NaN",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NaN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NaN = math.NaN()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#array",
              "documentation": {
                "identifier": "array",
                "newPage": false,
                "searchKey": "fmt_test.array",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var array"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar array = [5]int{1, 2, 3, 4, 5}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#barray",
              "documentation": {
                "identifier": "barray",
                "newPage": false,
                "searchKey": "fmt_test.barray",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var barray"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar barray = [5]renamedUint8{1, 2, 3, 4, 5}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#boolVal",
              "documentation": {
                "identifier": "boolVal",
                "newPage": false,
                "searchKey": "fmt_test.boolVal",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var boolVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar boolVal bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#bslice",
              "documentation": {
                "identifier": "bslice",
                "newPage": false,
                "searchKey": "fmt_test.bslice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bslice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bslice = barray[:]\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#byteFormatterSlice",
              "documentation": {
                "identifier": "byteFormatterSlice",
                "newPage": false,
                "searchKey": "fmt_test.byteFormatterSlice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var byteFormatterSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar byteFormatterSlice = []byteFormatter{'h', 'e', 'l', 'l', 'o'}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#byteStringerSlice",
              "documentation": {
                "identifier": "byteStringerSlice",
                "newPage": false,
                "searchKey": "fmt_test.byteStringerSlice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var byteStringerSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar byteStringerSlice = []byteStringer{'h', 'e', 'l', 'l', 'o'}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#bytesVal",
              "documentation": {
                "identifier": "bytesVal",
                "newPage": false,
                "searchKey": "fmt_test.bytesVal",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bytesVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bytesVal []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#c",
              "documentation": {
                "identifier": "c",
                "newPage": false,
                "searchKey": "fmt_test.c",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var c"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar c complex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#complex128Val",
              "documentation": {
                "identifier": "complex128Val",
                "newPage": false,
                "searchKey": "fmt_test.complex128Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var complex128Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar complex128Val complex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#complex64Val",
              "documentation": {
                "identifier": "complex64Val",
                "newPage": false,
                "searchKey": "fmt_test.complex64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var complex64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar complex64Val complex64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#eofTests",
              "documentation": {
                "identifier": "eofTests",
                "newPage": false,
                "searchKey": "fmt_test.eofTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var eofTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar eofTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#f",
              "documentation": {
                "identifier": "f",
                "newPage": false,
                "searchKey": "fmt_test.f",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var f"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar f float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#flagtests",
              "documentation": {
                "identifier": "flagtests",
                "newPage": false,
                "searchKey": "fmt_test.flagtests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var flagtests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar flagtests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#float32Val",
              "documentation": {
                "identifier": "float32Val",
                "newPage": false,
                "searchKey": "fmt_test.float32Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var float32Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar float32Val float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#float64Val",
              "documentation": {
                "identifier": "float64Val",
                "newPage": false,
                "searchKey": "fmt_test.float64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var float64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar float64Val float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#fmtTests",
              "documentation": {
                "identifier": "fmtTests",
                "newPage": false,
                "searchKey": "fmt_test.fmtTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var fmtTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fmtTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#formatterFlagTests",
              "documentation": {
                "identifier": "formatterFlagTests",
                "newPage": false,
                "searchKey": "fmt_test.formatterFlagTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var formatterFlagTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar formatterFlagTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#i",
              "documentation": {
                "identifier": "i",
                "newPage": false,
                "searchKey": "fmt_test.i",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var i"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar i, j, k int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#iarray",
              "documentation": {
                "identifier": "iarray",
                "newPage": false,
                "searchKey": "fmt_test.iarray",
                "tags": [
                  "variable",
                  "array",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var iarray"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar iarray = [4]interface{}{1, \"hello\", 2.5, nil}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#int16Val",
              "documentation": {
                "identifier": "int16Val",
                "newPage": false,
                "searchKey": "fmt_test.int16Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var int16Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar int16Val int16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#int32Val",
              "documentation": {
                "identifier": "int32Val",
                "newPage": false,
                "searchKey": "fmt_test.int32Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var int32Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar int32Val int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#int64Val",
              "documentation": {
                "identifier": "int64Val",
                "newPage": false,
                "searchKey": "fmt_test.int64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var int64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar int64Val int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#int8Val",
              "documentation": {
                "identifier": "int8Val",
                "newPage": false,
                "searchKey": "fmt_test.int8Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var int8Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar int8Val int8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#intStringVal",
              "documentation": {
                "identifier": "intStringVal",
                "newPage": false,
                "searchKey": "fmt_test.intStringVal",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var intStringVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar intStringVal IntString\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#intVal",
              "documentation": {
                "identifier": "intVal",
                "newPage": false,
                "searchKey": "fmt_test.intVal",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var intVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar intVal int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#intVar",
              "documentation": {
                "identifier": "intVar",
                "newPage": false,
                "searchKey": "fmt_test.intVar",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var intVar"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar intVar = 0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#islice",
              "documentation": {
                "identifier": "islice",
                "newPage": false,
                "searchKey": "fmt_test.islice",
                "tags": [
                  "variable",
                  "array",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var islice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar islice = iarray[:]\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#j",
              "documentation": {
                "identifier": "j",
                "newPage": false,
                "searchKey": "fmt_test.j",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var j"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar i, j, k int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#k",
              "documentation": {
                "identifier": "k",
                "newPage": false,
                "searchKey": "fmt_test.k",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var k"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar i, j, k int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#mallocBuf",
              "documentation": {
                "identifier": "mallocBuf",
                "newPage": false,
                "searchKey": "fmt_test.mallocBuf",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mallocBuf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mallocBuf bytes.Buffer\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#mallocPointer",
              "documentation": {
                "identifier": "mallocPointer",
                "newPage": false,
                "searchKey": "fmt_test.mallocPointer",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mallocPointer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mallocPointer *int // A pointer so we know the interface value won't allocate.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#mallocTest",
              "documentation": {
                "identifier": "mallocTest",
                "newPage": false,
                "searchKey": "fmt_test.mallocTest",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var mallocTest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mallocTest = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#multiTests",
              "documentation": {
                "identifier": "multiTests",
                "newPage": false,
                "searchKey": "fmt_test.multiTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var multiTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar multiTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#negInf",
              "documentation": {
                "identifier": "negInf",
                "newPage": false,
                "searchKey": "fmt_test.negInf",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var negInf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar negInf = math.Inf(-1)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#overflowTests",
              "documentation": {
                "identifier": "overflowTests",
                "newPage": false,
                "searchKey": "fmt_test.overflowTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var overflowTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar overflowTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#pValue",
              "documentation": {
                "identifier": "pValue",
                "newPage": false,
                "searchKey": "fmt_test.pValue",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pValue P\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#panictests",
              "documentation": {
                "identifier": "panictests",
                "newPage": false,
                "searchKey": "fmt_test.panictests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var panictests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar panictests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#posInf",
              "documentation": {
                "identifier": "posInf",
                "newPage": false,
                "searchKey": "fmt_test.posInf",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var posInf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar posInf = math.Inf(1)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#r1",
              "documentation": {
                "identifier": "r1",
                "newPage": false,
                "searchKey": "fmt_test.r1",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var r1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar r1, r2, r3 rune\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#r2",
              "documentation": {
                "identifier": "r2",
                "newPage": false,
                "searchKey": "fmt_test.r2",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var r2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar r1, r2, r3 rune\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#r3",
              "documentation": {
                "identifier": "r3",
                "newPage": false,
                "searchKey": "fmt_test.r3",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var r3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar r1, r2, r3 rune\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#readers",
              "documentation": {
                "identifier": "readers",
                "newPage": false,
                "searchKey": "fmt_test.readers",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var readers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar readers = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#recurCount",
              "documentation": {
                "identifier": "recurCount",
                "newPage": false,
                "searchKey": "fmt_test.recurCount",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var recurCount"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar recurCount = 0\n```\n\nrecurCount tests that erroneous String routine doesn't cause fatal recursion. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedBoolVal",
              "documentation": {
                "identifier": "renamedBoolVal",
                "newPage": false,
                "searchKey": "fmt_test.renamedBoolVal",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedBoolVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedBoolVal renamedBool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedBytesVal",
              "documentation": {
                "identifier": "renamedBytesVal",
                "newPage": false,
                "searchKey": "fmt_test.renamedBytesVal",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedBytesVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedBytesVal renamedBytes\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedComplex128Val",
              "documentation": {
                "identifier": "renamedComplex128Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedComplex128Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedComplex128Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedComplex128Val renamedComplex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedComplex64Val",
              "documentation": {
                "identifier": "renamedComplex64Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedComplex64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedComplex64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedComplex64Val renamedComplex64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedFloat32Val",
              "documentation": {
                "identifier": "renamedFloat32Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedFloat32Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedFloat32Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedFloat32Val renamedFloat32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedFloat64Val",
              "documentation": {
                "identifier": "renamedFloat64Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedFloat64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedFloat64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedFloat64Val renamedFloat64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt16Val",
              "documentation": {
                "identifier": "renamedInt16Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt16Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedInt16Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedInt16Val renamedInt16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt32Val",
              "documentation": {
                "identifier": "renamedInt32Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt32Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedInt32Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedInt32Val renamedInt32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt64Val",
              "documentation": {
                "identifier": "renamedInt64Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedInt64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedInt64Val renamedInt64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt8Val",
              "documentation": {
                "identifier": "renamedInt8Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt8Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedInt8Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedInt8Val renamedInt8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedIntVal",
              "documentation": {
                "identifier": "renamedIntVal",
                "newPage": false,
                "searchKey": "fmt_test.renamedIntVal",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedIntVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedIntVal renamedInt\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedStringVal",
              "documentation": {
                "identifier": "renamedStringVal",
                "newPage": false,
                "searchKey": "fmt_test.renamedStringVal",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedStringVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedStringVal renamedString\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint16Val",
              "documentation": {
                "identifier": "renamedUint16Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint16Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedUint16Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedUint16Val renamedUint16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint32Val",
              "documentation": {
                "identifier": "renamedUint32Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint32Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedUint32Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedUint32Val renamedUint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint64Val",
              "documentation": {
                "identifier": "renamedUint64Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedUint64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedUint64Val renamedUint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint8Val",
              "documentation": {
                "identifier": "renamedUint8Val",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint8Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedUint8Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedUint8Val renamedUint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUintVal",
              "documentation": {
                "identifier": "renamedUintVal",
                "newPage": false,
                "searchKey": "fmt_test.renamedUintVal",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedUintVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedUintVal renamedUint\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUintptrVal",
              "documentation": {
                "identifier": "renamedUintptrVal",
                "newPage": false,
                "searchKey": "fmt_test.renamedUintptrVal",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var renamedUintptrVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar renamedUintptrVal renamedUintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#reorderTests",
              "documentation": {
                "identifier": "reorderTests",
                "newPage": false,
                "searchKey": "fmt_test.reorderTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var reorderTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar reorderTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#runeVal",
              "documentation": {
                "identifier": "runeVal",
                "newPage": false,
                "searchKey": "fmt_test.runeVal",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var runeVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar runeVal rune\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#s",
              "documentation": {
                "identifier": "s",
                "newPage": false,
                "searchKey": "fmt_test.s",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var s"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s, t string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#scanTests",
              "documentation": {
                "identifier": "scanTests",
                "newPage": false,
                "searchKey": "fmt_test.scanTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#scanfTests",
              "documentation": {
                "identifier": "scanfTests",
                "newPage": false,
                "searchKey": "fmt_test.scanfTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var scanfTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scanfTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#slice",
              "documentation": {
                "identifier": "slice",
                "newPage": false,
                "searchKey": "fmt_test.slice",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var slice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar slice = array[:]\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#startests",
              "documentation": {
                "identifier": "startests",
                "newPage": false,
                "searchKey": "fmt_test.startests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var startests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar startests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#stringVal",
              "documentation": {
                "identifier": "stringVal",
                "newPage": false,
                "searchKey": "fmt_test.stringVal",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var stringVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stringVal string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#t",
              "documentation": {
                "identifier": "t",
                "newPage": false,
                "searchKey": "fmt_test.t",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var t"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar s, t string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#truth",
              "documentation": {
                "identifier": "truth",
                "newPage": false,
                "searchKey": "fmt_test.truth",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var truth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar truth bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#uint16Val",
              "documentation": {
                "identifier": "uint16Val",
                "newPage": false,
                "searchKey": "fmt_test.uint16Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uint16Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uint16Val uint16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#uint32Val",
              "documentation": {
                "identifier": "uint32Val",
                "newPage": false,
                "searchKey": "fmt_test.uint32Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uint32Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uint32Val uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#uint64Val",
              "documentation": {
                "identifier": "uint64Val",
                "newPage": false,
                "searchKey": "fmt_test.uint64Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uint64Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uint64Val uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#uint8Val",
              "documentation": {
                "identifier": "uint8Val",
                "newPage": false,
                "searchKey": "fmt_test.uint8Val",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uint8Val"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uint8Val uint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#uintVal",
              "documentation": {
                "identifier": "uintVal",
                "newPage": false,
                "searchKey": "fmt_test.uintVal",
                "tags": [
                  "variable",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var uintVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar uintVal uint\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#x",
              "documentation": {
                "identifier": "x",
                "newPage": false,
                "searchKey": "fmt_test.x",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var x"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x, y Xs\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#xVal",
              "documentation": {
                "identifier": "xVal",
                "newPage": false,
                "searchKey": "fmt_test.xVal",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var xVal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar xVal Xs\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#y",
              "documentation": {
                "identifier": "y",
                "newPage": false,
                "searchKey": "fmt_test.y",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var y"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar x, y Xs\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#z",
              "documentation": {
                "identifier": "z",
                "newPage": false,
                "searchKey": "fmt_test.z",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var z"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar z IntString\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/fmt_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/fmt_test#A",
              "documentation": {
                "identifier": "A",
                "newPage": false,
                "searchKey": "fmt_test.A",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type A struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype A struct {\n\ti int\n\tj uint\n\ts string\n\tx []int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Address",
              "documentation": {
                "identifier": "Address",
                "newPage": false,
                "searchKey": "fmt_test.Address",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Address struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Address struct {\n\tCity    string\n\tState   string\n\tCountry string\n}\n```\n\nAddress has a City, State and a Country. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Animal",
              "documentation": {
                "identifier": "Animal",
                "newPage": false,
                "searchKey": "fmt_test.Animal",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Animal struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Animal struct {\n\tName string\n\tAge  uint\n}\n```\n\nAnimal has a Name and an Age to represent an animal. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#Animal.String",
                    "documentation": {
                      "identifier": "Animal.String",
                      "newPage": false,
                      "searchKey": "fmt_test.Animal.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a Animal) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a Animal) String() string\n```\n\nString makes Animal satisfy the Stringer interface. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#B",
              "documentation": {
                "identifier": "B",
                "newPage": false,
                "searchKey": "fmt_test.B",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type B struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype B struct {\n\tI I\n\tj int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#C",
              "documentation": {
                "identifier": "C",
                "newPage": false,
                "searchKey": "fmt_test.C",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type C struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype C struct {\n\ti int\n\tB\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#F",
              "documentation": {
                "identifier": "F",
                "newPage": false,
                "searchKey": "fmt_test.F",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type F int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype F int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#F.Format",
                    "documentation": {
                      "identifier": "F.Format",
                      "newPage": false,
                      "searchKey": "fmt_test.F.Format",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f F) Format(s State, c rune)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f F) Format(s State, c rune)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#G",
              "documentation": {
                "identifier": "G",
                "newPage": false,
                "searchKey": "fmt_test.G",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type G int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype G int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#G.GoString",
                    "documentation": {
                      "identifier": "G.GoString",
                      "newPage": false,
                      "searchKey": "fmt_test.G.GoString",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (g G) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (g G) GoString() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#I",
              "documentation": {
                "identifier": "I",
                "newPage": false,
                "searchKey": "fmt_test.I",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type I int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype I int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#I.String",
                    "documentation": {
                      "identifier": "I.String",
                      "newPage": false,
                      "searchKey": "fmt_test.I.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i I) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i I) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#IntString",
              "documentation": {
                "identifier": "IntString",
                "newPage": false,
                "searchKey": "fmt_test.IntString",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IntString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IntString struct {\n\ti int\n\ts string\n}\n```\n\nIntString accepts an integer followed immediately by a string. It tests the embedding of a scan within a scan. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#IntString.Scan",
                    "documentation": {
                      "identifier": "IntString.Scan",
                      "newPage": false,
                      "searchKey": "fmt_test.IntString.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *IntString) Scan(state ScanState, verb rune) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *IntString) Scan(state ScanState, verb rune) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#P",
              "documentation": {
                "identifier": "P",
                "newPage": false,
                "searchKey": "fmt_test.P",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type P int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype P int\n```\n\nP is a type with a String method with pointer receiver for testing %p. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#P.String",
                    "documentation": {
                      "identifier": "P.String",
                      "newPage": false,
                      "searchKey": "fmt_test.P.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *P) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *P) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#PanicF",
              "documentation": {
                "identifier": "PanicF",
                "newPage": false,
                "searchKey": "fmt_test.PanicF",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PanicF struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PanicF struct {\n\tmessage interface{}\n}\n```\n\nPanicF is a type that panics in Format. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#PanicF.Format",
                    "documentation": {
                      "identifier": "PanicF.Format",
                      "newPage": false,
                      "searchKey": "fmt_test.PanicF.Format",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p PanicF) Format(f State, c rune)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p PanicF) Format(f State, c rune)\n```\n\nValue receiver. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#PanicGo",
              "documentation": {
                "identifier": "PanicGo",
                "newPage": false,
                "searchKey": "fmt_test.PanicGo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PanicGo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PanicGo struct {\n\tmessage interface{}\n}\n```\n\nPanicGo is a type that panics in GoString. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#PanicGo.GoString",
                    "documentation": {
                      "identifier": "PanicGo.GoString",
                      "newPage": false,
                      "searchKey": "fmt_test.PanicGo.GoString",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p PanicGo) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p PanicGo) GoString() string\n```\n\nValue receiver. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#PanicS",
              "documentation": {
                "identifier": "PanicS",
                "newPage": false,
                "searchKey": "fmt_test.PanicS",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PanicS struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PanicS struct {\n\tmessage interface{}\n}\n```\n\nPanicS is a type that panics in String. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#PanicS.String",
                    "documentation": {
                      "identifier": "PanicS.String",
                      "newPage": false,
                      "searchKey": "fmt_test.PanicS.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p PanicS) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p PanicS) String() string\n```\n\nValue receiver. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Person",
              "documentation": {
                "identifier": "Person",
                "newPage": false,
                "searchKey": "fmt_test.Person",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Person struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Person struct {\n\tName string\n\tAge  uint\n\tAddr *Address\n}\n```\n\nPerson has a Name, Age and Address. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#Person.GoString",
                    "documentation": {
                      "identifier": "Person.GoString",
                      "newPage": false,
                      "searchKey": "fmt_test.Person.GoString",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p Person) GoString() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p Person) GoString() string\n```\n\nGoString makes Person satisfy the GoStringer interface. The return value is valid Go code that can be used to reproduce the Person struct. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Recur",
              "documentation": {
                "identifier": "Recur",
                "newPage": false,
                "searchKey": "fmt_test.Recur",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Recur struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Recur struct {\n\ti      int\n\tfailed *bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#Recur.String",
                    "documentation": {
                      "identifier": "Recur.String",
                      "newPage": false,
                      "searchKey": "fmt_test.Recur.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Recur) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Recur) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#RecursiveInt",
              "documentation": {
                "identifier": "RecursiveInt",
                "newPage": false,
                "searchKey": "fmt_test.RecursiveInt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RecursiveInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RecursiveInt struct {\n\ti    int\n\tnext *RecursiveInt\n}\n```\n\nRecursiveInt accepts a string matching %d.%d.%d.... and parses it into a linked list. It allows us to benchmark recursive descent style scanners. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#RecursiveInt.Scan",
                    "documentation": {
                      "identifier": "RecursiveInt.Scan",
                      "newPage": false,
                      "searchKey": "fmt_test.RecursiveInt.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RecursiveInt) Scan(state ScanState, verb rune) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RecursiveInt) Scan(state ScanState, verb rune) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#S",
              "documentation": {
                "identifier": "S",
                "newPage": false,
                "searchKey": "fmt_test.S",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type S struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S struct {\n\tF F // a struct field that Formats\n\tG G // a struct field that GoStrings\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#SE",
              "documentation": {
                "identifier": "SE",
                "newPage": false,
                "searchKey": "fmt_test.SE",
                "tags": [
                  "array",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SE []interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SE []interface{} // slice of empty; notational compactness.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#SI",
              "documentation": {
                "identifier": "SI",
                "newPage": false,
                "searchKey": "fmt_test.SI",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SI struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SI struct {\n\tI interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ScanTest",
              "documentation": {
                "identifier": "ScanTest",
                "newPage": false,
                "searchKey": "fmt_test.ScanTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ScanTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ScanTest struct {\n\ttext string\n\tin   interface{}\n\tout  interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ScanfMultiTest",
              "documentation": {
                "identifier": "ScanfMultiTest",
                "newPage": false,
                "searchKey": "fmt_test.ScanfMultiTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ScanfMultiTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ScanfMultiTest struct {\n\tformat string\n\ttext   string\n\tin     []interface{}\n\tout    []interface{}\n\terr    string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ScanfTest",
              "documentation": {
                "identifier": "ScanfTest",
                "newPage": false,
                "searchKey": "fmt_test.ScanfTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ScanfTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ScanfTest struct {\n\tformat string\n\ttext   string\n\tin     interface{}\n\tout    interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TB",
              "documentation": {
                "identifier": "TB",
                "newPage": false,
                "searchKey": "fmt_test.TB",
                "tags": [
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TB bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TB bool\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TB.String",
                    "documentation": {
                      "identifier": "TB.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TB.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TB) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TB) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TF",
              "documentation": {
                "identifier": "TF",
                "newPage": false,
                "searchKey": "fmt_test.TF",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TF float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TF float64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TF.String",
                    "documentation": {
                      "identifier": "TF.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TF.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TF) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TF) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TF32",
              "documentation": {
                "identifier": "TF32",
                "newPage": false,
                "searchKey": "fmt_test.TF32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TF32 float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TF32 float32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TF32.String",
                    "documentation": {
                      "identifier": "TF32.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TF32.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TF32) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TF32) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TF64",
              "documentation": {
                "identifier": "TF64",
                "newPage": false,
                "searchKey": "fmt_test.TF64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TF64 float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TF64 float64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TF64.String",
                    "documentation": {
                      "identifier": "TF64.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TF64.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TF64) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TF64) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TI",
              "documentation": {
                "identifier": "TI",
                "newPage": false,
                "searchKey": "fmt_test.TI",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TI int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TI int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TI.String",
                    "documentation": {
                      "identifier": "TI.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TI.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TI) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TI) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TI16",
              "documentation": {
                "identifier": "TI16",
                "newPage": false,
                "searchKey": "fmt_test.TI16",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TI16 int16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TI16 int16\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TI16.String",
                    "documentation": {
                      "identifier": "TI16.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TI16.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TI16) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TI16) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TI32",
              "documentation": {
                "identifier": "TI32",
                "newPage": false,
                "searchKey": "fmt_test.TI32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TI32 int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TI32 int32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TI32.String",
                    "documentation": {
                      "identifier": "TI32.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TI32.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TI32) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TI32) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TI64",
              "documentation": {
                "identifier": "TI64",
                "newPage": false,
                "searchKey": "fmt_test.TI64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TI64 int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TI64 int64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TI64.String",
                    "documentation": {
                      "identifier": "TI64.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TI64.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TI64) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TI64) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TI8",
              "documentation": {
                "identifier": "TI8",
                "newPage": false,
                "searchKey": "fmt_test.TI8",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TI8 int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TI8 int8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TI8.String",
                    "documentation": {
                      "identifier": "TI8.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TI8.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TI8) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TI8) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TS",
              "documentation": {
                "identifier": "TS",
                "newPage": false,
                "searchKey": "fmt_test.TS",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TS string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TS string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TS.String",
                    "documentation": {
                      "identifier": "TS.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TS.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TS) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TS) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TU",
              "documentation": {
                "identifier": "TU",
                "newPage": false,
                "searchKey": "fmt_test.TU",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TU uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TU uint\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TU.String",
                    "documentation": {
                      "identifier": "TU.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TU.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TU) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TU) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TU16",
              "documentation": {
                "identifier": "TU16",
                "newPage": false,
                "searchKey": "fmt_test.TU16",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TU16 uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TU16 uint16\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TU16.String",
                    "documentation": {
                      "identifier": "TU16.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TU16.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TU16) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TU16) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TU32",
              "documentation": {
                "identifier": "TU32",
                "newPage": false,
                "searchKey": "fmt_test.TU32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TU32 uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TU32 uint32\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TU32.String",
                    "documentation": {
                      "identifier": "TU32.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TU32.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TU32) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TU32) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TU64",
              "documentation": {
                "identifier": "TU64",
                "newPage": false,
                "searchKey": "fmt_test.TU64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TU64 uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TU64 uint64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TU64.String",
                    "documentation": {
                      "identifier": "TU64.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TU64.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TU64) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TU64) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TU8",
              "documentation": {
                "identifier": "TU8",
                "newPage": false,
                "searchKey": "fmt_test.TU8",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TU8 uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TU8 uint8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TU8.String",
                    "documentation": {
                      "identifier": "TU8.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TU8.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TU8) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TU8) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TUI",
              "documentation": {
                "identifier": "TUI",
                "newPage": false,
                "searchKey": "fmt_test.TUI",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TUI uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TUI uintptr\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TUI.String",
                    "documentation": {
                      "identifier": "TUI.String",
                      "newPage": false,
                      "searchKey": "fmt_test.TUI.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v TUI) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v TUI) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TwoLines",
              "documentation": {
                "identifier": "TwoLines",
                "newPage": false,
                "searchKey": "fmt_test.TwoLines",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TwoLines string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TwoLines string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#TwoLines.Scan",
                    "documentation": {
                      "identifier": "TwoLines.Scan",
                      "newPage": false,
                      "searchKey": "fmt_test.TwoLines.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *TwoLines) Scan(state ScanState, verb rune) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *TwoLines) Scan(state ScanState, verb rune) error\n```\n\nScan attempts to read two lines into the object. Scanln should prevent this because it stops at newline; Scan and Scanf should be fine. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Xs",
              "documentation": {
                "identifier": "Xs",
                "newPage": false,
                "searchKey": "fmt_test.Xs",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Xs string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Xs string\n```\n\nXs accepts any non-empty run of the verb character \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#Xs.Scan",
                    "documentation": {
                      "identifier": "Xs.Scan",
                      "newPage": false,
                      "searchKey": "fmt_test.Xs.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x *Xs) Scan(state ScanState, verb rune) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x *Xs) Scan(state ScanState, verb rune) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#byteFormatter",
              "documentation": {
                "identifier": "byteFormatter",
                "newPage": false,
                "searchKey": "fmt_test.byteFormatter",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteFormatter byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteFormatter byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#byteFormatter.Format",
                    "documentation": {
                      "identifier": "byteFormatter.Format",
                      "newPage": false,
                      "searchKey": "fmt_test.byteFormatter.Format",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (byteFormatter) Format(f State, _ rune)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (byteFormatter) Format(f State, _ rune)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#byteStringer",
              "documentation": {
                "identifier": "byteStringer",
                "newPage": false,
                "searchKey": "fmt_test.byteStringer",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteStringer byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteStringer byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#byteStringer.String",
                    "documentation": {
                      "identifier": "byteStringer.String",
                      "newPage": false,
                      "searchKey": "fmt_test.byteStringer.String",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (byteStringer) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (byteStringer) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#eofCounter",
              "documentation": {
                "identifier": "eofCounter",
                "newPage": false,
                "searchKey": "fmt_test.eofCounter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type eofCounter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eofCounter struct {\n\treader   *strings.Reader\n\teofCount int\n}\n```\n\neofCounter is a special Reader that counts reads at end of file. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#eofCounter.Read",
                    "documentation": {
                      "identifier": "eofCounter.Read",
                      "newPage": false,
                      "searchKey": "fmt_test.eofCounter.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ec *eofCounter) Read(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ec *eofCounter) Read(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#errString",
              "documentation": {
                "identifier": "errString",
                "newPage": false,
                "searchKey": "fmt_test.errString",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type errString string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errString string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#errString.Error",
                    "documentation": {
                      "identifier": "errString.Error",
                      "newPage": false,
                      "searchKey": "fmt_test.errString.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e errString) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e errString) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#flagPrinter",
              "documentation": {
                "identifier": "flagPrinter",
                "newPage": false,
                "searchKey": "fmt_test.flagPrinter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type flagPrinter struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype flagPrinter struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#flagPrinter.Format",
                    "documentation": {
                      "identifier": "flagPrinter.Format",
                      "newPage": false,
                      "searchKey": "fmt_test.flagPrinter.Format",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (flagPrinter) Format(f State, c rune)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (flagPrinter) Format(f State, c rune)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#hexBytes",
              "documentation": {
                "identifier": "hexBytes",
                "newPage": false,
                "searchKey": "fmt_test.hexBytes",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type hexBytes [2]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype hexBytes [2]byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#hexBytes.Scan",
                    "documentation": {
                      "identifier": "hexBytes.Scan",
                      "newPage": false,
                      "searchKey": "fmt_test.hexBytes.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *hexBytes) Scan(ss ScanState, verb rune) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *hexBytes) Scan(ss ScanState, verb rune) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedBool",
              "documentation": {
                "identifier": "renamedBool",
                "newPage": false,
                "searchKey": "fmt_test.renamedBool",
                "tags": [
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedBool bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedBool bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedBytes",
              "documentation": {
                "identifier": "renamedBytes",
                "newPage": false,
                "searchKey": "fmt_test.renamedBytes",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedBytes []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedBytes []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedComplex128",
              "documentation": {
                "identifier": "renamedComplex128",
                "newPage": false,
                "searchKey": "fmt_test.renamedComplex128",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedComplex128 complex128"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedComplex128 complex128\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedComplex64",
              "documentation": {
                "identifier": "renamedComplex64",
                "newPage": false,
                "searchKey": "fmt_test.renamedComplex64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedComplex64 complex64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedComplex64 complex64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedFloat32",
              "documentation": {
                "identifier": "renamedFloat32",
                "newPage": false,
                "searchKey": "fmt_test.renamedFloat32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedFloat32 float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedFloat32 float32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedFloat64",
              "documentation": {
                "identifier": "renamedFloat64",
                "newPage": false,
                "searchKey": "fmt_test.renamedFloat64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedFloat64 float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedFloat64 float64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt",
              "documentation": {
                "identifier": "renamedInt",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedInt int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedInt int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt16",
              "documentation": {
                "identifier": "renamedInt16",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt16",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedInt16 int16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedInt16 int16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt32",
              "documentation": {
                "identifier": "renamedInt32",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedInt32 int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedInt32 int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt64",
              "documentation": {
                "identifier": "renamedInt64",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedInt64 int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedInt64 int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedInt8",
              "documentation": {
                "identifier": "renamedInt8",
                "newPage": false,
                "searchKey": "fmt_test.renamedInt8",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedInt8 int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedInt8 int8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedString",
              "documentation": {
                "identifier": "renamedString",
                "newPage": false,
                "searchKey": "fmt_test.renamedString",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedString string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedString string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint",
              "documentation": {
                "identifier": "renamedUint",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedUint uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedUint uint\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint16",
              "documentation": {
                "identifier": "renamedUint16",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint16",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedUint16 uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedUint16 uint16\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint32",
              "documentation": {
                "identifier": "renamedUint32",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint32",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedUint32 uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedUint32 uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint64",
              "documentation": {
                "identifier": "renamedUint64",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint64",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedUint64 uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedUint64 uint64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUint8",
              "documentation": {
                "identifier": "renamedUint8",
                "newPage": false,
                "searchKey": "fmt_test.renamedUint8",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedUint8 uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedUint8 uint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#renamedUintptr",
              "documentation": {
                "identifier": "renamedUintptr",
                "newPage": false,
                "searchKey": "fmt_test.renamedUintptr",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedUintptr uintptr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedUintptr uintptr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#runeScanner",
              "documentation": {
                "identifier": "runeScanner",
                "newPage": false,
                "searchKey": "fmt_test.runeScanner",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type runeScanner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype runeScanner struct {\n\trune rune\n\tsize int\n}\n```\n\nruneScanner implements the Scanner interface for TestScanStateCount. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#runeScanner.Scan",
                    "documentation": {
                      "identifier": "runeScanner.Scan",
                      "newPage": false,
                      "searchKey": "fmt_test.runeScanner.Scan",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rs *runeScanner) Scan(state ScanState, verb rune) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rs *runeScanner) Scan(state ScanState, verb rune) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#writeStringFormatter",
              "documentation": {
                "identifier": "writeStringFormatter",
                "newPage": false,
                "searchKey": "fmt_test.writeStringFormatter",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type writeStringFormatter string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype writeStringFormatter string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/fmt_test#writeStringFormatter.Format",
                    "documentation": {
                      "identifier": "writeStringFormatter.Format",
                      "newPage": false,
                      "searchKey": "fmt_test.writeStringFormatter.Format",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sf writeStringFormatter) Format(f State, c rune)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sf writeStringFormatter) Format(f State, c rune)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/fmt_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package",
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkFprintInt",
              "documentation": {
                "identifier": "BenchmarkFprintInt",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkFprintInt",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFprintInt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFprintInt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkFprintIntNoAlloc",
              "documentation": {
                "identifier": "BenchmarkFprintIntNoAlloc",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkFprintIntNoAlloc",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFprintIntNoAlloc(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFprintIntNoAlloc(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkFprintfBytes",
              "documentation": {
                "identifier": "BenchmarkFprintfBytes",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkFprintfBytes",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFprintfBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFprintfBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkManyArgs",
              "documentation": {
                "identifier": "BenchmarkManyArgs",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkManyArgs",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkManyArgs(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkManyArgs(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkScanInts",
              "documentation": {
                "identifier": "BenchmarkScanInts",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkScanInts",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkScanInts(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkScanInts(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkScanRecursiveInt",
              "documentation": {
                "identifier": "BenchmarkScanRecursiveInt",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkScanRecursiveInt",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkScanRecursiveInt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkScanRecursiveInt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkScanRecursiveIntReaderWrapper",
              "documentation": {
                "identifier": "BenchmarkScanRecursiveIntReaderWrapper",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkScanRecursiveIntReaderWrapper",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkScanRecursiveIntReaderWrapper(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkScanRecursiveIntReaderWrapper(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfBoolean",
              "documentation": {
                "identifier": "BenchmarkSprintfBoolean",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfBoolean",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfBoolean(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfBoolean(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfBytes",
              "documentation": {
                "identifier": "BenchmarkSprintfBytes",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfBytes",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfComplex",
              "documentation": {
                "identifier": "BenchmarkSprintfComplex",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfComplex",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfComplex(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfComplex(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfEmpty",
              "documentation": {
                "identifier": "BenchmarkSprintfEmpty",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfEmpty",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfEmpty(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfEmpty(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfFloat",
              "documentation": {
                "identifier": "BenchmarkSprintfFloat",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfFloat",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfFloat(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfFloat(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfHexBytes",
              "documentation": {
                "identifier": "BenchmarkSprintfHexBytes",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfHexBytes",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfHexBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfHexBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfHexString",
              "documentation": {
                "identifier": "BenchmarkSprintfHexString",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfHexString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfHexString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfHexString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfInt",
              "documentation": {
                "identifier": "BenchmarkSprintfInt",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfInt",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfInt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfInt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfIntInt",
              "documentation": {
                "identifier": "BenchmarkSprintfIntInt",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfIntInt",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfIntInt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfIntInt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfPadding",
              "documentation": {
                "identifier": "BenchmarkSprintfPadding",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfPadding",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfPadding(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfPadding(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfPrefixedInt",
              "documentation": {
                "identifier": "BenchmarkSprintfPrefixedInt",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfPrefixedInt",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfPrefixedInt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfPrefixedInt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfQuoteString",
              "documentation": {
                "identifier": "BenchmarkSprintfQuoteString",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfQuoteString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfQuoteString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfQuoteString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfSlowParsingPath",
              "documentation": {
                "identifier": "BenchmarkSprintfSlowParsingPath",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfSlowParsingPath",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfSlowParsingPath(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfSlowParsingPath(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfString",
              "documentation": {
                "identifier": "BenchmarkSprintfString",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfStringer",
              "documentation": {
                "identifier": "BenchmarkSprintfStringer",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfStringer",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfStringer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfStringer(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfStructure",
              "documentation": {
                "identifier": "BenchmarkSprintfStructure",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfStructure",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfStructure(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfStructure(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfTruncateBytes",
              "documentation": {
                "identifier": "BenchmarkSprintfTruncateBytes",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfTruncateBytes",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfTruncateBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfTruncateBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#BenchmarkSprintfTruncateString",
              "documentation": {
                "identifier": "BenchmarkSprintfTruncateString",
                "newPage": false,
                "searchKey": "fmt_test.BenchmarkSprintfTruncateString",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSprintfTruncateString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSprintfTruncateString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleErrorf",
              "documentation": {
                "identifier": "ExampleErrorf",
                "newPage": false,
                "searchKey": "fmt_test.ExampleErrorf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleErrorf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleErrorf()\n```\n\nThe Errorf function lets us use formatting features to create descriptive error messages. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleFprint",
              "documentation": {
                "identifier": "ExampleFprint",
                "newPage": false,
                "searchKey": "fmt_test.ExampleFprint",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFprint()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFprint()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleFprintf",
              "documentation": {
                "identifier": "ExampleFprintf",
                "newPage": false,
                "searchKey": "fmt_test.ExampleFprintf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFprintf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFprintf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleFprintln",
              "documentation": {
                "identifier": "ExampleFprintln",
                "newPage": false,
                "searchKey": "fmt_test.ExampleFprintln",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFprintln()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFprintln()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleFscanf",
              "documentation": {
                "identifier": "ExampleFscanf",
                "newPage": false,
                "searchKey": "fmt_test.ExampleFscanf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFscanf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFscanf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleFscanln",
              "documentation": {
                "identifier": "ExampleFscanln",
                "newPage": false,
                "searchKey": "fmt_test.ExampleFscanln",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFscanln()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFscanln()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleGoStringer",
              "documentation": {
                "identifier": "ExampleGoStringer",
                "newPage": false,
                "searchKey": "fmt_test.ExampleGoStringer",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleGoStringer()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleGoStringer()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExamplePrint",
              "documentation": {
                "identifier": "ExamplePrint",
                "newPage": false,
                "searchKey": "fmt_test.ExamplePrint",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExamplePrint()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExamplePrint()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExamplePrintf",
              "documentation": {
                "identifier": "ExamplePrintf",
                "newPage": false,
                "searchKey": "fmt_test.ExamplePrintf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExamplePrintf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExamplePrintf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExamplePrintln",
              "documentation": {
                "identifier": "ExamplePrintln",
                "newPage": false,
                "searchKey": "fmt_test.ExamplePrintln",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExamplePrintln()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExamplePrintln()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleSprint",
              "documentation": {
                "identifier": "ExampleSprint",
                "newPage": false,
                "searchKey": "fmt_test.ExampleSprint",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSprint()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSprint()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleSprintf",
              "documentation": {
                "identifier": "ExampleSprintf",
                "newPage": false,
                "searchKey": "fmt_test.ExampleSprintf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSprintf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSprintf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleSprintln",
              "documentation": {
                "identifier": "ExampleSprintln",
                "newPage": false,
                "searchKey": "fmt_test.ExampleSprintln",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSprintln()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSprintln()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleSscanf",
              "documentation": {
                "identifier": "ExampleSscanf",
                "newPage": false,
                "searchKey": "fmt_test.ExampleSscanf",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSscanf()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSscanf()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#ExampleStringer",
              "documentation": {
                "identifier": "ExampleStringer",
                "newPage": false,
                "searchKey": "fmt_test.ExampleStringer",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleStringer()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleStringer()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Example_formats",
              "documentation": {
                "identifier": "Example_formats",
                "newPage": false,
                "searchKey": "fmt_test.Example_formats",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example_formats()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example_formats()\n```\n\nThese examples demonstrate the basics of printing using a format string. Printf, Sprintf, and Fprintf all take a format string that specifies how to format the subsequent arguments. For example, %d (we call that a 'verb') says to print the corresponding argument, which must be an integer (or something containing an integer, such as a slice of ints) in decimal. The verb %v ('v' for 'value') always formats the argument in its default form, just how Print or Println would show it. The special verb %T ('T' for 'Type') prints the type of the argument rather than its value. The examples are not exhaustive; see the package comment for all the details. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#Example_printers",
              "documentation": {
                "identifier": "Example_printers",
                "newPage": false,
                "searchKey": "fmt_test.Example_printers",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Example_printers()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Example_printers()\n```\n\nPrint, Println, and Printf lay out their arguments differently. In this example we can compare their behaviors. Println always adds blanks between the items it prints, while Print adds blanks only between non-string arguments and Printf does exactly what it is told. Sprint, Sprintln, Sprintf, Fprint, Fprintln, and Fprintf behave the same as their corresponding Print, Println, and Printf functions shown here. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestBadVerbRecursion",
              "documentation": {
                "identifier": "TestBadVerbRecursion",
                "newPage": false,
                "searchKey": "fmt_test.TestBadVerbRecursion",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadVerbRecursion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadVerbRecursion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestBlank",
              "documentation": {
                "identifier": "TestBlank",
                "newPage": false,
                "searchKey": "fmt_test.TestBlank",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlank(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlank(t *testing.T)\n```\n\nTestBlank checks that Sprint (and hence Print, Fprint) puts spaces in the right places, that is, between arg pairs in which neither is a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestBlankln",
              "documentation": {
                "identifier": "TestBlankln",
                "newPage": false,
                "searchKey": "fmt_test.TestBlankln",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlankln(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlankln(t *testing.T)\n```\n\nTestBlankln checks that Sprintln (and hence Println, Fprintln) puts spaces in the right places, that is, between all arg pairs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestComplexFormatting",
              "documentation": {
                "identifier": "TestComplexFormatting",
                "newPage": false,
                "searchKey": "fmt_test.TestComplexFormatting",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestComplexFormatting(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestComplexFormatting(t *testing.T)\n```\n\nTestComplexFormatting checks that a complex always formats to the same thing as if done by hand with two singleton prints. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestCountMallocs",
              "documentation": {
                "identifier": "TestCountMallocs",
                "newPage": false,
                "searchKey": "fmt_test.TestCountMallocs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCountMallocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCountMallocs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestEOF",
              "documentation": {
                "identifier": "TestEOF",
                "newPage": false,
                "searchKey": "fmt_test.TestEOF",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEOF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEOF(t *testing.T)\n```\n\nTestEOF verifies that when we scan, we see at most EOF once per call to a Scan function, and then only when it's really an EOF. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestEOFAllTypes",
              "documentation": {
                "identifier": "TestEOFAllTypes",
                "newPage": false,
                "searchKey": "fmt_test.TestEOFAllTypes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEOFAllTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEOFAllTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestEOFAtEndOfInput",
              "documentation": {
                "identifier": "TestEOFAtEndOfInput",
                "newPage": false,
                "searchKey": "fmt_test.TestEOFAtEndOfInput",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEOFAtEndOfInput(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEOFAtEndOfInput(t *testing.T)\n```\n\nTestEOFAtEndOfInput verifies that we see an EOF error if we run out of input. This was a buglet: we used to get \"expected integer\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestEmptyMap",
              "documentation": {
                "identifier": "TestEmptyMap",
                "newPage": false,
                "searchKey": "fmt_test.TestEmptyMap",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestErrorf",
              "documentation": {
                "identifier": "TestErrorf",
                "newPage": false,
                "searchKey": "fmt_test.TestErrorf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestFlagParser",
              "documentation": {
                "identifier": "TestFlagParser",
                "newPage": false,
                "searchKey": "fmt_test.TestFlagParser",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFlagParser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFlagParser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestFmtInterface",
              "documentation": {
                "identifier": "TestFmtInterface",
                "newPage": false,
                "searchKey": "fmt_test.TestFmtInterface",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFmtInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFmtInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestFormatterFlags",
              "documentation": {
                "identifier": "TestFormatterFlags",
                "newPage": false,
                "searchKey": "fmt_test.TestFormatterFlags",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFormatterFlags(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFormatterFlags(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestFormatterPrintln",
              "documentation": {
                "identifier": "TestFormatterPrintln",
                "newPage": false,
                "searchKey": "fmt_test.TestFormatterPrintln",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFormatterPrintln(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFormatterPrintln(t *testing.T)\n```\n\nTestFormatterPrintln checks Formatter with Sprint, Sprintln, Sprintf. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestHexByte",
              "documentation": {
                "identifier": "TestHexByte",
                "newPage": false,
                "searchKey": "fmt_test.TestHexByte",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHexByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHexByte(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestHexBytes",
              "documentation": {
                "identifier": "TestHexBytes",
                "newPage": false,
                "searchKey": "fmt_test.TestHexBytes",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHexBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHexBytes(t *testing.T)\n```\n\nIssue 9124. %x on bytes couldn't handle non-space bytes terminating the scan. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestInf",
              "documentation": {
                "identifier": "TestInf",
                "newPage": false,
                "searchKey": "fmt_test.TestInf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestIsSpace",
              "documentation": {
                "identifier": "TestIsSpace",
                "newPage": false,
                "searchKey": "fmt_test.TestIsSpace",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsSpace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsSpace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestLineByLineFscanf",
              "documentation": {
                "identifier": "TestLineByLineFscanf",
                "newPage": false,
                "searchKey": "fmt_test.TestLineByLineFscanf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineByLineFscanf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineByLineFscanf(t *testing.T)\n```\n\nTestLineByLineFscanf tests that Fscanf does not read past newline. Issue 3481. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestMapPrinter",
              "documentation": {
                "identifier": "TestMapPrinter",
                "newPage": false,
                "searchKey": "fmt_test.TestMapPrinter",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMapPrinter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMapPrinter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestMultiLine",
              "documentation": {
                "identifier": "TestMultiLine",
                "newPage": false,
                "searchKey": "fmt_test.TestMultiLine",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultiLine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultiLine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestNaN",
              "documentation": {
                "identifier": "TestNaN",
                "newPage": false,
                "searchKey": "fmt_test.TestNaN",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNaN(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNaN(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestNilDoesNotBecomeTyped",
              "documentation": {
                "identifier": "TestNilDoesNotBecomeTyped",
                "newPage": false,
                "searchKey": "fmt_test.TestNilDoesNotBecomeTyped",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilDoesNotBecomeTyped(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilDoesNotBecomeTyped(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestPanics",
              "documentation": {
                "identifier": "TestPanics",
                "newPage": false,
                "searchKey": "fmt_test.TestPanics",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPanics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPanics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestParsenum",
              "documentation": {
                "identifier": "TestParsenum",
                "newPage": false,
                "searchKey": "fmt_test.TestParsenum",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParsenum(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParsenum(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestReorder",
              "documentation": {
                "identifier": "TestReorder",
                "newPage": false,
                "searchKey": "fmt_test.TestReorder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReorder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReorder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScan",
              "documentation": {
                "identifier": "TestScan",
                "newPage": false,
                "searchKey": "fmt_test.TestScan",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScan(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScan(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanEmpty",
              "documentation": {
                "identifier": "TestScanEmpty",
                "newPage": false,
                "searchKey": "fmt_test.TestScanEmpty",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanEmpty(t *testing.T)\n```\n\nEmpty strings are not valid input when scanning a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanInts",
              "documentation": {
                "identifier": "TestScanInts",
                "newPage": false,
                "searchKey": "fmt_test.TestScanInts",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanInts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanInts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanMultiple",
              "documentation": {
                "identifier": "TestScanMultiple",
                "newPage": false,
                "searchKey": "fmt_test.TestScanMultiple",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanMultiple(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanMultiple(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanNewlinesAreSpaces",
              "documentation": {
                "identifier": "TestScanNewlinesAreSpaces",
                "newPage": false,
                "searchKey": "fmt_test.TestScanNewlinesAreSpaces",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanNewlinesAreSpaces(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanNewlinesAreSpaces(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanNotPointer",
              "documentation": {
                "identifier": "TestScanNotPointer",
                "newPage": false,
                "searchKey": "fmt_test.TestScanNotPointer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanNotPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanNotPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanOverflow",
              "documentation": {
                "identifier": "TestScanOverflow",
                "newPage": false,
                "searchKey": "fmt_test.TestScanOverflow",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanStateCount",
              "documentation": {
                "identifier": "TestScanStateCount",
                "newPage": false,
                "searchKey": "fmt_test.TestScanStateCount",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanStateCount(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanStateCount(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanf",
              "documentation": {
                "identifier": "TestScanf",
                "newPage": false,
                "searchKey": "fmt_test.TestScanf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanfMulti",
              "documentation": {
                "identifier": "TestScanfMulti",
                "newPage": false,
                "searchKey": "fmt_test.TestScanfMulti",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanfMulti(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanfMulti(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanfNewlineMatchFormat",
              "documentation": {
                "identifier": "TestScanfNewlineMatchFormat",
                "newPage": false,
                "searchKey": "fmt_test.TestScanfNewlineMatchFormat",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanfNewlineMatchFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanfNewlineMatchFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanln",
              "documentation": {
                "identifier": "TestScanln",
                "newPage": false,
                "searchKey": "fmt_test.TestScanln",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanln(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanln(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanlnNewlinesTerminate",
              "documentation": {
                "identifier": "TestScanlnNewlinesTerminate",
                "newPage": false,
                "searchKey": "fmt_test.TestScanlnNewlinesTerminate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanlnNewlinesTerminate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanlnNewlinesTerminate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanlnNoNewline",
              "documentation": {
                "identifier": "TestScanlnNoNewline",
                "newPage": false,
                "searchKey": "fmt_test.TestScanlnNoNewline",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanlnNoNewline(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanlnNoNewline(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestScanlnWithMiddleNewline",
              "documentation": {
                "identifier": "TestScanlnWithMiddleNewline",
                "newPage": false,
                "searchKey": "fmt_test.TestScanlnWithMiddleNewline",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestScanlnWithMiddleNewline(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestScanlnWithMiddleNewline(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestSlicePrinter",
              "documentation": {
                "identifier": "TestSlicePrinter",
                "newPage": false,
                "searchKey": "fmt_test.TestSlicePrinter",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSlicePrinter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSlicePrinter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestSprintf",
              "documentation": {
                "identifier": "TestSprintf",
                "newPage": false,
                "searchKey": "fmt_test.TestSprintf",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSprintf(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSprintf(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestStringer",
              "documentation": {
                "identifier": "TestStringer",
                "newPage": false,
                "searchKey": "fmt_test.TestStringer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestStructPrinter",
              "documentation": {
                "identifier": "TestStructPrinter",
                "newPage": false,
                "searchKey": "fmt_test.TestStructPrinter",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructPrinter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructPrinter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestUnreadRuneWithBufio",
              "documentation": {
                "identifier": "TestUnreadRuneWithBufio",
                "newPage": false,
                "searchKey": "fmt_test.TestUnreadRuneWithBufio",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnreadRuneWithBufio(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnreadRuneWithBufio(t *testing.T)\n```\n\nTestUnreadRuneWithBufio verifies that, at least when using bufio, successive calls to Fscan do not lose runes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#TestWidthAndPrecision",
              "documentation": {
                "identifier": "TestWidthAndPrecision",
                "newPage": false,
                "searchKey": "fmt_test.TestWidthAndPrecision",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWidthAndPrecision(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWidthAndPrecision(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#args",
              "documentation": {
                "identifier": "args",
                "newPage": false,
                "searchKey": "fmt_test.args",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func args(a ...interface{}) []interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc args(a ...interface{}) []interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#check",
              "documentation": {
                "identifier": "check",
                "newPage": false,
                "searchKey": "fmt_test.check",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func check(t *testing.T, got, want string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc check(t *testing.T, got, want string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#hideFromVet",
              "documentation": {
                "identifier": "hideFromVet",
                "newPage": false,
                "searchKey": "fmt_test.hideFromVet",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hideFromVet(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hideFromVet(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#makeInts",
              "documentation": {
                "identifier": "makeInts",
                "newPage": false,
                "searchKey": "fmt_test.makeInts",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeInts(n int) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeInts(n int) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#presentInMap",
              "documentation": {
                "identifier": "presentInMap",
                "newPage": false,
                "searchKey": "fmt_test.presentInMap",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func presentInMap(s string, a []string, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc presentInMap(s string, a []string, t *testing.T)\n```\n\npresentInMap checks map printing using substrings so we don't depend on the print order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#scanInts",
              "documentation": {
                "identifier": "scanInts",
                "newPage": false,
                "searchKey": "fmt_test.scanInts",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanInts(r *RecursiveInt, b *bytes.Buffer) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanInts(r *RecursiveInt, b *bytes.Buffer) (err error)\n```\n\nscanInts performs the same scanning task as RecursiveInt.Scan but without recurring through scanner, so we can compare performance more directly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#testScan",
              "documentation": {
                "identifier": "testScan",
                "newPage": false,
                "searchKey": "fmt_test.testScan",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testScan(t *testing.T, f func(string) io.Reader, scan func(r io.Reader, a ...interface{}) (int, error))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testScan(t *testing.T, f func(string) io.Reader, scan func(r io.Reader, a ...interface{}) (int, error))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#testScanInts",
              "documentation": {
                "identifier": "testScanInts",
                "newPage": false,
                "searchKey": "fmt_test.testScanInts",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testScanInts(t *testing.T, scan func(*RecursiveInt, *bytes.Buffer) error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testScanInts(t *testing.T, scan func(*RecursiveInt, *bytes.Buffer) error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#testScanfMulti",
              "documentation": {
                "identifier": "testScanfMulti",
                "newPage": false,
                "searchKey": "fmt_test.testScanfMulti",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testScanfMulti(t *testing.T, f func(string) io.Reader)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testScanfMulti(t *testing.T, f func(string) io.Reader)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#verifyInf",
              "documentation": {
                "identifier": "verifyInf",
                "newPage": false,
                "searchKey": "fmt_test.verifyInf",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyInf(str string, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyInf(str string, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#verifyNaN",
              "documentation": {
                "identifier": "verifyNaN",
                "newPage": false,
                "searchKey": "fmt_test.verifyNaN",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func verifyNaN(str string, t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc verifyNaN(str string, t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/fmt_test#zeroFill",
              "documentation": {
                "identifier": "zeroFill",
                "newPage": false,
                "searchKey": "fmt_test.zeroFill",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func zeroFill(prefix string, width int, suffix string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc zeroFill(prefix string, width int, suffix string) string\n```\n\nzeroFill generates zero-filled strings of the specified width. The length of the suffix (but not the prefix) is compensated for in the width calculation. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
