{
  "pathID": "/bytes_test",
  "documentation": {
    "identifier": "bytes_test",
    "newPage": true,
    "searchKey": "bytes_test",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package bytes_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/bytes_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/bytes_test#N",
              "documentation": {
                "identifier": "N",
                "newPage": false,
                "searchKey": "bytes_test.N",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const N"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst N = 10000 // make this bigger for a larger (and slower) test\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#space",
              "documentation": {
                "identifier": "space",
                "newPage": false,
                "searchKey": "bytes_test.space",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const space"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst space = \"\\t\\v\\r\\f\\n\\u0085\\u00a0\\u2000\\u3000\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/bytes_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/bytes_test#ContainsAnyTests",
              "documentation": {
                "identifier": "ContainsAnyTests",
                "newPage": false,
                "searchKey": "bytes_test.ContainsAnyTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ContainsAnyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ContainsAnyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ContainsRuneTests",
              "documentation": {
                "identifier": "ContainsRuneTests",
                "newPage": false,
                "searchKey": "bytes_test.ContainsRuneTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ContainsRuneTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ContainsRuneTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#EqualFoldTests",
              "documentation": {
                "identifier": "EqualFoldTests",
                "newPage": false,
                "searchKey": "bytes_test.EqualFoldTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var EqualFoldTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar EqualFoldTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#RepeatTests",
              "documentation": {
                "identifier": "RepeatTests",
                "newPage": false,
                "searchKey": "bytes_test.RepeatTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var RepeatTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar RepeatTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ReplaceTests",
              "documentation": {
                "identifier": "ReplaceTests",
                "newPage": false,
                "searchKey": "bytes_test.ReplaceTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ReplaceTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ReplaceTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#RunesTests",
              "documentation": {
                "identifier": "RunesTests",
                "newPage": false,
                "searchKey": "bytes_test.RunesTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var RunesTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar RunesTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TitleTests",
              "documentation": {
                "identifier": "TitleTests",
                "newPage": false,
                "searchKey": "bytes_test.TitleTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var TitleTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar TitleTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ToTitleTests",
              "documentation": {
                "identifier": "ToTitleTests",
                "newPage": false,
                "searchKey": "bytes_test.ToTitleTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ToTitleTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ToTitleTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#UnreadRuneErrorTests",
              "documentation": {
                "identifier": "UnreadRuneErrorTests",
                "newPage": false,
                "searchKey": "bytes_test.UnreadRuneErrorTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var UnreadRuneErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar UnreadRuneErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#abcd",
              "documentation": {
                "identifier": "abcd",
                "newPage": false,
                "searchKey": "bytes_test.abcd",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var abcd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar abcd = \"abcd\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#benchInputHard",
              "documentation": {
                "identifier": "benchInputHard",
                "newPage": false,
                "searchKey": "bytes_test.benchInputHard",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var benchInputHard"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar benchInputHard = makeBenchInputHard()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#bmbuf",
              "documentation": {
                "identifier": "bmbuf",
                "newPage": false,
                "searchKey": "bytes_test.bmbuf",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bmbuf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bmbuf []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#bytesdata",
              "documentation": {
                "identifier": "bytesdata",
                "newPage": false,
                "searchKey": "bytes_test.bytesdata",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bytesdata"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bytesdata = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#commas",
              "documentation": {
                "identifier": "commas",
                "newPage": false,
                "searchKey": "bytes_test.commas",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var commas"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar commas = \"1,2,3,4\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#compareTests",
              "documentation": {
                "identifier": "compareTests",
                "newPage": false,
                "searchKey": "bytes_test.compareTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var compareTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar compareTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#containsTests",
              "documentation": {
                "identifier": "containsTests",
                "newPage": false,
                "searchKey": "bytes_test.containsTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var containsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar containsTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#dots",
              "documentation": {
                "identifier": "dots",
                "newPage": false,
                "searchKey": "bytes_test.dots",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dots"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dots = \"1....2....3....4\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#faces",
              "documentation": {
                "identifier": "faces",
                "newPage": false,
                "searchKey": "bytes_test.faces",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var faces"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar faces = \"☺☻☹\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#fieldstests",
              "documentation": {
                "identifier": "fieldstests",
                "newPage": false,
                "searchKey": "bytes_test.fieldstests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var fieldstests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fieldstests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#indexAnyTests",
              "documentation": {
                "identifier": "indexAnyTests",
                "newPage": false,
                "searchKey": "bytes_test.indexAnyTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexAnyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexAnyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#indexFuncTests",
              "documentation": {
                "identifier": "indexFuncTests",
                "newPage": false,
                "searchKey": "bytes_test.indexFuncTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexFuncTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexFuncTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#indexSizes",
              "documentation": {
                "identifier": "indexSizes",
                "newPage": false,
                "searchKey": "bytes_test.indexSizes",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexSizes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexSizes = []int{10, 32, 4 << 10, 4 << 20, 64 << 20}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#indexTests",
              "documentation": {
                "identifier": "indexTests",
                "newPage": false,
                "searchKey": "bytes_test.indexTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var indexTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indexTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#isDigit",
              "documentation": {
                "identifier": "isDigit",
                "newPage": false,
                "searchKey": "bytes_test.isDigit",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var isDigit"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isDigit = predicate{unicode.IsDigit, \"IsDigit\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#isRaceBuilder",
              "documentation": {
                "identifier": "isRaceBuilder",
                "newPage": false,
                "searchKey": "bytes_test.isRaceBuilder",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var isRaceBuilder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isRaceBuilder = strings.HasSuffix(testenv.Builder(), \"-race\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#isSpace",
              "documentation": {
                "identifier": "isSpace",
                "newPage": false,
                "searchKey": "bytes_test.isSpace",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var isSpace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isSpace = predicate{unicode.IsSpace, \"IsSpace\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#isUpper",
              "documentation": {
                "identifier": "isUpper",
                "newPage": false,
                "searchKey": "bytes_test.isUpper",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var isUpper"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isUpper = predicate{unicode.IsUpper, \"IsUpper\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#isValidRune",
              "documentation": {
                "identifier": "isValidRune",
                "newPage": false,
                "searchKey": "bytes_test.isValidRune",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var isValidRune"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isValidRune = predicate{\n\tfunc(r rune) bool {\n\t\treturn r != utf8.RuneError\n\t},\n\t\"IsValidRune\",\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#lastIndexAnyTests",
              "documentation": {
                "identifier": "lastIndexAnyTests",
                "newPage": false,
                "searchKey": "bytes_test.lastIndexAnyTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lastIndexAnyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lastIndexAnyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#lastIndexTests",
              "documentation": {
                "identifier": "lastIndexTests",
                "newPage": false,
                "searchKey": "bytes_test.lastIndexTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lastIndexTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lastIndexTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#lowerTests",
              "documentation": {
                "identifier": "lowerTests",
                "newPage": false,
                "searchKey": "bytes_test.lowerTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lowerTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lowerTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#makeFieldsInput",
              "documentation": {
                "identifier": "makeFieldsInput",
                "newPage": false,
                "searchKey": "bytes_test.makeFieldsInput",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var makeFieldsInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar makeFieldsInput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#makeFieldsInputASCII",
              "documentation": {
                "identifier": "makeFieldsInputASCII",
                "newPage": false,
                "searchKey": "bytes_test.makeFieldsInputASCII",
                "tags": [
                  "variable",
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var makeFieldsInputASCII"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar makeFieldsInputASCII = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#readBytesTests",
              "documentation": {
                "identifier": "readBytesTests",
                "newPage": false,
                "searchKey": "bytes_test.readBytesTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var readBytesTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar readBytesTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#splitaftertests",
              "documentation": {
                "identifier": "splitaftertests",
                "newPage": false,
                "searchKey": "bytes_test.splitaftertests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var splitaftertests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar splitaftertests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#splittests",
              "documentation": {
                "identifier": "splittests",
                "newPage": false,
                "searchKey": "bytes_test.splittests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var splittests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar splittests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#testBytes",
              "documentation": {
                "identifier": "testBytes",
                "newPage": false,
                "searchKey": "bytes_test.testBytes",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testBytes []byte // test data; same as testString but as a slice.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#testString",
              "documentation": {
                "identifier": "testString",
                "newPage": false,
                "searchKey": "bytes_test.testString",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testString string // test data for write tests\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#toValidUTF8Tests",
              "documentation": {
                "identifier": "toValidUTF8Tests",
                "newPage": false,
                "searchKey": "bytes_test.toValidUTF8Tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var toValidUTF8Tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar toValidUTF8Tests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#trimFuncTests",
              "documentation": {
                "identifier": "trimFuncTests",
                "newPage": false,
                "searchKey": "bytes_test.trimFuncTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var trimFuncTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar trimFuncTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#trimSpaceTests",
              "documentation": {
                "identifier": "trimSpaceTests",
                "newPage": false,
                "searchKey": "bytes_test.trimSpaceTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var trimSpaceTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar trimSpaceTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#trimTests",
              "documentation": {
                "identifier": "trimTests",
                "newPage": false,
                "searchKey": "bytes_test.trimTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var trimTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar trimTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#upperTests",
              "documentation": {
                "identifier": "upperTests",
                "newPage": false,
                "searchKey": "bytes_test.upperTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var upperTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar upperTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/bytes_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/bytes_test#BinOpTest",
              "documentation": {
                "identifier": "BinOpTest",
                "newPage": false,
                "searchKey": "bytes_test.BinOpTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BinOpTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BinOpTest struct {\n\ta string\n\tb string\n\ti int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#FieldsTest",
              "documentation": {
                "identifier": "FieldsTest",
                "newPage": false,
                "searchKey": "bytes_test.FieldsTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FieldsTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FieldsTest struct {\n\ts string\n\ta []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#IndexFuncTest",
              "documentation": {
                "identifier": "IndexFuncTest",
                "newPage": false,
                "searchKey": "bytes_test.IndexFuncTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndexFuncTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndexFuncTest struct {\n\tin          string\n\tf           predicate\n\tfirst, last int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#RepeatTest",
              "documentation": {
                "identifier": "RepeatTest",
                "newPage": false,
                "searchKey": "bytes_test.RepeatTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RepeatTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RepeatTest struct {\n\tin, out string\n\tcount   int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ReplaceTest",
              "documentation": {
                "identifier": "ReplaceTest",
                "newPage": false,
                "searchKey": "bytes_test.ReplaceTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReplaceTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReplaceTest struct {\n\tin       string\n\told, new string\n\tn        int\n\tout      string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#RunesTest",
              "documentation": {
                "identifier": "RunesTest",
                "newPage": false,
                "searchKey": "bytes_test.RunesTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RunesTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RunesTest struct {\n\tin    string\n\tout   []rune\n\tlossy bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#SplitTest",
              "documentation": {
                "identifier": "SplitTest",
                "newPage": false,
                "searchKey": "bytes_test.SplitTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SplitTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SplitTest struct {\n\ts   string\n\tsep string\n\tn   int\n\ta   []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#StringTest",
              "documentation": {
                "identifier": "StringTest",
                "newPage": false,
                "searchKey": "bytes_test.StringTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StringTest struct {\n\tin  string\n\tout []byte\n}\n```\n\nTest case for any function which accepts and returns a byte slice. For ease of creation, we write the input byte slice as a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TitleTest",
              "documentation": {
                "identifier": "TitleTest",
                "newPage": false,
                "searchKey": "bytes_test.TitleTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TitleTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TitleTest struct {\n\tin, out string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TrimFuncTest",
              "documentation": {
                "identifier": "TrimFuncTest",
                "newPage": false,
                "searchKey": "bytes_test.TrimFuncTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TrimFuncTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TrimFuncTest struct {\n\tf        predicate\n\tin       string\n\ttrimOut  []byte\n\tleftOut  []byte\n\trightOut []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TrimTest",
              "documentation": {
                "identifier": "TrimTest",
                "newPage": false,
                "searchKey": "bytes_test.TrimTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TrimTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TrimTest struct {\n\tf            string\n\tin, arg, out string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#negativeReader",
              "documentation": {
                "identifier": "negativeReader",
                "newPage": false,
                "searchKey": "bytes_test.negativeReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type negativeReader struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype negativeReader struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/bytes_test#negativeReader.Read",
                    "documentation": {
                      "identifier": "negativeReader.Read",
                      "newPage": false,
                      "searchKey": "bytes_test.negativeReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *negativeReader) Read([]byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *negativeReader) Read([]byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#panicReader",
              "documentation": {
                "identifier": "panicReader",
                "newPage": false,
                "searchKey": "bytes_test.panicReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type panicReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype panicReader struct{ panic bool }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/bytes_test#panicReader.Read",
                    "documentation": {
                      "identifier": "panicReader.Read",
                      "newPage": false,
                      "searchKey": "bytes_test.panicReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r panicReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r panicReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#predicate",
              "documentation": {
                "identifier": "predicate",
                "newPage": false,
                "searchKey": "bytes_test.predicate",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type predicate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype predicate struct {\n\tf    func(r rune) bool\n\tname string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/bytes_test#not",
                    "documentation": {
                      "identifier": "not",
                      "newPage": false,
                      "searchKey": "bytes_test.not",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func not(p predicate) predicate"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc not(p predicate) predicate\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/bytes_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkBufferFullSmallReads",
              "documentation": {
                "identifier": "BenchmarkBufferFullSmallReads",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkBufferFullSmallReads",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkBufferFullSmallReads(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkBufferFullSmallReads(b *testing.B)\n```\n\nCheck that we don't compact too often. From Issue 5154. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkBufferNotEmptyWriteRead",
              "documentation": {
                "identifier": "BenchmarkBufferNotEmptyWriteRead",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkBufferNotEmptyWriteRead",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkBufferNotEmptyWriteRead(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkBufferNotEmptyWriteRead(b *testing.B)\n```\n\nFrom Issue 5154. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkBytesCompare",
              "documentation": {
                "identifier": "BenchmarkBytesCompare",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkBytesCompare",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkBytesCompare(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkBytesCompare(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesBig",
              "documentation": {
                "identifier": "BenchmarkCompareBytesBig",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesBig",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesBig(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesBig(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesBigIdentical",
              "documentation": {
                "identifier": "BenchmarkCompareBytesBigIdentical",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesBigIdentical",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesBigIdentical(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesBigIdentical(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesBigUnaligned",
              "documentation": {
                "identifier": "BenchmarkCompareBytesBigUnaligned",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesBigUnaligned",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesBigUnaligned(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesBigUnaligned(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesDifferentLength",
              "documentation": {
                "identifier": "BenchmarkCompareBytesDifferentLength",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesDifferentLength",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesDifferentLength(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesDifferentLength(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesEmpty",
              "documentation": {
                "identifier": "BenchmarkCompareBytesEmpty",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesEmpty",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesEmpty(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesEmpty(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesEqual",
              "documentation": {
                "identifier": "BenchmarkCompareBytesEqual",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesEqual",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesEqual(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesEqual(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesIdentical",
              "documentation": {
                "identifier": "BenchmarkCompareBytesIdentical",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesIdentical",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesIdentical(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesIdentical(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesSameLength",
              "documentation": {
                "identifier": "BenchmarkCompareBytesSameLength",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesSameLength",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesSameLength(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesSameLength(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCompareBytesToNil",
              "documentation": {
                "identifier": "BenchmarkCompareBytesToNil",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCompareBytesToNil",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCompareBytesToNil(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCompareBytesToNil(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCount",
              "documentation": {
                "identifier": "BenchmarkCount",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCount",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCount(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCount(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCountEasy",
              "documentation": {
                "identifier": "BenchmarkCountEasy",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCountEasy",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCountEasy(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCountEasy(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCountHard1",
              "documentation": {
                "identifier": "BenchmarkCountHard1",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCountHard1",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCountHard1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCountHard1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCountHard2",
              "documentation": {
                "identifier": "BenchmarkCountHard2",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCountHard2",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCountHard2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCountHard2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCountHard3",
              "documentation": {
                "identifier": "BenchmarkCountHard3",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCountHard3",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCountHard3(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCountHard3(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkCountSingle",
              "documentation": {
                "identifier": "BenchmarkCountSingle",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkCountSingle",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCountSingle(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCountSingle(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkEqual",
              "documentation": {
                "identifier": "BenchmarkEqual",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkEqual",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEqual(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEqual(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkFields",
              "documentation": {
                "identifier": "BenchmarkFields",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkFields",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFields(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFields(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkFieldsFunc",
              "documentation": {
                "identifier": "BenchmarkFieldsFunc",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkFieldsFunc",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFieldsFunc(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFieldsFunc(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndex",
              "documentation": {
                "identifier": "BenchmarkIndex",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndex",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndex(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndex(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexAnyASCII",
              "documentation": {
                "identifier": "BenchmarkIndexAnyASCII",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexAnyASCII",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexAnyASCII(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexAnyASCII(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexAnyUTF8",
              "documentation": {
                "identifier": "BenchmarkIndexAnyUTF8",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexAnyUTF8",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexAnyUTF8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexAnyUTF8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexByte",
              "documentation": {
                "identifier": "BenchmarkIndexByte",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexByte",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexByte(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexByte(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexBytePortable",
              "documentation": {
                "identifier": "BenchmarkIndexBytePortable",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexBytePortable",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexBytePortable(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexBytePortable(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexEasy",
              "documentation": {
                "identifier": "BenchmarkIndexEasy",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexEasy",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexEasy(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexEasy(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexHard1",
              "documentation": {
                "identifier": "BenchmarkIndexHard1",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexHard1",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexHard1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexHard1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexHard2",
              "documentation": {
                "identifier": "BenchmarkIndexHard2",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexHard2",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexHard2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexHard2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexHard3",
              "documentation": {
                "identifier": "BenchmarkIndexHard3",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexHard3",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexHard3(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexHard3(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexHard4",
              "documentation": {
                "identifier": "BenchmarkIndexHard4",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexHard4",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexHard4(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexHard4(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexPeriodic",
              "documentation": {
                "identifier": "BenchmarkIndexPeriodic",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexPeriodic",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexPeriodic(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexPeriodic(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexRune",
              "documentation": {
                "identifier": "BenchmarkIndexRune",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexRune",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexRune(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexRune(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkIndexRuneASCII",
              "documentation": {
                "identifier": "BenchmarkIndexRuneASCII",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkIndexRuneASCII",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIndexRuneASCII(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIndexRuneASCII(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkLastIndexAnyASCII",
              "documentation": {
                "identifier": "BenchmarkLastIndexAnyASCII",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkLastIndexAnyASCII",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLastIndexAnyASCII(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLastIndexAnyASCII(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkLastIndexAnyUTF8",
              "documentation": {
                "identifier": "BenchmarkLastIndexAnyUTF8",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkLastIndexAnyUTF8",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLastIndexAnyUTF8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLastIndexAnyUTF8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkLastIndexHard1",
              "documentation": {
                "identifier": "BenchmarkLastIndexHard1",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkLastIndexHard1",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLastIndexHard1(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLastIndexHard1(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkLastIndexHard2",
              "documentation": {
                "identifier": "BenchmarkLastIndexHard2",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkLastIndexHard2",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLastIndexHard2(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLastIndexHard2(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkLastIndexHard3",
              "documentation": {
                "identifier": "BenchmarkLastIndexHard3",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkLastIndexHard3",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkLastIndexHard3(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkLastIndexHard3(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkReadString",
              "documentation": {
                "identifier": "BenchmarkReadString",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkReadString",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkRepeat",
              "documentation": {
                "identifier": "BenchmarkRepeat",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkRepeat",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkRepeat(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkRepeat(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkSplitEmptySeparator",
              "documentation": {
                "identifier": "BenchmarkSplitEmptySeparator",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkSplitEmptySeparator",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSplitEmptySeparator(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSplitEmptySeparator(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkSplitMultiByteSeparator",
              "documentation": {
                "identifier": "BenchmarkSplitMultiByteSeparator",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkSplitMultiByteSeparator",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSplitMultiByteSeparator(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSplitMultiByteSeparator(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkSplitNMultiByteSeparator",
              "documentation": {
                "identifier": "BenchmarkSplitNMultiByteSeparator",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkSplitNMultiByteSeparator",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSplitNMultiByteSeparator(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSplitNMultiByteSeparator(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkSplitNSingleByteSeparator",
              "documentation": {
                "identifier": "BenchmarkSplitNSingleByteSeparator",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkSplitNSingleByteSeparator",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSplitNSingleByteSeparator(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSplitNSingleByteSeparator(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkSplitSingleByteSeparator",
              "documentation": {
                "identifier": "BenchmarkSplitSingleByteSeparator",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkSplitSingleByteSeparator",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSplitSingleByteSeparator(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSplitSingleByteSeparator(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkToLower",
              "documentation": {
                "identifier": "BenchmarkToLower",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkToLower",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkToLower(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkToLower(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkToUpper",
              "documentation": {
                "identifier": "BenchmarkToUpper",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkToUpper",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkToUpper(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkToUpper(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkToValidUTF8",
              "documentation": {
                "identifier": "BenchmarkToValidUTF8",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkToValidUTF8",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkToValidUTF8(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkToValidUTF8(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkTrimASCII",
              "documentation": {
                "identifier": "BenchmarkTrimASCII",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkTrimASCII",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrimASCII(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrimASCII(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkTrimSpace",
              "documentation": {
                "identifier": "BenchmarkTrimSpace",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkTrimSpace",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTrimSpace(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTrimSpace(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkWriteByte",
              "documentation": {
                "identifier": "BenchmarkWriteByte",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkWriteByte",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWriteByte(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWriteByte(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#BenchmarkWriteRune",
              "documentation": {
                "identifier": "BenchmarkWriteRune",
                "newPage": false,
                "searchKey": "bytes_test.BenchmarkWriteRune",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkWriteRune(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkWriteRune(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleBuffer",
              "documentation": {
                "identifier": "ExampleBuffer",
                "newPage": false,
                "searchKey": "bytes_test.ExampleBuffer",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleBuffer()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleBuffer()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleBuffer_Bytes",
              "documentation": {
                "identifier": "ExampleBuffer_Bytes",
                "newPage": false,
                "searchKey": "bytes_test.ExampleBuffer_Bytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleBuffer_Bytes()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleBuffer_Bytes()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleBuffer_Grow",
              "documentation": {
                "identifier": "ExampleBuffer_Grow",
                "newPage": false,
                "searchKey": "bytes_test.ExampleBuffer_Grow",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleBuffer_Grow()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleBuffer_Grow()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleBuffer_Len",
              "documentation": {
                "identifier": "ExampleBuffer_Len",
                "newPage": false,
                "searchKey": "bytes_test.ExampleBuffer_Len",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleBuffer_Len()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleBuffer_Len()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleBuffer_reader",
              "documentation": {
                "identifier": "ExampleBuffer_reader",
                "newPage": false,
                "searchKey": "bytes_test.ExampleBuffer_reader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleBuffer_reader()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleBuffer_reader()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleCompare",
              "documentation": {
                "identifier": "ExampleCompare",
                "newPage": false,
                "searchKey": "bytes_test.ExampleCompare",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCompare()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCompare()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleCompare_search",
              "documentation": {
                "identifier": "ExampleCompare_search",
                "newPage": false,
                "searchKey": "bytes_test.ExampleCompare_search",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCompare_search()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCompare_search()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleContains",
              "documentation": {
                "identifier": "ExampleContains",
                "newPage": false,
                "searchKey": "bytes_test.ExampleContains",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleContains()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleContains()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleContainsAny",
              "documentation": {
                "identifier": "ExampleContainsAny",
                "newPage": false,
                "searchKey": "bytes_test.ExampleContainsAny",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleContainsAny()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleContainsAny()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleContainsRune",
              "documentation": {
                "identifier": "ExampleContainsRune",
                "newPage": false,
                "searchKey": "bytes_test.ExampleContainsRune",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleContainsRune()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleContainsRune()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleCount",
              "documentation": {
                "identifier": "ExampleCount",
                "newPage": false,
                "searchKey": "bytes_test.ExampleCount",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleCount()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleCount()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleEqual",
              "documentation": {
                "identifier": "ExampleEqual",
                "newPage": false,
                "searchKey": "bytes_test.ExampleEqual",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleEqual()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleEqual()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleEqualFold",
              "documentation": {
                "identifier": "ExampleEqualFold",
                "newPage": false,
                "searchKey": "bytes_test.ExampleEqualFold",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleEqualFold()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleEqualFold()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleFields",
              "documentation": {
                "identifier": "ExampleFields",
                "newPage": false,
                "searchKey": "bytes_test.ExampleFields",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFields()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFields()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleFieldsFunc",
              "documentation": {
                "identifier": "ExampleFieldsFunc",
                "newPage": false,
                "searchKey": "bytes_test.ExampleFieldsFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFieldsFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFieldsFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleHasPrefix",
              "documentation": {
                "identifier": "ExampleHasPrefix",
                "newPage": false,
                "searchKey": "bytes_test.ExampleHasPrefix",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleHasPrefix()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleHasPrefix()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleHasSuffix",
              "documentation": {
                "identifier": "ExampleHasSuffix",
                "newPage": false,
                "searchKey": "bytes_test.ExampleHasSuffix",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleHasSuffix()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleHasSuffix()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleIndex",
              "documentation": {
                "identifier": "ExampleIndex",
                "newPage": false,
                "searchKey": "bytes_test.ExampleIndex",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleIndex()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleIndex()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleIndexAny",
              "documentation": {
                "identifier": "ExampleIndexAny",
                "newPage": false,
                "searchKey": "bytes_test.ExampleIndexAny",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleIndexAny()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleIndexAny()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleIndexByte",
              "documentation": {
                "identifier": "ExampleIndexByte",
                "newPage": false,
                "searchKey": "bytes_test.ExampleIndexByte",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleIndexByte()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleIndexByte()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleIndexFunc",
              "documentation": {
                "identifier": "ExampleIndexFunc",
                "newPage": false,
                "searchKey": "bytes_test.ExampleIndexFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleIndexFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleIndexFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleIndexRune",
              "documentation": {
                "identifier": "ExampleIndexRune",
                "newPage": false,
                "searchKey": "bytes_test.ExampleIndexRune",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleIndexRune()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleIndexRune()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleJoin",
              "documentation": {
                "identifier": "ExampleJoin",
                "newPage": false,
                "searchKey": "bytes_test.ExampleJoin",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleJoin()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleJoin()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleLastIndex",
              "documentation": {
                "identifier": "ExampleLastIndex",
                "newPage": false,
                "searchKey": "bytes_test.ExampleLastIndex",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLastIndex()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLastIndex()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleLastIndexAny",
              "documentation": {
                "identifier": "ExampleLastIndexAny",
                "newPage": false,
                "searchKey": "bytes_test.ExampleLastIndexAny",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLastIndexAny()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLastIndexAny()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleLastIndexByte",
              "documentation": {
                "identifier": "ExampleLastIndexByte",
                "newPage": false,
                "searchKey": "bytes_test.ExampleLastIndexByte",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLastIndexByte()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLastIndexByte()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleLastIndexFunc",
              "documentation": {
                "identifier": "ExampleLastIndexFunc",
                "newPage": false,
                "searchKey": "bytes_test.ExampleLastIndexFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleLastIndexFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleLastIndexFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleMap",
              "documentation": {
                "identifier": "ExampleMap",
                "newPage": false,
                "searchKey": "bytes_test.ExampleMap",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleMap()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleMap()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleReader_Len",
              "documentation": {
                "identifier": "ExampleReader_Len",
                "newPage": false,
                "searchKey": "bytes_test.ExampleReader_Len",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReader_Len()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReader_Len()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleRepeat",
              "documentation": {
                "identifier": "ExampleRepeat",
                "newPage": false,
                "searchKey": "bytes_test.ExampleRepeat",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRepeat()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRepeat()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleReplace",
              "documentation": {
                "identifier": "ExampleReplace",
                "newPage": false,
                "searchKey": "bytes_test.ExampleReplace",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReplace()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReplace()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleReplaceAll",
              "documentation": {
                "identifier": "ExampleReplaceAll",
                "newPage": false,
                "searchKey": "bytes_test.ExampleReplaceAll",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleReplaceAll()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleReplaceAll()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleRunes",
              "documentation": {
                "identifier": "ExampleRunes",
                "newPage": false,
                "searchKey": "bytes_test.ExampleRunes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRunes()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRunes()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleSplit",
              "documentation": {
                "identifier": "ExampleSplit",
                "newPage": false,
                "searchKey": "bytes_test.ExampleSplit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSplit()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSplit()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleSplitAfter",
              "documentation": {
                "identifier": "ExampleSplitAfter",
                "newPage": false,
                "searchKey": "bytes_test.ExampleSplitAfter",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSplitAfter()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSplitAfter()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleSplitAfterN",
              "documentation": {
                "identifier": "ExampleSplitAfterN",
                "newPage": false,
                "searchKey": "bytes_test.ExampleSplitAfterN",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSplitAfterN()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSplitAfterN()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleSplitN",
              "documentation": {
                "identifier": "ExampleSplitN",
                "newPage": false,
                "searchKey": "bytes_test.ExampleSplitN",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleSplitN()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleSplitN()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTitle",
              "documentation": {
                "identifier": "ExampleTitle",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTitle",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTitle()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTitle()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleToLower",
              "documentation": {
                "identifier": "ExampleToLower",
                "newPage": false,
                "searchKey": "bytes_test.ExampleToLower",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleToLower()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleToLower()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleToLowerSpecial",
              "documentation": {
                "identifier": "ExampleToLowerSpecial",
                "newPage": false,
                "searchKey": "bytes_test.ExampleToLowerSpecial",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleToLowerSpecial()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleToLowerSpecial()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleToTitle",
              "documentation": {
                "identifier": "ExampleToTitle",
                "newPage": false,
                "searchKey": "bytes_test.ExampleToTitle",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleToTitle()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleToTitle()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleToTitleSpecial",
              "documentation": {
                "identifier": "ExampleToTitleSpecial",
                "newPage": false,
                "searchKey": "bytes_test.ExampleToTitleSpecial",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleToTitleSpecial()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleToTitleSpecial()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleToUpper",
              "documentation": {
                "identifier": "ExampleToUpper",
                "newPage": false,
                "searchKey": "bytes_test.ExampleToUpper",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleToUpper()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleToUpper()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleToUpperSpecial",
              "documentation": {
                "identifier": "ExampleToUpperSpecial",
                "newPage": false,
                "searchKey": "bytes_test.ExampleToUpperSpecial",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleToUpperSpecial()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleToUpperSpecial()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrim",
              "documentation": {
                "identifier": "ExampleTrim",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrim",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrim()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrim()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimFunc",
              "documentation": {
                "identifier": "ExampleTrimFunc",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimLeft",
              "documentation": {
                "identifier": "ExampleTrimLeft",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimLeft",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimLeft()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimLeft()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimLeftFunc",
              "documentation": {
                "identifier": "ExampleTrimLeftFunc",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimLeftFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimLeftFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimLeftFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimPrefix",
              "documentation": {
                "identifier": "ExampleTrimPrefix",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimPrefix",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimPrefix()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimPrefix()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimRight",
              "documentation": {
                "identifier": "ExampleTrimRight",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimRight",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimRight()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimRight()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimRightFunc",
              "documentation": {
                "identifier": "ExampleTrimRightFunc",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimRightFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimRightFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimRightFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimSpace",
              "documentation": {
                "identifier": "ExampleTrimSpace",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimSpace",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimSpace()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimSpace()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#ExampleTrimSuffix",
              "documentation": {
                "identifier": "ExampleTrimSuffix",
                "newPage": false,
                "searchKey": "bytes_test.ExampleTrimSuffix",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleTrimSuffix()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleTrimSuffix()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestBasicOperations",
              "documentation": {
                "identifier": "TestBasicOperations",
                "newPage": false,
                "searchKey": "bytes_test.TestBasicOperations",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasicOperations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasicOperations(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestBufferGrowNegative",
              "documentation": {
                "identifier": "TestBufferGrowNegative",
                "newPage": false,
                "searchKey": "bytes_test.TestBufferGrowNegative",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBufferGrowNegative(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBufferGrowNegative(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestBufferGrowth",
              "documentation": {
                "identifier": "TestBufferGrowth",
                "newPage": false,
                "searchKey": "bytes_test.TestBufferGrowth",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBufferGrowth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBufferGrowth(t *testing.T)\n```\n\nTests that we occasionally compact. Issue 5154. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestBufferTruncateNegative",
              "documentation": {
                "identifier": "TestBufferTruncateNegative",
                "newPage": false,
                "searchKey": "bytes_test.TestBufferTruncateNegative",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBufferTruncateNegative(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBufferTruncateNegative(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestBufferTruncateOutOfRange",
              "documentation": {
                "identifier": "TestBufferTruncateOutOfRange",
                "newPage": false,
                "searchKey": "bytes_test.TestBufferTruncateOutOfRange",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBufferTruncateOutOfRange(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBufferTruncateOutOfRange(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCapWithPreallocatedSlice",
              "documentation": {
                "identifier": "TestCapWithPreallocatedSlice",
                "newPage": false,
                "searchKey": "bytes_test.TestCapWithPreallocatedSlice",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCapWithPreallocatedSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCapWithPreallocatedSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCapWithSliceAndWrittenData",
              "documentation": {
                "identifier": "TestCapWithSliceAndWrittenData",
                "newPage": false,
                "searchKey": "bytes_test.TestCapWithSliceAndWrittenData",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCapWithSliceAndWrittenData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCapWithSliceAndWrittenData(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCompare",
              "documentation": {
                "identifier": "TestCompare",
                "newPage": false,
                "searchKey": "bytes_test.TestCompare",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompare(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompare(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCompareBytes",
              "documentation": {
                "identifier": "TestCompareBytes",
                "newPage": false,
                "searchKey": "bytes_test.TestCompareBytes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCompareIdenticalSlice",
              "documentation": {
                "identifier": "TestCompareIdenticalSlice",
                "newPage": false,
                "searchKey": "bytes_test.TestCompareIdenticalSlice",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompareIdenticalSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompareIdenticalSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestContains",
              "documentation": {
                "identifier": "TestContains",
                "newPage": false,
                "searchKey": "bytes_test.TestContains",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContains(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContains(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestContainsAny",
              "documentation": {
                "identifier": "TestContainsAny",
                "newPage": false,
                "searchKey": "bytes_test.TestContainsAny",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContainsAny(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContainsAny(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestContainsRune",
              "documentation": {
                "identifier": "TestContainsRune",
                "newPage": false,
                "searchKey": "bytes_test.TestContainsRune",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContainsRune(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContainsRune(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCountByte",
              "documentation": {
                "identifier": "TestCountByte",
                "newPage": false,
                "searchKey": "bytes_test.TestCountByte",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCountByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCountByte(t *testing.T)\n```\n\ntest count of a single byte across page offsets \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestCountByteNoMatch",
              "documentation": {
                "identifier": "TestCountByteNoMatch",
                "newPage": false,
                "searchKey": "bytes_test.TestCountByteNoMatch",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCountByteNoMatch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCountByteNoMatch(t *testing.T)\n```\n\nMake sure we don't count bytes outside our window \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestEmptyReaderConcurrent",
              "documentation": {
                "identifier": "TestEmptyReaderConcurrent",
                "newPage": false,
                "searchKey": "bytes_test.TestEmptyReaderConcurrent",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyReaderConcurrent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyReaderConcurrent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestEndianBaseCompare",
              "documentation": {
                "identifier": "TestEndianBaseCompare",
                "newPage": false,
                "searchKey": "bytes_test.TestEndianBaseCompare",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEndianBaseCompare(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEndianBaseCompare(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestEqual",
              "documentation": {
                "identifier": "TestEqual",
                "newPage": false,
                "searchKey": "bytes_test.TestEqual",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEqual(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestEqualExhaustive",
              "documentation": {
                "identifier": "TestEqualExhaustive",
                "newPage": false,
                "searchKey": "bytes_test.TestEqualExhaustive",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEqualExhaustive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEqualExhaustive(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestEqualFold",
              "documentation": {
                "identifier": "TestEqualFold",
                "newPage": false,
                "searchKey": "bytes_test.TestEqualFold",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEqualFold(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEqualFold(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestFields",
              "documentation": {
                "identifier": "TestFields",
                "newPage": false,
                "searchKey": "bytes_test.TestFields",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestFieldsFunc",
              "documentation": {
                "identifier": "TestFieldsFunc",
                "newPage": false,
                "searchKey": "bytes_test.TestFieldsFunc",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFieldsFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFieldsFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestGrow",
              "documentation": {
                "identifier": "TestGrow",
                "newPage": false,
                "searchKey": "bytes_test.TestGrow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGrow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGrow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestGrowOverflow",
              "documentation": {
                "identifier": "TestGrowOverflow",
                "newPage": false,
                "searchKey": "bytes_test.TestGrowOverflow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGrowOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGrowOverflow(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndex",
              "documentation": {
                "identifier": "TestIndex",
                "newPage": false,
                "searchKey": "bytes_test.TestIndex",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndexAny",
              "documentation": {
                "identifier": "TestIndexAny",
                "newPage": false,
                "searchKey": "bytes_test.TestIndexAny",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexAny(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexAny(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndexByte",
              "documentation": {
                "identifier": "TestIndexByte",
                "newPage": false,
                "searchKey": "bytes_test.TestIndexByte",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexByte(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndexByteBig",
              "documentation": {
                "identifier": "TestIndexByteBig",
                "newPage": false,
                "searchKey": "bytes_test.TestIndexByteBig",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexByteBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexByteBig(t *testing.T)\n```\n\ntest a larger buffer with different sizes and alignments \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndexByteSmall",
              "documentation": {
                "identifier": "TestIndexByteSmall",
                "newPage": false,
                "searchKey": "bytes_test.TestIndexByteSmall",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexByteSmall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexByteSmall(t *testing.T)\n```\n\ntest a small index across all page offsets \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndexFunc",
              "documentation": {
                "identifier": "TestIndexFunc",
                "newPage": false,
                "searchKey": "bytes_test.TestIndexFunc",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestIndexRune",
              "documentation": {
                "identifier": "TestIndexRune",
                "newPage": false,
                "searchKey": "bytes_test.TestIndexRune",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndexRune(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndexRune(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLargeByteReads",
              "documentation": {
                "identifier": "TestLargeByteReads",
                "newPage": false,
                "searchKey": "bytes_test.TestLargeByteReads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeByteReads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeByteReads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLargeByteWrites",
              "documentation": {
                "identifier": "TestLargeByteWrites",
                "newPage": false,
                "searchKey": "bytes_test.TestLargeByteWrites",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeByteWrites(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeByteWrites(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLargeStringReads",
              "documentation": {
                "identifier": "TestLargeStringReads",
                "newPage": false,
                "searchKey": "bytes_test.TestLargeStringReads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeStringReads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeStringReads(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLargeStringWrites",
              "documentation": {
                "identifier": "TestLargeStringWrites",
                "newPage": false,
                "searchKey": "bytes_test.TestLargeStringWrites",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeStringWrites(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeStringWrites(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLastIndex",
              "documentation": {
                "identifier": "TestLastIndex",
                "newPage": false,
                "searchKey": "bytes_test.TestLastIndex",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLastIndex(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLastIndex(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLastIndexAny",
              "documentation": {
                "identifier": "TestLastIndexAny",
                "newPage": false,
                "searchKey": "bytes_test.TestLastIndexAny",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLastIndexAny(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLastIndexAny(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestLastIndexByte",
              "documentation": {
                "identifier": "TestLastIndexByte",
                "newPage": false,
                "searchKey": "bytes_test.TestLastIndexByte",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLastIndexByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLastIndexByte(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestMap",
              "documentation": {
                "identifier": "TestMap",
                "newPage": false,
                "searchKey": "bytes_test.TestMap",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestMixedReadsAndWrites",
              "documentation": {
                "identifier": "TestMixedReadsAndWrites",
                "newPage": false,
                "searchKey": "bytes_test.TestMixedReadsAndWrites",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMixedReadsAndWrites(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMixedReadsAndWrites(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestNewBuffer",
              "documentation": {
                "identifier": "TestNewBuffer",
                "newPage": false,
                "searchKey": "bytes_test.TestNewBuffer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewBuffer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewBuffer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestNewBufferString",
              "documentation": {
                "identifier": "TestNewBufferString",
                "newPage": false,
                "searchKey": "bytes_test.TestNewBufferString",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewBufferString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewBufferString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestNext",
              "documentation": {
                "identifier": "TestNext",
                "newPage": false,
                "searchKey": "bytes_test.TestNext",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestNil",
              "documentation": {
                "identifier": "TestNil",
                "newPage": false,
                "searchKey": "bytes_test.TestNil",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestNotEqual",
              "documentation": {
                "identifier": "TestNotEqual",
                "newPage": false,
                "searchKey": "bytes_test.TestNotEqual",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNotEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNotEqual(t *testing.T)\n```\n\nmake sure Equal returns false for minimally different strings. The data is all zeros except for a single one in one location. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadAfterBigSeek",
              "documentation": {
                "identifier": "TestReadAfterBigSeek",
                "newPage": false,
                "searchKey": "bytes_test.TestReadAfterBigSeek",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadAfterBigSeek(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadAfterBigSeek(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadBytes",
              "documentation": {
                "identifier": "TestReadBytes",
                "newPage": false,
                "searchKey": "bytes_test.TestReadBytes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadEmptyAtEOF",
              "documentation": {
                "identifier": "TestReadEmptyAtEOF",
                "newPage": false,
                "searchKey": "bytes_test.TestReadEmptyAtEOF",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadEmptyAtEOF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadEmptyAtEOF(t *testing.T)\n```\n\nWas a bug: used to give EOF reading empty slice at EOF. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadFrom",
              "documentation": {
                "identifier": "TestReadFrom",
                "newPage": false,
                "searchKey": "bytes_test.TestReadFrom",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFrom(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFrom(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadFromNegativeReader",
              "documentation": {
                "identifier": "TestReadFromNegativeReader",
                "newPage": false,
                "searchKey": "bytes_test.TestReadFromNegativeReader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFromNegativeReader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFromNegativeReader(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadFromPanicReader",
              "documentation": {
                "identifier": "TestReadFromPanicReader",
                "newPage": false,
                "searchKey": "bytes_test.TestReadFromPanicReader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFromPanicReader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFromPanicReader(t *testing.T)\n```\n\nMake sure that an empty Buffer remains empty when it is \"grown\" before a Read that panics \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReadString",
              "documentation": {
                "identifier": "TestReadString",
                "newPage": false,
                "searchKey": "bytes_test.TestReadString",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReader",
              "documentation": {
                "identifier": "TestReader",
                "newPage": false,
                "searchKey": "bytes_test.TestReader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReader(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderAt",
              "documentation": {
                "identifier": "TestReaderAt",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderAt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderAt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderAt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderAtConcurrent",
              "documentation": {
                "identifier": "TestReaderAtConcurrent",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderAtConcurrent",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderAtConcurrent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderAtConcurrent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderCopyNothing",
              "documentation": {
                "identifier": "TestReaderCopyNothing",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderCopyNothing",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderCopyNothing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderCopyNothing(t *testing.T)\n```\n\nverify that copying from an empty reader always has the same results, regardless of the presence of a WriteTo method. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderDoubleUnreadRune",
              "documentation": {
                "identifier": "TestReaderDoubleUnreadRune",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderDoubleUnreadRune",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderDoubleUnreadRune(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderDoubleUnreadRune(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderLen",
              "documentation": {
                "identifier": "TestReaderLen",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderLen",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderLenSize",
              "documentation": {
                "identifier": "TestReaderLenSize",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderLenSize",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderLenSize(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderLenSize(t *testing.T)\n```\n\ntests that Len is affected by reads, but Size is not. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderReset",
              "documentation": {
                "identifier": "TestReaderReset",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderReset",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderReset(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderReset(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderWriteTo",
              "documentation": {
                "identifier": "TestReaderWriteTo",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderWriteTo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderWriteTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderWriteTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReaderZero",
              "documentation": {
                "identifier": "TestReaderZero",
                "newPage": false,
                "searchKey": "bytes_test.TestReaderZero",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReaderZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReaderZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestRepeat",
              "documentation": {
                "identifier": "TestRepeat",
                "newPage": false,
                "searchKey": "bytes_test.TestRepeat",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepeat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepeat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestRepeatCatchesOverflow",
              "documentation": {
                "identifier": "TestRepeatCatchesOverflow",
                "newPage": false,
                "searchKey": "bytes_test.TestRepeatCatchesOverflow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRepeatCatchesOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRepeatCatchesOverflow(t *testing.T)\n```\n\nSee Issue golang.org/issue/16237 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestReplace",
              "documentation": {
                "identifier": "TestReplace",
                "newPage": false,
                "searchKey": "bytes_test.TestReplace",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReplace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReplace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestRuneIO",
              "documentation": {
                "identifier": "TestRuneIO",
                "newPage": false,
                "searchKey": "bytes_test.TestRuneIO",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRuneIO(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRuneIO(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestRunes",
              "documentation": {
                "identifier": "TestRunes",
                "newPage": false,
                "searchKey": "bytes_test.TestRunes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRunes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRunes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestSplit",
              "documentation": {
                "identifier": "TestSplit",
                "newPage": false,
                "searchKey": "bytes_test.TestSplit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSplit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSplit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestSplitAfter",
              "documentation": {
                "identifier": "TestSplitAfter",
                "newPage": false,
                "searchKey": "bytes_test.TestSplitAfter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSplitAfter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSplitAfter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestTitle",
              "documentation": {
                "identifier": "TestTitle",
                "newPage": false,
                "searchKey": "bytes_test.TestTitle",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTitle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTitle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestToLower",
              "documentation": {
                "identifier": "TestToLower",
                "newPage": false,
                "searchKey": "bytes_test.TestToLower",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestToLower(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestToLower(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestToTitle",
              "documentation": {
                "identifier": "TestToTitle",
                "newPage": false,
                "searchKey": "bytes_test.TestToTitle",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestToTitle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestToTitle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestToUpper",
              "documentation": {
                "identifier": "TestToUpper",
                "newPage": false,
                "searchKey": "bytes_test.TestToUpper",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestToUpper(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestToUpper(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestToValidUTF8",
              "documentation": {
                "identifier": "TestToValidUTF8",
                "newPage": false,
                "searchKey": "bytes_test.TestToValidUTF8",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestToValidUTF8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestToValidUTF8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestTrim",
              "documentation": {
                "identifier": "TestTrim",
                "newPage": false,
                "searchKey": "bytes_test.TestTrim",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrim(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrim(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestTrimFunc",
              "documentation": {
                "identifier": "TestTrimFunc",
                "newPage": false,
                "searchKey": "bytes_test.TestTrimFunc",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrimFunc(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrimFunc(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestTrimSpace",
              "documentation": {
                "identifier": "TestTrimSpace",
                "newPage": false,
                "searchKey": "bytes_test.TestTrimSpace",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrimSpace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrimSpace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestUnreadByte",
              "documentation": {
                "identifier": "TestUnreadByte",
                "newPage": false,
                "searchKey": "bytes_test.TestUnreadByte",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnreadByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnreadByte(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestUnreadRuneError",
              "documentation": {
                "identifier": "TestUnreadRuneError",
                "newPage": false,
                "searchKey": "bytes_test.TestUnreadRuneError",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnreadRuneError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnreadRuneError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestWriteInvalidRune",
              "documentation": {
                "identifier": "TestWriteInvalidRune",
                "newPage": false,
                "searchKey": "bytes_test.TestWriteInvalidRune",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteInvalidRune(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteInvalidRune(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#TestWriteTo",
              "documentation": {
                "identifier": "TestWriteTo",
                "newPage": false,
                "searchKey": "bytes_test.TestWriteTo",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteTo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteTo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#benchBytes",
              "documentation": {
                "identifier": "benchBytes",
                "newPage": false,
                "searchKey": "bytes_test.benchBytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchBytes(b *testing.B, sizes []int, f func(b *testing.B, n int))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchBytes(b *testing.B, sizes []int, f func(b *testing.B, n int))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#benchmarkCountHard",
              "documentation": {
                "identifier": "benchmarkCountHard",
                "newPage": false,
                "searchKey": "bytes_test.benchmarkCountHard",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkCountHard(b *testing.B, sep []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkCountHard(b *testing.B, sep []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#benchmarkIndexHard",
              "documentation": {
                "identifier": "benchmarkIndexHard",
                "newPage": false,
                "searchKey": "bytes_test.benchmarkIndexHard",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkIndexHard(b *testing.B, sep []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkIndexHard(b *testing.B, sep []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#benchmarkLastIndexHard",
              "documentation": {
                "identifier": "benchmarkLastIndexHard",
                "newPage": false,
                "searchKey": "bytes_test.benchmarkLastIndexHard",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkLastIndexHard(b *testing.B, sep []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkLastIndexHard(b *testing.B, sep []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#bmEqual",
              "documentation": {
                "identifier": "bmEqual",
                "newPage": false,
                "searchKey": "bytes_test.bmEqual",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bmEqual(equal func([]byte, []byte) bool) func(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bmEqual(equal func([]byte, []byte) bool) func(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#bmIndexByte",
              "documentation": {
                "identifier": "bmIndexByte",
                "newPage": false,
                "searchKey": "bytes_test.bmIndexByte",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bmIndexByte(index func([]byte, byte) int) func(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bmIndexByte(index func([]byte, byte) int) func(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#bmIndexRune",
              "documentation": {
                "identifier": "bmIndexRune",
                "newPage": false,
                "searchKey": "bytes_test.bmIndexRune",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bmIndexRune(index func([]byte, rune) int) func(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bmIndexRune(index func([]byte, rune) int) func(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#bmIndexRuneASCII",
              "documentation": {
                "identifier": "bmIndexRuneASCII",
                "newPage": false,
                "searchKey": "bytes_test.bmIndexRuneASCII",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func bmIndexRuneASCII(index func([]byte, rune) int) func(b *testing.B, n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bmIndexRuneASCII(index func([]byte, rune) int) func(b *testing.B, n int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#check",
              "documentation": {
                "identifier": "check",
                "newPage": false,
                "searchKey": "bytes_test.check",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func check(t *testing.T, testname string, buf *Buffer, s string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc check(t *testing.T, testname string, buf *Buffer, s string)\n```\n\nVerify that contents of buf match the string s. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#empty",
              "documentation": {
                "identifier": "empty",
                "newPage": false,
                "searchKey": "bytes_test.empty",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func empty(t *testing.T, testname string, buf *Buffer, s string, fub []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc empty(t *testing.T, testname string, buf *Buffer, s string, fub []byte)\n```\n\nEmpty buf through repeated reads into fub. The initial contents of buf corresponds to the string s. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#eq",
              "documentation": {
                "identifier": "eq",
                "newPage": false,
                "searchKey": "bytes_test.eq",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func eq(a, b []string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc eq(a, b []string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#fillBytes",
              "documentation": {
                "identifier": "fillBytes",
                "newPage": false,
                "searchKey": "bytes_test.fillBytes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fillBytes(t *testing.T, testname string, buf *Buffer, s string, n int, fub []byte) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fillBytes(t *testing.T, testname string, buf *Buffer, s string, n int, fub []byte) string\n```\n\nFill buf through n writes of byte slice fub. The initial contents of buf corresponds to the string s; the result is the final contents of buf returned as a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#fillString",
              "documentation": {
                "identifier": "fillString",
                "newPage": false,
                "searchKey": "bytes_test.fillString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fillString(t *testing.T, testname string, buf *Buffer, s string, n int, fus string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fillString(t *testing.T, testname string, buf *Buffer, s string, n int, fus string) string\n```\n\nFill buf through n writes of string fus. The initial contents of buf corresponds to the string s; the result is the final contents of buf returned as a string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#init.buffer_test.go",
              "documentation": {
                "identifier": "init.buffer_test.go",
                "newPage": false,
                "searchKey": "bytes_test.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#makeBenchInputHard",
              "documentation": {
                "identifier": "makeBenchInputHard",
                "newPage": false,
                "searchKey": "bytes_test.makeBenchInputHard",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeBenchInputHard() []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeBenchInputHard() []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#repeat",
              "documentation": {
                "identifier": "repeat",
                "newPage": false,
                "searchKey": "bytes_test.repeat",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func repeat(b []byte, count int) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc repeat(b []byte, count int) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#rot13",
              "documentation": {
                "identifier": "rot13",
                "newPage": false,
                "searchKey": "bytes_test.rot13",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func rot13(r rune) rune"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc rot13(r rune) rune\n```\n\nUser-defined self-inverse mapping function \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#runIndexAnyTests",
              "documentation": {
                "identifier": "runIndexAnyTests",
                "newPage": false,
                "searchKey": "bytes_test.runIndexAnyTests",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runIndexAnyTests(t *testing.T, f func(s []byte, chars string) int, funcName string, testCases []BinOpTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runIndexAnyTests(t *testing.T, f func(s []byte, chars string) int, funcName string, testCases []BinOpTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#runIndexTests",
              "documentation": {
                "identifier": "runIndexTests",
                "newPage": false,
                "searchKey": "bytes_test.runIndexTests",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runIndexTests(t *testing.T, f func(s, sep []byte) int, funcName string, testCases []BinOpTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runIndexTests(t *testing.T, f func(s, sep []byte) int, funcName string, testCases []BinOpTest)\n```\n\nExecute f on each test case.  funcName should be the name of f; it's used in failure reports. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#runStringTests",
              "documentation": {
                "identifier": "runStringTests",
                "newPage": false,
                "searchKey": "bytes_test.runStringTests",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runStringTests(t *testing.T, f func([]byte) []byte, funcName string, testCases []StringTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runStringTests(t *testing.T, f func([]byte) []byte, funcName string, testCases []StringTest)\n```\n\nExecute f on each test case.  funcName should be the name of f; it's used in failure reports. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#runesEqual",
              "documentation": {
                "identifier": "runesEqual",
                "newPage": false,
                "searchKey": "bytes_test.runesEqual",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func runesEqual(a, b []rune) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runesEqual(a, b []rune) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#sliceOfString",
              "documentation": {
                "identifier": "sliceOfString",
                "newPage": false,
                "searchKey": "bytes_test.sliceOfString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sliceOfString(s [][]byte) []string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sliceOfString(s [][]byte) []string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#tenRunes",
              "documentation": {
                "identifier": "tenRunes",
                "newPage": false,
                "searchKey": "bytes_test.tenRunes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func tenRunes(r rune) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tenRunes(r rune) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/bytes_test#valName",
              "documentation": {
                "identifier": "valName",
                "newPage": false,
                "searchKey": "bytes_test.valName",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func valName(x int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc valName(x int) string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
