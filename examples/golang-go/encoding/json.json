{
  "pathID": "/encoding/json",
  "documentation": {
    "identifier": "json",
    "newPage": true,
    "searchKey": "encoding/json",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package json"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package json implements encoding and decoding of JSON as defined in RFC 7159. The mapping between JSON and Go values is described in the documentation for the Marshal and Unmarshal functions. \n\nSee \"JSON and Go\" for an introduction to this package: [https://golang.org/doc/articles/json_and_go.html](https://golang.org/doc/articles/json_and_go.html) \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/encoding/json#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/json#phasePanicMsg",
              "documentation": {
                "identifier": "phasePanicMsg",
                "newPage": false,
                "searchKey": "json.phasePanicMsg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const phasePanicMsg"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst phasePanicMsg = \"JSON decoder out of sync - data changing underfoot?\"\n```\n\nphasePanicMsg is used as a panic message when we end up with something that shouldn't happen. It can indicate a bug in the JSON decoder, or that something is editing the data slice while the decoder executes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#startDetectingCyclesAfter",
              "documentation": {
                "identifier": "startDetectingCyclesAfter",
                "newPage": false,
                "searchKey": "json.startDetectingCyclesAfter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const startDetectingCyclesAfter"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst startDetectingCyclesAfter = 1000\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#caseMask",
              "documentation": {
                "identifier": "caseMask",
                "newPage": false,
                "searchKey": "json.caseMask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const caseMask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst caseMask = ^byte(0x20) // Mask to ignore case in ASCII.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#kelvin",
              "documentation": {
                "identifier": "kelvin",
                "newPage": false,
                "searchKey": "json.kelvin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const kelvin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst kelvin = '\\u212a'\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#smallLongEss",
              "documentation": {
                "identifier": "smallLongEss",
                "newPage": false,
                "searchKey": "json.smallLongEss",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const smallLongEss"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst smallLongEss = '\\u017f'\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanContinue",
              "documentation": {
                "identifier": "scanContinue",
                "newPage": false,
                "searchKey": "json.scanContinue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanContinue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanContinue = iota // uninteresting byte\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\nContinue. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanBeginLiteral",
              "documentation": {
                "identifier": "scanBeginLiteral",
                "newPage": false,
                "searchKey": "json.scanBeginLiteral",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanBeginLiteral"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanBeginLiteral // end implied by next result != scanContinue\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanBeginObject",
              "documentation": {
                "identifier": "scanBeginObject",
                "newPage": false,
                "searchKey": "json.scanBeginObject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanBeginObject"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanBeginObject // begin object\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanObjectKey",
              "documentation": {
                "identifier": "scanObjectKey",
                "newPage": false,
                "searchKey": "json.scanObjectKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanObjectKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanObjectKey // just finished object key (string)\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanObjectValue",
              "documentation": {
                "identifier": "scanObjectValue",
                "newPage": false,
                "searchKey": "json.scanObjectValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanObjectValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanObjectValue // just finished non-last object value\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanEndObject",
              "documentation": {
                "identifier": "scanEndObject",
                "newPage": false,
                "searchKey": "json.scanEndObject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanEndObject"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanEndObject // end object (implies scanObjectValue if possible)\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanBeginArray",
              "documentation": {
                "identifier": "scanBeginArray",
                "newPage": false,
                "searchKey": "json.scanBeginArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanBeginArray"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanBeginArray // begin array\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanArrayValue",
              "documentation": {
                "identifier": "scanArrayValue",
                "newPage": false,
                "searchKey": "json.scanArrayValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanArrayValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanArrayValue // just finished array value\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanEndArray",
              "documentation": {
                "identifier": "scanEndArray",
                "newPage": false,
                "searchKey": "json.scanEndArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanEndArray"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanEndArray // end array (implies scanArrayValue if possible)\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanSkipSpace",
              "documentation": {
                "identifier": "scanSkipSpace",
                "newPage": false,
                "searchKey": "json.scanSkipSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanSkipSpace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanSkipSpace // space byte; can skip; known to be last \"continue\" result\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanEnd",
              "documentation": {
                "identifier": "scanEnd",
                "newPage": false,
                "searchKey": "json.scanEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanEnd // top-level value ended *before* this byte; known to be first \"stop\" result\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\nStop. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanError",
              "documentation": {
                "identifier": "scanError",
                "newPage": false,
                "searchKey": "json.scanError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const scanError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst scanError // hit an error, scanner.err.\n\n```\n\nThese values are returned by the state transition functions assigned to scanner.state and the method scanner.eof. They give details about the current state of the scan that callers might be interested to know about. It is okay to ignore the return value of any particular call to scanner.state: if one call returns scanError, every subsequent call will return scanError too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#parseObjectKey",
              "documentation": {
                "identifier": "parseObjectKey",
                "newPage": false,
                "searchKey": "json.parseObjectKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const parseObjectKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst parseObjectKey = iota // parsing object key (before colon)\n\n```\n\nThese values are stored in the parseState stack. They give the current state of a composite value being scanned. If the parser is inside a nested value the parseState describes the nested state, outermost at entry 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#parseObjectValue",
              "documentation": {
                "identifier": "parseObjectValue",
                "newPage": false,
                "searchKey": "json.parseObjectValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const parseObjectValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst parseObjectValue // parsing object value (after colon)\n\n```\n\nThese values are stored in the parseState stack. They give the current state of a composite value being scanned. If the parser is inside a nested value the parseState describes the nested state, outermost at entry 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#parseArrayValue",
              "documentation": {
                "identifier": "parseArrayValue",
                "newPage": false,
                "searchKey": "json.parseArrayValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const parseArrayValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst parseArrayValue // parsing array value\n\n```\n\nThese values are stored in the parseState stack. They give the current state of a composite value being scanned. If the parser is inside a nested value the parseState describes the nested state, outermost at entry 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#maxNestingDepth",
              "documentation": {
                "identifier": "maxNestingDepth",
                "newPage": false,
                "searchKey": "json.maxNestingDepth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxNestingDepth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxNestingDepth = 10000\n```\n\nThis limits the max nesting depth to prevent stack overflow. This is permitted by [https://tools.ietf.org/html/rfc7159#section-9](https://tools.ietf.org/html/rfc7159#section-9) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenTopValue",
              "documentation": {
                "identifier": "tokenTopValue",
                "newPage": false,
                "searchKey": "json.tokenTopValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenTopValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenTopValue = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenArrayStart",
              "documentation": {
                "identifier": "tokenArrayStart",
                "newPage": false,
                "searchKey": "json.tokenArrayStart",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenArrayStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenArrayStart\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenArrayValue",
              "documentation": {
                "identifier": "tokenArrayValue",
                "newPage": false,
                "searchKey": "json.tokenArrayValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenArrayValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenArrayValue\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenArrayComma",
              "documentation": {
                "identifier": "tokenArrayComma",
                "newPage": false,
                "searchKey": "json.tokenArrayComma",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenArrayComma"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenArrayComma\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenObjectStart",
              "documentation": {
                "identifier": "tokenObjectStart",
                "newPage": false,
                "searchKey": "json.tokenObjectStart",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenObjectStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenObjectStart\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenObjectKey",
              "documentation": {
                "identifier": "tokenObjectKey",
                "newPage": false,
                "searchKey": "json.tokenObjectKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenObjectKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenObjectKey\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenObjectColon",
              "documentation": {
                "identifier": "tokenObjectColon",
                "newPage": false,
                "searchKey": "json.tokenObjectColon",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenObjectColon"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenObjectColon\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenObjectValue",
              "documentation": {
                "identifier": "tokenObjectValue",
                "newPage": false,
                "searchKey": "json.tokenObjectValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenObjectValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenObjectValue\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenObjectComma",
              "documentation": {
                "identifier": "tokenObjectComma",
                "newPage": false,
                "searchKey": "json.tokenObjectComma",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const tokenObjectComma"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tokenObjectComma\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/json#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/json#nullLiteral",
              "documentation": {
                "identifier": "nullLiteral",
                "newPage": false,
                "searchKey": "json.nullLiteral",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nullLiteral"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nullLiteral = []byte(\"null\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textUnmarshalerType",
              "documentation": {
                "identifier": "textUnmarshalerType",
                "newPage": false,
                "searchKey": "json.textUnmarshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textUnmarshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textUnmarshalerType = reflect.TypeOf((*encoding.TextUnmarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#numberType",
              "documentation": {
                "identifier": "numberType",
                "newPage": false,
                "searchKey": "json.numberType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var numberType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar numberType = reflect.TypeOf(Number(\"\"))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#hex",
              "documentation": {
                "identifier": "hex",
                "newPage": false,
                "searchKey": "json.hex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var hex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hex = \"0123456789abcdef\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encodeStatePool",
              "documentation": {
                "identifier": "encodeStatePool",
                "newPage": false,
                "searchKey": "json.encodeStatePool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encodeStatePool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encodeStatePool sync.Pool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encoderCache",
              "documentation": {
                "identifier": "encoderCache",
                "newPage": false,
                "searchKey": "json.encoderCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encoderCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encoderCache sync.Map // map[reflect.Type]encoderFunc\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#marshalerType",
              "documentation": {
                "identifier": "marshalerType",
                "newPage": false,
                "searchKey": "json.marshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalerType = reflect.TypeOf((*Marshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textMarshalerType",
              "documentation": {
                "identifier": "textMarshalerType",
                "newPage": false,
                "searchKey": "json.textMarshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textMarshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textMarshalerType = reflect.TypeOf((*encoding.TextMarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#float32Encoder",
              "documentation": {
                "identifier": "float32Encoder",
                "newPage": false,
                "searchKey": "json.float32Encoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var float32Encoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar float32Encoder = (floatEncoder(32)).encode\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#float64Encoder",
              "documentation": {
                "identifier": "float64Encoder",
                "newPage": false,
                "searchKey": "json.float64Encoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var float64Encoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar float64Encoder = (floatEncoder(64)).encode\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#fieldCache",
              "documentation": {
                "identifier": "fieldCache",
                "newPage": false,
                "searchKey": "json.fieldCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fieldCache"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fieldCache sync.Map // map[reflect.Type]structFields\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scannerPool",
              "documentation": {
                "identifier": "scannerPool",
                "newPage": false,
                "searchKey": "json.scannerPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var scannerPool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar scannerPool = sync.Pool{\n\tNew: func() interface{} {\n\t\treturn &scanner{}\n\t},\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#safeSet",
              "documentation": {
                "identifier": "safeSet",
                "newPage": false,
                "searchKey": "json.safeSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var safeSet"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar safeSet = ...\n```\n\nsafeSet holds the value true if the ASCII character with the given array position can be represented inside a JSON string without any further escaping. \n\nAll values are true except for the ASCII control characters (0-31), the double quote (\"), and the backslash character (\"\\\"). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#htmlSafeSet",
              "documentation": {
                "identifier": "htmlSafeSet",
                "newPage": false,
                "searchKey": "json.htmlSafeSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var htmlSafeSet"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar htmlSafeSet = ...\n```\n\nhtmlSafeSet holds the value true if the ASCII character with the given array position can be safely represented inside a JSON string, embedded inside of HTML <script> tags, without any additional escaping. \n\nAll values are true except for the ASCII control characters (0-31), the double quote (\"), the backslash character (\"\\\"), HTML opening and closing tags (\"<\" and \">\"), and the ampersand (\"&\"). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#codeJSON",
              "documentation": {
                "identifier": "codeJSON",
                "newPage": false,
                "searchKey": "json.codeJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeJSON"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeJSON []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#codeStruct",
              "documentation": {
                "identifier": "codeStruct",
                "newPage": false,
                "searchKey": "json.codeStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var codeStruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar codeStruct codeResponse\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ifaceNumAsFloat64",
              "documentation": {
                "identifier": "ifaceNumAsFloat64",
                "newPage": false,
                "searchKey": "json.ifaceNumAsFloat64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ifaceNumAsFloat64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ifaceNumAsFloat64 = ...\n```\n\nifaceNumAsFloat64/ifaceNumAsNumber are used to test unmarshaling with and without UseNumber \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ifaceNumAsNumber",
              "documentation": {
                "identifier": "ifaceNumAsNumber",
                "newPage": false,
                "searchKey": "json.ifaceNumAsNumber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ifaceNumAsNumber"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ifaceNumAsNumber = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#errMissingU8Prefix",
              "documentation": {
                "identifier": "errMissingU8Prefix",
                "newPage": false,
                "searchKey": "json.errMissingU8Prefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errMissingU8Prefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errMissingU8Prefix = errors.New(\"missing 'u' prefix\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#umtrue",
              "documentation": {
                "identifier": "umtrue",
                "newPage": false,
                "searchKey": "json.umtrue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var umtrue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar umtrue = unmarshaler{true}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#umslice",
              "documentation": {
                "identifier": "umslice",
                "newPage": false,
                "searchKey": "json.umslice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var umslice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar umslice = []unmarshaler{{true}}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#umstruct",
              "documentation": {
                "identifier": "umstruct",
                "newPage": false,
                "searchKey": "json.umstruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var umstruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar umstruct = ustruct{unmarshaler{true}}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#umtrueXY",
              "documentation": {
                "identifier": "umtrueXY",
                "newPage": false,
                "searchKey": "json.umtrueXY",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var umtrueXY"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar umtrueXY = unmarshalerText{\"x\", \"y\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#umsliceXY",
              "documentation": {
                "identifier": "umsliceXY",
                "newPage": false,
                "searchKey": "json.umsliceXY",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var umsliceXY"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar umsliceXY = []unmarshalerText{{\"x\", \"y\"}}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#umstructXY",
              "documentation": {
                "identifier": "umstructXY",
                "newPage": false,
                "searchKey": "json.umstructXY",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var umstructXY"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar umstructXY = ustructText{unmarshalerText{\"x\", \"y\"}}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ummapXY",
              "documentation": {
                "identifier": "ummapXY",
                "newPage": false,
                "searchKey": "json.ummapXY",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ummapXY"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ummapXY = map[unmarshalerText]bool{{\"x\", \"y\"}: true}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unmarshalTests",
              "documentation": {
                "identifier": "unmarshalTests",
                "newPage": false,
                "searchKey": "json.unmarshalTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unmarshalTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unmarshalTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#badUTF8",
              "documentation": {
                "identifier": "badUTF8",
                "newPage": false,
                "searchKey": "json.badUTF8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var badUTF8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar badUTF8 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#numberTests",
              "documentation": {
                "identifier": "numberTests",
                "newPage": false,
                "searchKey": "json.numberTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var numberTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar numberTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#wrongStringTests",
              "documentation": {
                "identifier": "wrongStringTests",
                "newPage": false,
                "searchKey": "json.wrongStringTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var wrongStringTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar wrongStringTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#allValue",
              "documentation": {
                "identifier": "allValue",
                "newPage": false,
                "searchKey": "json.allValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allValue = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#pallValue",
              "documentation": {
                "identifier": "pallValue",
                "newPage": false,
                "searchKey": "json.pallValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pallValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pallValue = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#allValueIndent",
              "documentation": {
                "identifier": "allValueIndent",
                "newPage": false,
                "searchKey": "json.allValueIndent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allValueIndent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allValueIndent = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#allValueCompact",
              "documentation": {
                "identifier": "allValueCompact",
                "newPage": false,
                "searchKey": "json.allValueCompact",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var allValueCompact"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar allValueCompact = strings.Map(noSpace, allValueIndent)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#pallValueIndent",
              "documentation": {
                "identifier": "pallValueIndent",
                "newPage": false,
                "searchKey": "json.pallValueIndent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pallValueIndent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pallValueIndent = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#pallValueCompact",
              "documentation": {
                "identifier": "pallValueCompact",
                "newPage": false,
                "searchKey": "json.pallValueCompact",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pallValueCompact"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pallValueCompact = strings.Map(noSpace, pallValueIndent)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#interfaceSetTests",
              "documentation": {
                "identifier": "interfaceSetTests",
                "newPage": false,
                "searchKey": "json.interfaceSetTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var interfaceSetTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar interfaceSetTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#decodeTypeErrorTests",
              "documentation": {
                "identifier": "decodeTypeErrorTests",
                "newPage": false,
                "searchKey": "json.decodeTypeErrorTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var decodeTypeErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar decodeTypeErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unmarshalSyntaxTests",
              "documentation": {
                "identifier": "unmarshalSyntaxTests",
                "newPage": false,
                "searchKey": "json.unmarshalSyntaxTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unmarshalSyntaxTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unmarshalSyntaxTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#invalidUnmarshalTests",
              "documentation": {
                "identifier": "invalidUnmarshalTests",
                "newPage": false,
                "searchKey": "json.invalidUnmarshalTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var invalidUnmarshalTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar invalidUnmarshalTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#invalidUnmarshalTextTests",
              "documentation": {
                "identifier": "invalidUnmarshalTextTests",
                "newPage": false,
                "searchKey": "json.invalidUnmarshalTextTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var invalidUnmarshalTextTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar invalidUnmarshalTextTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#optionalsExpected",
              "documentation": {
                "identifier": "optionalsExpected",
                "newPage": false,
                "searchKey": "json.optionalsExpected",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var optionalsExpected"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar optionalsExpected = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#samePointerNoCycle",
              "documentation": {
                "identifier": "samePointerNoCycle",
                "newPage": false,
                "searchKey": "json.samePointerNoCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var samePointerNoCycle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar samePointerNoCycle = &SamePointerNoCycle{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#pointerCycle",
              "documentation": {
                "identifier": "pointerCycle",
                "newPage": false,
                "searchKey": "json.pointerCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pointerCycle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pointerCycle = &PointerCycle{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#pointerCycleIndirect",
              "documentation": {
                "identifier": "pointerCycleIndirect",
                "newPage": false,
                "searchKey": "json.pointerCycleIndirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pointerCycleIndirect"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pointerCycleIndirect = &PointerCycleIndirect{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#mapCycle",
              "documentation": {
                "identifier": "mapCycle",
                "newPage": false,
                "searchKey": "json.mapCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var mapCycle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar mapCycle = make(map[string]interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#sliceCycle",
              "documentation": {
                "identifier": "sliceCycle",
                "newPage": false,
                "searchKey": "json.sliceCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sliceCycle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sliceCycle = []interface{}{nil}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#sliceNoCycle",
              "documentation": {
                "identifier": "sliceNoCycle",
                "newPage": false,
                "searchKey": "json.sliceNoCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sliceNoCycle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sliceNoCycle = []interface{}{nil, nil}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#recursiveSliceCycle",
              "documentation": {
                "identifier": "recursiveSliceCycle",
                "newPage": false,
                "searchKey": "json.recursiveSliceCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var recursiveSliceCycle"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar recursiveSliceCycle = []RecursiveSlice{nil}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unsupportedValues",
              "documentation": {
                "identifier": "unsupportedValues",
                "newPage": false,
                "searchKey": "json.unsupportedValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unsupportedValues"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unsupportedValues = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encodeStringTests",
              "documentation": {
                "identifier": "encodeStringTests",
                "newPage": false,
                "searchKey": "json.encodeStringTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encodeStringTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encodeStringTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#re",
              "documentation": {
                "identifier": "re",
                "newPage": false,
                "searchKey": "json.re",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var re"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar re = regexp.MustCompile\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#badFloatREs",
              "documentation": {
                "identifier": "badFloatREs",
                "newPage": false,
                "searchKey": "json.badFloatREs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var badFloatREs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar badFloatREs = ...\n```\n\nsyntactic checks on form of marshaled floating point numbers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#foldTests",
              "documentation": {
                "identifier": "foldTests",
                "newPage": false,
                "searchKey": "json.foldTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var foldTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar foldTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#validTests",
              "documentation": {
                "identifier": "validTests",
                "newPage": false,
                "searchKey": "json.validTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var validTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar validTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#examples",
              "documentation": {
                "identifier": "examples",
                "newPage": false,
                "searchKey": "json.examples",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var examples"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar examples = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ex1",
              "documentation": {
                "identifier": "ex1",
                "newPage": false,
                "searchKey": "json.ex1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ex1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ex1 = `[true,false,null,\"x\",1,1.5,0,-5e+2]`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ex1i",
              "documentation": {
                "identifier": "ex1i",
                "newPage": false,
                "searchKey": "json.ex1i",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ex1i"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ex1i = `[\n\ttrue,\n\tfalse,\n\tnull,\n\t\"x\",\n\t1,\n\t1.5,\n\t0,\n\t-5e+2\n]`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#indentErrorTests",
              "documentation": {
                "identifier": "indentErrorTests",
                "newPage": false,
                "searchKey": "json.indentErrorTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var indentErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar indentErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#jsonBig",
              "documentation": {
                "identifier": "jsonBig",
                "newPage": false,
                "searchKey": "json.jsonBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var jsonBig"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar jsonBig []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#streamTest",
              "documentation": {
                "identifier": "streamTest",
                "newPage": false,
                "searchKey": "json.streamTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var streamTest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar streamTest = ...\n```\n\nTest values for the stream test. One of each JSON kind. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#streamEncoded",
              "documentation": {
                "identifier": "streamEncoded",
                "newPage": false,
                "searchKey": "json.streamEncoded",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var streamEncoded"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar streamEncoded = `0.1\n\"hello\"\nnull\ntrue\nfalse\n[\"a\",\"b\",\"c\"]\n{\"ß\":\"long s\",\"K\":\"Kelvin\"}\n3.14\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#streamEncodedIndent",
              "documentation": {
                "identifier": "streamEncodedIndent",
                "newPage": false,
                "searchKey": "json.streamEncodedIndent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var streamEncodedIndent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar streamEncodedIndent = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#blockingTests",
              "documentation": {
                "identifier": "blockingTests",
                "newPage": false,
                "searchKey": "json.blockingTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var blockingTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar blockingTests = []string{\n\t`{\"x\": 1}`,\n\t`[1, 2, 3]`,\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenStreamCases",
              "documentation": {
                "identifier": "tokenStreamCases",
                "newPage": false,
                "searchKey": "json.tokenStreamCases",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tokenStreamCases"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tokenStreamCases = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#structTagObjectKeyTests",
              "documentation": {
                "identifier": "structTagObjectKeyTests",
                "newPage": false,
                "searchKey": "json.structTagObjectKeyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var structTagObjectKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar structTagObjectKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/json#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/json#Unmarshaler",
              "documentation": {
                "identifier": "Unmarshaler",
                "newPage": false,
                "searchKey": "json.Unmarshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Unmarshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Unmarshaler interface {\n\tUnmarshalJSON([]byte) error\n}\n```\n\nUnmarshaler is the interface implemented by types that can unmarshal a JSON description of themselves. The input can be assumed to be a valid encoding of a JSON value. UnmarshalJSON must copy the JSON data if it wishes to retain the data after returning. \n\nBy convention, to approximate the behavior of Unmarshal itself, Unmarshalers implement UnmarshalJSON([]byte(\"null\")) as a no-op. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#indirect",
                    "documentation": {
                      "identifier": "indirect",
                      "newPage": false,
                      "searchKey": "json.indirect",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func indirect(v reflect.Value, decodingNull bool) (Unmarshaler, encoding.TextUnmarshaler, reflect.Value)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc indirect(v reflect.Value, decodingNull bool) (Unmarshaler, encoding.TextUnmarshaler, reflect.Value)\n```\n\nindirect walks down v allocating pointers as needed, until it gets to a non-pointer. If it encounters an Unmarshaler, indirect stops and returns that. If decodingNull is true, indirect stops at the first settable pointer so it can be set to nil. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#UnmarshalTypeError",
              "documentation": {
                "identifier": "UnmarshalTypeError",
                "newPage": false,
                "searchKey": "json.UnmarshalTypeError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnmarshalTypeError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnmarshalTypeError struct {\n\tValue  string       // description of JSON value - \"bool\", \"array\", \"number -5\"\n\tType   reflect.Type // type of Go value it could not be assigned to\n\tOffset int64        // error occurred after reading Offset bytes\n\tStruct string       // name of the struct type containing the field\n\tField  string       // the full path from root node to the field\n}\n```\n\nAn UnmarshalTypeError describes a JSON value that was not appropriate for a value of a specific Go type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#UnmarshalTypeError.Error",
                    "documentation": {
                      "identifier": "UnmarshalTypeError.Error",
                      "newPage": false,
                      "searchKey": "json.UnmarshalTypeError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *UnmarshalTypeError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *UnmarshalTypeError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#UnmarshalFieldError",
              "documentation": {
                "identifier": "UnmarshalFieldError",
                "newPage": false,
                "searchKey": "json.UnmarshalFieldError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnmarshalFieldError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnmarshalFieldError struct {\n\tKey   string\n\tType  reflect.Type\n\tField reflect.StructField\n}\n```\n\nAn UnmarshalFieldError describes a JSON object key that led to an unexported (and therefore unwritable) struct field. \n\nDeprecated: No longer used; kept for compatibility. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#UnmarshalFieldError.Error",
                    "documentation": {
                      "identifier": "UnmarshalFieldError.Error",
                      "newPage": false,
                      "searchKey": "json.UnmarshalFieldError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *UnmarshalFieldError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *UnmarshalFieldError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#InvalidUnmarshalError",
              "documentation": {
                "identifier": "InvalidUnmarshalError",
                "newPage": false,
                "searchKey": "json.InvalidUnmarshalError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InvalidUnmarshalError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InvalidUnmarshalError struct {\n\tType reflect.Type\n}\n```\n\nAn InvalidUnmarshalError describes an invalid argument passed to Unmarshal. (The argument to Unmarshal must be a non-nil pointer.) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#InvalidUnmarshalError.Error",
                    "documentation": {
                      "identifier": "InvalidUnmarshalError.Error",
                      "newPage": false,
                      "searchKey": "json.InvalidUnmarshalError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *InvalidUnmarshalError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *InvalidUnmarshalError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Number",
              "documentation": {
                "identifier": "Number",
                "newPage": false,
                "searchKey": "json.Number",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Number string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Number string\n```\n\nA Number represents a JSON number literal. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#Number.String",
                    "documentation": {
                      "identifier": "Number.String",
                      "newPage": false,
                      "searchKey": "json.Number.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n Number) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n Number) String() string\n```\n\nString returns the literal text of the number. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Number.Float64",
                    "documentation": {
                      "identifier": "Number.Float64",
                      "newPage": false,
                      "searchKey": "json.Number.Float64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n Number) Float64() (float64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n Number) Float64() (float64, error)\n```\n\nFloat64 returns the number as a float64. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Number.Int64",
                    "documentation": {
                      "identifier": "Number.Int64",
                      "newPage": false,
                      "searchKey": "json.Number.Int64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n Number) Int64() (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n Number) Int64() (int64, error)\n```\n\nInt64 returns the number as an int64. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#errorContext",
              "documentation": {
                "identifier": "errorContext",
                "newPage": false,
                "searchKey": "json.errorContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type errorContext struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errorContext struct {\n\tStruct     reflect.Type\n\tFieldStack []string\n}\n```\n\nAn errorContext provides context for type errors during decoding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#decodeState",
              "documentation": {
                "identifier": "decodeState",
                "newPage": false,
                "searchKey": "json.decodeState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decodeState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decodeState struct {\n\tdata                  []byte\n\toff                   int // next read offset in data\n\topcode                int // last read result\n\tscan                  scanner\n\terrorContext          *errorContext\n\tsavedError            error\n\tuseNumber             bool\n\tdisallowUnknownFields bool\n}\n```\n\ndecodeState represents the state while decoding a JSON value. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.unmarshal",
                    "documentation": {
                      "identifier": "decodeState.unmarshal",
                      "newPage": false,
                      "searchKey": "json.decodeState.unmarshal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) unmarshal(v interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) unmarshal(v interface{}) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.readIndex",
                    "documentation": {
                      "identifier": "decodeState.readIndex",
                      "newPage": false,
                      "searchKey": "json.decodeState.readIndex",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) readIndex() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) readIndex() int\n```\n\nreadIndex returns the position of the last byte read. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.init",
                    "documentation": {
                      "identifier": "decodeState.init",
                      "newPage": false,
                      "searchKey": "json.decodeState.init",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) init(data []byte) *decodeState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) init(data []byte) *decodeState\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.saveError",
                    "documentation": {
                      "identifier": "decodeState.saveError",
                      "newPage": false,
                      "searchKey": "json.decodeState.saveError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) saveError(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) saveError(err error)\n```\n\nsaveError saves the first err it is called with, for reporting at the end of the unmarshal. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.addErrorContext",
                    "documentation": {
                      "identifier": "decodeState.addErrorContext",
                      "newPage": false,
                      "searchKey": "json.decodeState.addErrorContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) addErrorContext(err error) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) addErrorContext(err error) error\n```\n\naddErrorContext returns a new error enhanced with information from d.errorContext \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.skip",
                    "documentation": {
                      "identifier": "decodeState.skip",
                      "newPage": false,
                      "searchKey": "json.decodeState.skip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) skip()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) skip()\n```\n\nskip scans to the end of what was started. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.scanNext",
                    "documentation": {
                      "identifier": "decodeState.scanNext",
                      "newPage": false,
                      "searchKey": "json.decodeState.scanNext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) scanNext()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) scanNext()\n```\n\nscanNext processes the byte at d.data[d.off]. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.scanWhile",
                    "documentation": {
                      "identifier": "decodeState.scanWhile",
                      "newPage": false,
                      "searchKey": "json.decodeState.scanWhile",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) scanWhile(op int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) scanWhile(op int)\n```\n\nscanWhile processes bytes in d.data[d.off:] until it receives a scan code not equal to op. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.rescanLiteral",
                    "documentation": {
                      "identifier": "decodeState.rescanLiteral",
                      "newPage": false,
                      "searchKey": "json.decodeState.rescanLiteral",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) rescanLiteral()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) rescanLiteral()\n```\n\nrescanLiteral is similar to scanWhile(scanContinue), but it specialises the common case where we're decoding a literal. The decoder scans the input twice, once for syntax errors and to check the length of the value, and the second to perform the decoding. \n\nOnly in the second step do we use decodeState to tokenize literals, so we know there aren't any syntax errors. We can take advantage of that knowledge, and scan a literal's bytes much more quickly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.value",
                    "documentation": {
                      "identifier": "decodeState.value",
                      "newPage": false,
                      "searchKey": "json.decodeState.value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) value(v reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) value(v reflect.Value) error\n```\n\nvalue consumes a JSON value from d.data[d.off-1:], decoding into v, and reads the following byte ahead. If v is invalid, the value is discarded. The first byte of the value has been read already. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.valueQuoted",
                    "documentation": {
                      "identifier": "decodeState.valueQuoted",
                      "newPage": false,
                      "searchKey": "json.decodeState.valueQuoted",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) valueQuoted() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) valueQuoted() interface{}\n```\n\nvalueQuoted is like value but decodes a quoted string literal or literal null into an interface value. If it finds anything other than a quoted string literal or null, valueQuoted returns unquotedValue{}. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.array",
                    "documentation": {
                      "identifier": "decodeState.array",
                      "newPage": false,
                      "searchKey": "json.decodeState.array",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) array(v reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) array(v reflect.Value) error\n```\n\narray consumes an array from d.data[d.off-1:], decoding into v. The first byte of the array ('[') has been read already. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.object",
                    "documentation": {
                      "identifier": "decodeState.object",
                      "newPage": false,
                      "searchKey": "json.decodeState.object",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) object(v reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) object(v reflect.Value) error\n```\n\nobject consumes an object from d.data[d.off-1:], decoding into v. The first byte ('{') of the object has been read already. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.convertNumber",
                    "documentation": {
                      "identifier": "decodeState.convertNumber",
                      "newPage": false,
                      "searchKey": "json.decodeState.convertNumber",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) convertNumber(s string) (interface{}, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) convertNumber(s string) (interface{}, error)\n```\n\nconvertNumber converts the number literal s to a float64 or a Number depending on the setting of d.useNumber. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.literalStore",
                    "documentation": {
                      "identifier": "decodeState.literalStore",
                      "newPage": false,
                      "searchKey": "json.decodeState.literalStore",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) literalStore(item []byte, v reflect.Value, fromQuoted bool) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) literalStore(item []byte, v reflect.Value, fromQuoted bool) error\n```\n\nliteralStore decodes a literal stored in item into v. \n\nfromQuoted indicates whether this literal came from unwrapping a string from the \",string\" struct tag option. this is used only to produce more helpful error messages. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.valueInterface",
                    "documentation": {
                      "identifier": "decodeState.valueInterface",
                      "newPage": false,
                      "searchKey": "json.decodeState.valueInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) valueInterface() (val interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) valueInterface() (val interface{})\n```\n\nvalueInterface is like value but returns interface{} \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.arrayInterface",
                    "documentation": {
                      "identifier": "decodeState.arrayInterface",
                      "newPage": false,
                      "searchKey": "json.decodeState.arrayInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) arrayInterface() []interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) arrayInterface() []interface{}\n```\n\narrayInterface is like array but returns []interface{}. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.objectInterface",
                    "documentation": {
                      "identifier": "decodeState.objectInterface",
                      "newPage": false,
                      "searchKey": "json.decodeState.objectInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) objectInterface() map[string]interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) objectInterface() map[string]interface{}\n```\n\nobjectInterface is like object but returns map[string]interface{}. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#decodeState.literalInterface",
                    "documentation": {
                      "identifier": "decodeState.literalInterface",
                      "newPage": false,
                      "searchKey": "json.decodeState.literalInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *decodeState) literalInterface() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *decodeState) literalInterface() interface{}\n```\n\nliteralInterface consumes and returns a literal from d.data[d.off-1:] and it reads the following byte ahead. The first byte of the literal has been read already (that's how the caller knows it's a literal). \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unquotedValue",
              "documentation": {
                "identifier": "unquotedValue",
                "newPage": false,
                "searchKey": "json.unquotedValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unquotedValue struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unquotedValue struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Marshaler",
              "documentation": {
                "identifier": "Marshaler",
                "newPage": false,
                "searchKey": "json.Marshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Marshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Marshaler interface {\n\tMarshalJSON() ([]byte, error)\n}\n```\n\nMarshaler is the interface implemented by types that can marshal themselves into valid JSON. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#UnsupportedTypeError",
              "documentation": {
                "identifier": "UnsupportedTypeError",
                "newPage": false,
                "searchKey": "json.UnsupportedTypeError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnsupportedTypeError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnsupportedTypeError struct {\n\tType reflect.Type\n}\n```\n\nAn UnsupportedTypeError is returned by Marshal when attempting to encode an unsupported value type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#UnsupportedTypeError.Error",
                    "documentation": {
                      "identifier": "UnsupportedTypeError.Error",
                      "newPage": false,
                      "searchKey": "json.UnsupportedTypeError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *UnsupportedTypeError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *UnsupportedTypeError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#UnsupportedValueError",
              "documentation": {
                "identifier": "UnsupportedValueError",
                "newPage": false,
                "searchKey": "json.UnsupportedValueError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnsupportedValueError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnsupportedValueError struct {\n\tValue reflect.Value\n\tStr   string\n}\n```\n\nAn UnsupportedValueError is returned by Marshal when attempting to encode an unsupported value. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#UnsupportedValueError.Error",
                    "documentation": {
                      "identifier": "UnsupportedValueError.Error",
                      "newPage": false,
                      "searchKey": "json.UnsupportedValueError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *UnsupportedValueError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *UnsupportedValueError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#InvalidUTF8Error",
              "documentation": {
                "identifier": "InvalidUTF8Error",
                "newPage": false,
                "searchKey": "json.InvalidUTF8Error",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InvalidUTF8Error struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InvalidUTF8Error struct {\n\tS string // the whole string value that caused the error\n}\n```\n\nBefore Go 1.2, an InvalidUTF8Error was returned by Marshal when attempting to encode a string value with invalid UTF-8 sequences. As of Go 1.2, Marshal instead coerces the string to valid UTF-8 by replacing invalid bytes with the Unicode replacement rune U+FFFD. \n\nDeprecated: No longer used; kept for compatibility. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#InvalidUTF8Error.Error",
                    "documentation": {
                      "identifier": "InvalidUTF8Error.Error",
                      "newPage": false,
                      "searchKey": "json.InvalidUTF8Error.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *InvalidUTF8Error) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *InvalidUTF8Error) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#MarshalerError",
              "documentation": {
                "identifier": "MarshalerError",
                "newPage": false,
                "searchKey": "json.MarshalerError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MarshalerError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MarshalerError struct {\n\tType       reflect.Type\n\tErr        error\n\tsourceFunc string\n}\n```\n\nA MarshalerError represents an error from calling a MarshalJSON or MarshalText method. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#MarshalerError.Error",
                    "documentation": {
                      "identifier": "MarshalerError.Error",
                      "newPage": false,
                      "searchKey": "json.MarshalerError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *MarshalerError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *MarshalerError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#MarshalerError.Unwrap",
                    "documentation": {
                      "identifier": "MarshalerError.Unwrap",
                      "newPage": false,
                      "searchKey": "json.MarshalerError.Unwrap",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *MarshalerError) Unwrap() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *MarshalerError) Unwrap() error\n```\n\nUnwrap returns the underlying error. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encodeState",
              "documentation": {
                "identifier": "encodeState",
                "newPage": false,
                "searchKey": "json.encodeState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encodeState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encodeState struct {\n\tbytes.Buffer // accumulated output\n\tscratch      [64]byte\n\n\t// Keep track of what pointers we've seen in the current recursive call\n\t// path, to avoid cycles that could lead to a stack overflow. Only do\n\t// the relatively expensive map operations if ptrLevel is larger than\n\t// startDetectingCyclesAfter, so that we skip the work if we're within a\n\t// reasonable amount of nested pointers deep.\n\tptrLevel uint\n\tptrSeen  map[interface{}]struct{}\n}\n```\n\nAn encodeState encodes JSON into a bytes.Buffer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#newEncodeState",
                    "documentation": {
                      "identifier": "newEncodeState",
                      "newPage": false,
                      "searchKey": "json.newEncodeState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newEncodeState() *encodeState"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newEncodeState() *encodeState\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#encodeState.marshal",
                    "documentation": {
                      "identifier": "encodeState.marshal",
                      "newPage": false,
                      "searchKey": "json.encodeState.marshal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encodeState) marshal(v interface{}, opts encOpts) (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encodeState) marshal(v interface{}, opts encOpts) (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#encodeState.error",
                    "documentation": {
                      "identifier": "encodeState.error",
                      "newPage": false,
                      "searchKey": "json.encodeState.error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encodeState) error(err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encodeState) error(err error)\n```\n\nerror aborts the encoding by panicking with err wrapped in jsonError. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#encodeState.reflectValue",
                    "documentation": {
                      "identifier": "encodeState.reflectValue",
                      "newPage": false,
                      "searchKey": "json.encodeState.reflectValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encodeState) reflectValue(v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encodeState) reflectValue(v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#encodeState.string",
                    "documentation": {
                      "identifier": "encodeState.string",
                      "newPage": false,
                      "searchKey": "json.encodeState.string",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encodeState) string(s string, escapeHTML bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encodeState) string(s string, escapeHTML bool)\n```\n\nNOTE: keep in sync with stringBytes below. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#encodeState.stringBytes",
                    "documentation": {
                      "identifier": "encodeState.stringBytes",
                      "newPage": false,
                      "searchKey": "json.encodeState.stringBytes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *encodeState) stringBytes(s []byte, escapeHTML bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *encodeState) stringBytes(s []byte, escapeHTML bool)\n```\n\nNOTE: keep in sync with string above. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#jsonError",
              "documentation": {
                "identifier": "jsonError",
                "newPage": false,
                "searchKey": "json.jsonError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type jsonError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype jsonError struct{ error }\n```\n\njsonError is an error wrapper type for internal use only. Panics with errors are wrapped in jsonError so that the top-level recover can distinguish intentional panics from this package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encOpts",
              "documentation": {
                "identifier": "encOpts",
                "newPage": false,
                "searchKey": "json.encOpts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encOpts struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encOpts struct {\n\t// quoted causes primitive fields to be encoded inside JSON strings.\n\tquoted bool\n\t// escapeHTML causes '<', '>', and '&' to be escaped in JSON strings.\n\tescapeHTML bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encoderFunc",
              "documentation": {
                "identifier": "encoderFunc",
                "newPage": false,
                "searchKey": "json.encoderFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type encoderFunc func(e *std/encoding/json.encodeState, v reflect.Value, opts std/encoding/json.encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encoderFunc func(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#valueEncoder",
                    "documentation": {
                      "identifier": "valueEncoder",
                      "newPage": false,
                      "searchKey": "json.valueEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func valueEncoder(v reflect.Value) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc valueEncoder(v reflect.Value) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#typeEncoder",
                    "documentation": {
                      "identifier": "typeEncoder",
                      "newPage": false,
                      "searchKey": "json.typeEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func typeEncoder(t reflect.Type) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc typeEncoder(t reflect.Type) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newTypeEncoder",
                    "documentation": {
                      "identifier": "newTypeEncoder",
                      "newPage": false,
                      "searchKey": "json.newTypeEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTypeEncoder(t reflect.Type, allowAddr bool) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTypeEncoder(t reflect.Type, allowAddr bool) encoderFunc\n```\n\nnewTypeEncoder constructs an encoderFunc for a type. The returned encoder only checks CanAddr when allowAddr is true. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newStructEncoder",
                    "documentation": {
                      "identifier": "newStructEncoder",
                      "newPage": false,
                      "searchKey": "json.newStructEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newStructEncoder(t reflect.Type) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newStructEncoder(t reflect.Type) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newMapEncoder",
                    "documentation": {
                      "identifier": "newMapEncoder",
                      "newPage": false,
                      "searchKey": "json.newMapEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newMapEncoder(t reflect.Type) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newMapEncoder(t reflect.Type) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newSliceEncoder",
                    "documentation": {
                      "identifier": "newSliceEncoder",
                      "newPage": false,
                      "searchKey": "json.newSliceEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newSliceEncoder(t reflect.Type) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newSliceEncoder(t reflect.Type) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newArrayEncoder",
                    "documentation": {
                      "identifier": "newArrayEncoder",
                      "newPage": false,
                      "searchKey": "json.newArrayEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newArrayEncoder(t reflect.Type) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newArrayEncoder(t reflect.Type) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newPtrEncoder",
                    "documentation": {
                      "identifier": "newPtrEncoder",
                      "newPage": false,
                      "searchKey": "json.newPtrEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newPtrEncoder(t reflect.Type) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newPtrEncoder(t reflect.Type) encoderFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#newCondAddrEncoder",
                    "documentation": {
                      "identifier": "newCondAddrEncoder",
                      "newPage": false,
                      "searchKey": "json.newCondAddrEncoder",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newCondAddrEncoder(canAddrEnc, elseEnc encoderFunc) encoderFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newCondAddrEncoder(canAddrEnc, elseEnc encoderFunc) encoderFunc\n```\n\nnewCondAddrEncoder returns an encoder that checks whether its value CanAddr and delegates to canAddrEnc if so, else to elseEnc. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#floatEncoder",
              "documentation": {
                "identifier": "floatEncoder",
                "newPage": false,
                "searchKey": "json.floatEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type floatEncoder int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype floatEncoder int // number of bits\n\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#floatEncoder.encode",
                    "documentation": {
                      "identifier": "floatEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.floatEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bits floatEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bits floatEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#structEncoder",
              "documentation": {
                "identifier": "structEncoder",
                "newPage": false,
                "searchKey": "json.structEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type structEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structEncoder struct {\n\tfields structFields\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#structEncoder.encode",
                    "documentation": {
                      "identifier": "structEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.structEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (se structEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (se structEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#structFields",
              "documentation": {
                "identifier": "structFields",
                "newPage": false,
                "searchKey": "json.structFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type structFields struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype structFields struct {\n\tlist      []field\n\tnameIndex map[string]int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#typeFields",
                    "documentation": {
                      "identifier": "typeFields",
                      "newPage": false,
                      "searchKey": "json.typeFields",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func typeFields(t reflect.Type) structFields"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc typeFields(t reflect.Type) structFields\n```\n\ntypeFields returns a list of fields that JSON should recognize for the given type. The algorithm is breadth-first search over the set of structs to include - the top struct and then any reachable anonymous structs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#cachedTypeFields",
                    "documentation": {
                      "identifier": "cachedTypeFields",
                      "newPage": false,
                      "searchKey": "json.cachedTypeFields",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func cachedTypeFields(t reflect.Type) structFields"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc cachedTypeFields(t reflect.Type) structFields\n```\n\ncachedTypeFields is like typeFields but uses a cache to avoid repeated work. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#mapEncoder",
              "documentation": {
                "identifier": "mapEncoder",
                "newPage": false,
                "searchKey": "json.mapEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapEncoder struct {\n\telemEnc encoderFunc\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#mapEncoder.encode",
                    "documentation": {
                      "identifier": "mapEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.mapEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (me mapEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (me mapEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#sliceEncoder",
              "documentation": {
                "identifier": "sliceEncoder",
                "newPage": false,
                "searchKey": "json.sliceEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sliceEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sliceEncoder struct {\n\tarrayEnc encoderFunc\n}\n```\n\nsliceEncoder just wraps an arrayEncoder, checking to make sure the value isn't nil. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#sliceEncoder.encode",
                    "documentation": {
                      "identifier": "sliceEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.sliceEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (se sliceEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (se sliceEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#arrayEncoder",
              "documentation": {
                "identifier": "arrayEncoder",
                "newPage": false,
                "searchKey": "json.arrayEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type arrayEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype arrayEncoder struct {\n\telemEnc encoderFunc\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#arrayEncoder.encode",
                    "documentation": {
                      "identifier": "arrayEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.arrayEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ae arrayEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ae arrayEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ptrEncoder",
              "documentation": {
                "identifier": "ptrEncoder",
                "newPage": false,
                "searchKey": "json.ptrEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ptrEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ptrEncoder struct {\n\telemEnc encoderFunc\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#ptrEncoder.encode",
                    "documentation": {
                      "identifier": "ptrEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.ptrEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pe ptrEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pe ptrEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#condAddrEncoder",
              "documentation": {
                "identifier": "condAddrEncoder",
                "newPage": false,
                "searchKey": "json.condAddrEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type condAddrEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype condAddrEncoder struct {\n\tcanAddrEnc, elseEnc encoderFunc\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#condAddrEncoder.encode",
                    "documentation": {
                      "identifier": "condAddrEncoder.encode",
                      "newPage": false,
                      "searchKey": "json.condAddrEncoder.encode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ce condAddrEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ce condAddrEncoder) encode(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#reflectWithString",
              "documentation": {
                "identifier": "reflectWithString",
                "newPage": false,
                "searchKey": "json.reflectWithString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type reflectWithString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype reflectWithString struct {\n\tk  reflect.Value\n\tv  reflect.Value\n\tks string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#reflectWithString.resolve",
                    "documentation": {
                      "identifier": "reflectWithString.resolve",
                      "newPage": false,
                      "searchKey": "json.reflectWithString.resolve",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *reflectWithString) resolve() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *reflectWithString) resolve() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#field",
              "documentation": {
                "identifier": "field",
                "newPage": false,
                "searchKey": "json.field",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type field struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype field struct {\n\tname      string\n\tnameBytes []byte                 // []byte(name)\n\tequalFold func(s, t []byte) bool // bytes.EqualFold or equivalent\n\n\tnameNonEsc  string // `\"` + name + `\":`\n\tnameEscHTML string // `\"` + HTMLEscape(name) + `\":`\n\n\ttag       bool\n\tindex     []int\n\ttyp       reflect.Type\n\tomitEmpty bool\n\tquoted    bool\n\n\tencoder encoderFunc\n}\n```\n\nA field represents a single field found in a struct. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#dominantField",
                    "documentation": {
                      "identifier": "dominantField",
                      "newPage": false,
                      "searchKey": "json.dominantField",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func dominantField(fields []field) (field, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc dominantField(fields []field) (field, bool)\n```\n\ndominantField looks through the fields, all of which are known to have the same name, to find the single field that dominates the others using Go's embedding rules, modified by the presence of JSON tags. If there are multiple top-level fields, the boolean will be false: This condition is an error in Go and we skip all the fields. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#byIndex",
              "documentation": {
                "identifier": "byIndex",
                "newPage": false,
                "searchKey": "json.byIndex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byIndex []json.field"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byIndex []field\n```\n\nbyIndex sorts field by index sequence. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#byIndex.Len",
                    "documentation": {
                      "identifier": "byIndex.Len",
                      "newPage": false,
                      "searchKey": "json.byIndex.Len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x byIndex) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x byIndex) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#byIndex.Swap",
                    "documentation": {
                      "identifier": "byIndex.Swap",
                      "newPage": false,
                      "searchKey": "json.byIndex.Swap",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x byIndex) Swap(i, j int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x byIndex) Swap(i, j int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#byIndex.Less",
                    "documentation": {
                      "identifier": "byIndex.Less",
                      "newPage": false,
                      "searchKey": "json.byIndex.Less",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x byIndex) Less(i, j int) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x byIndex) Less(i, j int) bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#SyntaxError",
              "documentation": {
                "identifier": "SyntaxError",
                "newPage": false,
                "searchKey": "json.SyntaxError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyntaxError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyntaxError struct {\n\tmsg    string // description of error\n\tOffset int64  // error occurred after reading Offset bytes\n}\n```\n\nA SyntaxError is a description of a JSON syntax error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#SyntaxError.Error",
                    "documentation": {
                      "identifier": "SyntaxError.Error",
                      "newPage": false,
                      "searchKey": "json.SyntaxError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *SyntaxError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *SyntaxError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#scanner",
              "documentation": {
                "identifier": "scanner",
                "newPage": false,
                "searchKey": "json.scanner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type scanner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype scanner struct {\n\t// The step is a func to be called to execute the next transition.\n\t// Also tried using an integer constant and a single func\n\t// with a switch, but using the func directly was 10% faster\n\t// on a 64-bit Mac Mini, and it's nicer to read.\n\tstep func(*scanner, byte) int\n\n\t// Reached end of top-level value.\n\tendTop bool\n\n\t// Stack of what we're in the middle of - array values, object keys, object values.\n\tparseState []int\n\n\t// Error that happened, if any.\n\terr error\n\n\t// total bytes consumed, updated by decoder.Decode (and deliberately\n\t// not set to zero by scan.reset)\n\tbytes int64\n}\n```\n\nA scanner is a JSON scanning state machine. Callers call scan.reset and then pass bytes in one at a time by calling scan.step(&scan, c) for each byte. The return value, referred to as an opcode, tells the caller about significant parsing events like beginning and ending literals, objects, and arrays, so that the caller can follow along if it wishes. The return value scanEnd indicates that a single top-level JSON value has been completed, *before* the byte that just got passed in.  (The indication must be delayed in order to recognize the end of numbers: is 123 a whole value or the beginning of 12345e+6?). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#newScanner",
                    "documentation": {
                      "identifier": "newScanner",
                      "newPage": false,
                      "searchKey": "json.newScanner",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newScanner() *scanner"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newScanner() *scanner\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#scanner.reset",
                    "documentation": {
                      "identifier": "scanner.reset",
                      "newPage": false,
                      "searchKey": "json.scanner.reset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *scanner) reset()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *scanner) reset()\n```\n\nreset prepares the scanner for use. It must be called before calling s.step. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#scanner.eof",
                    "documentation": {
                      "identifier": "scanner.eof",
                      "newPage": false,
                      "searchKey": "json.scanner.eof",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *scanner) eof() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *scanner) eof() int\n```\n\neof tells the scanner that the end of input has been reached. It returns a scan status just as s.step does. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#scanner.pushParseState",
                    "documentation": {
                      "identifier": "scanner.pushParseState",
                      "newPage": false,
                      "searchKey": "json.scanner.pushParseState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *scanner) pushParseState(c byte, newParseState int, successState int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *scanner) pushParseState(c byte, newParseState int, successState int) int\n```\n\npushParseState pushes a new parse state p onto the parse stack. an error state is returned if maxNestingDepth was exceeded, otherwise successState is returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#scanner.popParseState",
                    "documentation": {
                      "identifier": "scanner.popParseState",
                      "newPage": false,
                      "searchKey": "json.scanner.popParseState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *scanner) popParseState()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *scanner) popParseState()\n```\n\npopParseState pops a parse state (already obtained) off the stack and updates s.step accordingly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#scanner.error",
                    "documentation": {
                      "identifier": "scanner.error",
                      "newPage": false,
                      "searchKey": "json.scanner.error",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *scanner) error(c byte, context string) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *scanner) error(c byte, context string) int\n```\n\nerror records an error and switches to the error state. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Decoder",
              "documentation": {
                "identifier": "Decoder",
                "newPage": false,
                "searchKey": "json.Decoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Decoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Decoder struct {\n\tr       io.Reader\n\tbuf     []byte\n\td       decodeState\n\tscanp   int   // start of unread data in buf\n\tscanned int64 // amount of data already scanned\n\tscan    scanner\n\terr     error\n\n\ttokenState int\n\ttokenStack []int\n}\n```\n\nA Decoder reads and decodes JSON values from an input stream. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#NewDecoder",
                    "documentation": {
                      "identifier": "NewDecoder",
                      "newPage": false,
                      "searchKey": "json.NewDecoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDecoder(r io.Reader) *Decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDecoder(r io.Reader) *Decoder\n```\n\nNewDecoder returns a new decoder that reads from r. \n\nThe decoder introduces its own buffering and may read data from r beyond the JSON values requested. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.UseNumber",
                    "documentation": {
                      "identifier": "Decoder.UseNumber",
                      "newPage": false,
                      "searchKey": "json.Decoder.UseNumber",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) UseNumber()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) UseNumber()\n```\n\nUseNumber causes the Decoder to unmarshal a number into an interface{} as a Number instead of as a float64. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.DisallowUnknownFields",
                    "documentation": {
                      "identifier": "Decoder.DisallowUnknownFields",
                      "newPage": false,
                      "searchKey": "json.Decoder.DisallowUnknownFields",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) DisallowUnknownFields()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) DisallowUnknownFields()\n```\n\nDisallowUnknownFields causes the Decoder to return an error when the destination is a struct and the input contains object keys which do not match any non-ignored, exported fields in the destination. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.Decode",
                    "documentation": {
                      "identifier": "Decoder.Decode",
                      "newPage": false,
                      "searchKey": "json.Decoder.Decode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) Decode(v interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) Decode(v interface{}) error\n```\n\nDecode reads the next JSON-encoded value from its input and stores it in the value pointed to by v. \n\nSee the documentation for Unmarshal for details about the conversion of JSON into a Go value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.Buffered",
                    "documentation": {
                      "identifier": "Decoder.Buffered",
                      "newPage": false,
                      "searchKey": "json.Decoder.Buffered",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) Buffered() io.Reader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) Buffered() io.Reader\n```\n\nBuffered returns a reader of the data remaining in the Decoder's buffer. The reader is valid until the next call to Decode. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.readValue",
                    "documentation": {
                      "identifier": "Decoder.readValue",
                      "newPage": false,
                      "searchKey": "json.Decoder.readValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) readValue() (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) readValue() (int, error)\n```\n\nreadValue reads a JSON value into dec.buf. It returns the length of the encoding. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.refill",
                    "documentation": {
                      "identifier": "Decoder.refill",
                      "newPage": false,
                      "searchKey": "json.Decoder.refill",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) refill() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) refill() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.tokenPrepareForDecode",
                    "documentation": {
                      "identifier": "Decoder.tokenPrepareForDecode",
                      "newPage": false,
                      "searchKey": "json.Decoder.tokenPrepareForDecode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) tokenPrepareForDecode() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) tokenPrepareForDecode() error\n```\n\nadvance tokenstate from a separator state to a value state \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.tokenValueAllowed",
                    "documentation": {
                      "identifier": "Decoder.tokenValueAllowed",
                      "newPage": false,
                      "searchKey": "json.Decoder.tokenValueAllowed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) tokenValueAllowed() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) tokenValueAllowed() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.tokenValueEnd",
                    "documentation": {
                      "identifier": "Decoder.tokenValueEnd",
                      "newPage": false,
                      "searchKey": "json.Decoder.tokenValueEnd",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) tokenValueEnd()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) tokenValueEnd()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.Token",
                    "documentation": {
                      "identifier": "Decoder.Token",
                      "newPage": false,
                      "searchKey": "json.Decoder.Token",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) Token() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) Token() (Token, error)\n```\n\nToken returns the next JSON token in the input stream. At the end of the input stream, Token returns nil, io.EOF. \n\nToken guarantees that the delimiters [ ] { } it returns are properly nested and matched: if Token encounters an unexpected delimiter in the input, it will return an error. \n\nThe input stream consists of basic JSON values—bool, string, number, and null—along with delimiters [ ] { } of type Delim to mark the start and end of arrays and objects. Commas and colons are elided. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.tokenError",
                    "documentation": {
                      "identifier": "Decoder.tokenError",
                      "newPage": false,
                      "searchKey": "json.Decoder.tokenError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) tokenError(c byte) (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) tokenError(c byte) (Token, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.More",
                    "documentation": {
                      "identifier": "Decoder.More",
                      "newPage": false,
                      "searchKey": "json.Decoder.More",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) More() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) More() bool\n```\n\nMore reports whether there is another element in the current array or object being parsed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.peek",
                    "documentation": {
                      "identifier": "Decoder.peek",
                      "newPage": false,
                      "searchKey": "json.Decoder.peek",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) peek() (byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) peek() (byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Decoder.InputOffset",
                    "documentation": {
                      "identifier": "Decoder.InputOffset",
                      "newPage": false,
                      "searchKey": "json.Decoder.InputOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dec *Decoder) InputOffset() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dec *Decoder) InputOffset() int64\n```\n\nInputOffset returns the input stream byte offset of the current decoder position. The offset gives the location of the end of the most recently returned token and the beginning of the next token. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Encoder",
              "documentation": {
                "identifier": "Encoder",
                "newPage": false,
                "searchKey": "json.Encoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Encoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Encoder struct {\n\tw          io.Writer\n\terr        error\n\tescapeHTML bool\n\n\tindentBuf    *bytes.Buffer\n\tindentPrefix string\n\tindentValue  string\n}\n```\n\nAn Encoder writes JSON values to an output stream. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#NewEncoder",
                    "documentation": {
                      "identifier": "NewEncoder",
                      "newPage": false,
                      "searchKey": "json.NewEncoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewEncoder(w io.Writer) *Encoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewEncoder(w io.Writer) *Encoder\n```\n\nNewEncoder returns a new encoder that writes to w. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Encoder.Encode",
                    "documentation": {
                      "identifier": "Encoder.Encode",
                      "newPage": false,
                      "searchKey": "json.Encoder.Encode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) Encode(v interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) Encode(v interface{}) error\n```\n\nEncode writes the JSON encoding of v to the stream, followed by a newline character. \n\nSee the documentation for Marshal for details about the conversion of Go values to JSON. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Encoder.SetIndent",
                    "documentation": {
                      "identifier": "Encoder.SetIndent",
                      "newPage": false,
                      "searchKey": "json.Encoder.SetIndent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) SetIndent(prefix, indent string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) SetIndent(prefix, indent string)\n```\n\nSetIndent instructs the encoder to format each subsequent encoded value as if indented by the package-level function Indent(dst, src, prefix, indent). Calling SetIndent(\"\", \"\") disables indentation. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Encoder.SetEscapeHTML",
                    "documentation": {
                      "identifier": "Encoder.SetEscapeHTML",
                      "newPage": false,
                      "searchKey": "json.Encoder.SetEscapeHTML",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) SetEscapeHTML(on bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) SetEscapeHTML(on bool)\n```\n\nSetEscapeHTML specifies whether problematic HTML characters should be escaped inside JSON quoted strings. The default behavior is to escape &, <, and > to \\u0026, \\u003c, and \\u003e to avoid certain safety problems that can arise when embedding JSON in HTML. \n\nIn non-HTML settings where the escaping interferes with the readability of the output, SetEscapeHTML(false) disables this behavior. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#RawMessage",
              "documentation": {
                "identifier": "RawMessage",
                "newPage": false,
                "searchKey": "json.RawMessage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawMessage []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawMessage []byte\n```\n\nRawMessage is a raw encoded JSON value. It implements Marshaler and Unmarshaler and can be used to delay JSON decoding or precompute a JSON encoding. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#RawMessage.MarshalJSON",
                    "documentation": {
                      "identifier": "RawMessage.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.RawMessage.MarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m RawMessage) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m RawMessage) MarshalJSON() ([]byte, error)\n```\n\nMarshalJSON returns m as the JSON encoding of m. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#RawMessage.UnmarshalJSON",
                    "documentation": {
                      "identifier": "RawMessage.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.RawMessage.UnmarshalJSON",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *RawMessage) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *RawMessage) UnmarshalJSON(data []byte) error\n```\n\nUnmarshalJSON sets *m to a copy of data. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Token",
              "documentation": {
                "identifier": "Token",
                "newPage": false,
                "searchKey": "json.Token",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Token interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Token interface{}\n```\n\nA Token holds a value of one of these types: \n\n```\nDelim, for the four JSON delimiters [ ] { }\nbool, for JSON booleans\nfloat64, for JSON numbers\nNumber, for JSON numbers\nstring, for JSON string literals\nnil, for JSON null\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Delim",
              "documentation": {
                "identifier": "Delim",
                "newPage": false,
                "searchKey": "json.Delim",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Delim rune"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Delim rune\n```\n\nA Delim is a JSON array or object delimiter, one of [ ] { or }. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#Delim.String",
                    "documentation": {
                      "identifier": "Delim.String",
                      "newPage": false,
                      "searchKey": "json.Delim.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d Delim) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d Delim) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tagOptions",
              "documentation": {
                "identifier": "tagOptions",
                "newPage": false,
                "searchKey": "json.tagOptions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tagOptions string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tagOptions string\n```\n\ntagOptions is the string following a comma in a struct field's \"json\" tag, or the empty string. It does not include the leading comma. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#parseTag",
                    "documentation": {
                      "identifier": "parseTag",
                      "newPage": false,
                      "searchKey": "json.parseTag",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseTag(tag string) (string, tagOptions)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseTag(tag string) (string, tagOptions)\n```\n\nparseTag splits a struct field's json tag into its name and comma-separated options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#tagOptions.Contains",
                    "documentation": {
                      "identifier": "tagOptions.Contains",
                      "newPage": false,
                      "searchKey": "json.tagOptions.Contains",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (o tagOptions) Contains(optionName string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (o tagOptions) Contains(optionName string) bool\n```\n\nContains reports whether a comma-separated list of options contains a particular substr flag. substr must be surrounded by a string boundary or commas. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#codeResponse",
              "documentation": {
                "identifier": "codeResponse",
                "newPage": false,
                "searchKey": "json.codeResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type codeResponse struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype codeResponse struct {\n\tTree     *codeNode `json:\"tree\"`\n\tUsername string    `json:\"username\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#codeNode",
              "documentation": {
                "identifier": "codeNode",
                "newPage": false,
                "searchKey": "json.codeNode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type codeNode struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype codeNode struct {\n\tName     string      `json:\"name\"`\n\tKids     []*codeNode `json:\"kids\"`\n\tCLWeight float64     `json:\"cl_weight\"`\n\tTouches  int         `json:\"touches\"`\n\tMinT     int64       `json:\"min_t\"`\n\tMaxT     int64       `json:\"max_t\"`\n\tMeanT    int64       `json:\"mean_t\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#T",
              "documentation": {
                "identifier": "T",
                "newPage": false,
                "searchKey": "json.T",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T struct {\n\tX string\n\tY int\n\tZ int `json:\"-\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#U",
              "documentation": {
                "identifier": "U",
                "newPage": false,
                "searchKey": "json.U",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type U struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype U struct {\n\tAlphabet string `json:\"alpha\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#V",
              "documentation": {
                "identifier": "V",
                "newPage": false,
                "searchKey": "json.V",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type V struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype V struct {\n\tF1 interface{}\n\tF2 int32\n\tF3 Number\n\tF4 *VOuter\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#VOuter",
              "documentation": {
                "identifier": "VOuter",
                "newPage": false,
                "searchKey": "json.VOuter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type VOuter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VOuter struct {\n\tV V\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#W",
              "documentation": {
                "identifier": "W",
                "newPage": false,
                "searchKey": "json.W",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type W struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype W struct {\n\tS SS\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#P",
              "documentation": {
                "identifier": "P",
                "newPage": false,
                "searchKey": "json.P",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type P struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype P struct {\n\tPP PP\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#PP",
              "documentation": {
                "identifier": "PP",
                "newPage": false,
                "searchKey": "json.PP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PP struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PP struct {\n\tT  T\n\tTs []T\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#SS",
              "documentation": {
                "identifier": "SS",
                "newPage": false,
                "searchKey": "json.SS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SS string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SS string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#SS.UnmarshalJSON",
                    "documentation": {
                      "identifier": "SS.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.SS.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*SS) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*SS) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tx",
              "documentation": {
                "identifier": "tx",
                "newPage": false,
                "searchKey": "json.tx",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tx struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tx struct {\n\tx int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#u8",
              "documentation": {
                "identifier": "u8",
                "newPage": false,
                "searchKey": "json.u8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type u8 uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype u8 uint8\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unmarshaler",
              "documentation": {
                "identifier": "unmarshaler",
                "newPage": false,
                "searchKey": "json.unmarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unmarshaler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unmarshaler struct {\n\tT bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#unmarshaler.UnmarshalJSON",
                    "documentation": {
                      "identifier": "unmarshaler.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.unmarshaler.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *unmarshaler) UnmarshalJSON(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *unmarshaler) UnmarshalJSON(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ustruct",
              "documentation": {
                "identifier": "ustruct",
                "newPage": false,
                "searchKey": "json.ustruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ustruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ustruct struct {\n\tM unmarshaler\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unmarshalerText",
              "documentation": {
                "identifier": "unmarshalerText",
                "newPage": false,
                "searchKey": "json.unmarshalerText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unmarshalerText struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unmarshalerText struct {\n\tA, B string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#unmarshalerText.MarshalText",
                    "documentation": {
                      "identifier": "unmarshalerText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.unmarshalerText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u unmarshalerText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u unmarshalerText) MarshalText() ([]byte, error)\n```\n\nneeded for re-marshaling tests \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#unmarshalerText.UnmarshalText",
                    "documentation": {
                      "identifier": "unmarshalerText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.unmarshalerText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *unmarshalerText) UnmarshalText(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *unmarshalerText) UnmarshalText(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ustructText",
              "documentation": {
                "identifier": "ustructText",
                "newPage": false,
                "searchKey": "json.ustructText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ustructText struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ustructText struct {\n\tM unmarshalerText\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#u8marshal",
              "documentation": {
                "identifier": "u8marshal",
                "newPage": false,
                "searchKey": "json.u8marshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type u8marshal uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype u8marshal uint8\n```\n\nu8marshal is an integer type that can marshal/unmarshal itself. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#u8marshal.MarshalText",
                    "documentation": {
                      "identifier": "u8marshal.MarshalText",
                      "newPage": false,
                      "searchKey": "json.u8marshal.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u8 u8marshal) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u8 u8marshal) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#u8marshal.UnmarshalText",
                    "documentation": {
                      "identifier": "u8marshal.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.u8marshal.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u8 *u8marshal) UnmarshalText(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u8 *u8marshal) UnmarshalText(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Point",
              "documentation": {
                "identifier": "Point",
                "newPage": false,
                "searchKey": "json.Point",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Point struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Point struct {\n\tZ int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Top",
              "documentation": {
                "identifier": "Top",
                "newPage": false,
                "searchKey": "json.Top",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Top struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Top struct {\n\tLevel0 int\n\tEmbed0\n\t*Embed0a\n\t*Embed0b `json:\"e,omitempty\"` // treated as named\n\tEmbed0c  `json:\"-\"`           // ignored\n\tLoop\n\tEmbed0p // has Point with X, Y, used\n\tEmbed0q // has Point with Z, used\n\tembed   // contains exported field\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Embed0",
              "documentation": {
                "identifier": "Embed0",
                "newPage": false,
                "searchKey": "json.Embed0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embed0 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embed0 struct {\n\tLevel1a int // overridden by Embed0a's Level1a with json tag\n\tLevel1b int // used because Embed0a's Level1b is renamed\n\tLevel1c int // used because Embed0a's Level1c is ignored\n\tLevel1d int // annihilated by Embed0a's Level1d\n\tLevel1e int `json:\"x\"` // annihilated by Embed0a.Level1e\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Embed0a",
              "documentation": {
                "identifier": "Embed0a",
                "newPage": false,
                "searchKey": "json.Embed0a",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embed0a struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embed0a struct {\n\tLevel1a int `json:\"Level1a,omitempty\"`\n\tLevel1b int `json:\"LEVEL1B,omitempty\"`\n\tLevel1c int `json:\"-\"`\n\tLevel1d int // annihilated by Embed0's Level1d\n\tLevel1f int `json:\"x\"` // annihilated by Embed0's Level1e\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Embed0b",
              "documentation": {
                "identifier": "Embed0b",
                "newPage": false,
                "searchKey": "json.Embed0b",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embed0b json.Embed0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embed0b Embed0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Embed0c",
              "documentation": {
                "identifier": "Embed0c",
                "newPage": false,
                "searchKey": "json.Embed0c",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embed0c json.Embed0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embed0c Embed0\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Embed0p",
              "documentation": {
                "identifier": "Embed0p",
                "newPage": false,
                "searchKey": "json.Embed0p",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embed0p struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embed0p struct {\n\timage.Point\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Embed0q",
              "documentation": {
                "identifier": "Embed0q",
                "newPage": false,
                "searchKey": "json.Embed0q",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Embed0q struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Embed0q struct {\n\tPoint\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#embed",
              "documentation": {
                "identifier": "embed",
                "newPage": false,
                "searchKey": "json.embed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type embed struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype embed struct {\n\tQ int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Loop",
              "documentation": {
                "identifier": "Loop",
                "newPage": false,
                "searchKey": "json.Loop",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Loop struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Loop struct {\n\tLoop1 int `json:\",omitempty\"`\n\tLoop2 int `json:\",omitempty\"`\n\t*Loop\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S5",
              "documentation": {
                "identifier": "S5",
                "newPage": false,
                "searchKey": "json.S5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S5 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S5 struct {\n\tS6\n\tS7\n\tS8\n}\n```\n\nFrom reflect test: The X in S6 and S7 annihilate, but they also block the X in S8.S9. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S6",
              "documentation": {
                "identifier": "S6",
                "newPage": false,
                "searchKey": "json.S6",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S6 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S6 struct {\n\tX int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S7",
              "documentation": {
                "identifier": "S7",
                "newPage": false,
                "searchKey": "json.S7",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S7 json.S6"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S7 S6\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S8",
              "documentation": {
                "identifier": "S8",
                "newPage": false,
                "searchKey": "json.S8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S8 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S8 struct {\n\tS9\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S9",
              "documentation": {
                "identifier": "S9",
                "newPage": false,
                "searchKey": "json.S9",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S9 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S9 struct {\n\tX int\n\tY int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S10",
              "documentation": {
                "identifier": "S10",
                "newPage": false,
                "searchKey": "json.S10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S10 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S10 struct {\n\tS11\n\tS12\n\tS13\n}\n```\n\nFrom reflect test: The X in S11.S6 and S12.S6 annihilate, but they also block the X in S13.S8.S9. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S11",
              "documentation": {
                "identifier": "S11",
                "newPage": false,
                "searchKey": "json.S11",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S11 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S11 struct {\n\tS6\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S12",
              "documentation": {
                "identifier": "S12",
                "newPage": false,
                "searchKey": "json.S12",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S12 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S12 struct {\n\tS6\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#S13",
              "documentation": {
                "identifier": "S13",
                "newPage": false,
                "searchKey": "json.S13",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type S13 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype S13 struct {\n\tS8\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Ambig",
              "documentation": {
                "identifier": "Ambig",
                "newPage": false,
                "searchKey": "json.Ambig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ambig struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ambig struct {\n\t// Given \"hello\", the first match should win.\n\tFirst  int `json:\"HELLO\"`\n\tSecond int `json:\"Hello\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#XYZ",
              "documentation": {
                "identifier": "XYZ",
                "newPage": false,
                "searchKey": "json.XYZ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type XYZ struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype XYZ struct {\n\tX interface{}\n\tY interface{}\n\tZ interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unexportedWithMethods",
              "documentation": {
                "identifier": "unexportedWithMethods",
                "newPage": false,
                "searchKey": "json.unexportedWithMethods",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unexportedWithMethods struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unexportedWithMethods struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#unexportedWithMethods.F",
                    "documentation": {
                      "identifier": "unexportedWithMethods.F",
                      "newPage": false,
                      "searchKey": "json.unexportedWithMethods.F",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (unexportedWithMethods) F()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (unexportedWithMethods) F()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#byteWithMarshalJSON",
              "documentation": {
                "identifier": "byteWithMarshalJSON",
                "newPage": false,
                "searchKey": "json.byteWithMarshalJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteWithMarshalJSON byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteWithMarshalJSON byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithMarshalJSON.MarshalJSON",
                    "documentation": {
                      "identifier": "byteWithMarshalJSON.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.byteWithMarshalJSON.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b byteWithMarshalJSON) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b byteWithMarshalJSON) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithMarshalJSON.UnmarshalJSON",
                    "documentation": {
                      "identifier": "byteWithMarshalJSON.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.byteWithMarshalJSON.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteWithMarshalJSON) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteWithMarshalJSON) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#byteWithPtrMarshalJSON",
              "documentation": {
                "identifier": "byteWithPtrMarshalJSON",
                "newPage": false,
                "searchKey": "json.byteWithPtrMarshalJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteWithPtrMarshalJSON byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteWithPtrMarshalJSON byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithPtrMarshalJSON.MarshalJSON",
                    "documentation": {
                      "identifier": "byteWithPtrMarshalJSON.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.byteWithPtrMarshalJSON.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteWithPtrMarshalJSON) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteWithPtrMarshalJSON) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithPtrMarshalJSON.UnmarshalJSON",
                    "documentation": {
                      "identifier": "byteWithPtrMarshalJSON.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.byteWithPtrMarshalJSON.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteWithPtrMarshalJSON) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteWithPtrMarshalJSON) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#byteWithMarshalText",
              "documentation": {
                "identifier": "byteWithMarshalText",
                "newPage": false,
                "searchKey": "json.byteWithMarshalText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteWithMarshalText byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteWithMarshalText byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithMarshalText.MarshalText",
                    "documentation": {
                      "identifier": "byteWithMarshalText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.byteWithMarshalText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b byteWithMarshalText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b byteWithMarshalText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithMarshalText.UnmarshalText",
                    "documentation": {
                      "identifier": "byteWithMarshalText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.byteWithMarshalText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteWithMarshalText) UnmarshalText(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteWithMarshalText) UnmarshalText(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#byteWithPtrMarshalText",
              "documentation": {
                "identifier": "byteWithPtrMarshalText",
                "newPage": false,
                "searchKey": "json.byteWithPtrMarshalText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteWithPtrMarshalText byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteWithPtrMarshalText byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithPtrMarshalText.MarshalText",
                    "documentation": {
                      "identifier": "byteWithPtrMarshalText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.byteWithPtrMarshalText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteWithPtrMarshalText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteWithPtrMarshalText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#byteWithPtrMarshalText.UnmarshalText",
                    "documentation": {
                      "identifier": "byteWithPtrMarshalText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.byteWithPtrMarshalText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteWithPtrMarshalText) UnmarshalText(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteWithPtrMarshalText) UnmarshalText(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intWithMarshalJSON",
              "documentation": {
                "identifier": "intWithMarshalJSON",
                "newPage": false,
                "searchKey": "json.intWithMarshalJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type intWithMarshalJSON int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intWithMarshalJSON int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#intWithMarshalJSON.MarshalJSON",
                    "documentation": {
                      "identifier": "intWithMarshalJSON.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.intWithMarshalJSON.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b intWithMarshalJSON) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b intWithMarshalJSON) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#intWithMarshalJSON.UnmarshalJSON",
                    "documentation": {
                      "identifier": "intWithMarshalJSON.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.intWithMarshalJSON.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *intWithMarshalJSON) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *intWithMarshalJSON) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intWithPtrMarshalJSON",
              "documentation": {
                "identifier": "intWithPtrMarshalJSON",
                "newPage": false,
                "searchKey": "json.intWithPtrMarshalJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type intWithPtrMarshalJSON int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intWithPtrMarshalJSON int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#intWithPtrMarshalJSON.MarshalJSON",
                    "documentation": {
                      "identifier": "intWithPtrMarshalJSON.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.intWithPtrMarshalJSON.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *intWithPtrMarshalJSON) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *intWithPtrMarshalJSON) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#intWithPtrMarshalJSON.UnmarshalJSON",
                    "documentation": {
                      "identifier": "intWithPtrMarshalJSON.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.intWithPtrMarshalJSON.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *intWithPtrMarshalJSON) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *intWithPtrMarshalJSON) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intWithMarshalText",
              "documentation": {
                "identifier": "intWithMarshalText",
                "newPage": false,
                "searchKey": "json.intWithMarshalText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type intWithMarshalText int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intWithMarshalText int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#intWithMarshalText.MarshalText",
                    "documentation": {
                      "identifier": "intWithMarshalText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.intWithMarshalText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b intWithMarshalText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b intWithMarshalText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#intWithMarshalText.UnmarshalText",
                    "documentation": {
                      "identifier": "intWithMarshalText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.intWithMarshalText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *intWithMarshalText) UnmarshalText(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *intWithMarshalText) UnmarshalText(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intWithPtrMarshalText",
              "documentation": {
                "identifier": "intWithPtrMarshalText",
                "newPage": false,
                "searchKey": "json.intWithPtrMarshalText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type intWithPtrMarshalText int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intWithPtrMarshalText int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#intWithPtrMarshalText.MarshalText",
                    "documentation": {
                      "identifier": "intWithPtrMarshalText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.intWithPtrMarshalText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *intWithPtrMarshalText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *intWithPtrMarshalText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#intWithPtrMarshalText.UnmarshalText",
                    "documentation": {
                      "identifier": "intWithPtrMarshalText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.intWithPtrMarshalText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *intWithPtrMarshalText) UnmarshalText(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *intWithPtrMarshalText) UnmarshalText(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#mapStringToStringData",
              "documentation": {
                "identifier": "mapStringToStringData",
                "newPage": false,
                "searchKey": "json.mapStringToStringData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapStringToStringData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapStringToStringData struct {\n\tData map[string]string `json:\"data\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unmarshalTest",
              "documentation": {
                "identifier": "unmarshalTest",
                "newPage": false,
                "searchKey": "json.unmarshalTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unmarshalTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unmarshalTest struct {\n\tin                    string\n\tptr                   interface{} // new(type)\n\tout                   interface{}\n\terr                   error\n\tuseNumber             bool\n\tgolden                bool\n\tdisallowUnknownFields bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#B",
              "documentation": {
                "identifier": "B",
                "newPage": false,
                "searchKey": "json.B",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type B struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype B struct {\n\tB bool `json:\",string\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#DoublePtr",
              "documentation": {
                "identifier": "DoublePtr",
                "newPage": false,
                "searchKey": "json.DoublePtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DoublePtr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DoublePtr struct {\n\tI **int\n\tJ **int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Xint",
              "documentation": {
                "identifier": "Xint",
                "newPage": false,
                "searchKey": "json.Xint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Xint struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Xint struct {\n\tX int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#WrongString",
              "documentation": {
                "identifier": "WrongString",
                "newPage": false,
                "searchKey": "json.WrongString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type WrongString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WrongString struct {\n\tMessage string `json:\"result,string\"`\n}\n```\n\nWrongString is a struct that's misusing the ,string modifier. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#wrongStringTest",
              "documentation": {
                "identifier": "wrongStringTest",
                "newPage": false,
                "searchKey": "json.wrongStringTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type wrongStringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype wrongStringTest struct {\n\tin, err string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#All",
              "documentation": {
                "identifier": "All",
                "newPage": false,
                "searchKey": "json.All",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type All struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype All struct {\n\tBool    bool\n\tInt     int\n\tInt8    int8\n\tInt16   int16\n\tInt32   int32\n\tInt64   int64\n\tUint    uint\n\tUint8   uint8\n\tUint16  uint16\n\tUint32  uint32\n\tUint64  uint64\n\tUintptr uintptr\n\tFloat32 float32\n\tFloat64 float64\n\n\tFoo  string `json:\"bar\"`\n\tFoo2 string `json:\"bar2,dummyopt\"`\n\n\tIntStr     int64   `json:\",string\"`\n\tUintptrStr uintptr `json:\",string\"`\n\n\tPBool    *bool\n\tPInt     *int\n\tPInt8    *int8\n\tPInt16   *int16\n\tPInt32   *int32\n\tPInt64   *int64\n\tPUint    *uint\n\tPUint8   *uint8\n\tPUint16  *uint16\n\tPUint32  *uint32\n\tPUint64  *uint64\n\tPUintptr *uintptr\n\tPFloat32 *float32\n\tPFloat64 *float64\n\n\tString  string\n\tPString *string\n\n\tMap   map[string]Small\n\tMapP  map[string]*Small\n\tPMap  *map[string]Small\n\tPMapP *map[string]*Small\n\n\tEmptyMap map[string]Small\n\tNilMap   map[string]Small\n\n\tSlice   []Small\n\tSliceP  []*Small\n\tPSlice  *[]Small\n\tPSliceP *[]*Small\n\n\tEmptySlice []Small\n\tNilSlice   []Small\n\n\tStringSlice []string\n\tByteSlice   []byte\n\n\tSmall   Small\n\tPSmall  *Small\n\tPPSmall **Small\n\n\tInterface  interface{}\n\tPInterface *interface{}\n\n\tunexported int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Small",
              "documentation": {
                "identifier": "Small",
                "newPage": false,
                "searchKey": "json.Small",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Small struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Small struct {\n\tTag string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#NullTest",
              "documentation": {
                "identifier": "NullTest",
                "newPage": false,
                "searchKey": "json.NullTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NullTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NullTest struct {\n\tBool      bool\n\tInt       int\n\tInt8      int8\n\tInt16     int16\n\tInt32     int32\n\tInt64     int64\n\tUint      uint\n\tUint8     uint8\n\tUint16    uint16\n\tUint32    uint32\n\tUint64    uint64\n\tFloat32   float32\n\tFloat64   float64\n\tString    string\n\tPBool     *bool\n\tMap       map[string]string\n\tSlice     []string\n\tInterface interface{}\n\n\tPRaw    *RawMessage\n\tPTime   *time.Time\n\tPBigInt *big.Int\n\tPText   *MustNotUnmarshalText\n\tPBuffer *bytes.Buffer // has methods, just not relevant ones\n\tPStruct *struct{}\n\n\tRaw    RawMessage\n\tTime   time.Time\n\tBigInt big.Int\n\tText   MustNotUnmarshalText\n\tBuffer bytes.Buffer\n\tStruct struct{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#MustNotUnmarshalJSON",
              "documentation": {
                "identifier": "MustNotUnmarshalJSON",
                "newPage": false,
                "searchKey": "json.MustNotUnmarshalJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MustNotUnmarshalJSON struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MustNotUnmarshalJSON struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#MustNotUnmarshalJSON.UnmarshalJSON",
                    "documentation": {
                      "identifier": "MustNotUnmarshalJSON.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.MustNotUnmarshalJSON.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x MustNotUnmarshalJSON) UnmarshalJSON(data []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x MustNotUnmarshalJSON) UnmarshalJSON(data []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#MustNotUnmarshalText",
              "documentation": {
                "identifier": "MustNotUnmarshalText",
                "newPage": false,
                "searchKey": "json.MustNotUnmarshalText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MustNotUnmarshalText struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MustNotUnmarshalText struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#MustNotUnmarshalText.UnmarshalText",
                    "documentation": {
                      "identifier": "MustNotUnmarshalText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.MustNotUnmarshalText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x MustNotUnmarshalText) UnmarshalText(text []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x MustNotUnmarshalText) UnmarshalText(text []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unexportedFields",
              "documentation": {
                "identifier": "unexportedFields",
                "newPage": false,
                "searchKey": "json.unexportedFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unexportedFields struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unexportedFields struct {\n\tName string\n\tm    map[string]interface{} `json:\"-\"`\n\tm2   map[string]interface{} `json:\"abcd\"`\n\n\ts []int `json:\"-\"`\n}\n```\n\nTest handling of unexported fields that should be ignored. Issue 4660 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Time3339",
              "documentation": {
                "identifier": "Time3339",
                "newPage": false,
                "searchKey": "json.Time3339",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Time3339 time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Time3339 time.Time\n```\n\nTime3339 is a time.Time which encodes to and from JSON as an RFC 3339 time in UTC. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#Time3339.UnmarshalJSON",
                    "documentation": {
                      "identifier": "Time3339.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.Time3339.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *Time3339) UnmarshalJSON(b []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *Time3339) UnmarshalJSON(b []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unmarshalPanic",
              "documentation": {
                "identifier": "unmarshalPanic",
                "newPage": false,
                "searchKey": "json.unmarshalPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unmarshalPanic struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unmarshalPanic struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#unmarshalPanic.UnmarshalJSON",
                    "documentation": {
                      "identifier": "unmarshalPanic.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.unmarshalPanic.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (unmarshalPanic) UnmarshalJSON([]byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (unmarshalPanic) UnmarshalJSON([]byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textUnmarshalerString",
              "documentation": {
                "identifier": "textUnmarshalerString",
                "newPage": false,
                "searchKey": "json.textUnmarshalerString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type textUnmarshalerString string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype textUnmarshalerString string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#textUnmarshalerString.UnmarshalText",
                    "documentation": {
                      "identifier": "textUnmarshalerString.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.textUnmarshalerString.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *textUnmarshalerString) UnmarshalText(text []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *textUnmarshalerString) UnmarshalText(text []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Optionals",
              "documentation": {
                "identifier": "Optionals",
                "newPage": false,
                "searchKey": "json.Optionals",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Optionals struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Optionals struct {\n\tSr string `json:\"sr\"`\n\tSo string `json:\"so,omitempty\"`\n\tSw string `json:\"-\"`\n\n\tIr int `json:\"omitempty\"` // actually named omitempty, not an option\n\tIo int `json:\"io,omitempty\"`\n\n\tSlr []string `json:\"slr,random\"`\n\tSlo []string `json:\"slo,omitempty\"`\n\n\tMr map[string]interface{} `json:\"mr\"`\n\tMo map[string]interface{} `json:\",omitempty\"`\n\n\tFr float64 `json:\"fr\"`\n\tFo float64 `json:\"fo,omitempty\"`\n\n\tBr bool `json:\"br\"`\n\tBo bool `json:\"bo,omitempty\"`\n\n\tUr uint `json:\"ur\"`\n\tUo uint `json:\"uo,omitempty\"`\n\n\tStr struct{} `json:\"str\"`\n\tSto struct{} `json:\"sto,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#StringTag",
              "documentation": {
                "identifier": "StringTag",
                "newPage": false,
                "searchKey": "json.StringTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type StringTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StringTag struct {\n\tBoolStr    bool    `json:\",string\"`\n\tIntStr     int64   `json:\",string\"`\n\tUintptrStr uintptr `json:\",string\"`\n\tStrStr     string  `json:\",string\"`\n\tNumberStr  Number  `json:\",string\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#renamedByte",
              "documentation": {
                "identifier": "renamedByte",
                "newPage": false,
                "searchKey": "json.renamedByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedByte byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedByte byte\n```\n\nbyte slices are special even if they're renamed types. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#renamedByteSlice",
              "documentation": {
                "identifier": "renamedByteSlice",
                "newPage": false,
                "searchKey": "json.renamedByteSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedByteSlice []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedByteSlice []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#renamedRenamedByteSlice",
              "documentation": {
                "identifier": "renamedRenamedByteSlice",
                "newPage": false,
                "searchKey": "json.renamedRenamedByteSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type renamedRenamedByteSlice []json.renamedByte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype renamedRenamedByteSlice []renamedByte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#SamePointerNoCycle",
              "documentation": {
                "identifier": "SamePointerNoCycle",
                "newPage": false,
                "searchKey": "json.SamePointerNoCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SamePointerNoCycle struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SamePointerNoCycle struct {\n\tPtr1, Ptr2 *SamePointerNoCycle\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#PointerCycle",
              "documentation": {
                "identifier": "PointerCycle",
                "newPage": false,
                "searchKey": "json.PointerCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PointerCycle struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PointerCycle struct {\n\tPtr *PointerCycle\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#PointerCycleIndirect",
              "documentation": {
                "identifier": "PointerCycleIndirect",
                "newPage": false,
                "searchKey": "json.PointerCycleIndirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PointerCycleIndirect struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PointerCycleIndirect struct {\n\tPtrs []interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#RecursiveSlice",
              "documentation": {
                "identifier": "RecursiveSlice",
                "newPage": false,
                "searchKey": "json.RecursiveSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RecursiveSlice []json.RecursiveSlice"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RecursiveSlice []RecursiveSlice\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Ref",
              "documentation": {
                "identifier": "Ref",
                "newPage": false,
                "searchKey": "json.Ref",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ref int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ref int\n```\n\nRef has Marshaler and Unmarshaler methods with pointer receiver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#Ref.MarshalJSON",
                    "documentation": {
                      "identifier": "Ref.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.Ref.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*Ref) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*Ref) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#Ref.UnmarshalJSON",
                    "documentation": {
                      "identifier": "Ref.UnmarshalJSON",
                      "newPage": false,
                      "searchKey": "json.Ref.UnmarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Ref) UnmarshalJSON([]byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Ref) UnmarshalJSON([]byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Val",
              "documentation": {
                "identifier": "Val",
                "newPage": false,
                "searchKey": "json.Val",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Val int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Val int\n```\n\nVal has Marshaler methods with value receiver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#Val.MarshalJSON",
                    "documentation": {
                      "identifier": "Val.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.Val.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (Val) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (Val) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#RefText",
              "documentation": {
                "identifier": "RefText",
                "newPage": false,
                "searchKey": "json.RefText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RefText int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RefText int\n```\n\nRefText has Marshaler and Unmarshaler methods with pointer receiver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#RefText.MarshalText",
                    "documentation": {
                      "identifier": "RefText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.RefText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (*RefText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (*RefText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/json#RefText.UnmarshalText",
                    "documentation": {
                      "identifier": "RefText.UnmarshalText",
                      "newPage": false,
                      "searchKey": "json.RefText.UnmarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *RefText) UnmarshalText([]byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *RefText) UnmarshalText([]byte) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#ValText",
              "documentation": {
                "identifier": "ValText",
                "newPage": false,
                "searchKey": "json.ValText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ValText int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ValText int\n```\n\nValText has Marshaler methods with value receiver. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#ValText.MarshalText",
                    "documentation": {
                      "identifier": "ValText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.ValText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ValText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ValText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#C",
              "documentation": {
                "identifier": "C",
                "newPage": false,
                "searchKey": "json.C",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type C int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype C int\n```\n\nC implements Marshaler and returns unescaped JSON. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#C.MarshalJSON",
                    "documentation": {
                      "identifier": "C.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.C.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (C) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (C) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#CText",
              "documentation": {
                "identifier": "CText",
                "newPage": false,
                "searchKey": "json.CText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type CText int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CText int\n```\n\nCText implements Marshaler and returns unescaped text. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#CText.MarshalText",
                    "documentation": {
                      "identifier": "CText.MarshalText",
                      "newPage": false,
                      "searchKey": "json.CText.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (CText) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (CText) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugA",
              "documentation": {
                "identifier": "BugA",
                "newPage": false,
                "searchKey": "json.BugA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugA struct {\n\tS string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugB",
              "documentation": {
                "identifier": "BugB",
                "newPage": false,
                "searchKey": "json.BugB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugB struct {\n\tBugA\n\tS string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugC",
              "documentation": {
                "identifier": "BugC",
                "newPage": false,
                "searchKey": "json.BugC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugC struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugC struct {\n\tS string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugX",
              "documentation": {
                "identifier": "BugX",
                "newPage": false,
                "searchKey": "json.BugX",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugX struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugX struct {\n\tA int\n\tBugA\n\tBugB\n}\n```\n\nLegal Go: We never use the repeated embedded field (S). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#nilJSONMarshaler",
              "documentation": {
                "identifier": "nilJSONMarshaler",
                "newPage": false,
                "searchKey": "json.nilJSONMarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nilJSONMarshaler string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nilJSONMarshaler string\n```\n\ngolang.org/issue/16042. Even if a nil interface value is passed in, as long as it implements Marshaler, it should be marshaled. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#nilJSONMarshaler.MarshalJSON",
                    "documentation": {
                      "identifier": "nilJSONMarshaler.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.nilJSONMarshaler.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (nm *nilJSONMarshaler) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (nm *nilJSONMarshaler) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#nilTextMarshaler",
              "documentation": {
                "identifier": "nilTextMarshaler",
                "newPage": false,
                "searchKey": "json.nilTextMarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nilTextMarshaler string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nilTextMarshaler string\n```\n\ngolang.org/issue/34235. Even if a nil interface value is passed in, as long as it implements encoding.TextMarshaler, it should be marshaled. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#nilTextMarshaler.MarshalText",
                    "documentation": {
                      "identifier": "nilTextMarshaler.MarshalText",
                      "newPage": false,
                      "searchKey": "json.nilTextMarshaler.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (nm *nilTextMarshaler) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (nm *nilTextMarshaler) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugD",
              "documentation": {
                "identifier": "BugD",
                "newPage": false,
                "searchKey": "json.BugD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugD struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugD struct {\n\tXXX string `json:\"S\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugY",
              "documentation": {
                "identifier": "BugY",
                "newPage": false,
                "searchKey": "json.BugY",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugY struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugY struct {\n\tBugA\n\tBugD\n}\n```\n\nBugD's tagged S field should dominate BugA's. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BugZ",
              "documentation": {
                "identifier": "BugZ",
                "newPage": false,
                "searchKey": "json.BugZ",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BugZ struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BugZ struct {\n\tBugA\n\tBugC\n\tBugY // Contains a tagged S field through BugD; should not dominate.\n}\n```\n\nThere are no tags here, so S should not appear. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#jsonbyte",
              "documentation": {
                "identifier": "jsonbyte",
                "newPage": false,
                "searchKey": "json.jsonbyte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type jsonbyte byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype jsonbyte byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#jsonbyte.MarshalJSON",
                    "documentation": {
                      "identifier": "jsonbyte.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.jsonbyte.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b jsonbyte) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b jsonbyte) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textbyte",
              "documentation": {
                "identifier": "textbyte",
                "newPage": false,
                "searchKey": "json.textbyte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type textbyte byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype textbyte byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#textbyte.MarshalText",
                    "documentation": {
                      "identifier": "textbyte.MarshalText",
                      "newPage": false,
                      "searchKey": "json.textbyte.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b textbyte) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b textbyte) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#jsonint",
              "documentation": {
                "identifier": "jsonint",
                "newPage": false,
                "searchKey": "json.jsonint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type jsonint int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype jsonint int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#jsonint.MarshalJSON",
                    "documentation": {
                      "identifier": "jsonint.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.jsonint.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i jsonint) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i jsonint) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textint",
              "documentation": {
                "identifier": "textint",
                "newPage": false,
                "searchKey": "json.textint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type textint int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype textint int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#textint.MarshalText",
                    "documentation": {
                      "identifier": "textint.MarshalText",
                      "newPage": false,
                      "searchKey": "json.textint.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i textint) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i textint) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textfloat",
              "documentation": {
                "identifier": "textfloat",
                "newPage": false,
                "searchKey": "json.textfloat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type textfloat float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype textfloat float64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#textfloat.MarshalText",
                    "documentation": {
                      "identifier": "textfloat.MarshalText",
                      "newPage": false,
                      "searchKey": "json.textfloat.MarshalText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f textfloat) MarshalText() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f textfloat) MarshalText() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#marshalPanic",
              "documentation": {
                "identifier": "marshalPanic",
                "newPage": false,
                "searchKey": "json.marshalPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type marshalPanic struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype marshalPanic struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#marshalPanic.MarshalJSON",
                    "documentation": {
                      "identifier": "marshalPanic.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.marshalPanic.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (marshalPanic) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (marshalPanic) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#example",
              "documentation": {
                "identifier": "example",
                "newPage": false,
                "searchKey": "json.example",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type example struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype example struct {\n\tcompact string\n\tindent  string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#indentErrorTest",
              "documentation": {
                "identifier": "indentErrorTest",
                "newPage": false,
                "searchKey": "json.indentErrorTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type indentErrorTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype indentErrorTest struct {\n\tin  string\n\terr error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#strMarshaler",
              "documentation": {
                "identifier": "strMarshaler",
                "newPage": false,
                "searchKey": "json.strMarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type strMarshaler string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype strMarshaler string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#strMarshaler.MarshalJSON",
                    "documentation": {
                      "identifier": "strMarshaler.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.strMarshaler.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s strMarshaler) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s strMarshaler) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#strPtrMarshaler",
              "documentation": {
                "identifier": "strPtrMarshaler",
                "newPage": false,
                "searchKey": "json.strPtrMarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type strPtrMarshaler string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype strPtrMarshaler string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/json#strPtrMarshaler.MarshalJSON",
                    "documentation": {
                      "identifier": "strPtrMarshaler.MarshalJSON",
                      "newPage": false,
                      "searchKey": "json.strPtrMarshaler.MarshalJSON",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *strPtrMarshaler) MarshalJSON() ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *strPtrMarshaler) MarshalJSON() ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tokenStreamCase",
              "documentation": {
                "identifier": "tokenStreamCase",
                "newPage": false,
                "searchKey": "json.tokenStreamCase",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tokenStreamCase struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tokenStreamCase struct {\n\tjson      string\n\texpTokens []interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#decodeThis",
              "documentation": {
                "identifier": "decodeThis",
                "newPage": false,
                "searchKey": "json.decodeThis",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type decodeThis struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype decodeThis struct {\n\tv interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#basicLatin2xTag",
              "documentation": {
                "identifier": "basicLatin2xTag",
                "newPage": false,
                "searchKey": "json.basicLatin2xTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicLatin2xTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicLatin2xTag struct {\n\tV string `json:\"$%-/\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#basicLatin3xTag",
              "documentation": {
                "identifier": "basicLatin3xTag",
                "newPage": false,
                "searchKey": "json.basicLatin3xTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicLatin3xTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicLatin3xTag struct {\n\tV string `json:\"0123456789\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#basicLatin4xTag",
              "documentation": {
                "identifier": "basicLatin4xTag",
                "newPage": false,
                "searchKey": "json.basicLatin4xTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicLatin4xTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicLatin4xTag struct {\n\tV string `json:\"ABCDEFGHIJKLMO\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#basicLatin5xTag",
              "documentation": {
                "identifier": "basicLatin5xTag",
                "newPage": false,
                "searchKey": "json.basicLatin5xTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicLatin5xTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicLatin5xTag struct {\n\tV string `json:\"PQRSTUVWXYZ_\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#basicLatin6xTag",
              "documentation": {
                "identifier": "basicLatin6xTag",
                "newPage": false,
                "searchKey": "json.basicLatin6xTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicLatin6xTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicLatin6xTag struct {\n\tV string `json:\"abcdefghijklmno\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#basicLatin7xTag",
              "documentation": {
                "identifier": "basicLatin7xTag",
                "newPage": false,
                "searchKey": "json.basicLatin7xTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicLatin7xTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicLatin7xTag struct {\n\tV string `json:\"pqrstuvwxyz\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#miscPlaneTag",
              "documentation": {
                "identifier": "miscPlaneTag",
                "newPage": false,
                "searchKey": "json.miscPlaneTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type miscPlaneTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype miscPlaneTag struct {\n\tV string `json:\"色は匂へど\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#percentSlashTag",
              "documentation": {
                "identifier": "percentSlashTag",
                "newPage": false,
                "searchKey": "json.percentSlashTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type percentSlashTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype percentSlashTag struct {\n\tV string `json:\"text/html%\"` // https://golang.org/issue/2718\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#punctuationTag",
              "documentation": {
                "identifier": "punctuationTag",
                "newPage": false,
                "searchKey": "json.punctuationTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type punctuationTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype punctuationTag struct {\n\tV string `json:\"!#$%&()*+-./:;<=>?@[]^_{|}~ \"` // https://golang.org/issue/3546\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#dashTag",
              "documentation": {
                "identifier": "dashTag",
                "newPage": false,
                "searchKey": "json.dashTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dashTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dashTag struct {\n\tV string `json:\"-,\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#emptyTag",
              "documentation": {
                "identifier": "emptyTag",
                "newPage": false,
                "searchKey": "json.emptyTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type emptyTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype emptyTag struct {\n\tW string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#misnamedTag",
              "documentation": {
                "identifier": "misnamedTag",
                "newPage": false,
                "searchKey": "json.misnamedTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type misnamedTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype misnamedTag struct {\n\tX string `jsom:\"Misnamed\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#badFormatTag",
              "documentation": {
                "identifier": "badFormatTag",
                "newPage": false,
                "searchKey": "json.badFormatTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type badFormatTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badFormatTag struct {\n\tY string `:\"BadFormat\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#badCodeTag",
              "documentation": {
                "identifier": "badCodeTag",
                "newPage": false,
                "searchKey": "json.badCodeTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type badCodeTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype badCodeTag struct {\n\tZ string `json:\" !\\\"#&'()*+,.\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#spaceTag",
              "documentation": {
                "identifier": "spaceTag",
                "newPage": false,
                "searchKey": "json.spaceTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type spaceTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype spaceTag struct {\n\tQ string `json:\"With space\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unicodeTag",
              "documentation": {
                "identifier": "unicodeTag",
                "newPage": false,
                "searchKey": "json.unicodeTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type unicodeTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unicodeTag struct {\n\tW string `json:\"Ελλάδα\"`\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/json#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/json#Unmarshal",
              "documentation": {
                "identifier": "Unmarshal",
                "newPage": false,
                "searchKey": "json.Unmarshal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Unmarshal(data []byte, v interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Unmarshal(data []byte, v interface{}) error\n```\n\nUnmarshal parses the JSON-encoded data and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError. \n\nUnmarshal uses the inverse of the encodings that Marshal uses, allocating maps, slices, and pointers as necessary, with the following additional rules: \n\nTo unmarshal JSON into a pointer, Unmarshal first handles the case of the JSON being the JSON literal null. In that case, Unmarshal sets the pointer to nil. Otherwise, Unmarshal unmarshals the JSON into the value pointed at by the pointer. If the pointer is nil, Unmarshal allocates a new value for it to point to. \n\nTo unmarshal JSON into a value implementing the Unmarshaler interface, Unmarshal calls that value's UnmarshalJSON method, including when the input is a JSON null. Otherwise, if the value implements encoding.TextUnmarshaler and the input is a JSON quoted string, Unmarshal calls that value's UnmarshalText method with the unquoted form of the string. \n\nTo unmarshal JSON into a struct, Unmarshal matches incoming object keys to the keys used by Marshal (either the struct field name or its tag), preferring an exact match but also accepting a case-insensitive match. By default, object keys which don't have a corresponding struct field are ignored (see Decoder.DisallowUnknownFields for an alternative). \n\nTo unmarshal JSON into an interface value, Unmarshal stores one of these in the interface value: \n\n```\nbool, for JSON booleans\nfloat64, for JSON numbers\nstring, for JSON strings\n[]interface{}, for JSON arrays\nmap[string]interface{}, for JSON objects\nnil for JSON null\n\n```\nTo unmarshal a JSON array into a slice, Unmarshal resets the slice length to zero and then appends each element to the slice. As a special case, to unmarshal an empty JSON array into a slice, Unmarshal replaces the slice with a new empty slice. \n\nTo unmarshal a JSON array into a Go array, Unmarshal decodes JSON array elements into corresponding Go array elements. If the Go array is smaller than the JSON array, the additional JSON array elements are discarded. If the JSON array is smaller than the Go array, the additional Go array elements are set to zero values. \n\nTo unmarshal a JSON object into a map, Unmarshal first establishes a map to use. If the map is nil, Unmarshal allocates a new map. Otherwise Unmarshal reuses the existing map, keeping existing entries. Unmarshal then stores key-value pairs from the JSON object into the map. The map's key type must either be any string type, an integer, implement json.Unmarshaler, or implement encoding.TextUnmarshaler. \n\nIf a JSON value is not appropriate for a given target type, or if a JSON number overflows the target type, Unmarshal skips that field and completes the unmarshaling as best it can. If no more serious errors are encountered, Unmarshal returns an UnmarshalTypeError describing the earliest such error. In any case, it's not guaranteed that all the remaining fields following the problematic one will be unmarshaled into the target object. \n\nThe JSON null value unmarshals into an interface, map, pointer, or slice by setting that Go value to nil. Because null is often used in JSON to mean `not present,' unmarshaling a JSON null into any other Go type has no effect on the value and produces no error. \n\nWhen unmarshaling quoted strings, invalid UTF-8 or invalid UTF-16 surrogate pairs are not treated as an error. Instead, they are replaced by the Unicode replacement character U+FFFD. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#getu4",
              "documentation": {
                "identifier": "getu4",
                "newPage": false,
                "searchKey": "json.getu4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getu4(s []byte) rune"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getu4(s []byte) rune\n```\n\ngetu4 decodes \\uXXXX from the beginning of s, returning the hex value, or it returns -1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unquote",
              "documentation": {
                "identifier": "unquote",
                "newPage": false,
                "searchKey": "json.unquote",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unquote(s []byte) (t string, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unquote(s []byte) (t string, ok bool)\n```\n\nunquote converts a quoted JSON string literal s into an actual string t. The rules are different than for Go, so cannot use strconv.Unquote. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unquoteBytes",
              "documentation": {
                "identifier": "unquoteBytes",
                "newPage": false,
                "searchKey": "json.unquoteBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unquoteBytes(s []byte) (t []byte, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unquoteBytes(s []byte) (t []byte, ok bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Marshal",
              "documentation": {
                "identifier": "Marshal",
                "newPage": false,
                "searchKey": "json.Marshal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Marshal(v interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Marshal(v interface{}) ([]byte, error)\n```\n\nMarshal returns the JSON encoding of v. \n\nMarshal traverses the value v recursively. If an encountered value implements the Marshaler interface and is not a nil pointer, Marshal calls its MarshalJSON method to produce JSON. If no MarshalJSON method is present but the value implements encoding.TextMarshaler instead, Marshal calls its MarshalText method and encodes the result as a JSON string. The nil pointer exception is not strictly necessary but mimics a similar, necessary exception in the behavior of UnmarshalJSON. \n\nOtherwise, Marshal uses the following type-dependent default encodings: \n\nBoolean values encode as JSON booleans. \n\nFloating point, integer, and Number values encode as JSON numbers. \n\nString values encode as JSON strings coerced to valid UTF-8, replacing invalid bytes with the Unicode replacement rune. So that the JSON will be safe to embed inside HTML <script> tags, the string is encoded using HTMLEscape, which replaces \"<\", \">\", \"&\", U+2028, and U+2029 are escaped to \"\\u003c\",\"\\u003e\", \"\\u0026\", \"\\u2028\", and \"\\u2029\". This replacement can be disabled when using an Encoder, by calling SetEscapeHTML(false). \n\nArray and slice values encode as JSON arrays, except that []byte encodes as a base64-encoded string, and a nil slice encodes as the null JSON value. \n\nStruct values encode as JSON objects. Each exported struct field becomes a member of the object, using the field name as the object key, unless the field is omitted for one of the reasons given below. \n\nThe encoding of each struct field can be customized by the format string stored under the \"json\" key in the struct field's tag. The format string gives the name of the field, possibly followed by a comma-separated list of options. The name may be empty in order to specify options without overriding the default field name. \n\nThe \"omitempty\" option specifies that the field should be omitted from the encoding if the field has an empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array, slice, map, or string. \n\nAs a special case, if the field tag is \"-\", the field is always omitted. Note that a field with name \"-\" can still be generated using the tag \"-,\". \n\nExamples of struct field tags and their meanings: \n\n```\n// Field appears in JSON as key \"myName\".\nField int `json:\"myName\"`\n\n// Field appears in JSON as key \"myName\" and\n// the field is omitted from the object if its value is empty,\n// as defined above.\nField int `json:\"myName,omitempty\"`\n\n// Field appears in JSON as key \"Field\" (the default), but\n// the field is skipped if empty.\n// Note the leading comma.\nField int `json:\",omitempty\"`\n\n// Field is ignored by this package.\nField int `json:\"-\"`\n\n// Field appears in JSON as key \"-\".\nField int `json:\"-,\"`\n\n```\nThe \"string\" option signals that a field is stored as JSON inside a JSON-encoded string. It applies only to fields of string, floating point, integer, or boolean types. This extra level of encoding is sometimes used when communicating with JavaScript programs: \n\n```\nInt64String int64 `json:\",string\"`\n\n```\nThe key name will be used if it's a non-empty string consisting of only Unicode letters, digits, and ASCII punctuation except quotation marks, backslash, and comma. \n\nAnonymous struct fields are usually marshaled as if their inner exported fields were fields in the outer struct, subject to the usual Go visibility rules amended as described in the next paragraph. An anonymous struct field with a name given in its JSON tag is treated as having that name, rather than being anonymous. An anonymous struct field of interface type is treated the same as having that type as its name, rather than being anonymous. \n\nThe Go visibility rules for struct fields are amended for JSON when deciding which field to marshal or unmarshal. If there are multiple fields at the same level, and that level is the least nested (and would therefore be the nesting level selected by the usual Go rules), the following extra rules apply: \n\n1) Of those fields, if any are JSON-tagged, only tagged fields are considered, even if there are multiple untagged fields that would otherwise conflict. \n\n2) If there is exactly one field (tagged or not according to the first rule), that is selected. \n\n3) Otherwise there are multiple fields, and all are ignored; no error occurs. \n\nHandling of anonymous struct fields is new in Go 1.1. Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring of an anonymous struct field in both current and earlier versions, give the field a JSON tag of \"-\". \n\nMap values encode as JSON objects. The map's key type must either be a string, an integer type, or implement encoding.TextMarshaler. The map keys are sorted and used as JSON object keys by applying the following rules, subject to the UTF-8 coercion described for string values above: \n\n```\n- keys of any string type are used directly\n- encoding.TextMarshalers are marshaled\n- integer keys are converted to strings\n\n```\nPointer values encode as the value pointed to. A nil pointer encodes as the null JSON value. \n\nInterface values encode as the value contained in the interface. A nil interface value encodes as the null JSON value. \n\nChannel, complex, and function values cannot be encoded in JSON. Attempting to encode such a value causes Marshal to return an UnsupportedTypeError. \n\nJSON cannot represent cyclic data structures and Marshal does not handle them. Passing cyclic structures to Marshal will result in an error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#MarshalIndent",
              "documentation": {
                "identifier": "MarshalIndent",
                "newPage": false,
                "searchKey": "json.MarshalIndent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n```\n\nMarshalIndent is like Marshal but applies Indent to format the output. Each JSON element in the output will begin on a new line beginning with prefix followed by one or more copies of indent according to the indentation nesting. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#HTMLEscape",
              "documentation": {
                "identifier": "HTMLEscape",
                "newPage": false,
                "searchKey": "json.HTMLEscape",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func HTMLEscape(dst *bytes.Buffer, src []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc HTMLEscape(dst *bytes.Buffer, src []byte)\n```\n\nHTMLEscape appends to dst the JSON-encoded src with <, >, &, U+2028 and U+2029 characters inside string literals changed to \\u003c, \\u003e, \\u0026, \\u2028, \\u2029 so that the JSON will be safe to embed inside HTML <script> tags. For historical reasons, web browsers don't honor standard HTML escaping within <script> tags, so an alternative JSON encoding must be used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#isEmptyValue",
              "documentation": {
                "identifier": "isEmptyValue",
                "newPage": false,
                "searchKey": "json.isEmptyValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isEmptyValue(v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isEmptyValue(v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#invalidValueEncoder",
              "documentation": {
                "identifier": "invalidValueEncoder",
                "newPage": false,
                "searchKey": "json.invalidValueEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func invalidValueEncoder(e *encodeState, v reflect.Value, _ encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc invalidValueEncoder(e *encodeState, v reflect.Value, _ encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#marshalerEncoder",
              "documentation": {
                "identifier": "marshalerEncoder",
                "newPage": false,
                "searchKey": "json.marshalerEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#addrMarshalerEncoder",
              "documentation": {
                "identifier": "addrMarshalerEncoder",
                "newPage": false,
                "searchKey": "json.addrMarshalerEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addrMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addrMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#textMarshalerEncoder",
              "documentation": {
                "identifier": "textMarshalerEncoder",
                "newPage": false,
                "searchKey": "json.textMarshalerEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func textMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc textMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#addrTextMarshalerEncoder",
              "documentation": {
                "identifier": "addrTextMarshalerEncoder",
                "newPage": false,
                "searchKey": "json.addrTextMarshalerEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addrTextMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addrTextMarshalerEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#boolEncoder",
              "documentation": {
                "identifier": "boolEncoder",
                "newPage": false,
                "searchKey": "json.boolEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func boolEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc boolEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intEncoder",
              "documentation": {
                "identifier": "intEncoder",
                "newPage": false,
                "searchKey": "json.intEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func intEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#uintEncoder",
              "documentation": {
                "identifier": "uintEncoder",
                "newPage": false,
                "searchKey": "json.uintEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func uintEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc uintEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stringEncoder",
              "documentation": {
                "identifier": "stringEncoder",
                "newPage": false,
                "searchKey": "json.stringEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#isValidNumber",
              "documentation": {
                "identifier": "isValidNumber",
                "newPage": false,
                "searchKey": "json.isValidNumber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValidNumber(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValidNumber(s string) bool\n```\n\nisValidNumber reports whether s is a valid JSON number literal. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#interfaceEncoder",
              "documentation": {
                "identifier": "interfaceEncoder",
                "newPage": false,
                "searchKey": "json.interfaceEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func interfaceEncoder(e *encodeState, v reflect.Value, opts encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc interfaceEncoder(e *encodeState, v reflect.Value, opts encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#unsupportedTypeEncoder",
              "documentation": {
                "identifier": "unsupportedTypeEncoder",
                "newPage": false,
                "searchKey": "json.unsupportedTypeEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func unsupportedTypeEncoder(e *encodeState, v reflect.Value, _ encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unsupportedTypeEncoder(e *encodeState, v reflect.Value, _ encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#encodeByteSlice",
              "documentation": {
                "identifier": "encodeByteSlice",
                "newPage": false,
                "searchKey": "json.encodeByteSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeByteSlice(e *encodeState, v reflect.Value, _ encOpts)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeByteSlice(e *encodeState, v reflect.Value, _ encOpts)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#isValidTag",
              "documentation": {
                "identifier": "isValidTag",
                "newPage": false,
                "searchKey": "json.isValidTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValidTag(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValidTag(s string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#typeByIndex",
              "documentation": {
                "identifier": "typeByIndex",
                "newPage": false,
                "searchKey": "json.typeByIndex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func typeByIndex(t reflect.Type, index []int) reflect.Type"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc typeByIndex(t reflect.Type, index []int) reflect.Type\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#foldFunc",
              "documentation": {
                "identifier": "foldFunc",
                "newPage": false,
                "searchKey": "json.foldFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func foldFunc(s []byte) func(s, t []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc foldFunc(s []byte) func(s, t []byte) bool\n```\n\nfoldFunc returns one of four different case folding equivalence functions, from most general (and slow) to fastest: \n\n1) bytes.EqualFold, if the key s contains any non-ASCII UTF-8 2) equalFoldRight, if s contains special folding ASCII ('k', 'K', 's', 'S') 3) asciiEqualFold, no special, but includes non-letters (including _) 4) simpleLetterEqualFold, no specials, no non-letters. \n\nThe letters S and K are special because they map to 3 runes, not just 2: \n\n```\n* S maps to s and to U+017F 'ſ' Latin small letter long s\n* k maps to K and to U+212A 'K' Kelvin sign\n\n```\nSee [https://play.golang.org/p/tTxjOc0OGo](https://play.golang.org/p/tTxjOc0OGo) \n\nThe returned function is specialized for matching against s and should only be given s. It's not curried for performance reasons. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#equalFoldRight",
              "documentation": {
                "identifier": "equalFoldRight",
                "newPage": false,
                "searchKey": "json.equalFoldRight",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func equalFoldRight(s, t []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc equalFoldRight(s, t []byte) bool\n```\n\nequalFoldRight is a specialization of bytes.EqualFold when s is known to be all ASCII (including punctuation), but contains an 's', 'S', 'k', or 'K', requiring a Unicode fold on the bytes in t. See comments on foldFunc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#asciiEqualFold",
              "documentation": {
                "identifier": "asciiEqualFold",
                "newPage": false,
                "searchKey": "json.asciiEqualFold",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func asciiEqualFold(s, t []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asciiEqualFold(s, t []byte) bool\n```\n\nasciiEqualFold is a specialization of bytes.EqualFold for use when s is all ASCII (but may contain non-letters) and contains no special-folding letters. See comments on foldFunc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#simpleLetterEqualFold",
              "documentation": {
                "identifier": "simpleLetterEqualFold",
                "newPage": false,
                "searchKey": "json.simpleLetterEqualFold",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func simpleLetterEqualFold(s, t []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc simpleLetterEqualFold(s, t []byte) bool\n```\n\nsimpleLetterEqualFold is a specialization of bytes.EqualFold for use when s is all ASCII letters (no underscores, etc) and also doesn't contain 'k', 'K', 's', or 'S'. See comments on foldFunc. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Compact",
              "documentation": {
                "identifier": "Compact",
                "newPage": false,
                "searchKey": "json.Compact",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Compact(dst *bytes.Buffer, src []byte) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Compact(dst *bytes.Buffer, src []byte) error\n```\n\nCompact appends to dst the JSON-encoded src with insignificant space characters elided. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#compact",
              "documentation": {
                "identifier": "compact",
                "newPage": false,
                "searchKey": "json.compact",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func compact(dst *bytes.Buffer, src []byte, escape bool) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc compact(dst *bytes.Buffer, src []byte, escape bool) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#newline",
              "documentation": {
                "identifier": "newline",
                "newPage": false,
                "searchKey": "json.newline",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newline(dst *bytes.Buffer, prefix, indent string, depth int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newline(dst *bytes.Buffer, prefix, indent string, depth int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Indent",
              "documentation": {
                "identifier": "Indent",
                "newPage": false,
                "searchKey": "json.Indent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Indent(dst *bytes.Buffer, src []byte, prefix, indent string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Indent(dst *bytes.Buffer, src []byte, prefix, indent string) error\n```\n\nIndent appends to dst an indented form of the JSON-encoded src. Each element in a JSON object or array begins on a new, indented line beginning with prefix followed by one or more copies of indent according to the indentation nesting. The data appended to dst does not begin with the prefix nor any indentation, to make it easier to embed inside other formatted JSON data. Although leading space characters (space, tab, carriage return, newline) at the beginning of src are dropped, trailing space characters at the end of src are preserved and copied to dst. For example, if src has no trailing spaces, neither will dst; if src ends in a trailing newline, so will dst. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#Valid",
              "documentation": {
                "identifier": "Valid",
                "newPage": false,
                "searchKey": "json.Valid",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Valid(data []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Valid(data []byte) bool\n```\n\nValid reports whether data is a valid JSON encoding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#checkValid",
              "documentation": {
                "identifier": "checkValid",
                "newPage": false,
                "searchKey": "json.checkValid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkValid(data []byte, scan *scanner) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkValid(data []byte, scan *scanner) error\n```\n\ncheckValid verifies that data is valid JSON-encoded data. scan is passed in for use by checkValid to avoid an allocation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#freeScanner",
              "documentation": {
                "identifier": "freeScanner",
                "newPage": false,
                "searchKey": "json.freeScanner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func freeScanner(scan *scanner)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc freeScanner(scan *scanner)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#isSpace",
              "documentation": {
                "identifier": "isSpace",
                "newPage": false,
                "searchKey": "json.isSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isSpace(c byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isSpace(c byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateBeginValueOrEmpty",
              "documentation": {
                "identifier": "stateBeginValueOrEmpty",
                "newPage": false,
                "searchKey": "json.stateBeginValueOrEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateBeginValueOrEmpty(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateBeginValueOrEmpty(s *scanner, c byte) int\n```\n\nstateBeginValueOrEmpty is the state after reading `[`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateBeginValue",
              "documentation": {
                "identifier": "stateBeginValue",
                "newPage": false,
                "searchKey": "json.stateBeginValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateBeginValue(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateBeginValue(s *scanner, c byte) int\n```\n\nstateBeginValue is the state at the beginning of the input. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateBeginStringOrEmpty",
              "documentation": {
                "identifier": "stateBeginStringOrEmpty",
                "newPage": false,
                "searchKey": "json.stateBeginStringOrEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateBeginStringOrEmpty(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateBeginStringOrEmpty(s *scanner, c byte) int\n```\n\nstateBeginStringOrEmpty is the state after reading `{`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateBeginString",
              "documentation": {
                "identifier": "stateBeginString",
                "newPage": false,
                "searchKey": "json.stateBeginString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateBeginString(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateBeginString(s *scanner, c byte) int\n```\n\nstateBeginString is the state after reading `{\"key\": value,`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateEndValue",
              "documentation": {
                "identifier": "stateEndValue",
                "newPage": false,
                "searchKey": "json.stateEndValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateEndValue(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateEndValue(s *scanner, c byte) int\n```\n\nstateEndValue is the state after completing a value, such as after reading `{}` or `true` or `[\"x\"`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateEndTop",
              "documentation": {
                "identifier": "stateEndTop",
                "newPage": false,
                "searchKey": "json.stateEndTop",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateEndTop(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateEndTop(s *scanner, c byte) int\n```\n\nstateEndTop is the state after finishing the top-level value, such as after reading `{}` or `[1,2,3]`. Only space characters should be seen now. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateInString",
              "documentation": {
                "identifier": "stateInString",
                "newPage": false,
                "searchKey": "json.stateInString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateInString(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateInString(s *scanner, c byte) int\n```\n\nstateInString is the state after reading `\"`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateInStringEsc",
              "documentation": {
                "identifier": "stateInStringEsc",
                "newPage": false,
                "searchKey": "json.stateInStringEsc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateInStringEsc(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateInStringEsc(s *scanner, c byte) int\n```\n\nstateInStringEsc is the state after reading `\"\\` during a quoted string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateInStringEscU",
              "documentation": {
                "identifier": "stateInStringEscU",
                "newPage": false,
                "searchKey": "json.stateInStringEscU",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateInStringEscU(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateInStringEscU(s *scanner, c byte) int\n```\n\nstateInStringEscU is the state after reading `\"\\u` during a quoted string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateInStringEscU1",
              "documentation": {
                "identifier": "stateInStringEscU1",
                "newPage": false,
                "searchKey": "json.stateInStringEscU1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateInStringEscU1(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateInStringEscU1(s *scanner, c byte) int\n```\n\nstateInStringEscU1 is the state after reading `\"\\u1` during a quoted string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateInStringEscU12",
              "documentation": {
                "identifier": "stateInStringEscU12",
                "newPage": false,
                "searchKey": "json.stateInStringEscU12",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateInStringEscU12(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateInStringEscU12(s *scanner, c byte) int\n```\n\nstateInStringEscU12 is the state after reading `\"\\u12` during a quoted string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateInStringEscU123",
              "documentation": {
                "identifier": "stateInStringEscU123",
                "newPage": false,
                "searchKey": "json.stateInStringEscU123",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateInStringEscU123(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateInStringEscU123(s *scanner, c byte) int\n```\n\nstateInStringEscU123 is the state after reading `\"\\u123` during a quoted string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateNeg",
              "documentation": {
                "identifier": "stateNeg",
                "newPage": false,
                "searchKey": "json.stateNeg",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateNeg(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateNeg(s *scanner, c byte) int\n```\n\nstateNeg is the state after reading `-` during a number. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#state1",
              "documentation": {
                "identifier": "state1",
                "newPage": false,
                "searchKey": "json.state1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func state1(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc state1(s *scanner, c byte) int\n```\n\nstate1 is the state after reading a non-zero integer during a number, such as after reading `1` or `100` but not `0`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#state0",
              "documentation": {
                "identifier": "state0",
                "newPage": false,
                "searchKey": "json.state0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func state0(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc state0(s *scanner, c byte) int\n```\n\nstate0 is the state after reading `0` during a number. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateDot",
              "documentation": {
                "identifier": "stateDot",
                "newPage": false,
                "searchKey": "json.stateDot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateDot(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateDot(s *scanner, c byte) int\n```\n\nstateDot is the state after reading the integer and decimal point in a number, such as after reading `1.`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateDot0",
              "documentation": {
                "identifier": "stateDot0",
                "newPage": false,
                "searchKey": "json.stateDot0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateDot0(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateDot0(s *scanner, c byte) int\n```\n\nstateDot0 is the state after reading the integer, decimal point, and subsequent digits of a number, such as after reading `3.14`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateE",
              "documentation": {
                "identifier": "stateE",
                "newPage": false,
                "searchKey": "json.stateE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateE(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateE(s *scanner, c byte) int\n```\n\nstateE is the state after reading the mantissa and e in a number, such as after reading `314e` or `0.314e`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateESign",
              "documentation": {
                "identifier": "stateESign",
                "newPage": false,
                "searchKey": "json.stateESign",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateESign(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateESign(s *scanner, c byte) int\n```\n\nstateESign is the state after reading the mantissa, e, and sign in a number, such as after reading `314e-` or `0.314e+`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateE0",
              "documentation": {
                "identifier": "stateE0",
                "newPage": false,
                "searchKey": "json.stateE0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateE0(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateE0(s *scanner, c byte) int\n```\n\nstateE0 is the state after reading the mantissa, e, optional sign, and at least one digit of the exponent in a number, such as after reading `314e-2` or `0.314e+1` or `3.14e0`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateT",
              "documentation": {
                "identifier": "stateT",
                "newPage": false,
                "searchKey": "json.stateT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateT(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateT(s *scanner, c byte) int\n```\n\nstateT is the state after reading `t`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateTr",
              "documentation": {
                "identifier": "stateTr",
                "newPage": false,
                "searchKey": "json.stateTr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateTr(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateTr(s *scanner, c byte) int\n```\n\nstateTr is the state after reading `tr`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateTru",
              "documentation": {
                "identifier": "stateTru",
                "newPage": false,
                "searchKey": "json.stateTru",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateTru(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateTru(s *scanner, c byte) int\n```\n\nstateTru is the state after reading `tru`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateF",
              "documentation": {
                "identifier": "stateF",
                "newPage": false,
                "searchKey": "json.stateF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateF(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateF(s *scanner, c byte) int\n```\n\nstateF is the state after reading `f`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateFa",
              "documentation": {
                "identifier": "stateFa",
                "newPage": false,
                "searchKey": "json.stateFa",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateFa(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateFa(s *scanner, c byte) int\n```\n\nstateFa is the state after reading `fa`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateFal",
              "documentation": {
                "identifier": "stateFal",
                "newPage": false,
                "searchKey": "json.stateFal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateFal(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateFal(s *scanner, c byte) int\n```\n\nstateFal is the state after reading `fal`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateFals",
              "documentation": {
                "identifier": "stateFals",
                "newPage": false,
                "searchKey": "json.stateFals",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateFals(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateFals(s *scanner, c byte) int\n```\n\nstateFals is the state after reading `fals`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateN",
              "documentation": {
                "identifier": "stateN",
                "newPage": false,
                "searchKey": "json.stateN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateN(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateN(s *scanner, c byte) int\n```\n\nstateN is the state after reading `n`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateNu",
              "documentation": {
                "identifier": "stateNu",
                "newPage": false,
                "searchKey": "json.stateNu",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateNu(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateNu(s *scanner, c byte) int\n```\n\nstateNu is the state after reading `nu`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateNul",
              "documentation": {
                "identifier": "stateNul",
                "newPage": false,
                "searchKey": "json.stateNul",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateNul(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateNul(s *scanner, c byte) int\n```\n\nstateNul is the state after reading `nul`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#stateError",
              "documentation": {
                "identifier": "stateError",
                "newPage": false,
                "searchKey": "json.stateError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stateError(s *scanner, c byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stateError(s *scanner, c byte) int\n```\n\nstateError is the state after reaching a syntax error, such as after reading `[1}` or `5.1.2`. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#quoteChar",
              "documentation": {
                "identifier": "quoteChar",
                "newPage": false,
                "searchKey": "json.quoteChar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func quoteChar(c byte) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc quoteChar(c byte) string\n```\n\nquoteChar formats c as a quoted character literal \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#nonSpace",
              "documentation": {
                "identifier": "nonSpace",
                "newPage": false,
                "searchKey": "json.nonSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nonSpace(b []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nonSpace(b []byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#codeInit",
              "documentation": {
                "identifier": "codeInit",
                "newPage": false,
                "searchKey": "json.codeInit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func codeInit()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc codeInit()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkCodeEncoder",
              "documentation": {
                "identifier": "BenchmarkCodeEncoder",
                "newPage": false,
                "searchKey": "json.BenchmarkCodeEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCodeEncoder(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCodeEncoder(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkCodeMarshal",
              "documentation": {
                "identifier": "BenchmarkCodeMarshal",
                "newPage": false,
                "searchKey": "json.BenchmarkCodeMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCodeMarshal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCodeMarshal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#benchMarshalBytes",
              "documentation": {
                "identifier": "benchMarshalBytes",
                "newPage": false,
                "searchKey": "json.benchMarshalBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchMarshalBytes(n int) func(*testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchMarshalBytes(n int) func(*testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkMarshalBytes",
              "documentation": {
                "identifier": "BenchmarkMarshalBytes",
                "newPage": false,
                "searchKey": "json.BenchmarkMarshalBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMarshalBytes(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMarshalBytes(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkCodeDecoder",
              "documentation": {
                "identifier": "BenchmarkCodeDecoder",
                "newPage": false,
                "searchKey": "json.BenchmarkCodeDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCodeDecoder(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCodeDecoder(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkUnicodeDecoder",
              "documentation": {
                "identifier": "BenchmarkUnicodeDecoder",
                "newPage": false,
                "searchKey": "json.BenchmarkUnicodeDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnicodeDecoder(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnicodeDecoder(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkDecoderStream",
              "documentation": {
                "identifier": "BenchmarkDecoderStream",
                "newPage": false,
                "searchKey": "json.BenchmarkDecoderStream",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecoderStream(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecoderStream(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkCodeUnmarshal",
              "documentation": {
                "identifier": "BenchmarkCodeUnmarshal",
                "newPage": false,
                "searchKey": "json.BenchmarkCodeUnmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCodeUnmarshal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCodeUnmarshal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkCodeUnmarshalReuse",
              "documentation": {
                "identifier": "BenchmarkCodeUnmarshalReuse",
                "newPage": false,
                "searchKey": "json.BenchmarkCodeUnmarshalReuse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCodeUnmarshalReuse(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCodeUnmarshalReuse(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkUnmarshalString",
              "documentation": {
                "identifier": "BenchmarkUnmarshalString",
                "newPage": false,
                "searchKey": "json.BenchmarkUnmarshalString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnmarshalString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnmarshalString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkUnmarshalFloat64",
              "documentation": {
                "identifier": "BenchmarkUnmarshalFloat64",
                "newPage": false,
                "searchKey": "json.BenchmarkUnmarshalFloat64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnmarshalFloat64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnmarshalFloat64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkUnmarshalInt64",
              "documentation": {
                "identifier": "BenchmarkUnmarshalInt64",
                "newPage": false,
                "searchKey": "json.BenchmarkUnmarshalInt64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnmarshalInt64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnmarshalInt64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkIssue10335",
              "documentation": {
                "identifier": "BenchmarkIssue10335",
                "newPage": false,
                "searchKey": "json.BenchmarkIssue10335",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIssue10335(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIssue10335(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkIssue34127",
              "documentation": {
                "identifier": "BenchmarkIssue34127",
                "newPage": false,
                "searchKey": "json.BenchmarkIssue34127",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkIssue34127(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkIssue34127(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkUnmapped",
              "documentation": {
                "identifier": "BenchmarkUnmapped",
                "newPage": false,
                "searchKey": "json.BenchmarkUnmapped",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnmapped(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnmapped(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkTypeFieldsCache",
              "documentation": {
                "identifier": "BenchmarkTypeFieldsCache",
                "newPage": false,
                "searchKey": "json.BenchmarkTypeFieldsCache",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTypeFieldsCache(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTypeFieldsCache(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkEncodeMarshaler",
              "documentation": {
                "identifier": "BenchmarkEncodeMarshaler",
                "newPage": false,
                "searchKey": "json.BenchmarkEncodeMarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncodeMarshaler(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncodeMarshaler(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshal",
              "documentation": {
                "identifier": "TestMarshal",
                "newPage": false,
                "searchKey": "json.TestMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalBadUTF8",
              "documentation": {
                "identifier": "TestMarshalBadUTF8",
                "newPage": false,
                "searchKey": "json.TestMarshalBadUTF8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalBadUTF8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalBadUTF8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalNumberZeroVal",
              "documentation": {
                "identifier": "TestMarshalNumberZeroVal",
                "newPage": false,
                "searchKey": "json.TestMarshalNumberZeroVal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalNumberZeroVal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalNumberZeroVal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalEmbeds",
              "documentation": {
                "identifier": "TestMarshalEmbeds",
                "newPage": false,
                "searchKey": "json.TestMarshalEmbeds",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalEmbeds(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalEmbeds(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#equalError",
              "documentation": {
                "identifier": "equalError",
                "newPage": false,
                "searchKey": "json.equalError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func equalError(a, b error) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc equalError(a, b error) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshal",
              "documentation": {
                "identifier": "TestUnmarshal",
                "newPage": false,
                "searchKey": "json.TestUnmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalMarshal",
              "documentation": {
                "identifier": "TestUnmarshalMarshal",
                "newPage": false,
                "searchKey": "json.TestUnmarshalMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestNumberAccessors",
              "documentation": {
                "identifier": "TestNumberAccessors",
                "newPage": false,
                "searchKey": "json.TestNumberAccessors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNumberAccessors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNumberAccessors(t *testing.T)\n```\n\nIndependent of Decode, basic coverage of the accessors in Number \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestLargeByteSlice",
              "documentation": {
                "identifier": "TestLargeByteSlice",
                "newPage": false,
                "searchKey": "json.TestLargeByteSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLargeByteSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLargeByteSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalInterface",
              "documentation": {
                "identifier": "TestUnmarshalInterface",
                "newPage": false,
                "searchKey": "json.TestUnmarshalInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalInterface(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalPtrPtr",
              "documentation": {
                "identifier": "TestUnmarshalPtrPtr",
                "newPage": false,
                "searchKey": "json.TestUnmarshalPtrPtr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalPtrPtr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalPtrPtr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEscape",
              "documentation": {
                "identifier": "TestEscape",
                "newPage": false,
                "searchKey": "json.TestEscape",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEscape(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEscape(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestErrorMessageFromMisusedString",
              "documentation": {
                "identifier": "TestErrorMessageFromMisusedString",
                "newPage": false,
                "searchKey": "json.TestErrorMessageFromMisusedString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorMessageFromMisusedString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorMessageFromMisusedString(t *testing.T)\n```\n\nIf people misuse the ,string modifier, the error message should be helpful, telling the user that they're doing it wrong. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#noSpace",
              "documentation": {
                "identifier": "noSpace",
                "newPage": false,
                "searchKey": "json.noSpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func noSpace(c rune) rune"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc noSpace(c rune) rune\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestRefUnmarshal",
              "documentation": {
                "identifier": "TestRefUnmarshal",
                "newPage": false,
                "searchKey": "json.TestRefUnmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRefUnmarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRefUnmarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEmptyString",
              "documentation": {
                "identifier": "TestEmptyString",
                "newPage": false,
                "searchKey": "json.TestEmptyString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyString(t *testing.T)\n```\n\nTest that the empty string doesn't panic decoding when ,string is specified Issue 3450 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestNullString",
              "documentation": {
                "identifier": "TestNullString",
                "newPage": false,
                "searchKey": "json.TestNullString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullString(t *testing.T)\n```\n\nTest that a null for ,string is not replaced with the previous quoted string (issue 7046). It should also not be an error (issue 2540, issue 8587). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intp",
              "documentation": {
                "identifier": "intp",
                "newPage": false,
                "searchKey": "json.intp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func intp(x int) *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intp(x int) *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#intpp",
              "documentation": {
                "identifier": "intpp",
                "newPage": false,
                "searchKey": "json.intpp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func intpp(x *int) **int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc intpp(x *int) **int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestInterfaceSet",
              "documentation": {
                "identifier": "TestInterfaceSet",
                "newPage": false,
                "searchKey": "json.TestInterfaceSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterfaceSet(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterfaceSet(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalNulls",
              "documentation": {
                "identifier": "TestUnmarshalNulls",
                "newPage": false,
                "searchKey": "json.TestUnmarshalNulls",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalNulls(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalNulls(t *testing.T)\n```\n\nJSON null values should be ignored for primitives and string values instead of resulting in an error. Issue 2540 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestStringKind",
              "documentation": {
                "identifier": "TestStringKind",
                "newPage": false,
                "searchKey": "json.TestStringKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringKind(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringKind(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestByteKind",
              "documentation": {
                "identifier": "TestByteKind",
                "newPage": false,
                "searchKey": "json.TestByteKind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestByteKind(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestByteKind(t *testing.T)\n```\n\nCustom types with []byte as underlying type could not be marshaled and then unmarshaled. Issue 8962. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestSliceOfCustomByte",
              "documentation": {
                "identifier": "TestSliceOfCustomByte",
                "newPage": false,
                "searchKey": "json.TestSliceOfCustomByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceOfCustomByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceOfCustomByte(t *testing.T)\n```\n\nThe fix for issue 8962 introduced a regression. Issue 12921. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalTypeError",
              "documentation": {
                "identifier": "TestUnmarshalTypeError",
                "newPage": false,
                "searchKey": "json.TestUnmarshalTypeError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalTypeError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalTypeError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalSyntax",
              "documentation": {
                "identifier": "TestUnmarshalSyntax",
                "newPage": false,
                "searchKey": "json.TestUnmarshalSyntax",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalSyntax(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalSyntax(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalUnexported",
              "documentation": {
                "identifier": "TestUnmarshalUnexported",
                "newPage": false,
                "searchKey": "json.TestUnmarshalUnexported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalUnexported(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalUnexported(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalJSONLiteralError",
              "documentation": {
                "identifier": "TestUnmarshalJSONLiteralError",
                "newPage": false,
                "searchKey": "json.TestUnmarshalJSONLiteralError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalJSONLiteralError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalJSONLiteralError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestSkipArrayObjects",
              "documentation": {
                "identifier": "TestSkipArrayObjects",
                "newPage": false,
                "searchKey": "json.TestSkipArrayObjects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSkipArrayObjects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSkipArrayObjects(t *testing.T)\n```\n\nTest that extra object elements in an array do not result in a \"data changing underfoot\" error. Issue 3717 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestPrefilled",
              "documentation": {
                "identifier": "TestPrefilled",
                "newPage": false,
                "searchKey": "json.TestPrefilled",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrefilled(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrefilled(t *testing.T)\n```\n\nTest semantics of pre-filled data, such as struct fields, map elements, slices, and arrays. Issues 4900 and 8837, among others. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestInvalidUnmarshal",
              "documentation": {
                "identifier": "TestInvalidUnmarshal",
                "newPage": false,
                "searchKey": "json.TestInvalidUnmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidUnmarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidUnmarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestInvalidUnmarshalText",
              "documentation": {
                "identifier": "TestInvalidUnmarshalText",
                "newPage": false,
                "searchKey": "json.TestInvalidUnmarshalText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidUnmarshalText(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidUnmarshalText(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestInvalidStringOption",
              "documentation": {
                "identifier": "TestInvalidStringOption",
                "newPage": false,
                "searchKey": "json.TestInvalidStringOption",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidStringOption(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidStringOption(t *testing.T)\n```\n\nTest that string option is ignored for invalid types. Issue 9812. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalEmbeddedUnexported",
              "documentation": {
                "identifier": "TestUnmarshalEmbeddedUnexported",
                "newPage": false,
                "searchKey": "json.TestUnmarshalEmbeddedUnexported",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalEmbeddedUnexported(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalEmbeddedUnexported(t *testing.T)\n```\n\nTest unmarshal behavior with regards to embedded unexported structs. \n\n(Issue 21357) If the embedded struct is a pointer and is unallocated, this returns an error because unmarshal cannot set the field. \n\n(Issue 24152) If the embedded struct is given an explicit name, ensure that the normal unmarshal logic does not panic in reflect. \n\n(Issue 28145) If the embedded struct is given an explicit name and has exported methods, don't cause a panic trying to get its value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalErrorAfterMultipleJSON",
              "documentation": {
                "identifier": "TestUnmarshalErrorAfterMultipleJSON",
                "newPage": false,
                "searchKey": "json.TestUnmarshalErrorAfterMultipleJSON",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalErrorAfterMultipleJSON(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalErrorAfterMultipleJSON(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalPanic",
              "documentation": {
                "identifier": "TestUnmarshalPanic",
                "newPage": false,
                "searchKey": "json.TestUnmarshalPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalRecursivePointer",
              "documentation": {
                "identifier": "TestUnmarshalRecursivePointer",
                "newPage": false,
                "searchKey": "json.TestUnmarshalRecursivePointer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalRecursivePointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalRecursivePointer(t *testing.T)\n```\n\nThe decoder used to hang if decoding into an interface pointing to its own address. See golang.org/issues/31740. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalMapWithTextUnmarshalerStringKey",
              "documentation": {
                "identifier": "TestUnmarshalMapWithTextUnmarshalerStringKey",
                "newPage": false,
                "searchKey": "json.TestUnmarshalMapWithTextUnmarshalerStringKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalMapWithTextUnmarshalerStringKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalMapWithTextUnmarshalerStringKey(t *testing.T)\n```\n\nTest unmarshal to a map, where the map key is a user defined type. See golang.org/issues/34437. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalRescanLiteralMangledUnquote",
              "documentation": {
                "identifier": "TestUnmarshalRescanLiteralMangledUnquote",
                "newPage": false,
                "searchKey": "json.TestUnmarshalRescanLiteralMangledUnquote",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalRescanLiteralMangledUnquote(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalRescanLiteralMangledUnquote(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnmarshalMaxDepth",
              "documentation": {
                "identifier": "TestUnmarshalMaxDepth",
                "newPage": false,
                "searchKey": "json.TestUnmarshalMaxDepth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalMaxDepth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalMaxDepth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestOmitEmpty",
              "documentation": {
                "identifier": "TestOmitEmpty",
                "newPage": false,
                "searchKey": "json.TestOmitEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOmitEmpty(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOmitEmpty(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestRoundtripStringTag",
              "documentation": {
                "identifier": "TestRoundtripStringTag",
                "newPage": false,
                "searchKey": "json.TestRoundtripStringTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRoundtripStringTag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRoundtripStringTag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncodeRenamedByteSlice",
              "documentation": {
                "identifier": "TestEncodeRenamedByteSlice",
                "newPage": false,
                "searchKey": "json.TestEncodeRenamedByteSlice",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodeRenamedByteSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodeRenamedByteSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "json.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestSamePointerNoCycle",
              "documentation": {
                "identifier": "TestSamePointerNoCycle",
                "newPage": false,
                "searchKey": "json.TestSamePointerNoCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSamePointerNoCycle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSamePointerNoCycle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestSliceNoCycle",
              "documentation": {
                "identifier": "TestSliceNoCycle",
                "newPage": false,
                "searchKey": "json.TestSliceNoCycle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSliceNoCycle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSliceNoCycle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestUnsupportedValues",
              "documentation": {
                "identifier": "TestUnsupportedValues",
                "newPage": false,
                "searchKey": "json.TestUnsupportedValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnsupportedValues(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnsupportedValues(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalTextFloatMap",
              "documentation": {
                "identifier": "TestMarshalTextFloatMap",
                "newPage": false,
                "searchKey": "json.TestMarshalTextFloatMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalTextFloatMap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalTextFloatMap(t *testing.T)\n```\n\nIssue 43207 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestRefValMarshal",
              "documentation": {
                "identifier": "TestRefValMarshal",
                "newPage": false,
                "searchKey": "json.TestRefValMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRefValMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRefValMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalerEscaping",
              "documentation": {
                "identifier": "TestMarshalerEscaping",
                "newPage": false,
                "searchKey": "json.TestMarshalerEscaping",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalerEscaping(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalerEscaping(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestAnonymousFields",
              "documentation": {
                "identifier": "TestAnonymousFields",
                "newPage": false,
                "searchKey": "json.TestAnonymousFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAnonymousFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAnonymousFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestNilMarshal",
              "documentation": {
                "identifier": "TestNilMarshal",
                "newPage": false,
                "searchKey": "json.TestNilMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilMarshal(t *testing.T)\n```\n\nSee golang.org/issue/16042 and golang.org/issue/34235. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEmbeddedBug",
              "documentation": {
                "identifier": "TestEmbeddedBug",
                "newPage": false,
                "searchKey": "json.TestEmbeddedBug",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmbeddedBug(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmbeddedBug(t *testing.T)\n```\n\nIssue 5245. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestTaggedFieldDominates",
              "documentation": {
                "identifier": "TestTaggedFieldDominates",
                "newPage": false,
                "searchKey": "json.TestTaggedFieldDominates",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTaggedFieldDominates(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTaggedFieldDominates(t *testing.T)\n```\n\nTest that a field with a tag dominates untagged fields. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestDuplicatedFieldDisappears",
              "documentation": {
                "identifier": "TestDuplicatedFieldDisappears",
                "newPage": false,
                "searchKey": "json.TestDuplicatedFieldDisappears",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDuplicatedFieldDisappears(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDuplicatedFieldDisappears(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestStringBytes",
              "documentation": {
                "identifier": "TestStringBytes",
                "newPage": false,
                "searchKey": "json.TestStringBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringBytes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestIssue10281",
              "documentation": {
                "identifier": "TestIssue10281",
                "newPage": false,
                "searchKey": "json.TestIssue10281",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue10281(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue10281(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestHTMLEscape",
              "documentation": {
                "identifier": "TestHTMLEscape",
                "newPage": false,
                "searchKey": "json.TestHTMLEscape",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTMLEscape(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTMLEscape(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncodePointerString",
              "documentation": {
                "identifier": "TestEncodePointerString",
                "newPage": false,
                "searchKey": "json.TestEncodePointerString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodePointerString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodePointerString(t *testing.T)\n```\n\ngolang.org/issue/8582 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncodeString",
              "documentation": {
                "identifier": "TestEncodeString",
                "newPage": false,
                "searchKey": "json.TestEncodeString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodeString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodeString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#tenc",
              "documentation": {
                "identifier": "tenc",
                "newPage": false,
                "searchKey": "json.tenc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func tenc(format string, a ...interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tenc(format string, a ...interface{}) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncodeBytekind",
              "documentation": {
                "identifier": "TestEncodeBytekind",
                "newPage": false,
                "searchKey": "json.TestEncodeBytekind",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodeBytekind(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodeBytekind(t *testing.T)\n```\n\nIssue 13783 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestTextMarshalerMapKeysAreSorted",
              "documentation": {
                "identifier": "TestTextMarshalerMapKeysAreSorted",
                "newPage": false,
                "searchKey": "json.TestTextMarshalerMapKeysAreSorted",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTextMarshalerMapKeysAreSorted(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTextMarshalerMapKeysAreSorted(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestNilMarshalerTextMapKey",
              "documentation": {
                "identifier": "TestNilMarshalerTextMapKey",
                "newPage": false,
                "searchKey": "json.TestNilMarshalerTextMapKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilMarshalerTextMapKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilMarshalerTextMapKey(t *testing.T)\n```\n\n[https://golang.org/issue/33675](https://golang.org/issue/33675) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalFloat",
              "documentation": {
                "identifier": "TestMarshalFloat",
                "newPage": false,
                "searchKey": "json.TestMarshalFloat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalFloat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalFloat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalRawMessageValue",
              "documentation": {
                "identifier": "TestMarshalRawMessageValue",
                "newPage": false,
                "searchKey": "json.TestMarshalRawMessageValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalRawMessageValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalRawMessageValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalPanic",
              "documentation": {
                "identifier": "TestMarshalPanic",
                "newPage": false,
                "searchKey": "json.TestMarshalPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalPanic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalUncommonFieldNames",
              "documentation": {
                "identifier": "TestMarshalUncommonFieldNames",
                "newPage": false,
                "searchKey": "json.TestMarshalUncommonFieldNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalUncommonFieldNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalUncommonFieldNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestMarshalerError",
              "documentation": {
                "identifier": "TestMarshalerError",
                "newPage": false,
                "searchKey": "json.TestMarshalerError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalerError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalerError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestFold",
              "documentation": {
                "identifier": "TestFold",
                "newPage": false,
                "searchKey": "json.TestFold",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFold(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFold(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestFoldAgainstUnicode",
              "documentation": {
                "identifier": "TestFoldAgainstUnicode",
                "newPage": false,
                "searchKey": "json.TestFoldAgainstUnicode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFoldAgainstUnicode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFoldAgainstUnicode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#isASCIILetter",
              "documentation": {
                "identifier": "isASCIILetter",
                "newPage": false,
                "searchKey": "json.isASCIILetter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isASCIILetter(b byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isASCIILetter(b byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestNumberIsValid",
              "documentation": {
                "identifier": "TestNumberIsValid",
                "newPage": false,
                "searchKey": "json.TestNumberIsValid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNumberIsValid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNumberIsValid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkNumberIsValid",
              "documentation": {
                "identifier": "BenchmarkNumberIsValid",
                "newPage": false,
                "searchKey": "json.BenchmarkNumberIsValid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNumberIsValid(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNumberIsValid(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkNumberIsValidRegexp",
              "documentation": {
                "identifier": "BenchmarkNumberIsValidRegexp",
                "newPage": false,
                "searchKey": "json.BenchmarkNumberIsValidRegexp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNumberIsValidRegexp(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNumberIsValidRegexp(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestValid",
              "documentation": {
                "identifier": "TestValid",
                "newPage": false,
                "searchKey": "json.TestValid",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValid(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValid(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestCompact",
              "documentation": {
                "identifier": "TestCompact",
                "newPage": false,
                "searchKey": "json.TestCompact",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompact(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompact(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestCompactSeparators",
              "documentation": {
                "identifier": "TestCompactSeparators",
                "newPage": false,
                "searchKey": "json.TestCompactSeparators",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompactSeparators(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompactSeparators(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestIndent",
              "documentation": {
                "identifier": "TestIndent",
                "newPage": false,
                "searchKey": "json.TestIndent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestCompactBig",
              "documentation": {
                "identifier": "TestCompactBig",
                "newPage": false,
                "searchKey": "json.TestCompactBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCompactBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCompactBig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestIndentBig",
              "documentation": {
                "identifier": "TestIndentBig",
                "newPage": false,
                "searchKey": "json.TestIndentBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndentBig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndentBig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestIndentErrors",
              "documentation": {
                "identifier": "TestIndentErrors",
                "newPage": false,
                "searchKey": "json.TestIndentErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIndentErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIndentErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#diff",
              "documentation": {
                "identifier": "diff",
                "newPage": false,
                "searchKey": "json.diff",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func diff(t *testing.T, a, b []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc diff(t *testing.T, a, b []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#trim",
              "documentation": {
                "identifier": "trim",
                "newPage": false,
                "searchKey": "json.trim",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func trim(b []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trim(b []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#initBig",
              "documentation": {
                "identifier": "initBig",
                "newPage": false,
                "searchKey": "json.initBig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func initBig()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc initBig()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#genValue",
              "documentation": {
                "identifier": "genValue",
                "newPage": false,
                "searchKey": "json.genValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func genValue(n int) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc genValue(n int) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#genString",
              "documentation": {
                "identifier": "genString",
                "newPage": false,
                "searchKey": "json.genString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func genString(stddev float64) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc genString(stddev float64) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#genArray",
              "documentation": {
                "identifier": "genArray",
                "newPage": false,
                "searchKey": "json.genArray",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func genArray(n int) []interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc genArray(n int) []interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#genMap",
              "documentation": {
                "identifier": "genMap",
                "newPage": false,
                "searchKey": "json.genMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func genMap(n int) map[string]interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc genMap(n int) map[string]interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncoder",
              "documentation": {
                "identifier": "TestEncoder",
                "newPage": false,
                "searchKey": "json.TestEncoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncoderIndent",
              "documentation": {
                "identifier": "TestEncoderIndent",
                "newPage": false,
                "searchKey": "json.TestEncoderIndent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncoderIndent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncoderIndent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestEncoderSetEscapeHTML",
              "documentation": {
                "identifier": "TestEncoderSetEscapeHTML",
                "newPage": false,
                "searchKey": "json.TestEncoderSetEscapeHTML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncoderSetEscapeHTML(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncoderSetEscapeHTML(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestDecoder",
              "documentation": {
                "identifier": "TestDecoder",
                "newPage": false,
                "searchKey": "json.TestDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestDecoderBuffered",
              "documentation": {
                "identifier": "TestDecoderBuffered",
                "newPage": false,
                "searchKey": "json.TestDecoderBuffered",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecoderBuffered(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecoderBuffered(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#nlines",
              "documentation": {
                "identifier": "nlines",
                "newPage": false,
                "searchKey": "json.nlines",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nlines(s string, n int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nlines(s string, n int) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestRawMessage",
              "documentation": {
                "identifier": "TestRawMessage",
                "newPage": false,
                "searchKey": "json.TestRawMessage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawMessage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawMessage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestNullRawMessage",
              "documentation": {
                "identifier": "TestNullRawMessage",
                "newPage": false,
                "searchKey": "json.TestNullRawMessage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNullRawMessage(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNullRawMessage(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestBlocking",
              "documentation": {
                "identifier": "TestBlocking",
                "newPage": false,
                "searchKey": "json.TestBlocking",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBlocking(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBlocking(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#BenchmarkEncoderEncode",
              "documentation": {
                "identifier": "BenchmarkEncoderEncode",
                "newPage": false,
                "searchKey": "json.BenchmarkEncoderEncode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncoderEncode(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncoderEncode(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestDecodeInStream",
              "documentation": {
                "identifier": "TestDecodeInStream",
                "newPage": false,
                "searchKey": "json.TestDecodeInStream",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeInStream(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeInStream(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestHTTPDecoding",
              "documentation": {
                "identifier": "TestHTTPDecoding",
                "newPage": false,
                "searchKey": "json.TestHTTPDecoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTPDecoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTPDecoding(t *testing.T)\n```\n\nTest from golang.org/issue/11893 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestStructTagObjectKey",
              "documentation": {
                "identifier": "TestStructTagObjectKey",
                "newPage": false,
                "searchKey": "json.TestStructTagObjectKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructTagObjectKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructTagObjectKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/json#TestTagParsing",
              "documentation": {
                "identifier": "TestTagParsing",
                "newPage": false,
                "searchKey": "json.TestTagParsing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTagParsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTagParsing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
