{
  "pathID": "/encoding/asn1",
  "documentation": {
    "identifier": "asn1",
    "newPage": true,
    "searchKey": "encoding/asn1",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package asn1"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package asn1 implements parsing of DER-encoded ASN.1 data structures, as defined in ITU-T Rec X.690. \n\nSee also `A Layman's Guide to a Subset of ASN.1, BER, and DER,' [http://luca.ntop.org/Teaching/Appunti/asn1.html](http://luca.ntop.org/Teaching/Appunti/asn1.html). \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/encoding/asn1#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/asn1#ClassApplication",
              "documentation": {
                "identifier": "ClassApplication",
                "newPage": false,
                "searchKey": "asn1.ClassApplication",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassApplication"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassApplication = 1\n```\n\nASN.1 class types represent the namespace of the tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#ClassContextSpecific",
              "documentation": {
                "identifier": "ClassContextSpecific",
                "newPage": false,
                "searchKey": "asn1.ClassContextSpecific",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassContextSpecific"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassContextSpecific = 2\n```\n\nASN.1 class types represent the namespace of the tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#ClassPrivate",
              "documentation": {
                "identifier": "ClassPrivate",
                "newPage": false,
                "searchKey": "asn1.ClassPrivate",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassPrivate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassPrivate = 3\n```\n\nASN.1 class types represent the namespace of the tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#ClassUniversal",
              "documentation": {
                "identifier": "ClassUniversal",
                "newPage": false,
                "searchKey": "asn1.ClassUniversal",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ClassUniversal"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ClassUniversal = 0\n```\n\nASN.1 class types represent the namespace of the tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagBMPString",
              "documentation": {
                "identifier": "TagBMPString",
                "newPage": false,
                "searchKey": "asn1.TagBMPString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagBMPString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagBMPString = 30\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagBitString",
              "documentation": {
                "identifier": "TagBitString",
                "newPage": false,
                "searchKey": "asn1.TagBitString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagBitString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagBitString = 3\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagBoolean",
              "documentation": {
                "identifier": "TagBoolean",
                "newPage": false,
                "searchKey": "asn1.TagBoolean",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagBoolean"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagBoolean = 1\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagEnum",
              "documentation": {
                "identifier": "TagEnum",
                "newPage": false,
                "searchKey": "asn1.TagEnum",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagEnum"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagEnum = 10\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagGeneralString",
              "documentation": {
                "identifier": "TagGeneralString",
                "newPage": false,
                "searchKey": "asn1.TagGeneralString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagGeneralString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagGeneralString = 27\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagGeneralizedTime",
              "documentation": {
                "identifier": "TagGeneralizedTime",
                "newPage": false,
                "searchKey": "asn1.TagGeneralizedTime",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagGeneralizedTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagGeneralizedTime = 24\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagIA5String",
              "documentation": {
                "identifier": "TagIA5String",
                "newPage": false,
                "searchKey": "asn1.TagIA5String",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagIA5String"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagIA5String = 22\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagInteger",
              "documentation": {
                "identifier": "TagInteger",
                "newPage": false,
                "searchKey": "asn1.TagInteger",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagInteger"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagInteger = 2\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagNull",
              "documentation": {
                "identifier": "TagNull",
                "newPage": false,
                "searchKey": "asn1.TagNull",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagNull"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagNull = 5\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagNumericString",
              "documentation": {
                "identifier": "TagNumericString",
                "newPage": false,
                "searchKey": "asn1.TagNumericString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagNumericString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagNumericString = 18\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagOID",
              "documentation": {
                "identifier": "TagOID",
                "newPage": false,
                "searchKey": "asn1.TagOID",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagOID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagOID = 6\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagOctetString",
              "documentation": {
                "identifier": "TagOctetString",
                "newPage": false,
                "searchKey": "asn1.TagOctetString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagOctetString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagOctetString = 4\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagPrintableString",
              "documentation": {
                "identifier": "TagPrintableString",
                "newPage": false,
                "searchKey": "asn1.TagPrintableString",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagPrintableString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagPrintableString = 19\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagSequence",
              "documentation": {
                "identifier": "TagSequence",
                "newPage": false,
                "searchKey": "asn1.TagSequence",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSequence"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSequence = 16\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagSet",
              "documentation": {
                "identifier": "TagSet",
                "newPage": false,
                "searchKey": "asn1.TagSet",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagSet"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagSet = 17\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagT61String",
              "documentation": {
                "identifier": "TagT61String",
                "newPage": false,
                "searchKey": "asn1.TagT61String",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagT61String"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagT61String = 20\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagUTCTime",
              "documentation": {
                "identifier": "TagUTCTime",
                "newPage": false,
                "searchKey": "asn1.TagUTCTime",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagUTCTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagUTCTime = 23\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TagUTF8String",
              "documentation": {
                "identifier": "TagUTF8String",
                "newPage": false,
                "searchKey": "asn1.TagUTF8String",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TagUTF8String"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TagUTF8String = 12\n```\n\nASN.1 tags represent the type of the following object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#allowAmpersand",
              "documentation": {
                "identifier": "allowAmpersand",
                "newPage": false,
                "searchKey": "asn1.allowAmpersand",
                "tags": [
                  "constant",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const allowAmpersand"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst allowAmpersand ampersandFlag = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#allowAsterisk",
              "documentation": {
                "identifier": "allowAsterisk",
                "newPage": false,
                "searchKey": "asn1.allowAsterisk",
                "tags": [
                  "constant",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const allowAsterisk"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst allowAsterisk asteriskFlag = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#rejectAmpersand",
              "documentation": {
                "identifier": "rejectAmpersand",
                "newPage": false,
                "searchKey": "asn1.rejectAmpersand",
                "tags": [
                  "constant",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rejectAmpersand"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rejectAmpersand ampersandFlag = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#rejectAsterisk",
              "documentation": {
                "identifier": "rejectAsterisk",
                "newPage": false,
                "searchKey": "asn1.rejectAsterisk",
                "tags": [
                  "constant",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rejectAsterisk"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rejectAsterisk asteriskFlag = false\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/asn1#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/asn1#NullBytes",
              "documentation": {
                "identifier": "NullBytes",
                "newPage": false,
                "searchKey": "asn1.NullBytes",
                "tags": [
                  "variable",
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NullBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NullBytes = []byte{TagNull, 0}\n```\n\nNullBytes contains bytes representing the DER-encoded ASN.1 NULL type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#NullRawValue",
              "documentation": {
                "identifier": "NullRawValue",
                "newPage": false,
                "searchKey": "asn1.NullRawValue",
                "tags": [
                  "variable",
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var NullRawValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar NullRawValue = RawValue{Tag: TagNull}\n```\n\nNullRawValue is a RawValue with its Tag set to the ASN.1 NULL type tag (5). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#PST",
              "documentation": {
                "identifier": "PST",
                "newPage": false,
                "searchKey": "asn1.PST",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var PST"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar PST = time.FixedZone(\"PST\", -8*60*60)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bigIntTests",
              "documentation": {
                "identifier": "bigIntTests",
                "newPage": false,
                "searchKey": "asn1.bigIntTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bigIntTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bigIntTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bigIntType",
              "documentation": {
                "identifier": "bigIntType",
                "newPage": false,
                "searchKey": "asn1.bigIntType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bigIntType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bigIntType = reflect.TypeOf(new(big.Int))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bigOne",
              "documentation": {
                "identifier": "bigOne",
                "newPage": false,
                "searchKey": "asn1.bigOne",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bigOne"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bigOne = big.NewInt(1)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bitStringRightAlignTests",
              "documentation": {
                "identifier": "bitStringRightAlignTests",
                "newPage": false,
                "searchKey": "asn1.bitStringRightAlignTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bitStringRightAlignTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bitStringRightAlignTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bitStringTestData",
              "documentation": {
                "identifier": "bitStringTestData",
                "newPage": false,
                "searchKey": "asn1.bitStringTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bitStringTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bitStringTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bitStringType",
              "documentation": {
                "identifier": "bitStringType",
                "newPage": false,
                "searchKey": "asn1.bitStringType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bitStringType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bitStringType = reflect.TypeOf(BitString{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bmpStringTests",
              "documentation": {
                "identifier": "bmpStringTests",
                "newPage": false,
                "searchKey": "asn1.bmpStringTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var bmpStringTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar bmpStringTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#boolTestData",
              "documentation": {
                "identifier": "boolTestData",
                "newPage": false,
                "searchKey": "asn1.boolTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var boolTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar boolTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#byte00Encoder",
              "documentation": {
                "identifier": "byte00Encoder",
                "newPage": false,
                "searchKey": "asn1.byte00Encoder",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var byte00Encoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar byte00Encoder encoder = byteEncoder(0x00)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#byteFFEncoder",
              "documentation": {
                "identifier": "byteFFEncoder",
                "newPage": false,
                "searchKey": "asn1.byteFFEncoder",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var byteFFEncoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar byteFFEncoder encoder = byteEncoder(0xff)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#derEncodedPaypalNULCertBytes",
              "documentation": {
                "identifier": "derEncodedPaypalNULCertBytes",
                "newPage": false,
                "searchKey": "asn1.derEncodedPaypalNULCertBytes",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var derEncodedPaypalNULCertBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar derEncodedPaypalNULCertBytes = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#derEncodedSelfSignedCert",
              "documentation": {
                "identifier": "derEncodedSelfSignedCert",
                "newPage": false,
                "searchKey": "asn1.derEncodedSelfSignedCert",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var derEncodedSelfSignedCert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar derEncodedSelfSignedCert = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#derEncodedSelfSignedCertBytes",
              "documentation": {
                "identifier": "derEncodedSelfSignedCertBytes",
                "newPage": false,
                "searchKey": "asn1.derEncodedSelfSignedCertBytes",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var derEncodedSelfSignedCertBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar derEncodedSelfSignedCertBytes = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#enumeratedType",
              "documentation": {
                "identifier": "enumeratedType",
                "newPage": false,
                "searchKey": "asn1.enumeratedType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var enumeratedType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar enumeratedType = reflect.TypeOf(Enumerated(0))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#explicitTaggedTimeTestData",
              "documentation": {
                "identifier": "explicitTaggedTimeTestData",
                "newPage": false,
                "searchKey": "asn1.explicitTaggedTimeTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var explicitTaggedTimeTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar explicitTaggedTimeTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#flagType",
              "documentation": {
                "identifier": "flagType",
                "newPage": false,
                "searchKey": "asn1.flagType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var flagType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar flagType = reflect.TypeOf(Flag(false))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#generalizedTimeTestData",
              "documentation": {
                "identifier": "generalizedTimeTestData",
                "newPage": false,
                "searchKey": "asn1.generalizedTimeTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var generalizedTimeTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar generalizedTimeTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#int32TestData",
              "documentation": {
                "identifier": "int32TestData",
                "newPage": false,
                "searchKey": "asn1.int32TestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var int32TestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar int32TestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#int64TestData",
              "documentation": {
                "identifier": "int64TestData",
                "newPage": false,
                "searchKey": "asn1.int64TestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var int64TestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar int64TestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#marshalErrTests",
              "documentation": {
                "identifier": "marshalErrTests",
                "newPage": false,
                "searchKey": "asn1.marshalErrTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalErrTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalErrTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#marshalTests",
              "documentation": {
                "identifier": "marshalTests",
                "newPage": false,
                "searchKey": "asn1.marshalTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#marshalWithParamsTests",
              "documentation": {
                "identifier": "marshalWithParamsTests",
                "newPage": false,
                "searchKey": "asn1.marshalWithParamsTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalWithParamsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalWithParamsTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#objectIdentifierTestData",
              "documentation": {
                "identifier": "objectIdentifierTestData",
                "newPage": false,
                "searchKey": "asn1.objectIdentifierTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var objectIdentifierTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar objectIdentifierTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#objectIdentifierType",
              "documentation": {
                "identifier": "objectIdentifierType",
                "newPage": false,
                "searchKey": "asn1.objectIdentifierType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var objectIdentifierType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar objectIdentifierType = reflect.TypeOf(ObjectIdentifier{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#oiEqualTests",
              "documentation": {
                "identifier": "oiEqualTests",
                "newPage": false,
                "searchKey": "asn1.oiEqualTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var oiEqualTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oiEqualTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseFieldParametersTestData",
              "documentation": {
                "identifier": "parseFieldParametersTestData",
                "newPage": false,
                "searchKey": "asn1.parseFieldParametersTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseFieldParametersTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseFieldParametersTestData []parseFieldParametersTest = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#rawContentsType",
              "documentation": {
                "identifier": "rawContentsType",
                "newPage": false,
                "searchKey": "asn1.rawContentsType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var rawContentsType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rawContentsType = reflect.TypeOf(RawContent(nil))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#rawValueType",
              "documentation": {
                "identifier": "rawValueType",
                "newPage": false,
                "searchKey": "asn1.rawValueType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var rawValueType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rawValueType = reflect.TypeOf(RawValue{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#stringSliceTestData",
              "documentation": {
                "identifier": "stringSliceTestData",
                "newPage": false,
                "searchKey": "asn1.stringSliceTestData",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var stringSliceTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stringSliceTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#tagAndLengthData",
              "documentation": {
                "identifier": "tagAndLengthData",
                "newPage": false,
                "searchKey": "asn1.tagAndLengthData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tagAndLengthData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tagAndLengthData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#timeType",
              "documentation": {
                "identifier": "timeType",
                "newPage": false,
                "searchKey": "asn1.timeType",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var timeType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar timeType = reflect.TypeOf(time.Time{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#unmarshalTestData",
              "documentation": {
                "identifier": "unmarshalTestData",
                "newPage": false,
                "searchKey": "asn1.unmarshalTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var unmarshalTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unmarshalTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#utcTestData",
              "documentation": {
                "identifier": "utcTestData",
                "newPage": false,
                "searchKey": "asn1.utcTestData",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var utcTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar utcTestData = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/asn1#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/asn1#AlgorithmIdentifier",
              "documentation": {
                "identifier": "AlgorithmIdentifier",
                "newPage": false,
                "searchKey": "asn1.AlgorithmIdentifier",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AlgorithmIdentifier struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AlgorithmIdentifier struct {\n\tAlgorithm ObjectIdentifier\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#AttributeTypeAndValue",
              "documentation": {
                "identifier": "AttributeTypeAndValue",
                "newPage": false,
                "searchKey": "asn1.AttributeTypeAndValue",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type AttributeTypeAndValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AttributeTypeAndValue struct {\n\tType  ObjectIdentifier\n\tValue interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#BitString",
              "documentation": {
                "identifier": "BitString",
                "newPage": false,
                "searchKey": "asn1.BitString",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BitString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BitString struct {\n\tBytes     []byte // bits packed into bytes.\n\tBitLength int    // length in bits.\n}\n```\n\nBitString is the structure to use when you want an ASN.1 BIT STRING type. A bit string is padded up to the nearest byte in memory and the number of valid bits is recorded. Padding bits will be zero. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#parseBitString",
                    "documentation": {
                      "identifier": "parseBitString",
                      "newPage": false,
                      "searchKey": "asn1.parseBitString",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseBitString(bytes []byte) (ret BitString, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseBitString(bytes []byte) (ret BitString, err error)\n```\n\nparseBitString parses an ASN.1 bit string from the given byte slice and returns it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#BitString.At",
                    "documentation": {
                      "identifier": "BitString.At",
                      "newPage": false,
                      "searchKey": "asn1.BitString.At",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b BitString) At(i int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b BitString) At(i int) int\n```\n\nAt returns the bit at the given index. If the index is out of range it returns false. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#BitString.RightAlign",
                    "documentation": {
                      "identifier": "BitString.RightAlign",
                      "newPage": false,
                      "searchKey": "asn1.BitString.RightAlign",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b BitString) RightAlign() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b BitString) RightAlign() []byte\n```\n\nRightAlign returns a slice where the padding bits are at the beginning. The slice may share memory with the BitString. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#Certificate",
              "documentation": {
                "identifier": "Certificate",
                "newPage": false,
                "searchKey": "asn1.Certificate",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Certificate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Certificate struct {\n\tTBSCertificate     TBSCertificate\n\tSignatureAlgorithm AlgorithmIdentifier\n\tSignatureValue     BitString\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#Enumerated",
              "documentation": {
                "identifier": "Enumerated",
                "newPage": false,
                "searchKey": "asn1.Enumerated",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Enumerated int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Enumerated int\n```\n\nAn Enumerated is represented as a plain int. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#Flag",
              "documentation": {
                "identifier": "Flag",
                "newPage": false,
                "searchKey": "asn1.Flag",
                "tags": [
                  "boolean"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Flag bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Flag bool\n```\n\nA Flag accepts any data and is set to true if present. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#ObjectIdentifier",
              "documentation": {
                "identifier": "ObjectIdentifier",
                "newPage": false,
                "searchKey": "asn1.ObjectIdentifier",
                "tags": [
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ObjectIdentifier []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ObjectIdentifier []int\n```\n\nAn ObjectIdentifier represents an ASN.1 OBJECT IDENTIFIER. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#parseObjectIdentifier",
                    "documentation": {
                      "identifier": "parseObjectIdentifier",
                      "newPage": false,
                      "searchKey": "asn1.parseObjectIdentifier",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseObjectIdentifier(bytes []byte) (s ObjectIdentifier, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseObjectIdentifier(bytes []byte) (s ObjectIdentifier, err error)\n```\n\nparseObjectIdentifier parses an OBJECT IDENTIFIER from the given bytes and returns it. An object identifier is a sequence of variable length integers that are assigned in a hierarchy. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#ObjectIdentifier.Equal",
                    "documentation": {
                      "identifier": "ObjectIdentifier.Equal",
                      "newPage": false,
                      "searchKey": "asn1.ObjectIdentifier.Equal",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oi ObjectIdentifier) Equal(other ObjectIdentifier) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oi ObjectIdentifier) Equal(other ObjectIdentifier) bool\n```\n\nEqual reports whether oi and other represent the same identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#ObjectIdentifier.String",
                    "documentation": {
                      "identifier": "ObjectIdentifier.String",
                      "newPage": false,
                      "searchKey": "asn1.ObjectIdentifier.String",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oi ObjectIdentifier) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oi ObjectIdentifier) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#PublicKeyInfo",
              "documentation": {
                "identifier": "PublicKeyInfo",
                "newPage": false,
                "searchKey": "asn1.PublicKeyInfo",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PublicKeyInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PublicKeyInfo struct {\n\tAlgorithm AlgorithmIdentifier\n\tPublicKey BitString\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#RDNSequence",
              "documentation": {
                "identifier": "RDNSequence",
                "newPage": false,
                "searchKey": "asn1.RDNSequence",
                "tags": [
                  "array",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RDNSequence []asn1.RelativeDistinguishedNameSET"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RDNSequence []RelativeDistinguishedNameSET\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#RawContent",
              "documentation": {
                "identifier": "RawContent",
                "newPage": false,
                "searchKey": "asn1.RawContent",
                "tags": [
                  "array",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawContent []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawContent []byte\n```\n\nRawContent is used to signal that the undecoded, DER data needs to be preserved for a struct. To use it, the first field of the struct must have this type. It's an error for any of the other fields to have this type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#RawValue",
              "documentation": {
                "identifier": "RawValue",
                "newPage": false,
                "searchKey": "asn1.RawValue",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RawValue struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RawValue struct {\n\tClass, Tag int\n\tIsCompound bool\n\tBytes      []byte\n\tFullBytes  []byte // includes the tag and length\n}\n```\n\nA RawValue represents an undecoded ASN.1 object. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#RelativeDistinguishedNameSET",
              "documentation": {
                "identifier": "RelativeDistinguishedNameSET",
                "newPage": false,
                "searchKey": "asn1.RelativeDistinguishedNameSET",
                "tags": [
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RelativeDistinguishedNameSET []asn1.AttributeTypeAndValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RelativeDistinguishedNameSET []AttributeTypeAndValue\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#StructuralError",
              "documentation": {
                "identifier": "StructuralError",
                "newPage": false,
                "searchKey": "asn1.StructuralError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StructuralError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StructuralError struct {\n\tMsg string\n}\n```\n\nA StructuralError suggests that the ASN.1 data is valid, but the Go type which is receiving it doesn't match. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#StructuralError.Error",
                    "documentation": {
                      "identifier": "StructuralError.Error",
                      "newPage": false,
                      "searchKey": "asn1.StructuralError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e StructuralError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e StructuralError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#SyntaxError",
              "documentation": {
                "identifier": "SyntaxError",
                "newPage": false,
                "searchKey": "asn1.SyntaxError",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyntaxError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyntaxError struct {\n\tMsg string\n}\n```\n\nA SyntaxError suggests that the ASN.1 data is invalid. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#SyntaxError.Error",
                    "documentation": {
                      "identifier": "SyntaxError.Error",
                      "newPage": false,
                      "searchKey": "asn1.SyntaxError.Error",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e SyntaxError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e SyntaxError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TBSCertificate",
              "documentation": {
                "identifier": "TBSCertificate",
                "newPage": false,
                "searchKey": "asn1.TBSCertificate",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TBSCertificate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TBSCertificate struct {\n\tVersion            int `asn1:\"optional,explicit,default:0,tag:0\"`\n\tSerialNumber       RawValue\n\tSignatureAlgorithm AlgorithmIdentifier\n\tIssuer             RDNSequence\n\tValidity           Validity\n\tSubject            RDNSequence\n\tPublicKey          PublicKeyInfo\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestBigInt",
              "documentation": {
                "identifier": "TestBigInt",
                "newPage": false,
                "searchKey": "asn1.TestBigInt",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestBigInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestBigInt struct {\n\tX *big.Int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestContextSpecificTags",
              "documentation": {
                "identifier": "TestContextSpecificTags",
                "newPage": false,
                "searchKey": "asn1.TestContextSpecificTags",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestContextSpecificTags struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestContextSpecificTags struct {\n\tA int `asn1:\"tag:1\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestContextSpecificTags2",
              "documentation": {
                "identifier": "TestContextSpecificTags2",
                "newPage": false,
                "searchKey": "asn1.TestContextSpecificTags2",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestContextSpecificTags2 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestContextSpecificTags2 struct {\n\tA int `asn1:\"explicit,tag:1\"`\n\tB int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestContextSpecificTags3",
              "documentation": {
                "identifier": "TestContextSpecificTags3",
                "newPage": false,
                "searchKey": "asn1.TestContextSpecificTags3",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestContextSpecificTags3 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestContextSpecificTags3 struct {\n\tS string `asn1:\"tag:1,utf8\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestElementsAfterString",
              "documentation": {
                "identifier": "TestElementsAfterString",
                "newPage": false,
                "searchKey": "asn1.TestElementsAfterString",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestElementsAfterString struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestElementsAfterString struct {\n\tS    string\n\tA, B int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestObjectIdentifierStruct",
              "documentation": {
                "identifier": "TestObjectIdentifierStruct",
                "newPage": false,
                "searchKey": "asn1.TestObjectIdentifierStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestObjectIdentifierStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestObjectIdentifierStruct struct {\n\tOID ObjectIdentifier\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestSet",
              "documentation": {
                "identifier": "TestSet",
                "newPage": false,
                "searchKey": "asn1.TestSet",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestSet struct {\n\tInts []int `asn1:\"set\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#Validity",
              "documentation": {
                "identifier": "Validity",
                "newPage": false,
                "searchKey": "asn1.Validity",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Validity struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Validity struct {\n\tNotBefore, NotAfter time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#ampersandFlag",
              "documentation": {
                "identifier": "ampersandFlag",
                "newPage": false,
                "searchKey": "asn1.ampersandFlag",
                "tags": [
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ampersandFlag bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ampersandFlag bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#applicationTest",
              "documentation": {
                "identifier": "applicationTest",
                "newPage": false,
                "searchKey": "asn1.applicationTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type applicationTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype applicationTest struct {\n\tA int `asn1:\"application,tag:0\"`\n\tB int `asn1:\"application,tag:1,explicit\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#asteriskFlag",
              "documentation": {
                "identifier": "asteriskFlag",
                "newPage": false,
                "searchKey": "asn1.asteriskFlag",
                "tags": [
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type asteriskFlag bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype asteriskFlag bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bigIntStruct",
              "documentation": {
                "identifier": "bigIntStruct",
                "newPage": false,
                "searchKey": "asn1.bigIntStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bigIntStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bigIntStruct struct {\n\tA *big.Int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bitStringEncoder",
              "documentation": {
                "identifier": "bitStringEncoder",
                "newPage": false,
                "searchKey": "asn1.bitStringEncoder",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bitStringEncoder asn1.BitString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bitStringEncoder BitString\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#bitStringEncoder.Encode",
                    "documentation": {
                      "identifier": "bitStringEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.bitStringEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b bitStringEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b bitStringEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#bitStringEncoder.Len",
                    "documentation": {
                      "identifier": "bitStringEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.bitStringEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b bitStringEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b bitStringEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bitStringRightAlignTest",
              "documentation": {
                "identifier": "bitStringRightAlignTest",
                "newPage": false,
                "searchKey": "asn1.bitStringRightAlignTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bitStringRightAlignTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bitStringRightAlignTest struct {\n\tin    []byte\n\tinlen int\n\tout   []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bitStringTest",
              "documentation": {
                "identifier": "bitStringTest",
                "newPage": false,
                "searchKey": "asn1.bitStringTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bitStringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bitStringTest struct {\n\tin        []byte\n\tok        bool\n\tout       []byte\n\tbitLength int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#boolTest",
              "documentation": {
                "identifier": "boolTest",
                "newPage": false,
                "searchKey": "asn1.boolTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type boolTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype boolTest struct {\n\tin  []byte\n\tok  bool\n\tout bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#byteEncoder",
              "documentation": {
                "identifier": "byteEncoder",
                "newPage": false,
                "searchKey": "asn1.byteEncoder",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteEncoder byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteEncoder byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#byteEncoder.Encode",
                    "documentation": {
                      "identifier": "byteEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.byteEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c byteEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c byteEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#byteEncoder.Len",
                    "documentation": {
                      "identifier": "byteEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.byteEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c byteEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c byteEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#bytesEncoder",
              "documentation": {
                "identifier": "bytesEncoder",
                "newPage": false,
                "searchKey": "asn1.bytesEncoder",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bytesEncoder []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bytesEncoder []byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#bytesEncoder.Encode",
                    "documentation": {
                      "identifier": "bytesEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.bytesEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b bytesEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b bytesEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#bytesEncoder.Len",
                    "documentation": {
                      "identifier": "bytesEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.bytesEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b bytesEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b bytesEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#defaultTest",
              "documentation": {
                "identifier": "defaultTest",
                "newPage": false,
                "searchKey": "asn1.defaultTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type defaultTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype defaultTest struct {\n\tA int `asn1:\"optional,default:1\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#encoder",
              "documentation": {
                "identifier": "encoder",
                "newPage": false,
                "searchKey": "asn1.encoder",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type encoder interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encoder interface {\n\t// Len returns the number of bytes needed to marshal this element.\n\tLen() int\n\t// Encode encodes this element by writing Len() bytes to dst.\n\tEncode(dst []byte)\n}\n```\n\nencoder represents an ASN.1 element that is waiting to be marshaled. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeBigInt",
                    "documentation": {
                      "identifier": "makeBigInt",
                      "newPage": false,
                      "searchKey": "asn1.makeBigInt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeBigInt(n *big.Int) (encoder, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeBigInt(n *big.Int) (encoder, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeBody",
                    "documentation": {
                      "identifier": "makeBody",
                      "newPage": false,
                      "searchKey": "asn1.makeBody",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeBody(value reflect.Value, params fieldParameters) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeBody(value reflect.Value, params fieldParameters) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeField",
                    "documentation": {
                      "identifier": "makeField",
                      "newPage": false,
                      "searchKey": "asn1.makeField",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeField(v reflect.Value, params fieldParameters) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeField(v reflect.Value, params fieldParameters) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeGeneralizedTime",
                    "documentation": {
                      "identifier": "makeGeneralizedTime",
                      "newPage": false,
                      "searchKey": "asn1.makeGeneralizedTime",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeGeneralizedTime(t time.Time) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeGeneralizedTime(t time.Time) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeIA5String",
                    "documentation": {
                      "identifier": "makeIA5String",
                      "newPage": false,
                      "searchKey": "asn1.makeIA5String",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeIA5String(s string) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeIA5String(s string) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeNumericString",
                    "documentation": {
                      "identifier": "makeNumericString",
                      "newPage": false,
                      "searchKey": "asn1.makeNumericString",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeNumericString(s string) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeNumericString(s string) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeObjectIdentifier",
                    "documentation": {
                      "identifier": "makeObjectIdentifier",
                      "newPage": false,
                      "searchKey": "asn1.makeObjectIdentifier",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeObjectIdentifier(oid []int) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeObjectIdentifier(oid []int) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makePrintableString",
                    "documentation": {
                      "identifier": "makePrintableString",
                      "newPage": false,
                      "searchKey": "asn1.makePrintableString",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makePrintableString(s string) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makePrintableString(s string) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeUTCTime",
                    "documentation": {
                      "identifier": "makeUTCTime",
                      "newPage": false,
                      "searchKey": "asn1.makeUTCTime",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeUTCTime(t time.Time) (e encoder, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeUTCTime(t time.Time) (e encoder, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#makeUTF8String",
                    "documentation": {
                      "identifier": "makeUTF8String",
                      "newPage": false,
                      "searchKey": "asn1.makeUTF8String",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeUTF8String(s string) encoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeUTF8String(s string) encoder\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#explicitTagTest",
              "documentation": {
                "identifier": "explicitTagTest",
                "newPage": false,
                "searchKey": "asn1.explicitTagTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type explicitTagTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype explicitTagTest struct {\n\tA int `asn1:\"explicit,tag:5\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#explicitTaggedTimeTest",
              "documentation": {
                "identifier": "explicitTaggedTimeTest",
                "newPage": false,
                "searchKey": "asn1.explicitTaggedTimeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type explicitTaggedTimeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype explicitTaggedTimeTest struct {\n\tTime time.Time `asn1:\"explicit,tag:0\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#exported",
              "documentation": {
                "identifier": "exported",
                "newPage": false,
                "searchKey": "asn1.exported",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type exported struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype exported struct {\n\tX int\n\tY int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#fieldParameters",
              "documentation": {
                "identifier": "fieldParameters",
                "newPage": false,
                "searchKey": "asn1.fieldParameters",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type fieldParameters struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fieldParameters struct {\n\toptional     bool   // true iff the field is OPTIONAL\n\texplicit     bool   // true iff an EXPLICIT tag is in use.\n\tapplication  bool   // true iff an APPLICATION tag is in use.\n\tprivate      bool   // true iff a PRIVATE tag is in use.\n\tdefaultValue *int64 // a default value for INTEGER typed fields (maybe nil).\n\ttag          *int   // the EXPLICIT or IMPLICIT tag (maybe nil).\n\tstringType   int    // the string tag to use when marshaling.\n\ttimeType     int    // the time tag to use when marshaling.\n\tset          bool   // true iff this should be encoded as a SET\n\tomitEmpty    bool   // true iff this should be omitted if empty when marshaling.\n\n}\n```\n\nfieldParameters is the parsed representation of tag string from a structure field. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#parseFieldParameters",
                    "documentation": {
                      "identifier": "parseFieldParameters",
                      "newPage": false,
                      "searchKey": "asn1.parseFieldParameters",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseFieldParameters(str string) (ret fieldParameters)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseFieldParameters(str string) (ret fieldParameters)\n```\n\nGiven a tag string with the format specified in the package comment, parseFieldParameters will parse it into a fieldParameters structure, ignoring unknown parts of the string. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#flagTest",
              "documentation": {
                "identifier": "flagTest",
                "newPage": false,
                "searchKey": "asn1.flagTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type flagTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype flagTest struct {\n\tA Flag `asn1:\"tag:0,optional\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#generalizedTimeTest",
              "documentation": {
                "identifier": "generalizedTimeTest",
                "newPage": false,
                "searchKey": "asn1.generalizedTimeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type generalizedTimeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype generalizedTimeTest struct {\n\tA time.Time `asn1:\"generalized\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#genericStringTest",
              "documentation": {
                "identifier": "genericStringTest",
                "newPage": false,
                "searchKey": "asn1.genericStringTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type genericStringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype genericStringTest struct {\n\tA string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#ia5StringTest",
              "documentation": {
                "identifier": "ia5StringTest",
                "newPage": false,
                "searchKey": "asn1.ia5StringTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ia5StringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ia5StringTest struct {\n\tA string `asn1:\"ia5\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#implicitTagTest",
              "documentation": {
                "identifier": "implicitTagTest",
                "newPage": false,
                "searchKey": "asn1.implicitTagTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type implicitTagTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype implicitTagTest struct {\n\tA int `asn1:\"implicit,tag:5\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#implicitTaggedTimeTest",
              "documentation": {
                "identifier": "implicitTaggedTimeTest",
                "newPage": false,
                "searchKey": "asn1.implicitTaggedTimeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type implicitTaggedTimeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype implicitTaggedTimeTest struct {\n\tTime time.Time `asn1:\"tag:24\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#int32Test",
              "documentation": {
                "identifier": "int32Test",
                "newPage": false,
                "searchKey": "asn1.int32Test",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type int32Test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype int32Test struct {\n\tin  []byte\n\tok  bool\n\tout int32\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#int64Encoder",
              "documentation": {
                "identifier": "int64Encoder",
                "newPage": false,
                "searchKey": "asn1.int64Encoder",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type int64Encoder int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype int64Encoder int64\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#int64Encoder.Encode",
                    "documentation": {
                      "identifier": "int64Encoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.int64Encoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i int64Encoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i int64Encoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#int64Encoder.Len",
                    "documentation": {
                      "identifier": "int64Encoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.int64Encoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (i int64Encoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (i int64Encoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#int64Test",
              "documentation": {
                "identifier": "int64Test",
                "newPage": false,
                "searchKey": "asn1.int64Test",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type int64Test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype int64Test struct {\n\tin  []byte\n\tok  bool\n\tout int64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#intStruct",
              "documentation": {
                "identifier": "intStruct",
                "newPage": false,
                "searchKey": "asn1.intStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type intStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype intStruct struct {\n\tA int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#invalidUTF8Test",
              "documentation": {
                "identifier": "invalidUTF8Test",
                "newPage": false,
                "searchKey": "asn1.invalidUTF8Test",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type invalidUTF8Test struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype invalidUTF8Test struct {\n\tStr string `asn1:\"utf8\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#invalidUnmarshalError",
              "documentation": {
                "identifier": "invalidUnmarshalError",
                "newPage": false,
                "searchKey": "asn1.invalidUnmarshalError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type invalidUnmarshalError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype invalidUnmarshalError struct {\n\tType reflect.Type\n}\n```\n\nAn invalidUnmarshalError describes an invalid argument passed to Unmarshal. (The argument to Unmarshal must be a non-nil pointer.) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#invalidUnmarshalError.Error",
                    "documentation": {
                      "identifier": "invalidUnmarshalError.Error",
                      "newPage": false,
                      "searchKey": "asn1.invalidUnmarshalError.Error",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *invalidUnmarshalError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *invalidUnmarshalError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#marshalErrTest",
              "documentation": {
                "identifier": "marshalErrTest",
                "newPage": false,
                "searchKey": "asn1.marshalErrTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type marshalErrTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype marshalErrTest struct {\n\tin  interface{}\n\terr string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#marshalTest",
              "documentation": {
                "identifier": "marshalTest",
                "newPage": false,
                "searchKey": "asn1.marshalTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type marshalTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype marshalTest struct {\n\tin  interface{}\n\tout string // hex encoded\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#marshalWithParamsTest",
              "documentation": {
                "identifier": "marshalWithParamsTest",
                "newPage": false,
                "searchKey": "asn1.marshalWithParamsTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type marshalWithParamsTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype marshalWithParamsTest struct {\n\tin     interface{}\n\tparams string\n\tout    string // hex encoded\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#multiEncoder",
              "documentation": {
                "identifier": "multiEncoder",
                "newPage": false,
                "searchKey": "asn1.multiEncoder",
                "tags": [
                  "array",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type multiEncoder []asn1.encoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype multiEncoder []encoder\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#multiEncoder.Encode",
                    "documentation": {
                      "identifier": "multiEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.multiEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m multiEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m multiEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#multiEncoder.Len",
                    "documentation": {
                      "identifier": "multiEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.multiEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m multiEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m multiEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#nestedStruct",
              "documentation": {
                "identifier": "nestedStruct",
                "newPage": false,
                "searchKey": "asn1.nestedStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type nestedStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nestedStruct struct {\n\tA intStruct\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#numericStringTest",
              "documentation": {
                "identifier": "numericStringTest",
                "newPage": false,
                "searchKey": "asn1.numericStringTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type numericStringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype numericStringTest struct {\n\tA string `asn1:\"numeric\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#objectIdentifierTest",
              "documentation": {
                "identifier": "objectIdentifierTest",
                "newPage": false,
                "searchKey": "asn1.objectIdentifierTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type objectIdentifierTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype objectIdentifierTest struct {\n\tin  []byte\n\tok  bool\n\tout ObjectIdentifier // has base type[]int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#oiEqualTest",
              "documentation": {
                "identifier": "oiEqualTest",
                "newPage": false,
                "searchKey": "asn1.oiEqualTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type oiEqualTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype oiEqualTest struct {\n\tfirst  ObjectIdentifier\n\tsecond ObjectIdentifier\n\tsame   bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#oidEncoder",
              "documentation": {
                "identifier": "oidEncoder",
                "newPage": false,
                "searchKey": "asn1.oidEncoder",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type oidEncoder []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype oidEncoder []int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#oidEncoder.Encode",
                    "documentation": {
                      "identifier": "oidEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.oidEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oid oidEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oid oidEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#oidEncoder.Len",
                    "documentation": {
                      "identifier": "oidEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.oidEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (oid oidEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (oid oidEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#omitEmptyTest",
              "documentation": {
                "identifier": "omitEmptyTest",
                "newPage": false,
                "searchKey": "asn1.omitEmptyTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type omitEmptyTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype omitEmptyTest struct {\n\tA []string `asn1:\"omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#optionalRawValueTest",
              "documentation": {
                "identifier": "optionalRawValueTest",
                "newPage": false,
                "searchKey": "asn1.optionalRawValueTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type optionalRawValueTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype optionalRawValueTest struct {\n\tA RawValue `asn1:\"optional\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseFieldParametersTest",
              "documentation": {
                "identifier": "parseFieldParametersTest",
                "newPage": false,
                "searchKey": "asn1.parseFieldParametersTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type parseFieldParametersTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parseFieldParametersTest struct {\n\tin  string\n\tout fieldParameters\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#printableStringTest",
              "documentation": {
                "identifier": "printableStringTest",
                "newPage": false,
                "searchKey": "asn1.printableStringTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type printableStringTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype printableStringTest struct {\n\tA string `asn1:\"printable\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#privateTest",
              "documentation": {
                "identifier": "privateTest",
                "newPage": false,
                "searchKey": "asn1.privateTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type privateTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype privateTest struct {\n\tA int `asn1:\"private,tag:0\"`\n\tB int `asn1:\"private,tag:1,explicit\"`\n\tC int `asn1:\"private,tag:31\"`  // tag size should be 2 octet\n\tD int `asn1:\"private,tag:128\"` // tag size should be 3 octet\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#rawContentsStruct",
              "documentation": {
                "identifier": "rawContentsStruct",
                "newPage": false,
                "searchKey": "asn1.rawContentsStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rawContentsStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rawContentsStruct struct {\n\tRaw RawContent\n\tA   int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#rawStructTest",
              "documentation": {
                "identifier": "rawStructTest",
                "newPage": false,
                "searchKey": "asn1.rawStructTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type rawStructTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rawStructTest struct {\n\tRaw RawContent\n\tA   int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#setEncoder",
              "documentation": {
                "identifier": "setEncoder",
                "newPage": false,
                "searchKey": "asn1.setEncoder",
                "tags": [
                  "array",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type setEncoder []asn1.encoder"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype setEncoder []encoder\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#setEncoder.Encode",
                    "documentation": {
                      "identifier": "setEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.setEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s setEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s setEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#setEncoder.Len",
                    "documentation": {
                      "identifier": "setEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.setEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s setEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s setEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#stringEncoder",
              "documentation": {
                "identifier": "stringEncoder",
                "newPage": false,
                "searchKey": "asn1.stringEncoder",
                "tags": [
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type stringEncoder string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stringEncoder string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#stringEncoder.Encode",
                    "documentation": {
                      "identifier": "stringEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.stringEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stringEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stringEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#stringEncoder.Len",
                    "documentation": {
                      "identifier": "stringEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.stringEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stringEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stringEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#tagAndLength",
              "documentation": {
                "identifier": "tagAndLength",
                "newPage": false,
                "searchKey": "asn1.tagAndLength",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type tagAndLength struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tagAndLength struct {\n\tclass, tag, length int\n\tisCompound         bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#parseTagAndLength",
                    "documentation": {
                      "identifier": "parseTagAndLength",
                      "newPage": false,
                      "searchKey": "asn1.parseTagAndLength",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseTagAndLength(bytes []byte, initOffset int) (ret tagAndLength, offset int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseTagAndLength(bytes []byte, initOffset int) (ret tagAndLength, offset int, err error)\n```\n\nparseTagAndLength parses an ASN.1 tag and length pair from the given offset into a byte slice. It returns the parsed data and the new offset. SET and SET OF (tag 17) are mapped to SEQUENCE and SEQUENCE OF (tag 16) since we don't distinguish between ordered and unordered objects in this code. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#tagAndLengthTest",
              "documentation": {
                "identifier": "tagAndLengthTest",
                "newPage": false,
                "searchKey": "asn1.tagAndLengthTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type tagAndLengthTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tagAndLengthTest struct {\n\tin  []byte\n\tok  bool\n\tout tagAndLength\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#taggedEncoder",
              "documentation": {
                "identifier": "taggedEncoder",
                "newPage": false,
                "searchKey": "asn1.taggedEncoder",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type taggedEncoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype taggedEncoder struct {\n\t// scratch contains temporary space for encoding the tag and length of\n\t// an element in order to avoid extra allocations.\n\tscratch [8]byte\n\ttag     encoder\n\tbody    encoder\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/asn1#taggedEncoder.Encode",
                    "documentation": {
                      "identifier": "taggedEncoder.Encode",
                      "newPage": false,
                      "searchKey": "asn1.taggedEncoder.Encode",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *taggedEncoder) Encode(dst []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *taggedEncoder) Encode(dst []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/asn1#taggedEncoder.Len",
                    "documentation": {
                      "identifier": "taggedEncoder.Len",
                      "newPage": false,
                      "searchKey": "asn1.taggedEncoder.Len",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *taggedEncoder) Len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *taggedEncoder) Len() int\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#testSET",
              "documentation": {
                "identifier": "testSET",
                "newPage": false,
                "searchKey": "asn1.testSET",
                "tags": [
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type testSET []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testSET []int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#timeTest",
              "documentation": {
                "identifier": "timeTest",
                "newPage": false,
                "searchKey": "asn1.timeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type timeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype timeTest struct {\n\tin  string\n\tok  bool\n\tout time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#truncatedExplicitTagTest",
              "documentation": {
                "identifier": "truncatedExplicitTagTest",
                "newPage": false,
                "searchKey": "asn1.truncatedExplicitTagTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type truncatedExplicitTagTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype truncatedExplicitTagTest struct {\n\tTest int `asn1:\"explicit,tag:0\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#twoIntStruct",
              "documentation": {
                "identifier": "twoIntStruct",
                "newPage": false,
                "searchKey": "asn1.twoIntStruct",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type twoIntStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype twoIntStruct struct {\n\tA int\n\tB int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#unexported",
              "documentation": {
                "identifier": "unexported",
                "newPage": false,
                "searchKey": "asn1.unexported",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type unexported struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype unexported struct {\n\tX int\n\ty int\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/asn1#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/asn1#BenchmarkMarshal",
              "documentation": {
                "identifier": "BenchmarkMarshal",
                "newPage": false,
                "searchKey": "asn1.BenchmarkMarshal",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMarshal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMarshal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#BenchmarkUnmarshal",
              "documentation": {
                "identifier": "BenchmarkUnmarshal",
                "newPage": false,
                "searchKey": "asn1.BenchmarkUnmarshal",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnmarshal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnmarshal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#Marshal",
              "documentation": {
                "identifier": "Marshal",
                "newPage": false,
                "searchKey": "asn1.Marshal",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Marshal(val interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Marshal(val interface{}) ([]byte, error)\n```\n\nMarshal returns the ASN.1 encoding of val. \n\nIn addition to the struct tags recognised by Unmarshal, the following can be used: \n\n```\nia5:         causes strings to be marshaled as ASN.1, IA5String values\nomitempty:   causes empty slices to be skipped\nprintable:   causes strings to be marshaled as ASN.1, PrintableString values\nutf8:        causes strings to be marshaled as ASN.1, UTF8String values\nutc:         causes time.Time to be marshaled as ASN.1, UTCTime values\ngeneralized: causes time.Time to be marshaled as ASN.1, GeneralizedTime values\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#MarshalWithParams",
              "documentation": {
                "identifier": "MarshalWithParams",
                "newPage": false,
                "searchKey": "asn1.MarshalWithParams",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalWithParams(val interface{}, params string) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalWithParams(val interface{}, params string) ([]byte, error)\n```\n\nMarshalWithParams allows field parameters to be specified for the top-level element. The form of the params is the same as the field tags. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestBMPString",
              "documentation": {
                "identifier": "TestBMPString",
                "newPage": false,
                "searchKey": "asn1.TestBMPString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBMPString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBMPString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestBitString",
              "documentation": {
                "identifier": "TestBitString",
                "newPage": false,
                "searchKey": "asn1.TestBitString",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestBitStringAt",
              "documentation": {
                "identifier": "TestBitStringAt",
                "newPage": false,
                "searchKey": "asn1.TestBitStringAt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitStringAt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitStringAt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestBitStringRightAlign",
              "documentation": {
                "identifier": "TestBitStringRightAlign",
                "newPage": false,
                "searchKey": "asn1.TestBitStringRightAlign",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBitStringRightAlign(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBitStringRightAlign(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestCertificate",
              "documentation": {
                "identifier": "TestCertificate",
                "newPage": false,
                "searchKey": "asn1.TestCertificate",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCertificate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCertificate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestCertificateWithNUL",
              "documentation": {
                "identifier": "TestCertificateWithNUL",
                "newPage": false,
                "searchKey": "asn1.TestCertificateWithNUL",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCertificateWithNUL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCertificateWithNUL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestExplicitTagRawValueStruct",
              "documentation": {
                "identifier": "TestExplicitTagRawValueStruct",
                "newPage": false,
                "searchKey": "asn1.TestExplicitTagRawValueStruct",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExplicitTagRawValueStruct(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExplicitTagRawValueStruct(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestExplicitTaggedTime",
              "documentation": {
                "identifier": "TestExplicitTaggedTime",
                "newPage": false,
                "searchKey": "asn1.TestExplicitTaggedTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExplicitTaggedTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExplicitTaggedTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestGeneralizedTime",
              "documentation": {
                "identifier": "TestGeneralizedTime",
                "newPage": false,
                "searchKey": "asn1.TestGeneralizedTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGeneralizedTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGeneralizedTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestImplicitTaggedTime",
              "documentation": {
                "identifier": "TestImplicitTaggedTime",
                "newPage": false,
                "searchKey": "asn1.TestImplicitTaggedTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImplicitTaggedTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImplicitTaggedTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestInvalidUTF8",
              "documentation": {
                "identifier": "TestInvalidUTF8",
                "newPage": false,
                "searchKey": "asn1.TestInvalidUTF8",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidUTF8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidUTF8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestIssue11130",
              "documentation": {
                "identifier": "TestIssue11130",
                "newPage": false,
                "searchKey": "asn1.TestIssue11130",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue11130(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue11130(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestMarshal",
              "documentation": {
                "identifier": "TestMarshal",
                "newPage": false,
                "searchKey": "asn1.TestMarshal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestMarshalError",
              "documentation": {
                "identifier": "TestMarshalError",
                "newPage": false,
                "searchKey": "asn1.TestMarshalError",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestMarshalNilValue",
              "documentation": {
                "identifier": "TestMarshalNilValue",
                "newPage": false,
                "searchKey": "asn1.TestMarshalNilValue",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalNilValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalNilValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestMarshalOID",
              "documentation": {
                "identifier": "TestMarshalOID",
                "newPage": false,
                "searchKey": "asn1.TestMarshalOID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalOID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalOID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestMarshalWithParams",
              "documentation": {
                "identifier": "TestMarshalWithParams",
                "newPage": false,
                "searchKey": "asn1.TestMarshalWithParams",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalWithParams(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalWithParams(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestNonMinimalEncodedOID",
              "documentation": {
                "identifier": "TestNonMinimalEncodedOID",
                "newPage": false,
                "searchKey": "asn1.TestNonMinimalEncodedOID",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonMinimalEncodedOID(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonMinimalEncodedOID(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestNull",
              "documentation": {
                "identifier": "TestNull",
                "newPage": false,
                "searchKey": "asn1.TestNull",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNull(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNull(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestObjectIdentifier",
              "documentation": {
                "identifier": "TestObjectIdentifier",
                "newPage": false,
                "searchKey": "asn1.TestObjectIdentifier",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestObjectIdentifier(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestObjectIdentifier(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestObjectIdentifierEqual",
              "documentation": {
                "identifier": "TestObjectIdentifierEqual",
                "newPage": false,
                "searchKey": "asn1.TestObjectIdentifierEqual",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestObjectIdentifierEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestObjectIdentifierEqual(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestParseBigInt",
              "documentation": {
                "identifier": "TestParseBigInt",
                "newPage": false,
                "searchKey": "asn1.TestParseBigInt",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseBigInt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseBigInt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestParseBool",
              "documentation": {
                "identifier": "TestParseBool",
                "newPage": false,
                "searchKey": "asn1.TestParseBool",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseBool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseBool(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestParseFieldParameters",
              "documentation": {
                "identifier": "TestParseFieldParameters",
                "newPage": false,
                "searchKey": "asn1.TestParseFieldParameters",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFieldParameters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFieldParameters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestParseInt32",
              "documentation": {
                "identifier": "TestParseInt32",
                "newPage": false,
                "searchKey": "asn1.TestParseInt32",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseInt32(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseInt32(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestParseInt64",
              "documentation": {
                "identifier": "TestParseInt64",
                "newPage": false,
                "searchKey": "asn1.TestParseInt64",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseInt64(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseInt64(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestParseTagAndLength",
              "documentation": {
                "identifier": "TestParseTagAndLength",
                "newPage": false,
                "searchKey": "asn1.TestParseTagAndLength",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseTagAndLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseTagAndLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestRawStructs",
              "documentation": {
                "identifier": "TestRawStructs",
                "newPage": false,
                "searchKey": "asn1.TestRawStructs",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawStructs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawStructs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestSetEncoder",
              "documentation": {
                "identifier": "TestSetEncoder",
                "newPage": false,
                "searchKey": "asn1.TestSetEncoder",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetEncoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetEncoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestSetEncoderSETSliceSuffix",
              "documentation": {
                "identifier": "TestSetEncoderSETSliceSuffix",
                "newPage": false,
                "searchKey": "asn1.TestSetEncoderSETSliceSuffix",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetEncoderSETSliceSuffix(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetEncoderSETSliceSuffix(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestStringSlice",
              "documentation": {
                "identifier": "TestStringSlice",
                "newPage": false,
                "searchKey": "asn1.TestStringSlice",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStringSlice(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStringSlice(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestTaggedRawValue",
              "documentation": {
                "identifier": "TestTaggedRawValue",
                "newPage": false,
                "searchKey": "asn1.TestTaggedRawValue",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTaggedRawValue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTaggedRawValue(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestTruncatedExplicitTag",
              "documentation": {
                "identifier": "TestTruncatedExplicitTag",
                "newPage": false,
                "searchKey": "asn1.TestTruncatedExplicitTag",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTruncatedExplicitTag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTruncatedExplicitTag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestUTCTime",
              "documentation": {
                "identifier": "TestUTCTime",
                "newPage": false,
                "searchKey": "asn1.TestUTCTime",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUTCTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUTCTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestUnexportedStructField",
              "documentation": {
                "identifier": "TestUnexportedStructField",
                "newPage": false,
                "searchKey": "asn1.TestUnexportedStructField",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnexportedStructField(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnexportedStructField(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestUnmarshal",
              "documentation": {
                "identifier": "TestUnmarshal",
                "newPage": false,
                "searchKey": "asn1.TestUnmarshal",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestUnmarshalInvalidUTF8",
              "documentation": {
                "identifier": "TestUnmarshalInvalidUTF8",
                "newPage": false,
                "searchKey": "asn1.TestUnmarshalInvalidUTF8",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalInvalidUTF8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalInvalidUTF8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#TestUnmarshalWithNilOrNonPointer",
              "documentation": {
                "identifier": "TestUnmarshalWithNilOrNonPointer",
                "newPage": false,
                "searchKey": "asn1.TestUnmarshalWithNilOrNonPointer",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalWithNilOrNonPointer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalWithNilOrNonPointer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#Unmarshal",
              "documentation": {
                "identifier": "Unmarshal",
                "newPage": false,
                "searchKey": "asn1.Unmarshal",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Unmarshal(b []byte, val interface{}) (rest []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Unmarshal(b []byte, val interface{}) (rest []byte, err error)\n```\n\nUnmarshal parses the DER-encoded ASN.1 data structure b and uses the reflect package to fill in an arbitrary value pointed at by val. Because Unmarshal uses the reflect package, the structs being written to must use upper case field names. If val is nil or not a pointer, Unmarshal returns an error. \n\nAfter parsing b, any bytes that were leftover and not used to fill val will be returned in rest. When parsing a SEQUENCE into a struct, any trailing elements of the SEQUENCE that do not have matching fields in val will not be included in rest, as these are considered valid elements of the SEQUENCE and not trailing data. \n\nAn ASN.1 INTEGER can be written to an int, int32, int64, or *big.Int (from the math/big package). If the encoded value does not fit in the Go type, Unmarshal returns a parse error. \n\nAn ASN.1 BIT STRING can be written to a BitString. \n\nAn ASN.1 OCTET STRING can be written to a []byte. \n\nAn ASN.1 OBJECT IDENTIFIER can be written to an ObjectIdentifier. \n\nAn ASN.1 ENUMERATED can be written to an Enumerated. \n\nAn ASN.1 UTCTIME or GENERALIZEDTIME can be written to a time.Time. \n\nAn ASN.1 PrintableString, IA5String, or NumericString can be written to a string. \n\nAny of the above ASN.1 values can be written to an interface{}. The value stored in the interface has the corresponding Go type. For integers, that type is int64. \n\nAn ASN.1 SEQUENCE OF x or SET OF x can be written to a slice if an x can be written to the slice's element type. \n\nAn ASN.1 SEQUENCE or SET can be written to a struct if each of the elements in the sequence can be written to the corresponding element in the struct. \n\nThe following tags on struct fields have special meaning to Unmarshal: \n\n```\napplication specifies that an APPLICATION tag is used\nprivate     specifies that a PRIVATE tag is used\ndefault:x   sets the default value for optional integer fields (only used if optional is also present)\nexplicit    specifies that an additional, explicit tag wraps the implicit one\noptional    marks the field as ASN.1 OPTIONAL\nset         causes a SET, rather than a SEQUENCE type to be expected\ntag:x       specifies the ASN.1 tag number; implies ASN.1 CONTEXT SPECIFIC\n\n```\nWhen decoding an ASN.1 value with an IMPLICIT tag into a string field, Unmarshal will default to a PrintableString, which doesn't support characters such as '@' and '&'. To force other encodings, use the following tags: \n\n```\nia5     causes strings to be unmarshaled as ASN.1 IA5String values\nnumeric causes strings to be unmarshaled as ASN.1 NumericString values\nutf8    causes strings to be unmarshaled as ASN.1 UTF8String values\n\n```\nIf the type of the first field of a structure is RawContent then the raw ASN1 contents of the struct will be stored in it. \n\nIf the name of a slice type ends with \"SET\" then it's treated as if the \"set\" tag was set on it. This results in interpreting the type as a SET OF x rather than a SEQUENCE OF x. This can be used with nested slices where a struct tag cannot be given. \n\nOther ASN.1 types are not supported; if it encounters them, Unmarshal returns a parse error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#UnmarshalWithParams",
              "documentation": {
                "identifier": "UnmarshalWithParams",
                "newPage": false,
                "searchKey": "asn1.UnmarshalWithParams",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func UnmarshalWithParams(b []byte, val interface{}, params string) (rest []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc UnmarshalWithParams(b []byte, val interface{}, params string) (rest []byte, err error)\n```\n\nUnmarshalWithParams allows field parameters to be specified for the top-level element. The form of the params is the same as the field tags. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendBase128Int",
              "documentation": {
                "identifier": "appendBase128Int",
                "newPage": false,
                "searchKey": "asn1.appendBase128Int",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendBase128Int(dst []byte, n int64) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendBase128Int(dst []byte, n int64) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendFourDigits",
              "documentation": {
                "identifier": "appendFourDigits",
                "newPage": false,
                "searchKey": "asn1.appendFourDigits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendFourDigits(dst []byte, v int) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendFourDigits(dst []byte, v int) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendGeneralizedTime",
              "documentation": {
                "identifier": "appendGeneralizedTime",
                "newPage": false,
                "searchKey": "asn1.appendGeneralizedTime",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendGeneralizedTime(dst []byte, t time.Time) (ret []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendGeneralizedTime(dst []byte, t time.Time) (ret []byte, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendLength",
              "documentation": {
                "identifier": "appendLength",
                "newPage": false,
                "searchKey": "asn1.appendLength",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendLength(dst []byte, i int) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendLength(dst []byte, i int) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendTagAndLength",
              "documentation": {
                "identifier": "appendTagAndLength",
                "newPage": false,
                "searchKey": "asn1.appendTagAndLength",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendTagAndLength(dst []byte, t tagAndLength) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendTagAndLength(dst []byte, t tagAndLength) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendTimeCommon",
              "documentation": {
                "identifier": "appendTimeCommon",
                "newPage": false,
                "searchKey": "asn1.appendTimeCommon",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendTimeCommon(dst []byte, t time.Time) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendTimeCommon(dst []byte, t time.Time) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendTwoDigits",
              "documentation": {
                "identifier": "appendTwoDigits",
                "newPage": false,
                "searchKey": "asn1.appendTwoDigits",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendTwoDigits(dst []byte, v int) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendTwoDigits(dst []byte, v int) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#appendUTCTime",
              "documentation": {
                "identifier": "appendUTCTime",
                "newPage": false,
                "searchKey": "asn1.appendUTCTime",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendUTCTime(dst []byte, t time.Time) (ret []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendUTCTime(dst []byte, t time.Time) (ret []byte, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#base128IntLength",
              "documentation": {
                "identifier": "base128IntLength",
                "newPage": false,
                "searchKey": "asn1.base128IntLength",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func base128IntLength(n int64) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc base128IntLength(n int64) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#canHaveDefaultValue",
              "documentation": {
                "identifier": "canHaveDefaultValue",
                "newPage": false,
                "searchKey": "asn1.canHaveDefaultValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func canHaveDefaultValue(k reflect.Kind) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc canHaveDefaultValue(k reflect.Kind) bool\n```\n\ncanHaveDefaultValue reports whether k is a Kind that we will set a default value for. (A signed integer, essentially.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#checkInteger",
              "documentation": {
                "identifier": "checkInteger",
                "newPage": false,
                "searchKey": "asn1.checkInteger",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkInteger(bytes []byte) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkInteger(bytes []byte) error\n```\n\ncheckInteger returns nil if the given bytes are a valid DER-encoded INTEGER and an error otherwise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#farFuture",
              "documentation": {
                "identifier": "farFuture",
                "newPage": false,
                "searchKey": "asn1.farFuture",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func farFuture() time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc farFuture() time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#getUniversalType",
              "documentation": {
                "identifier": "getUniversalType",
                "newPage": false,
                "searchKey": "asn1.getUniversalType",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getUniversalType(t reflect.Type) (matchAny bool, tagNumber int, isCompound, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getUniversalType(t reflect.Type) (matchAny bool, tagNumber int, isCompound, ok bool)\n```\n\nGiven a reflected Go type, getUniversalType returns the default tag number and expected compound flag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#invalidLength",
              "documentation": {
                "identifier": "invalidLength",
                "newPage": false,
                "searchKey": "asn1.invalidLength",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func invalidLength(offset, length, sliceLength int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc invalidLength(offset, length, sliceLength int) bool\n```\n\ninvalidLength reports whether offset + length > sliceLength, or if the addition would overflow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#isNumeric",
              "documentation": {
                "identifier": "isNumeric",
                "newPage": false,
                "searchKey": "asn1.isNumeric",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isNumeric(b byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isNumeric(b byte) bool\n```\n\nisNumeric reports whether the given b is in the ASN.1 NumericString set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#isPrintable",
              "documentation": {
                "identifier": "isPrintable",
                "newPage": false,
                "searchKey": "asn1.isPrintable",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isPrintable(b byte, asterisk asteriskFlag, ampersand ampersandFlag) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isPrintable(b byte, asterisk asteriskFlag, ampersand ampersandFlag) bool\n```\n\nisPrintable reports whether the given b is in the ASN.1 PrintableString set. If asterisk is allowAsterisk then '*' is also allowed, reflecting existing practice. If ampersand is allowAmpersand then '&' is allowed as well. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#lengthLength",
              "documentation": {
                "identifier": "lengthLength",
                "newPage": false,
                "searchKey": "asn1.lengthLength",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func lengthLength(i int) (numBytes int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc lengthLength(i int) (numBytes int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#newBool",
              "documentation": {
                "identifier": "newBool",
                "newPage": false,
                "searchKey": "asn1.newBool",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newBool(b bool) *bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newBool(b bool) *bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#newInt",
              "documentation": {
                "identifier": "newInt",
                "newPage": false,
                "searchKey": "asn1.newInt",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newInt(n int) *int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newInt(n int) *int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#newInt64",
              "documentation": {
                "identifier": "newInt64",
                "newPage": false,
                "searchKey": "asn1.newInt64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newInt64(n int64) *int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newInt64(n int64) *int64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#newString",
              "documentation": {
                "identifier": "newString",
                "newPage": false,
                "searchKey": "asn1.newString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newString(s string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newString(s string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#outsideUTCRange",
              "documentation": {
                "identifier": "outsideUTCRange",
                "newPage": false,
                "searchKey": "asn1.outsideUTCRange",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func outsideUTCRange(t time.Time) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc outsideUTCRange(t time.Time) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseBMPString",
              "documentation": {
                "identifier": "parseBMPString",
                "newPage": false,
                "searchKey": "asn1.parseBMPString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseBMPString(bmpString []byte) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseBMPString(bmpString []byte) (string, error)\n```\n\nparseBMPString parses an ASN.1 BMPString (Basic Multilingual Plane of ISO/IEC/ITU 10646-1) from the given byte slice and returns it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseBase128Int",
              "documentation": {
                "identifier": "parseBase128Int",
                "newPage": false,
                "searchKey": "asn1.parseBase128Int",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseBase128Int(bytes []byte, initOffset int) (ret, offset int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseBase128Int(bytes []byte, initOffset int) (ret, offset int, err error)\n```\n\nparseBase128Int parses a base-128 encoded int from the given offset in the given byte slice. It returns the value and the new offset. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseBigInt",
              "documentation": {
                "identifier": "parseBigInt",
                "newPage": false,
                "searchKey": "asn1.parseBigInt",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseBigInt(bytes []byte) (*big.Int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseBigInt(bytes []byte) (*big.Int, error)\n```\n\nparseBigInt treats the given bytes as a big-endian, signed integer and returns the result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseBool",
              "documentation": {
                "identifier": "parseBool",
                "newPage": false,
                "searchKey": "asn1.parseBool",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseBool(bytes []byte) (ret bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseBool(bytes []byte) (ret bool, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseField",
              "documentation": {
                "identifier": "parseField",
                "newPage": false,
                "searchKey": "asn1.parseField",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseField(v reflect.Value, bytes []byte, initOffset int, params fieldParameters) (offset int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseField(v reflect.Value, bytes []byte, initOffset int, params fieldParameters) (offset int, err error)\n```\n\nparseField is the main parsing function. Given a byte slice and an offset into the array, it will try to parse a suitable ASN.1 value out and store it in the given Value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseGeneralizedTime",
              "documentation": {
                "identifier": "parseGeneralizedTime",
                "newPage": false,
                "searchKey": "asn1.parseGeneralizedTime",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseGeneralizedTime(bytes []byte) (ret time.Time, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseGeneralizedTime(bytes []byte) (ret time.Time, err error)\n```\n\nparseGeneralizedTime parses the GeneralizedTime from the given byte slice and returns the resulting time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseIA5String",
              "documentation": {
                "identifier": "parseIA5String",
                "newPage": false,
                "searchKey": "asn1.parseIA5String",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseIA5String(bytes []byte) (ret string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseIA5String(bytes []byte) (ret string, err error)\n```\n\nparseIA5String parses an ASN.1 IA5String (ASCII string) from the given byte slice and returns it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseInt32",
              "documentation": {
                "identifier": "parseInt32",
                "newPage": false,
                "searchKey": "asn1.parseInt32",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseInt32(bytes []byte) (int32, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseInt32(bytes []byte) (int32, error)\n```\n\nparseInt treats the given bytes as a big-endian, signed integer and returns the result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseInt64",
              "documentation": {
                "identifier": "parseInt64",
                "newPage": false,
                "searchKey": "asn1.parseInt64",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseInt64(bytes []byte) (ret int64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseInt64(bytes []byte) (ret int64, err error)\n```\n\nparseInt64 treats the given bytes as a big-endian, signed integer and returns the result. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseNumericString",
              "documentation": {
                "identifier": "parseNumericString",
                "newPage": false,
                "searchKey": "asn1.parseNumericString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseNumericString(bytes []byte) (ret string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseNumericString(bytes []byte) (ret string, err error)\n```\n\nparseNumericString parses an ASN.1 NumericString from the given byte array and returns it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parsePrintableString",
              "documentation": {
                "identifier": "parsePrintableString",
                "newPage": false,
                "searchKey": "asn1.parsePrintableString",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parsePrintableString(bytes []byte) (ret string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parsePrintableString(bytes []byte) (ret string, err error)\n```\n\nparsePrintableString parses an ASN.1 PrintableString from the given byte array and returns it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseSequenceOf",
              "documentation": {
                "identifier": "parseSequenceOf",
                "newPage": false,
                "searchKey": "asn1.parseSequenceOf",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseSequenceOf(bytes []byte, sliceType reflect.Type, elemType reflect.Type) (ret reflect.Value, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseSequenceOf(bytes []byte, sliceType reflect.Type, elemType reflect.Type) (ret reflect.Value, err error)\n```\n\nparseSequenceOf is used for SEQUENCE OF and SET OF values. It tries to parse a number of ASN.1 values from the given byte slice and returns them as a slice of Go values of the given type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseT61String",
              "documentation": {
                "identifier": "parseT61String",
                "newPage": false,
                "searchKey": "asn1.parseT61String",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseT61String(bytes []byte) (ret string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseT61String(bytes []byte) (ret string, err error)\n```\n\nparseT61String parses an ASN.1 T61String (8-bit clean string) from the given byte slice and returns it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseUTCTime",
              "documentation": {
                "identifier": "parseUTCTime",
                "newPage": false,
                "searchKey": "asn1.parseUTCTime",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseUTCTime(bytes []byte) (ret time.Time, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseUTCTime(bytes []byte) (ret time.Time, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#parseUTF8String",
              "documentation": {
                "identifier": "parseUTF8String",
                "newPage": false,
                "searchKey": "asn1.parseUTF8String",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseUTF8String(bytes []byte) (ret string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseUTF8String(bytes []byte) (ret string, err error)\n```\n\nparseUTF8String parses an ASN.1 UTF8String (raw UTF-8) from the given byte array and returns it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#setDefaultValue",
              "documentation": {
                "identifier": "setDefaultValue",
                "newPage": false,
                "searchKey": "asn1.setDefaultValue",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func setDefaultValue(v reflect.Value, params fieldParameters) (ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setDefaultValue(v reflect.Value, params fieldParameters) (ok bool)\n```\n\nsetDefaultValue is used to install a default value, from a tag string, into a Value. It is successful if the field was optional, even if a default value wasn't provided or it failed to install it into the Value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/asn1#stripTagAndLength",
              "documentation": {
                "identifier": "stripTagAndLength",
                "newPage": false,
                "searchKey": "asn1.stripTagAndLength",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stripTagAndLength(in []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stripTagAndLength(in []byte) []byte\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
