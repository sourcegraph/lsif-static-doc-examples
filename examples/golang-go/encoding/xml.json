{
  "pathID": "/encoding/xml",
  "documentation": {
    "identifier": "xml",
    "newPage": true,
    "searchKey": "encoding/xml",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package xml"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package xml implements a simple XML 1.0 parser that understands XML name spaces. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/encoding/xml#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/xml#Header",
              "documentation": {
                "identifier": "Header",
                "newPage": false,
                "searchKey": "xml.Header",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Header"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Header = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>` + \"\\n\"\n```\n\nHeader is a generic XML header suitable for use with the output of Marshal. This is not automatically added to any output of this package, it is provided as a convenience. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fElement",
              "documentation": {
                "identifier": "fElement",
                "newPage": false,
                "searchKey": "xml.fElement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fElement"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fElement fieldFlags = 1 << iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fAttr",
              "documentation": {
                "identifier": "fAttr",
                "newPage": false,
                "searchKey": "xml.fAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fAttr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fAttr\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fCDATA",
              "documentation": {
                "identifier": "fCDATA",
                "newPage": false,
                "searchKey": "xml.fCDATA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fCDATA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fCDATA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fCharData",
              "documentation": {
                "identifier": "fCharData",
                "newPage": false,
                "searchKey": "xml.fCharData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fCharData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fCharData\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fInnerXML",
              "documentation": {
                "identifier": "fInnerXML",
                "newPage": false,
                "searchKey": "xml.fInnerXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fInnerXML"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fInnerXML\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fComment",
              "documentation": {
                "identifier": "fComment",
                "newPage": false,
                "searchKey": "xml.fComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fComment\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fAny",
              "documentation": {
                "identifier": "fAny",
                "newPage": false,
                "searchKey": "xml.fAny",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fAny"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fAny\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fOmitEmpty",
              "documentation": {
                "identifier": "fOmitEmpty",
                "newPage": false,
                "searchKey": "xml.fOmitEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fOmitEmpty"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fOmitEmpty\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fMode",
              "documentation": {
                "identifier": "fMode",
                "newPage": false,
                "searchKey": "xml.fMode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fMode"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fMode = fElement | fAttr | fCDATA | fCharData | fInnerXML | fComment | fAny\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#xmlName",
              "documentation": {
                "identifier": "xmlName",
                "newPage": false,
                "searchKey": "xml.xmlName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xmlName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xmlName = \"XMLName\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#initNilPointers",
              "documentation": {
                "identifier": "initNilPointers",
                "newPage": false,
                "searchKey": "xml.initNilPointers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const initNilPointers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst initNilPointers = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#dontInitNilPointers",
              "documentation": {
                "identifier": "dontInitNilPointers",
                "newPage": false,
                "searchKey": "xml.dontInitNilPointers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const dontInitNilPointers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dontInitNilPointers = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#xmlURL",
              "documentation": {
                "identifier": "xmlURL",
                "newPage": false,
                "searchKey": "xml.xmlURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xmlURL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xmlURL = \"http://www.w3.org/XML/1998/namespace\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#xmlnsPrefix",
              "documentation": {
                "identifier": "xmlnsPrefix",
                "newPage": false,
                "searchKey": "xml.xmlnsPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xmlnsPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xmlnsPrefix = \"xmlns\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#xmlPrefix",
              "documentation": {
                "identifier": "xmlPrefix",
                "newPage": false,
                "searchKey": "xml.xmlPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const xmlPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst xmlPrefix = \"xml\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#stkStart",
              "documentation": {
                "identifier": "stkStart",
                "newPage": false,
                "searchKey": "xml.stkStart",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const stkStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stkStart = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#stkNs",
              "documentation": {
                "identifier": "stkNs",
                "newPage": false,
                "searchKey": "xml.stkNs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const stkNs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stkNs\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#stkEOF",
              "documentation": {
                "identifier": "stkEOF",
                "newPage": false,
                "searchKey": "xml.stkEOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const stkEOF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst stkEOF\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#HyperDrive",
              "documentation": {
                "identifier": "HyperDrive",
                "newPage": false,
                "searchKey": "xml.HyperDrive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const HyperDrive"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst HyperDrive DriveType = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ImprobabilityDrive",
              "documentation": {
                "identifier": "ImprobabilityDrive",
                "newPage": false,
                "searchKey": "xml.ImprobabilityDrive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ImprobabilityDrive"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ImprobabilityDrive\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#atomFeedString",
              "documentation": {
                "identifier": "atomFeedString",
                "newPage": false,
                "searchKey": "xml.atomFeedString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const atomFeedString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst atomFeedString = ...\n```\n\nhget [http://codereview.appspot.com/rss/mine/rsc](http://codereview.appspot.com/rss/mine/rsc) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#pathTestString",
              "documentation": {
                "identifier": "pathTestString",
                "newPage": false,
                "searchKey": "xml.pathTestString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pathTestString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pathTestString = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OK",
              "documentation": {
                "identifier": "OK",
                "newPage": false,
                "searchKey": "xml.OK",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const OK"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst OK = \"OK\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#withoutNameTypeData",
              "documentation": {
                "identifier": "withoutNameTypeData",
                "newPage": false,
                "searchKey": "xml.withoutNameTypeData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const withoutNameTypeData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst withoutNameTypeData = `\n<?xml version=\"1.0\" charset=\"utf-8\"?>\n<Test3 Attr=\"OK\" />`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#emptyXML",
              "documentation": {
                "identifier": "emptyXML",
                "newPage": false,
                "searchKey": "xml.emptyXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const emptyXML"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst emptyXML = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#whitespaceValuesXML",
              "documentation": {
                "identifier": "whitespaceValuesXML",
                "newPage": false,
                "searchKey": "xml.whitespaceValuesXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const whitespaceValuesXML"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst whitespaceValuesXML = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#whitespaceAttrsXML",
              "documentation": {
                "identifier": "whitespaceAttrsXML",
                "newPage": false,
                "searchKey": "xml.whitespaceAttrsXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const whitespaceAttrsXML"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst whitespaceAttrsXML = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#testInput",
              "documentation": {
                "identifier": "testInput",
                "newPage": false,
                "searchKey": "xml.testInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testInput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#testInputAltEncoding",
              "documentation": {
                "identifier": "testInputAltEncoding",
                "newPage": false,
                "searchKey": "xml.testInputAltEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testInputAltEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testInputAltEncoding = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nonStrictInput",
              "documentation": {
                "identifier": "nonStrictInput",
                "newPage": false,
                "searchKey": "xml.nonStrictInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nonStrictInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nonStrictInput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#testScalarsInput",
              "documentation": {
                "identifier": "testScalarsInput",
                "newPage": false,
                "searchKey": "xml.testScalarsInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testScalarsInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testScalarsInput = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/xml#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/xml#begComment",
              "documentation": {
                "identifier": "begComment",
                "newPage": false,
                "searchKey": "xml.begComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var begComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar begComment = []byte(\"<!--\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#endComment",
              "documentation": {
                "identifier": "endComment",
                "newPage": false,
                "searchKey": "xml.endComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var endComment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar endComment = []byte(\"-->\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#endProcInst",
              "documentation": {
                "identifier": "endProcInst",
                "newPage": false,
                "searchKey": "xml.endProcInst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var endProcInst"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar endProcInst = []byte(\"?>\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#marshalerType",
              "documentation": {
                "identifier": "marshalerType",
                "newPage": false,
                "searchKey": "xml.marshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalerType = reflect.TypeOf((*Marshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#marshalerAttrType",
              "documentation": {
                "identifier": "marshalerAttrType",
                "newPage": false,
                "searchKey": "xml.marshalerAttrType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalerAttrType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalerAttrType = reflect.TypeOf((*MarshalerAttr)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#textMarshalerType",
              "documentation": {
                "identifier": "textMarshalerType",
                "newPage": false,
                "searchKey": "xml.textMarshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textMarshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textMarshalerType = reflect.TypeOf((*encoding.TextMarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ddBytes",
              "documentation": {
                "identifier": "ddBytes",
                "newPage": false,
                "searchKey": "xml.ddBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ddBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ddBytes = []byte(\"--\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#attrType",
              "documentation": {
                "identifier": "attrType",
                "newPage": false,
                "searchKey": "xml.attrType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var attrType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar attrType = reflect.TypeOf(Attr{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#unmarshalerType",
              "documentation": {
                "identifier": "unmarshalerType",
                "newPage": false,
                "searchKey": "xml.unmarshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unmarshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unmarshalerType = reflect.TypeOf((*Unmarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#unmarshalerAttrType",
              "documentation": {
                "identifier": "unmarshalerAttrType",
                "newPage": false,
                "searchKey": "xml.unmarshalerAttrType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unmarshalerAttrType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unmarshalerAttrType = reflect.TypeOf((*UnmarshalerAttr)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#textUnmarshalerType",
              "documentation": {
                "identifier": "textUnmarshalerType",
                "newPage": false,
                "searchKey": "xml.textUnmarshalerType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var textUnmarshalerType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar textUnmarshalerType = reflect.TypeOf((*encoding.TextUnmarshaler)(nil)).Elem()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#tinfoMap",
              "documentation": {
                "identifier": "tinfoMap",
                "newPage": false,
                "searchKey": "xml.tinfoMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tinfoMap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tinfoMap sync.Map // map[reflect.Type]*typeInfo\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nameType",
              "documentation": {
                "identifier": "nameType",
                "newPage": false,
                "searchKey": "xml.nameType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameType = reflect.TypeOf(Name{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#errRawToken",
              "documentation": {
                "identifier": "errRawToken",
                "newPage": false,
                "searchKey": "xml.errRawToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errRawToken"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errRawToken = errors.New(\"xml: cannot use RawToken from UnmarshalXML method\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#entity",
              "documentation": {
                "identifier": "entity",
                "newPage": false,
                "searchKey": "xml.entity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var entity"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar entity = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#first",
              "documentation": {
                "identifier": "first",
                "newPage": false,
                "searchKey": "xml.first",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var first"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar first = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#second",
              "documentation": {
                "identifier": "second",
                "newPage": false,
                "searchKey": "xml.second",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var second"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar second = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#HTMLEntity",
              "documentation": {
                "identifier": "HTMLEntity",
                "newPage": false,
                "searchKey": "xml.HTMLEntity",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var HTMLEntity"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar HTMLEntity map[string]string = htmlEntity\n```\n\nHTMLEntity is an entity map containing translations for the standard HTML entity characters. \n\nSee the Decoder.Strict and Decoder.Entity fields' documentation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#htmlEntity",
              "documentation": {
                "identifier": "htmlEntity",
                "newPage": false,
                "searchKey": "xml.htmlEntity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var htmlEntity"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar htmlEntity = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#HTMLAutoClose",
              "documentation": {
                "identifier": "HTMLAutoClose",
                "newPage": false,
                "searchKey": "xml.HTMLAutoClose",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var HTMLAutoClose"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar HTMLAutoClose []string = htmlAutoClose\n```\n\nHTMLAutoClose is the set of HTML elements that should be considered to close automatically. \n\nSee the Decoder.Strict and Decoder.Entity fields' documentation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#htmlAutoClose",
              "documentation": {
                "identifier": "htmlAutoClose",
                "newPage": false,
                "searchKey": "xml.htmlAutoClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var htmlAutoClose"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar htmlAutoClose = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escQuot",
              "documentation": {
                "identifier": "escQuot",
                "newPage": false,
                "searchKey": "xml.escQuot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escQuot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escQuot = []byte(\"&#34;\") // shorter than \"&quot;\"\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escApos",
              "documentation": {
                "identifier": "escApos",
                "newPage": false,
                "searchKey": "xml.escApos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escApos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escApos = []byte(\"&#39;\") // shorter than \"&apos;\"\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escAmp",
              "documentation": {
                "identifier": "escAmp",
                "newPage": false,
                "searchKey": "xml.escAmp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escAmp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escAmp = []byte(\"&amp;\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escLT",
              "documentation": {
                "identifier": "escLT",
                "newPage": false,
                "searchKey": "xml.escLT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escLT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escLT = []byte(\"&lt;\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escGT",
              "documentation": {
                "identifier": "escGT",
                "newPage": false,
                "searchKey": "xml.escGT",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escGT"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escGT = []byte(\"&gt;\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escTab",
              "documentation": {
                "identifier": "escTab",
                "newPage": false,
                "searchKey": "xml.escTab",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escTab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escTab = []byte(\"&#x9;\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escNL",
              "documentation": {
                "identifier": "escNL",
                "newPage": false,
                "searchKey": "xml.escNL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escNL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escNL = []byte(\"&#xA;\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escCR",
              "documentation": {
                "identifier": "escCR",
                "newPage": false,
                "searchKey": "xml.escCR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escCR"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escCR = []byte(\"&#xD;\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escFFFD",
              "documentation": {
                "identifier": "escFFFD",
                "newPage": false,
                "searchKey": "xml.escFFFD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var escFFFD"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escFFFD = []byte(\"\\uFFFD\") // Unicode replacement character\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#cdataStart",
              "documentation": {
                "identifier": "cdataStart",
                "newPage": false,
                "searchKey": "xml.cdataStart",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cdataStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cdataStart = []byte(\"<![CDATA[\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#cdataEnd",
              "documentation": {
                "identifier": "cdataEnd",
                "newPage": false,
                "searchKey": "xml.cdataEnd",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cdataEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cdataEnd = []byte(\"]]>\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#cdataEscape",
              "documentation": {
                "identifier": "cdataEscape",
                "newPage": false,
                "searchKey": "xml.cdataEscape",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cdataEscape"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cdataEscape = []byte(\"]]]]><![CDATA[>\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#atomValue",
              "documentation": {
                "identifier": "atomValue",
                "newPage": false,
                "searchKey": "xml.atomValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var atomValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atomValue = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#atomXML",
              "documentation": {
                "identifier": "atomXML",
                "newPage": false,
                "searchKey": "xml.atomXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var atomXML"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atomXML = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nilStruct",
              "documentation": {
                "identifier": "nilStruct",
                "newPage": false,
                "searchKey": "xml.nilStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nilStruct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nilStruct *Ship\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nameAttr",
              "documentation": {
                "identifier": "nameAttr",
                "newPage": false,
                "searchKey": "xml.nameAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameAttr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameAttr = \"Sarah\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ageAttr",
              "documentation": {
                "identifier": "ageAttr",
                "newPage": false,
                "searchKey": "xml.ageAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ageAttr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ageAttr = uint(12)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#contentsAttr",
              "documentation": {
                "identifier": "contentsAttr",
                "newPage": false,
                "searchKey": "xml.contentsAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var contentsAttr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar contentsAttr = \"lorem ipsum\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#empty",
              "documentation": {
                "identifier": "empty",
                "newPage": false,
                "searchKey": "xml.empty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var empty"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar empty = \"\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#marshalTests",
              "documentation": {
                "identifier": "marshalTests",
                "newPage": false,
                "searchKey": "xml.marshalTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalTests = ...\n```\n\nUnless explicitly stated as such (or *Plain), all of the tests below are two-way tests. When introducing new tests, please try to make them two-way as well to ensure that marshaling and unmarshaling are as symmetrical as feasible. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#marshalErrorTests",
              "documentation": {
                "identifier": "marshalErrorTests",
                "newPage": false,
                "searchKey": "xml.marshalErrorTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#marshalIndentTests",
              "documentation": {
                "identifier": "marshalIndentTests",
                "newPage": false,
                "searchKey": "xml.marshalIndentTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var marshalIndentTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar marshalIndentTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#encodeTokenTests",
              "documentation": {
                "identifier": "encodeTokenTests",
                "newPage": false,
                "searchKey": "xml.encodeTokenTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var encodeTokenTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encodeTokenTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#atomFeed",
              "documentation": {
                "identifier": "atomFeed",
                "newPage": false,
                "searchKey": "xml.atomFeed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var atomFeed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar atomFeed = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#pathTests",
              "documentation": {
                "identifier": "pathTests",
                "newPage": false,
                "searchKey": "xml.pathTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pathTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pathTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#badPathTests",
              "documentation": {
                "identifier": "badPathTests",
                "newPage": false,
                "searchKey": "xml.badPathTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var badPathTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar badPathTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#tables",
              "documentation": {
                "identifier": "tables",
                "newPage": false,
                "searchKey": "xml.tables",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tables"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tables = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#tableAttrs",
              "documentation": {
                "identifier": "tableAttrs",
                "newPage": false,
                "searchKey": "xml.tableAttrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableAttrs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableAttrs = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#testEntity",
              "documentation": {
                "identifier": "testEntity",
                "newPage": false,
                "searchKey": "xml.testEntity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testEntity"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testEntity = map[string]string{\"何\": \"What\", \"is-it\": \"is it?\"}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#rawTokens",
              "documentation": {
                "identifier": "rawTokens",
                "newPage": false,
                "searchKey": "xml.rawTokens",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rawTokens"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rawTokens = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#cookedTokens",
              "documentation": {
                "identifier": "cookedTokens",
                "newPage": false,
                "searchKey": "xml.cookedTokens",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var cookedTokens"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar cookedTokens = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#rawTokensAltEncoding",
              "documentation": {
                "identifier": "rawTokensAltEncoding",
                "newPage": false,
                "searchKey": "xml.rawTokensAltEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rawTokensAltEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rawTokensAltEncoding = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#xmlInput",
              "documentation": {
                "identifier": "xmlInput",
                "newPage": false,
                "searchKey": "xml.xmlInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var xmlInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar xmlInput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nonStrictTokens",
              "documentation": {
                "identifier": "nonStrictTokens",
                "newPage": false,
                "searchKey": "xml.nonStrictTokens",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nonStrictTokens"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nonStrictTokens = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nestedDirectivesInput",
              "documentation": {
                "identifier": "nestedDirectivesInput",
                "newPage": false,
                "searchKey": "xml.nestedDirectivesInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nestedDirectivesInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nestedDirectivesInput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#nestedDirectivesTokens",
              "documentation": {
                "identifier": "nestedDirectivesTokens",
                "newPage": false,
                "searchKey": "xml.nestedDirectivesTokens",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nestedDirectivesTokens"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nestedDirectivesTokens = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#all",
              "documentation": {
                "identifier": "all",
                "newPage": false,
                "searchKey": "xml.all",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var all"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar all = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#sixteen",
              "documentation": {
                "identifier": "sixteen",
                "newPage": false,
                "searchKey": "xml.sixteen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sixteen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sixteen = \"16\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#characterTests",
              "documentation": {
                "identifier": "characterTests",
                "newPage": false,
                "searchKey": "xml.characterTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var characterTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar characterTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#procInstTests",
              "documentation": {
                "identifier": "procInstTests",
                "newPage": false,
                "searchKey": "xml.procInstTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var procInstTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar procInstTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#directivesWithCommentsInput",
              "documentation": {
                "identifier": "directivesWithCommentsInput",
                "newPage": false,
                "searchKey": "xml.directivesWithCommentsInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var directivesWithCommentsInput"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar directivesWithCommentsInput = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#directivesWithCommentsTokens",
              "documentation": {
                "identifier": "directivesWithCommentsTokens",
                "newPage": false,
                "searchKey": "xml.directivesWithCommentsTokens",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var directivesWithCommentsTokens"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar directivesWithCommentsTokens = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/xml#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/xml#Marshaler",
              "documentation": {
                "identifier": "Marshaler",
                "newPage": false,
                "searchKey": "xml.Marshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Marshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Marshaler interface {\n\tMarshalXML(e *Encoder, start StartElement) error\n}\n```\n\nMarshaler is the interface implemented by objects that can marshal themselves into valid XML elements. \n\nMarshalXML encodes the receiver as zero or more XML elements. By convention, arrays or slices are typically encoded as a sequence of elements, one per entry. Using start as the element tag is not required, but doing so will enable Unmarshal to match the XML elements to the correct struct field. One common implementation strategy is to construct a separate value with a layout corresponding to the desired XML and then to encode it using e.EncodeElement. Another common strategy is to use repeated calls to e.EncodeToken to generate the XML output one token at a time. The sequence of encoded tokens must make up zero or more valid XML elements. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MarshalerAttr",
              "documentation": {
                "identifier": "MarshalerAttr",
                "newPage": false,
                "searchKey": "xml.MarshalerAttr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type MarshalerAttr interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MarshalerAttr interface {\n\tMarshalXMLAttr(name Name) (Attr, error)\n}\n```\n\nMarshalerAttr is the interface implemented by objects that can marshal themselves into valid XML attributes. \n\nMarshalXMLAttr returns an XML attribute with the encoded value of the receiver. Using name as the attribute name is not required, but doing so will enable Unmarshal to match the attribute to the correct struct field. If MarshalXMLAttr returns the zero attribute Attr{}, no attribute will be generated in the output. MarshalXMLAttr is used only for struct fields with the \"attr\" option in the field tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Encoder",
              "documentation": {
                "identifier": "Encoder",
                "newPage": false,
                "searchKey": "xml.Encoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Encoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Encoder struct {\n\tp printer\n}\n```\n\nAn Encoder writes XML data to an output stream. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#NewEncoder",
                    "documentation": {
                      "identifier": "NewEncoder",
                      "newPage": false,
                      "searchKey": "xml.NewEncoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewEncoder(w io.Writer) *Encoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewEncoder(w io.Writer) *Encoder\n```\n\nNewEncoder returns a new encoder that writes to w. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Encoder.Indent",
                    "documentation": {
                      "identifier": "Encoder.Indent",
                      "newPage": false,
                      "searchKey": "xml.Encoder.Indent",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) Indent(prefix, indent string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) Indent(prefix, indent string)\n```\n\nIndent sets the encoder to generate XML in which each element begins on a new indented line that starts with prefix and is followed by one or more copies of indent according to the nesting depth. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Encoder.Encode",
                    "documentation": {
                      "identifier": "Encoder.Encode",
                      "newPage": false,
                      "searchKey": "xml.Encoder.Encode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) Encode(v interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) Encode(v interface{}) error\n```\n\nEncode writes the XML encoding of v to the stream. \n\nSee the documentation for Marshal for details about the conversion of Go values to XML. \n\nEncode calls Flush before returning. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Encoder.EncodeElement",
                    "documentation": {
                      "identifier": "Encoder.EncodeElement",
                      "newPage": false,
                      "searchKey": "xml.Encoder.EncodeElement",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) EncodeElement(v interface{}, start StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) EncodeElement(v interface{}, start StartElement) error\n```\n\nEncodeElement writes the XML encoding of v to the stream, using start as the outermost tag in the encoding. \n\nSee the documentation for Marshal for details about the conversion of Go values to XML. \n\nEncodeElement calls Flush before returning. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Encoder.EncodeToken",
                    "documentation": {
                      "identifier": "Encoder.EncodeToken",
                      "newPage": false,
                      "searchKey": "xml.Encoder.EncodeToken",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) EncodeToken(t Token) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) EncodeToken(t Token) error\n```\n\nEncodeToken writes the given XML token to the stream. It returns an error if StartElement and EndElement tokens are not properly matched. \n\nEncodeToken does not call Flush, because usually it is part of a larger operation such as Encode or EncodeElement (or a custom Marshaler's MarshalXML invoked during those), and those will call Flush when finished. Callers that create an Encoder and then invoke EncodeToken directly, without using Encode or EncodeElement, need to call Flush when finished to ensure that the XML is written to the underlying writer. \n\nEncodeToken allows writing a ProcInst with Target set to \"xml\" only as the first token in the stream. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Encoder.Flush",
                    "documentation": {
                      "identifier": "Encoder.Flush",
                      "newPage": false,
                      "searchKey": "xml.Encoder.Flush",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (enc *Encoder) Flush() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (enc *Encoder) Flush() error\n```\n\nFlush flushes any buffered XML to the underlying writer. See the EncodeToken documentation for details about when it is necessary. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#printer",
              "documentation": {
                "identifier": "printer",
                "newPage": false,
                "searchKey": "xml.printer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type printer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype printer struct {\n\t*bufio.Writer\n\tencoder    *Encoder\n\tseq        int\n\tindent     string\n\tprefix     string\n\tdepth      int\n\tindentedIn bool\n\tputNewline bool\n\tattrNS     map[string]string // map prefix -> name space\n\tattrPrefix map[string]string // map name space -> prefix\n\tprefixes   []string\n\ttags       []Name\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.createAttrPrefix",
                    "documentation": {
                      "identifier": "printer.createAttrPrefix",
                      "newPage": false,
                      "searchKey": "xml.printer.createAttrPrefix",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) createAttrPrefix(url string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) createAttrPrefix(url string) string\n```\n\ncreateAttrPrefix finds the name space prefix attribute to use for the given name space, defining a new prefix if necessary. It returns the prefix. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.deleteAttrPrefix",
                    "documentation": {
                      "identifier": "printer.deleteAttrPrefix",
                      "newPage": false,
                      "searchKey": "xml.printer.deleteAttrPrefix",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) deleteAttrPrefix(prefix string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) deleteAttrPrefix(prefix string)\n```\n\ndeleteAttrPrefix removes an attribute name space prefix. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.markPrefix",
                    "documentation": {
                      "identifier": "printer.markPrefix",
                      "newPage": false,
                      "searchKey": "xml.printer.markPrefix",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) markPrefix()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) markPrefix()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.popPrefix",
                    "documentation": {
                      "identifier": "printer.popPrefix",
                      "newPage": false,
                      "searchKey": "xml.printer.popPrefix",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) popPrefix()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) popPrefix()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.marshalValue",
                    "documentation": {
                      "identifier": "printer.marshalValue",
                      "newPage": false,
                      "searchKey": "xml.printer.marshalValue",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) marshalValue(val reflect.Value, finfo *fieldInfo, startTemplate *StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) marshalValue(val reflect.Value, finfo *fieldInfo, startTemplate *StartElement) error\n```\n\nmarshalValue writes one or more XML elements representing val. If val was obtained from a struct field, finfo must have its details. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.marshalAttr",
                    "documentation": {
                      "identifier": "printer.marshalAttr",
                      "newPage": false,
                      "searchKey": "xml.printer.marshalAttr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) marshalAttr(start *StartElement, name Name, val reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) marshalAttr(start *StartElement, name Name, val reflect.Value) error\n```\n\nmarshalAttr marshals an attribute with the given name and value, adding to start.Attr. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.marshalInterface",
                    "documentation": {
                      "identifier": "printer.marshalInterface",
                      "newPage": false,
                      "searchKey": "xml.printer.marshalInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) marshalInterface(val Marshaler, start StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) marshalInterface(val Marshaler, start StartElement) error\n```\n\nmarshalInterface marshals a Marshaler interface value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.marshalTextInterface",
                    "documentation": {
                      "identifier": "printer.marshalTextInterface",
                      "newPage": false,
                      "searchKey": "xml.printer.marshalTextInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) marshalTextInterface(val encoding.TextMarshaler, start StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) marshalTextInterface(val encoding.TextMarshaler, start StartElement) error\n```\n\nmarshalTextInterface marshals a TextMarshaler interface value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.writeStart",
                    "documentation": {
                      "identifier": "printer.writeStart",
                      "newPage": false,
                      "searchKey": "xml.printer.writeStart",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) writeStart(start *StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) writeStart(start *StartElement) error\n```\n\nwriteStart writes the given start element. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.writeEnd",
                    "documentation": {
                      "identifier": "printer.writeEnd",
                      "newPage": false,
                      "searchKey": "xml.printer.writeEnd",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) writeEnd(name Name) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) writeEnd(name Name) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.marshalSimple",
                    "documentation": {
                      "identifier": "printer.marshalSimple",
                      "newPage": false,
                      "searchKey": "xml.printer.marshalSimple",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) marshalSimple(typ reflect.Type, val reflect.Value) (string, []byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) marshalSimple(typ reflect.Type, val reflect.Value) (string, []byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.marshalStruct",
                    "documentation": {
                      "identifier": "printer.marshalStruct",
                      "newPage": false,
                      "searchKey": "xml.printer.marshalStruct",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) marshalStruct(tinfo *typeInfo, val reflect.Value) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) marshalStruct(tinfo *typeInfo, val reflect.Value) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.cachedWriteError",
                    "documentation": {
                      "identifier": "printer.cachedWriteError",
                      "newPage": false,
                      "searchKey": "xml.printer.cachedWriteError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) cachedWriteError() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) cachedWriteError() error\n```\n\nreturn the bufio Writer's cached write error \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.writeIndent",
                    "documentation": {
                      "identifier": "printer.writeIndent",
                      "newPage": false,
                      "searchKey": "xml.printer.writeIndent",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) writeIndent(depthDelta int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) writeIndent(depthDelta int)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#printer.EscapeString",
                    "documentation": {
                      "identifier": "printer.EscapeString",
                      "newPage": false,
                      "searchKey": "xml.printer.EscapeString",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *printer) EscapeString(s string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *printer) EscapeString(s string)\n```\n\nEscapeString writes to p the properly escaped XML equivalent of the plain text data s. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#parentStack",
              "documentation": {
                "identifier": "parentStack",
                "newPage": false,
                "searchKey": "xml.parentStack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type parentStack struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parentStack struct {\n\tp     *printer\n\tstack []string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#parentStack.trim",
                    "documentation": {
                      "identifier": "parentStack.trim",
                      "newPage": false,
                      "searchKey": "xml.parentStack.trim",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *parentStack) trim(parents []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *parentStack) trim(parents []string) error\n```\n\ntrim updates the XML context to match the longest common prefix of the stack and the given parents. A closing tag will be written for every parent popped. Passing a zero slice or nil will close all the elements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#parentStack.push",
                    "documentation": {
                      "identifier": "parentStack.push",
                      "newPage": false,
                      "searchKey": "xml.parentStack.push",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *parentStack) push(parents []string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *parentStack) push(parents []string) error\n```\n\npush adds parent elements to the stack and writes open tags. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#UnsupportedTypeError",
              "documentation": {
                "identifier": "UnsupportedTypeError",
                "newPage": false,
                "searchKey": "xml.UnsupportedTypeError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnsupportedTypeError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnsupportedTypeError struct {\n\tType reflect.Type\n}\n```\n\nUnsupportedTypeError is returned when Marshal encounters a type that cannot be converted into XML. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#UnsupportedTypeError.Error",
                    "documentation": {
                      "identifier": "UnsupportedTypeError.Error",
                      "newPage": false,
                      "searchKey": "xml.UnsupportedTypeError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *UnsupportedTypeError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *UnsupportedTypeError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#UnmarshalError",
              "documentation": {
                "identifier": "UnmarshalError",
                "newPage": false,
                "searchKey": "xml.UnmarshalError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnmarshalError string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnmarshalError string\n```\n\nAn UnmarshalError represents an error in the unmarshaling process. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#UnmarshalError.Error",
                    "documentation": {
                      "identifier": "UnmarshalError.Error",
                      "newPage": false,
                      "searchKey": "xml.UnmarshalError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e UnmarshalError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e UnmarshalError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Unmarshaler",
              "documentation": {
                "identifier": "Unmarshaler",
                "newPage": false,
                "searchKey": "xml.Unmarshaler",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Unmarshaler interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Unmarshaler interface {\n\tUnmarshalXML(d *Decoder, start StartElement) error\n}\n```\n\nUnmarshaler is the interface implemented by objects that can unmarshal an XML element description of themselves. \n\nUnmarshalXML decodes a single XML element beginning with the given start element. If it returns an error, the outer call to Unmarshal stops and returns that error. UnmarshalXML must consume exactly one XML element. One common implementation strategy is to unmarshal into a separate value with a layout matching the expected XML using d.DecodeElement, and then to copy the data from that value into the receiver. Another common strategy is to use d.Token to process the XML object one token at a time. UnmarshalXML may not use d.RawToken. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#UnmarshalerAttr",
              "documentation": {
                "identifier": "UnmarshalerAttr",
                "newPage": false,
                "searchKey": "xml.UnmarshalerAttr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnmarshalerAttr interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnmarshalerAttr interface {\n\tUnmarshalXMLAttr(attr Attr) error\n}\n```\n\nUnmarshalerAttr is the interface implemented by objects that can unmarshal an XML attribute description of themselves. \n\nUnmarshalXMLAttr decodes a single XML attribute. If it returns an error, the outer call to Unmarshal stops and returns that error. UnmarshalXMLAttr is used only for struct fields with the \"attr\" option in the field tag. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#typeInfo",
              "documentation": {
                "identifier": "typeInfo",
                "newPage": false,
                "searchKey": "xml.typeInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type typeInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype typeInfo struct {\n\txmlname *fieldInfo\n\tfields  []fieldInfo\n}\n```\n\ntypeInfo holds details for the xml representation of a type. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#getTypeInfo",
                    "documentation": {
                      "identifier": "getTypeInfo",
                      "newPage": false,
                      "searchKey": "xml.getTypeInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getTypeInfo(typ reflect.Type) (*typeInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getTypeInfo(typ reflect.Type) (*typeInfo, error)\n```\n\ngetTypeInfo returns the typeInfo structure with details necessary for marshaling and unmarshaling typ. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fieldInfo",
              "documentation": {
                "identifier": "fieldInfo",
                "newPage": false,
                "searchKey": "xml.fieldInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fieldInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fieldInfo struct {\n\tidx     []int\n\tname    string\n\txmlns   string\n\tflags   fieldFlags\n\tparents []string\n}\n```\n\nfieldInfo holds details for the xml representation of a single field. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#structFieldInfo",
                    "documentation": {
                      "identifier": "structFieldInfo",
                      "newPage": false,
                      "searchKey": "xml.structFieldInfo",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func structFieldInfo(typ reflect.Type, f *reflect.StructField) (*fieldInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc structFieldInfo(typ reflect.Type, f *reflect.StructField) (*fieldInfo, error)\n```\n\nstructFieldInfo builds and returns a fieldInfo for f. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#lookupXMLName",
                    "documentation": {
                      "identifier": "lookupXMLName",
                      "newPage": false,
                      "searchKey": "xml.lookupXMLName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func lookupXMLName(typ reflect.Type) (xmlname *fieldInfo)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc lookupXMLName(typ reflect.Type) (xmlname *fieldInfo)\n```\n\nlookupXMLName returns the fieldInfo for typ's XMLName field in case it exists and has a valid xml field tag, otherwise it returns nil. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#fieldInfo.value",
                    "documentation": {
                      "identifier": "fieldInfo.value",
                      "newPage": false,
                      "searchKey": "xml.fieldInfo.value",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (finfo *fieldInfo) value(v reflect.Value, shouldInitNilPointers bool) reflect.Value"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (finfo *fieldInfo) value(v reflect.Value, shouldInitNilPointers bool) reflect.Value\n```\n\nvalue returns v's field value corresponding to finfo. It's equivalent to v.FieldByIndex(finfo.idx), but when passed initNilPointers, it initializes and dereferences pointers as necessary. When passed dontInitNilPointers and a nil pointer is reached, the function returns a zero reflect.Value. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#fieldFlags",
              "documentation": {
                "identifier": "fieldFlags",
                "newPage": false,
                "searchKey": "xml.fieldFlags",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fieldFlags int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fieldFlags int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TagPathError",
              "documentation": {
                "identifier": "TagPathError",
                "newPage": false,
                "searchKey": "xml.TagPathError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TagPathError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TagPathError struct {\n\tStruct       reflect.Type\n\tField1, Tag1 string\n\tField2, Tag2 string\n}\n```\n\nA TagPathError represents an error in the unmarshaling process caused by the use of field tags with conflicting paths. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#TagPathError.Error",
                    "documentation": {
                      "identifier": "TagPathError.Error",
                      "newPage": false,
                      "searchKey": "xml.TagPathError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *TagPathError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *TagPathError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#SyntaxError",
              "documentation": {
                "identifier": "SyntaxError",
                "newPage": false,
                "searchKey": "xml.SyntaxError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SyntaxError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SyntaxError struct {\n\tMsg  string\n\tLine int\n}\n```\n\nA SyntaxError represents a syntax error in the XML input stream. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#SyntaxError.Error",
                    "documentation": {
                      "identifier": "SyntaxError.Error",
                      "newPage": false,
                      "searchKey": "xml.SyntaxError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *SyntaxError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *SyntaxError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Name",
              "documentation": {
                "identifier": "Name",
                "newPage": false,
                "searchKey": "xml.Name",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Name struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Name struct {\n\tSpace, Local string\n}\n```\n\nA Name represents an XML name (Local) annotated with a name space identifier (Space). In tokens returned by Decoder.Token, the Space identifier is given as a canonical URL, not the short prefix used in the document being parsed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Attr",
              "documentation": {
                "identifier": "Attr",
                "newPage": false,
                "searchKey": "xml.Attr",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Attr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Attr struct {\n\tName  Name\n\tValue string\n}\n```\n\nAn Attr represents an attribute in an XML element (Name=Value). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Token",
              "documentation": {
                "identifier": "Token",
                "newPage": false,
                "searchKey": "xml.Token",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Token interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Token interface{}\n```\n\nA Token is an interface holding one of the token types: StartElement, EndElement, CharData, Comment, ProcInst, or Directive. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#CopyToken",
                    "documentation": {
                      "identifier": "CopyToken",
                      "newPage": false,
                      "searchKey": "xml.CopyToken",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CopyToken(t Token) Token"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CopyToken(t Token) Token\n```\n\nCopyToken returns a copy of a Token. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#StartElement",
              "documentation": {
                "identifier": "StartElement",
                "newPage": false,
                "searchKey": "xml.StartElement",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type StartElement struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype StartElement struct {\n\tName Name\n\tAttr []Attr\n}\n```\n\nA StartElement represents an XML start element. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#defaultStart",
                    "documentation": {
                      "identifier": "defaultStart",
                      "newPage": false,
                      "searchKey": "xml.defaultStart",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func defaultStart(typ reflect.Type, finfo *fieldInfo, startTemplate *StartElement) StartElement"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc defaultStart(typ reflect.Type, finfo *fieldInfo, startTemplate *StartElement) StartElement\n```\n\ndefaultStart returns the default start element to use, given the reflect type, field info, and start template. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#StartElement.Copy",
                    "documentation": {
                      "identifier": "StartElement.Copy",
                      "newPage": false,
                      "searchKey": "xml.StartElement.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e StartElement) Copy() StartElement"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e StartElement) Copy() StartElement\n```\n\nCopy creates a new copy of StartElement. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#StartElement.End",
                    "documentation": {
                      "identifier": "StartElement.End",
                      "newPage": false,
                      "searchKey": "xml.StartElement.End",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e StartElement) End() EndElement"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e StartElement) End() EndElement\n```\n\nEnd returns the corresponding XML end element. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#EndElement",
              "documentation": {
                "identifier": "EndElement",
                "newPage": false,
                "searchKey": "xml.EndElement",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EndElement struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EndElement struct {\n\tName Name\n}\n```\n\nAn EndElement represents an XML end element. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#CharData",
              "documentation": {
                "identifier": "CharData",
                "newPage": false,
                "searchKey": "xml.CharData",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CharData []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CharData []byte\n```\n\nA CharData represents XML character data (raw text), in which XML escape sequences have been replaced by the characters they represent. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#CharData.Copy",
                    "documentation": {
                      "identifier": "CharData.Copy",
                      "newPage": false,
                      "searchKey": "xml.CharData.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c CharData) Copy() CharData"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c CharData) Copy() CharData\n```\n\nCopy creates a new copy of CharData. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Comment",
              "documentation": {
                "identifier": "Comment",
                "newPage": false,
                "searchKey": "xml.Comment",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Comment []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Comment []byte\n```\n\nA Comment represents an XML comment of the form <!--comment-->. The bytes do not include the <!-- and --> comment markers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#Comment.Copy",
                    "documentation": {
                      "identifier": "Comment.Copy",
                      "newPage": false,
                      "searchKey": "xml.Comment.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c Comment) Copy() Comment"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c Comment) Copy() Comment\n```\n\nCopy creates a new copy of Comment. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ProcInst",
              "documentation": {
                "identifier": "ProcInst",
                "newPage": false,
                "searchKey": "xml.ProcInst",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ProcInst struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ProcInst struct {\n\tTarget string\n\tInst   []byte\n}\n```\n\nA ProcInst represents an XML processing instruction of the form <?target inst?> \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#ProcInst.Copy",
                    "documentation": {
                      "identifier": "ProcInst.Copy",
                      "newPage": false,
                      "searchKey": "xml.ProcInst.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p ProcInst) Copy() ProcInst"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p ProcInst) Copy() ProcInst\n```\n\nCopy creates a new copy of ProcInst. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Directive",
              "documentation": {
                "identifier": "Directive",
                "newPage": false,
                "searchKey": "xml.Directive",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Directive []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Directive []byte\n```\n\nA Directive represents an XML directive of the form <!text>. The bytes do not include the <! and > markers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#Directive.Copy",
                    "documentation": {
                      "identifier": "Directive.Copy",
                      "newPage": false,
                      "searchKey": "xml.Directive.Copy",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d Directive) Copy() Directive"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d Directive) Copy() Directive\n```\n\nCopy creates a new copy of Directive. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TokenReader",
              "documentation": {
                "identifier": "TokenReader",
                "newPage": false,
                "searchKey": "xml.TokenReader",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type TokenReader interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TokenReader interface {\n\tToken() (Token, error)\n}\n```\n\nA TokenReader is anything that can decode a stream of XML tokens, including a Decoder. \n\nWhen Token encounters an error or end-of-file condition after successfully reading a token, it returns the token. It may return the (non-nil) error from the same call or return the error (and a nil token) from a subsequent call. An instance of this general case is that a TokenReader returning a non-nil token at the end of the token stream may return either io.EOF or a nil error. The next Read should return nil, io.EOF. \n\nImplementations of Token are discouraged from returning a nil token with a nil error. Callers should treat a return of nil, nil as indicating that nothing happened; in particular it does not indicate EOF. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Decoder",
              "documentation": {
                "identifier": "Decoder",
                "newPage": false,
                "searchKey": "xml.Decoder",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Decoder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Decoder struct {\n\t// Strict defaults to true, enforcing the requirements\n\t// of the XML specification.\n\t// If set to false, the parser allows input containing common\n\t// mistakes:\n\t//\t* If an element is missing an end tag, the parser invents\n\t//\t  end tags as necessary to keep the return values from Token\n\t//\t  properly balanced.\n\t//\t* In attribute values and character data, unknown or malformed\n\t//\t  character entities (sequences beginning with &) are left alone.\n\t//\n\t// Setting:\n\t//\n\t//\td.Strict = false\n\t//\td.AutoClose = xml.HTMLAutoClose\n\t//\td.Entity = xml.HTMLEntity\n\t//\n\t// creates a parser that can handle typical HTML.\n\t//\n\t// Strict mode does not enforce the requirements of the XML name spaces TR.\n\t// In particular it does not reject name space tags using undefined prefixes.\n\t// Such tags are recorded with the unknown prefix as the name space URL.\n\tStrict bool\n\n\t// When Strict == false, AutoClose indicates a set of elements to\n\t// consider closed immediately after they are opened, regardless\n\t// of whether an end element is present.\n\tAutoClose []string\n\n\t// Entity can be used to map non-standard entity names to string replacements.\n\t// The parser behaves as if these standard mappings are present in the map,\n\t// regardless of the actual map content:\n\t//\n\t//\t\"lt\": \"<\",\n\t//\t\"gt\": \">\",\n\t//\t\"amp\": \"&\",\n\t//\t\"apos\": \"'\",\n\t//\t\"quot\": `\"`,\n\tEntity map[string]string\n\n\t// CharsetReader, if non-nil, defines a function to generate\n\t// charset-conversion readers, converting from the provided\n\t// non-UTF-8 charset into UTF-8. If CharsetReader is nil or\n\t// returns an error, parsing stops with an error. One of the\n\t// CharsetReader's result values must be non-nil.\n\tCharsetReader func(charset string, input io.Reader) (io.Reader, error)\n\n\t// DefaultSpace sets the default name space used for unadorned tags,\n\t// as if the entire XML stream were wrapped in an element containing\n\t// the attribute xmlns=\"DefaultSpace\".\n\tDefaultSpace string\n\n\tr              io.ByteReader\n\tt              TokenReader\n\tbuf            bytes.Buffer\n\tsaved          *bytes.Buffer\n\tstk            *stack\n\tfree           *stack\n\tneedClose      bool\n\ttoClose        Name\n\tnextToken      Token\n\tnextByte       int\n\tns             map[string]string\n\terr            error\n\tline           int\n\toffset         int64\n\tunmarshalDepth int\n}\n```\n\nA Decoder represents an XML parser reading a particular input stream. The parser assumes that its input is encoded in UTF-8. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#NewDecoder",
                    "documentation": {
                      "identifier": "NewDecoder",
                      "newPage": false,
                      "searchKey": "xml.NewDecoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewDecoder(r io.Reader) *Decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewDecoder(r io.Reader) *Decoder\n```\n\nNewDecoder creates a new XML parser reading from r. If r does not implement io.ByteReader, NewDecoder will do its own buffering. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#NewTokenDecoder",
                    "documentation": {
                      "identifier": "NewTokenDecoder",
                      "newPage": false,
                      "searchKey": "xml.NewTokenDecoder",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewTokenDecoder(t TokenReader) *Decoder"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewTokenDecoder(t TokenReader) *Decoder\n```\n\nNewTokenDecoder creates a new XML parser using an underlying token stream. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.Decode",
                    "documentation": {
                      "identifier": "Decoder.Decode",
                      "newPage": false,
                      "searchKey": "xml.Decoder.Decode",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) Decode(v interface{}) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) Decode(v interface{}) error\n```\n\nDecode works like Unmarshal, except it reads the decoder stream to find the start element. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.DecodeElement",
                    "documentation": {
                      "identifier": "Decoder.DecodeElement",
                      "newPage": false,
                      "searchKey": "xml.Decoder.DecodeElement",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) DecodeElement(v interface{}, start *StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) DecodeElement(v interface{}, start *StartElement) error\n```\n\nDecodeElement works like Unmarshal except that it takes a pointer to the start XML element to decode into v. It is useful when a client reads some raw XML tokens itself but also wants to defer to Unmarshal for some elements. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.unmarshalInterface",
                    "documentation": {
                      "identifier": "Decoder.unmarshalInterface",
                      "newPage": false,
                      "searchKey": "xml.Decoder.unmarshalInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) unmarshalInterface(val Unmarshaler, start *StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) unmarshalInterface(val Unmarshaler, start *StartElement) error\n```\n\nunmarshalInterface unmarshals a single XML element into val. start is the opening tag of the element. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.unmarshalTextInterface",
                    "documentation": {
                      "identifier": "Decoder.unmarshalTextInterface",
                      "newPage": false,
                      "searchKey": "xml.Decoder.unmarshalTextInterface",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) unmarshalTextInterface(val encoding.TextUnmarshaler) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) unmarshalTextInterface(val encoding.TextUnmarshaler) error\n```\n\nunmarshalTextInterface unmarshals a single XML element into val. The chardata contained in the element (but not its children) is passed to the text unmarshaler. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.unmarshalAttr",
                    "documentation": {
                      "identifier": "Decoder.unmarshalAttr",
                      "newPage": false,
                      "searchKey": "xml.Decoder.unmarshalAttr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) unmarshalAttr(val reflect.Value, attr Attr) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) unmarshalAttr(val reflect.Value, attr Attr) error\n```\n\nunmarshalAttr unmarshals a single XML attribute into val. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.unmarshal",
                    "documentation": {
                      "identifier": "Decoder.unmarshal",
                      "newPage": false,
                      "searchKey": "xml.Decoder.unmarshal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) unmarshal(val reflect.Value, start *StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) unmarshal(val reflect.Value, start *StartElement) error\n```\n\nUnmarshal a single XML element into val. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.unmarshalPath",
                    "documentation": {
                      "identifier": "Decoder.unmarshalPath",
                      "newPage": false,
                      "searchKey": "xml.Decoder.unmarshalPath",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) unmarshalPath(tinfo *typeInfo, sv reflect.Value, parents []string, start *StartElement) (consumed bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) unmarshalPath(tinfo *typeInfo, sv reflect.Value, parents []string, start *StartElement) (consumed bool, err error)\n```\n\nunmarshalPath walks down an XML structure looking for wanted paths, and calls unmarshal on them. The consumed result tells whether XML elements have been consumed from the Decoder until start's matching end element, or if it's still untouched because start is uninteresting for sv's fields. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.Skip",
                    "documentation": {
                      "identifier": "Decoder.Skip",
                      "newPage": false,
                      "searchKey": "xml.Decoder.Skip",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) Skip() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) Skip() error\n```\n\nSkip reads tokens until it has consumed the end element matching the most recent start element already consumed. It recurs if it encounters a start element, so it can be used to skip nested structures. It returns nil if it finds an end element matching the start element; otherwise it returns an error describing the problem. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.Token",
                    "documentation": {
                      "identifier": "Decoder.Token",
                      "newPage": false,
                      "searchKey": "xml.Decoder.Token",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) Token() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) Token() (Token, error)\n```\n\nToken returns the next XML token in the input stream. At the end of the input stream, Token returns nil, io.EOF. \n\nSlices of bytes in the returned token data refer to the parser's internal buffer and remain valid only until the next call to Token. To acquire a copy of the bytes, call CopyToken or the token's Copy method. \n\nToken expands self-closing elements such as <br> into separate start and end elements returned by successive calls. \n\nToken guarantees that the StartElement and EndElement tokens it returns are properly nested and matched: if Token encounters an unexpected end element or EOF before all expected end elements, it will return an error. \n\nToken implements XML name spaces as described by [https://www.w3.org/TR/REC-xml-names/](https://www.w3.org/TR/REC-xml-names/). Each of the Name structures contained in the Token has the Space set to the URL identifying its name space when known. If Token encounters an unrecognized name space prefix, it uses the prefix as the Space rather than report an error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.translate",
                    "documentation": {
                      "identifier": "Decoder.translate",
                      "newPage": false,
                      "searchKey": "xml.Decoder.translate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) translate(n *Name, isElementName bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) translate(n *Name, isElementName bool)\n```\n\nApply name space translation to name n. The default name space (for Space==\"\") applies only to element names, not to attribute names. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.switchToReader",
                    "documentation": {
                      "identifier": "Decoder.switchToReader",
                      "newPage": false,
                      "searchKey": "xml.Decoder.switchToReader",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) switchToReader(r io.Reader)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) switchToReader(r io.Reader)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.push",
                    "documentation": {
                      "identifier": "Decoder.push",
                      "newPage": false,
                      "searchKey": "xml.Decoder.push",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) push(kind int) *stack"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) push(kind int) *stack\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.pop",
                    "documentation": {
                      "identifier": "Decoder.pop",
                      "newPage": false,
                      "searchKey": "xml.Decoder.pop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) pop() *stack"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) pop() *stack\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.pushEOF",
                    "documentation": {
                      "identifier": "Decoder.pushEOF",
                      "newPage": false,
                      "searchKey": "xml.Decoder.pushEOF",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) pushEOF()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) pushEOF()\n```\n\nRecord that after the current element is finished (that element is already pushed on the stack) Token should return EOF until popEOF is called. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.popEOF",
                    "documentation": {
                      "identifier": "Decoder.popEOF",
                      "newPage": false,
                      "searchKey": "xml.Decoder.popEOF",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) popEOF() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) popEOF() bool\n```\n\nUndo a pushEOF. The element must have been finished, so the EOF should be at the top of the stack. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.pushElement",
                    "documentation": {
                      "identifier": "Decoder.pushElement",
                      "newPage": false,
                      "searchKey": "xml.Decoder.pushElement",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) pushElement(name Name)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) pushElement(name Name)\n```\n\nRecord that we are starting an element with the given name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.pushNs",
                    "documentation": {
                      "identifier": "Decoder.pushNs",
                      "newPage": false,
                      "searchKey": "xml.Decoder.pushNs",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) pushNs(local string, url string, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) pushNs(local string, url string, ok bool)\n```\n\nRecord that we are changing the value of ns[local]. The old value is url, ok. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.syntaxError",
                    "documentation": {
                      "identifier": "Decoder.syntaxError",
                      "newPage": false,
                      "searchKey": "xml.Decoder.syntaxError",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) syntaxError(msg string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) syntaxError(msg string) error\n```\n\nCreates a SyntaxError with the current line number. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.popElement",
                    "documentation": {
                      "identifier": "Decoder.popElement",
                      "newPage": false,
                      "searchKey": "xml.Decoder.popElement",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) popElement(t *EndElement) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) popElement(t *EndElement) bool\n```\n\nRecord that we are ending an element with the given name. The name must match the record at the top of the stack, which must be a pushElement record. After popping the element, apply any undo records from the stack to restore the name translations that existed before we saw this element. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.autoClose",
                    "documentation": {
                      "identifier": "Decoder.autoClose",
                      "newPage": false,
                      "searchKey": "xml.Decoder.autoClose",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) autoClose(t Token) (Token, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) autoClose(t Token) (Token, bool)\n```\n\nIf the top element on the stack is autoclosing and t is not the end tag, invent the end tag. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.RawToken",
                    "documentation": {
                      "identifier": "Decoder.RawToken",
                      "newPage": false,
                      "searchKey": "xml.Decoder.RawToken",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) RawToken() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) RawToken() (Token, error)\n```\n\nRawToken is like Token but does not verify that start and end elements match and does not translate name space prefixes to their corresponding URLs. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.rawToken",
                    "documentation": {
                      "identifier": "Decoder.rawToken",
                      "newPage": false,
                      "searchKey": "xml.Decoder.rawToken",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) rawToken() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) rawToken() (Token, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.attrval",
                    "documentation": {
                      "identifier": "Decoder.attrval",
                      "newPage": false,
                      "searchKey": "xml.Decoder.attrval",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) attrval() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) attrval() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.space",
                    "documentation": {
                      "identifier": "Decoder.space",
                      "newPage": false,
                      "searchKey": "xml.Decoder.space",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) space()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) space()\n```\n\nSkip spaces if any \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.getc",
                    "documentation": {
                      "identifier": "Decoder.getc",
                      "newPage": false,
                      "searchKey": "xml.Decoder.getc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) getc() (b byte, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) getc() (b byte, ok bool)\n```\n\nRead a single byte. If there is no byte to read, return ok==false and leave the error in d.err. Maintain line number. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.InputOffset",
                    "documentation": {
                      "identifier": "Decoder.InputOffset",
                      "newPage": false,
                      "searchKey": "xml.Decoder.InputOffset",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) InputOffset() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) InputOffset() int64\n```\n\nInputOffset returns the input stream byte offset of the current decoder position. The offset gives the location of the end of the most recently returned token and the beginning of the next token. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.savedOffset",
                    "documentation": {
                      "identifier": "Decoder.savedOffset",
                      "newPage": false,
                      "searchKey": "xml.Decoder.savedOffset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) savedOffset() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) savedOffset() int\n```\n\nReturn saved offset. If we did ungetc (nextByte >= 0), have to back up one. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.mustgetc",
                    "documentation": {
                      "identifier": "Decoder.mustgetc",
                      "newPage": false,
                      "searchKey": "xml.Decoder.mustgetc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) mustgetc() (b byte, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) mustgetc() (b byte, ok bool)\n```\n\nMust read a single byte. If there is no byte to read, set d.err to SyntaxError(\"unexpected EOF\") and return ok==false \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.ungetc",
                    "documentation": {
                      "identifier": "Decoder.ungetc",
                      "newPage": false,
                      "searchKey": "xml.Decoder.ungetc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) ungetc(b byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) ungetc(b byte)\n```\n\nUnread a single byte. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.text",
                    "documentation": {
                      "identifier": "Decoder.text",
                      "newPage": false,
                      "searchKey": "xml.Decoder.text",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) text(quote int, cdata bool) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) text(quote int, cdata bool) []byte\n```\n\nRead plain text section (XML calls it character data). If quote >= 0, we are in a quoted string and need to find the matching quote. If cdata == true, we are in a <![CDATA[ section and need to find ]]>. On failure return nil and leave the error in d.err. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.nsname",
                    "documentation": {
                      "identifier": "Decoder.nsname",
                      "newPage": false,
                      "searchKey": "xml.Decoder.nsname",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) nsname() (name Name, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) nsname() (name Name, ok bool)\n```\n\nGet name space name: name with a : stuck in the middle. The part before the : is the name space identifier. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.name",
                    "documentation": {
                      "identifier": "Decoder.name",
                      "newPage": false,
                      "searchKey": "xml.Decoder.name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) name() (s string, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) name() (s string, ok bool)\n```\n\nGet name: /first(first|second)*/ Do not set d.err if the name is missing (unless unexpected EOF is received): let the caller provide better context. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#Decoder.readName",
                    "documentation": {
                      "identifier": "Decoder.readName",
                      "newPage": false,
                      "searchKey": "xml.Decoder.readName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *Decoder) readName() (ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *Decoder) readName() (ok bool)\n```\n\nRead a name and append its bytes to d.buf. The name is delimited by any single-byte character not valid in names. All multi-byte characters are accepted; the caller must check their validity. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#stack",
              "documentation": {
                "identifier": "stack",
                "newPage": false,
                "searchKey": "xml.stack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type stack struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stack struct {\n\tnext *stack\n\tkind int\n\tname Name\n\tok   bool\n}\n```\n\nParsing state - stack holds old name space translations and the current set of open elements. The translations to pop when ending a given tag are *below* it on the stack, which is more work but forced on us by XML. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DriveType",
              "documentation": {
                "identifier": "DriveType",
                "newPage": false,
                "searchKey": "xml.DriveType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DriveType int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DriveType int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Passenger",
              "documentation": {
                "identifier": "Passenger",
                "newPage": false,
                "searchKey": "xml.Passenger",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Passenger struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Passenger struct {\n\tName   []string `xml:\"name\"`\n\tWeight float32  `xml:\"weight\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Ship",
              "documentation": {
                "identifier": "Ship",
                "newPage": false,
                "searchKey": "xml.Ship",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Ship struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Ship struct {\n\tXMLName struct{} `xml:\"spaceship\"`\n\n\tName      string       `xml:\"name,attr\"`\n\tPilot     string       `xml:\"pilot,attr\"`\n\tDrive     DriveType    `xml:\"drive\"`\n\tAge       uint         `xml:\"age\"`\n\tPassenger []*Passenger `xml:\"passenger\"`\n\tsecret    string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NamedType",
              "documentation": {
                "identifier": "NamedType",
                "newPage": false,
                "searchKey": "xml.NamedType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NamedType string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NamedType string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Port",
              "documentation": {
                "identifier": "Port",
                "newPage": false,
                "searchKey": "xml.Port",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Port struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Port struct {\n\tXMLName struct{} `xml:\"port\"`\n\tType    string   `xml:\"type,attr,omitempty\"`\n\tComment string   `xml:\",comment\"`\n\tNumber  string   `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Domain",
              "documentation": {
                "identifier": "Domain",
                "newPage": false,
                "searchKey": "xml.Domain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Domain struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Domain struct {\n\tXMLName struct{} `xml:\"domain\"`\n\tCountry string   `xml:\",attr,omitempty\"`\n\tName    []byte   `xml:\",chardata\"`\n\tComment []byte   `xml:\",comment\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Book",
              "documentation": {
                "identifier": "Book",
                "newPage": false,
                "searchKey": "xml.Book",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Book struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Book struct {\n\tXMLName struct{} `xml:\"book\"`\n\tTitle   string   `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Event",
              "documentation": {
                "identifier": "Event",
                "newPage": false,
                "searchKey": "xml.Event",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Event struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Event struct {\n\tXMLName struct{} `xml:\"event\"`\n\tYear    int      `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Movie",
              "documentation": {
                "identifier": "Movie",
                "newPage": false,
                "searchKey": "xml.Movie",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Movie struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Movie struct {\n\tXMLName struct{} `xml:\"movie\"`\n\tLength  uint     `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Pi",
              "documentation": {
                "identifier": "Pi",
                "newPage": false,
                "searchKey": "xml.Pi",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Pi struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Pi struct {\n\tXMLName       struct{} `xml:\"pi\"`\n\tApproximation float32  `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Universe",
              "documentation": {
                "identifier": "Universe",
                "newPage": false,
                "searchKey": "xml.Universe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Universe struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Universe struct {\n\tXMLName struct{} `xml:\"universe\"`\n\tVisible float64  `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Particle",
              "documentation": {
                "identifier": "Particle",
                "newPage": false,
                "searchKey": "xml.Particle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Particle struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Particle struct {\n\tXMLName struct{} `xml:\"particle\"`\n\tHasMass bool     `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Departure",
              "documentation": {
                "identifier": "Departure",
                "newPage": false,
                "searchKey": "xml.Departure",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Departure struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Departure struct {\n\tXMLName struct{}  `xml:\"departure\"`\n\tWhen    time.Time `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#SecretAgent",
              "documentation": {
                "identifier": "SecretAgent",
                "newPage": false,
                "searchKey": "xml.SecretAgent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type SecretAgent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SecretAgent struct {\n\tXMLName   struct{} `xml:\"agent\"`\n\tHandle    string   `xml:\"handle,attr\"`\n\tIdentity  string\n\tObfuscate string `xml:\",innerxml\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NestedItems",
              "documentation": {
                "identifier": "NestedItems",
                "newPage": false,
                "searchKey": "xml.NestedItems",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NestedItems struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NestedItems struct {\n\tXMLName struct{} `xml:\"result\"`\n\tItems   []string `xml:\">item\"`\n\tItem1   []string `xml:\"Items>item1\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NestedOrder",
              "documentation": {
                "identifier": "NestedOrder",
                "newPage": false,
                "searchKey": "xml.NestedOrder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NestedOrder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NestedOrder struct {\n\tXMLName struct{} `xml:\"result\"`\n\tField1  string   `xml:\"parent>c\"`\n\tField2  string   `xml:\"parent>b\"`\n\tField3  string   `xml:\"parent>a\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MixedNested",
              "documentation": {
                "identifier": "MixedNested",
                "newPage": false,
                "searchKey": "xml.MixedNested",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MixedNested struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MixedNested struct {\n\tXMLName struct{} `xml:\"result\"`\n\tA       string   `xml:\"parent1>a\"`\n\tB       string   `xml:\"b\"`\n\tC       string   `xml:\"parent1>parent2>c\"`\n\tD       string   `xml:\"parent1>d\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NilTest",
              "documentation": {
                "identifier": "NilTest",
                "newPage": false,
                "searchKey": "xml.NilTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NilTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NilTest struct {\n\tA interface{} `xml:\"parent1>parent2>a\"`\n\tB interface{} `xml:\"parent1>b\"`\n\tC interface{} `xml:\"parent1>parent2>c\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Service",
              "documentation": {
                "identifier": "Service",
                "newPage": false,
                "searchKey": "xml.Service",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Service struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Service struct {\n\tXMLName struct{} `xml:\"service\"`\n\tDomain  *Domain  `xml:\"host>domain\"`\n\tPort    *Port    `xml:\"host>port\"`\n\tExtra1  interface{}\n\tExtra2  interface{} `xml:\"host>extra2\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#EmbedA",
              "documentation": {
                "identifier": "EmbedA",
                "newPage": false,
                "searchKey": "xml.EmbedA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmbedA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmbedA struct {\n\tEmbedC\n\tEmbedB EmbedB\n\tFieldA string\n\tembedD\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#EmbedB",
              "documentation": {
                "identifier": "EmbedB",
                "newPage": false,
                "searchKey": "xml.EmbedB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmbedB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmbedB struct {\n\tFieldB string\n\t*EmbedC\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#EmbedC",
              "documentation": {
                "identifier": "EmbedC",
                "newPage": false,
                "searchKey": "xml.EmbedC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmbedC struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmbedC struct {\n\tFieldA1 string `xml:\"FieldA>A1\"`\n\tFieldA2 string `xml:\"FieldA>A2\"`\n\tFieldB  string\n\tFieldC  string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#embedD",
              "documentation": {
                "identifier": "embedD",
                "newPage": false,
                "searchKey": "xml.embedD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type embedD struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype embedD struct {\n\tfieldD string\n\tFieldE string // Promoted and visible when embedD is embedded.\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NameCasing",
              "documentation": {
                "identifier": "NameCasing",
                "newPage": false,
                "searchKey": "xml.NameCasing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NameCasing struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NameCasing struct {\n\tXMLName struct{} `xml:\"casing\"`\n\tXy      string\n\tXY      string\n\tXyA     string `xml:\"Xy,attr\"`\n\tXYA     string `xml:\"XY,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NamePrecedence",
              "documentation": {
                "identifier": "NamePrecedence",
                "newPage": false,
                "searchKey": "xml.NamePrecedence",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NamePrecedence struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NamePrecedence struct {\n\tXMLName     Name              `xml:\"Parent\"`\n\tFromTag     XMLNameWithoutTag `xml:\"InTag\"`\n\tFromNameVal XMLNameWithoutTag\n\tFromNameTag XMLNameWithTag\n\tInFieldName string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#XMLNameWithTag",
              "documentation": {
                "identifier": "XMLNameWithTag",
                "newPage": false,
                "searchKey": "xml.XMLNameWithTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type XMLNameWithTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype XMLNameWithTag struct {\n\tXMLName Name   `xml:\"InXMLNameTag\"`\n\tValue   string `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#XMLNameWithoutTag",
              "documentation": {
                "identifier": "XMLNameWithoutTag",
                "newPage": false,
                "searchKey": "xml.XMLNameWithoutTag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type XMLNameWithoutTag struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype XMLNameWithoutTag struct {\n\tXMLName Name\n\tValue   string `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NameInField",
              "documentation": {
                "identifier": "NameInField",
                "newPage": false,
                "searchKey": "xml.NameInField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NameInField struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NameInField struct {\n\tFoo Name `xml:\"ns foo\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AttrTest",
              "documentation": {
                "identifier": "AttrTest",
                "newPage": false,
                "searchKey": "xml.AttrTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AttrTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AttrTest struct {\n\tInt   int     `xml:\",attr\"`\n\tNamed int     `xml:\"int,attr\"`\n\tFloat float64 `xml:\",attr\"`\n\tUint8 uint8   `xml:\",attr\"`\n\tBool  bool    `xml:\",attr\"`\n\tStr   string  `xml:\",attr\"`\n\tBytes []byte  `xml:\",attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AttrsTest",
              "documentation": {
                "identifier": "AttrsTest",
                "newPage": false,
                "searchKey": "xml.AttrsTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AttrsTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AttrsTest struct {\n\tAttrs []Attr  `xml:\",any,attr\"`\n\tInt   int     `xml:\",attr\"`\n\tNamed int     `xml:\"int,attr\"`\n\tFloat float64 `xml:\",attr\"`\n\tUint8 uint8   `xml:\",attr\"`\n\tBool  bool    `xml:\",attr\"`\n\tStr   string  `xml:\",attr\"`\n\tBytes []byte  `xml:\",attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OmitAttrTest",
              "documentation": {
                "identifier": "OmitAttrTest",
                "newPage": false,
                "searchKey": "xml.OmitAttrTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OmitAttrTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OmitAttrTest struct {\n\tInt   int     `xml:\",attr,omitempty\"`\n\tNamed int     `xml:\"int,attr,omitempty\"`\n\tFloat float64 `xml:\",attr,omitempty\"`\n\tUint8 uint8   `xml:\",attr,omitempty\"`\n\tBool  bool    `xml:\",attr,omitempty\"`\n\tStr   string  `xml:\",attr,omitempty\"`\n\tBytes []byte  `xml:\",attr,omitempty\"`\n\tPStr  *string `xml:\",attr,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OmitFieldTest",
              "documentation": {
                "identifier": "OmitFieldTest",
                "newPage": false,
                "searchKey": "xml.OmitFieldTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OmitFieldTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OmitFieldTest struct {\n\tInt   int           `xml:\",omitempty\"`\n\tNamed int           `xml:\"int,omitempty\"`\n\tFloat float64       `xml:\",omitempty\"`\n\tUint8 uint8         `xml:\",omitempty\"`\n\tBool  bool          `xml:\",omitempty\"`\n\tStr   string        `xml:\",omitempty\"`\n\tBytes []byte        `xml:\",omitempty\"`\n\tPStr  *string       `xml:\",omitempty\"`\n\tPtr   *PresenceTest `xml:\",omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AnyTest",
              "documentation": {
                "identifier": "AnyTest",
                "newPage": false,
                "searchKey": "xml.AnyTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AnyTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AnyTest struct {\n\tXMLName  struct{}  `xml:\"a\"`\n\tNested   string    `xml:\"nested>value\"`\n\tAnyField AnyHolder `xml:\",any\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AnyOmitTest",
              "documentation": {
                "identifier": "AnyOmitTest",
                "newPage": false,
                "searchKey": "xml.AnyOmitTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AnyOmitTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AnyOmitTest struct {\n\tXMLName  struct{}   `xml:\"a\"`\n\tNested   string     `xml:\"nested>value\"`\n\tAnyField *AnyHolder `xml:\",any,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AnySliceTest",
              "documentation": {
                "identifier": "AnySliceTest",
                "newPage": false,
                "searchKey": "xml.AnySliceTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AnySliceTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AnySliceTest struct {\n\tXMLName  struct{}    `xml:\"a\"`\n\tNested   string      `xml:\"nested>value\"`\n\tAnyField []AnyHolder `xml:\",any\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AnyHolder",
              "documentation": {
                "identifier": "AnyHolder",
                "newPage": false,
                "searchKey": "xml.AnyHolder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AnyHolder struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AnyHolder struct {\n\tXMLName Name\n\tXML     string `xml:\",innerxml\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#RecurseA",
              "documentation": {
                "identifier": "RecurseA",
                "newPage": false,
                "searchKey": "xml.RecurseA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RecurseA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RecurseA struct {\n\tA string\n\tB *RecurseB\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#RecurseB",
              "documentation": {
                "identifier": "RecurseB",
                "newPage": false,
                "searchKey": "xml.RecurseB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RecurseB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RecurseB struct {\n\tA *RecurseA\n\tB string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PresenceTest",
              "documentation": {
                "identifier": "PresenceTest",
                "newPage": false,
                "searchKey": "xml.PresenceTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PresenceTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PresenceTest struct {\n\tExists *struct{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IgnoreTest",
              "documentation": {
                "identifier": "IgnoreTest",
                "newPage": false,
                "searchKey": "xml.IgnoreTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IgnoreTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IgnoreTest struct {\n\tPublicSecret string `xml:\"-\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyBytes",
              "documentation": {
                "identifier": "MyBytes",
                "newPage": false,
                "searchKey": "xml.MyBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyBytes []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyBytes []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Data",
              "documentation": {
                "identifier": "Data",
                "newPage": false,
                "searchKey": "xml.Data",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Data struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Data struct {\n\tBytes  []byte\n\tAttr   []byte `xml:\",attr\"`\n\tCustom MyBytes\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Plain",
              "documentation": {
                "identifier": "Plain",
                "newPage": false,
                "searchKey": "xml.Plain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Plain struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Plain struct {\n\tV interface{}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyInt",
              "documentation": {
                "identifier": "MyInt",
                "newPage": false,
                "searchKey": "xml.MyInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyInt int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyInt int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#EmbedInt",
              "documentation": {
                "identifier": "EmbedInt",
                "newPage": false,
                "searchKey": "xml.EmbedInt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type EmbedInt struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EmbedInt struct {\n\tMyInt\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Strings",
              "documentation": {
                "identifier": "Strings",
                "newPage": false,
                "searchKey": "xml.Strings",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Strings struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Strings struct {\n\tX []string `xml:\"A>B,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PointerFieldsTest",
              "documentation": {
                "identifier": "PointerFieldsTest",
                "newPage": false,
                "searchKey": "xml.PointerFieldsTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PointerFieldsTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PointerFieldsTest struct {\n\tXMLName  Name    `xml:\"dummy\"`\n\tName     *string `xml:\"name,attr\"`\n\tAge      *uint   `xml:\"age,attr\"`\n\tEmpty    *string `xml:\"empty,attr\"`\n\tContents *string `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ChardataEmptyTest",
              "documentation": {
                "identifier": "ChardataEmptyTest",
                "newPage": false,
                "searchKey": "xml.ChardataEmptyTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChardataEmptyTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChardataEmptyTest struct {\n\tXMLName  Name    `xml:\"test\"`\n\tContents *string `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PointerAnonFields",
              "documentation": {
                "identifier": "PointerAnonFields",
                "newPage": false,
                "searchKey": "xml.PointerAnonFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PointerAnonFields struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PointerAnonFields struct {\n\t*MyInt\n\t*NamedType\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyMarshalerTest",
              "documentation": {
                "identifier": "MyMarshalerTest",
                "newPage": false,
                "searchKey": "xml.MyMarshalerTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyMarshalerTest struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyMarshalerTest struct {\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#MyMarshalerTest.MarshalXML",
                    "documentation": {
                      "identifier": "MyMarshalerTest.MarshalXML",
                      "newPage": false,
                      "searchKey": "xml.MyMarshalerTest.MarshalXML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MyMarshalerTest) MarshalXML(e *Encoder, start StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MyMarshalerTest) MarshalXML(e *Encoder, start StartElement) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyMarshalerAttrTest",
              "documentation": {
                "identifier": "MyMarshalerAttrTest",
                "newPage": false,
                "searchKey": "xml.MyMarshalerAttrTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyMarshalerAttrTest struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyMarshalerAttrTest struct {\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#MyMarshalerAttrTest.MarshalXMLAttr",
                    "documentation": {
                      "identifier": "MyMarshalerAttrTest.MarshalXMLAttr",
                      "newPage": false,
                      "searchKey": "xml.MyMarshalerAttrTest.MarshalXMLAttr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MyMarshalerAttrTest) MarshalXMLAttr(name Name) (Attr, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MyMarshalerAttrTest) MarshalXMLAttr(name Name) (Attr, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#MyMarshalerAttrTest.UnmarshalXMLAttr",
                    "documentation": {
                      "identifier": "MyMarshalerAttrTest.UnmarshalXMLAttr",
                      "newPage": false,
                      "searchKey": "xml.MyMarshalerAttrTest.UnmarshalXMLAttr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MyMarshalerAttrTest) UnmarshalXMLAttr(attr Attr) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MyMarshalerAttrTest) UnmarshalXMLAttr(attr Attr) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MarshalerStruct",
              "documentation": {
                "identifier": "MarshalerStruct",
                "newPage": false,
                "searchKey": "xml.MarshalerStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MarshalerStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MarshalerStruct struct {\n\tFoo MyMarshalerAttrTest `xml:\",attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#InnerStruct",
              "documentation": {
                "identifier": "InnerStruct",
                "newPage": false,
                "searchKey": "xml.InnerStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type InnerStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InnerStruct struct {\n\tXMLName Name `xml:\"testns outer\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OuterStruct",
              "documentation": {
                "identifier": "OuterStruct",
                "newPage": false,
                "searchKey": "xml.OuterStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OuterStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OuterStruct struct {\n\tInnerStruct\n\tIntAttr int `xml:\"int,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OuterNamedStruct",
              "documentation": {
                "identifier": "OuterNamedStruct",
                "newPage": false,
                "searchKey": "xml.OuterNamedStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OuterNamedStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OuterNamedStruct struct {\n\tInnerStruct\n\tXMLName Name `xml:\"outerns test\"`\n\tIntAttr int  `xml:\"int,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OuterNamedOrderedStruct",
              "documentation": {
                "identifier": "OuterNamedOrderedStruct",
                "newPage": false,
                "searchKey": "xml.OuterNamedOrderedStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OuterNamedOrderedStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OuterNamedOrderedStruct struct {\n\tXMLName Name `xml:\"outerns test\"`\n\tInnerStruct\n\tIntAttr int `xml:\"int,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#OuterOuterStruct",
              "documentation": {
                "identifier": "OuterOuterStruct",
                "newPage": false,
                "searchKey": "xml.OuterOuterStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type OuterOuterStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype OuterOuterStruct struct {\n\tOuterStruct\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NestedAndChardata",
              "documentation": {
                "identifier": "NestedAndChardata",
                "newPage": false,
                "searchKey": "xml.NestedAndChardata",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NestedAndChardata struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NestedAndChardata struct {\n\tAB       []string `xml:\"A>B\"`\n\tChardata string   `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NestedAndComment",
              "documentation": {
                "identifier": "NestedAndComment",
                "newPage": false,
                "searchKey": "xml.NestedAndComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NestedAndComment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NestedAndComment struct {\n\tAB      []string `xml:\"A>B\"`\n\tComment string   `xml:\",comment\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#CDataTest",
              "documentation": {
                "identifier": "CDataTest",
                "newPage": false,
                "searchKey": "xml.CDataTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type CDataTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CDataTest struct {\n\tChardata string `xml:\",cdata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#NestedAndCData",
              "documentation": {
                "identifier": "NestedAndCData",
                "newPage": false,
                "searchKey": "xml.NestedAndCData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type NestedAndCData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype NestedAndCData struct {\n\tAB    []string `xml:\"A>B\"`\n\tCDATA string   `xml:\",cdata\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#T1",
              "documentation": {
                "identifier": "T1",
                "newPage": false,
                "searchKey": "xml.T1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T1 struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T1 struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#T2",
              "documentation": {
                "identifier": "T2",
                "newPage": false,
                "searchKey": "xml.T2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type T2 struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype T2 struct{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirComment",
              "documentation": {
                "identifier": "IndirComment",
                "newPage": false,
                "searchKey": "xml.IndirComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirComment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirComment struct {\n\tT1      T1\n\tComment *string `xml:\",comment\"`\n\tT2      T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectComment",
              "documentation": {
                "identifier": "DirectComment",
                "newPage": false,
                "searchKey": "xml.DirectComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectComment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectComment struct {\n\tT1      T1\n\tComment string `xml:\",comment\"`\n\tT2      T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceComment",
              "documentation": {
                "identifier": "IfaceComment",
                "newPage": false,
                "searchKey": "xml.IfaceComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceComment struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceComment struct {\n\tT1      T1\n\tComment interface{} `xml:\",comment\"`\n\tT2      T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirChardata",
              "documentation": {
                "identifier": "IndirChardata",
                "newPage": false,
                "searchKey": "xml.IndirChardata",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirChardata struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirChardata struct {\n\tT1       T1\n\tChardata *string `xml:\",chardata\"`\n\tT2       T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectChardata",
              "documentation": {
                "identifier": "DirectChardata",
                "newPage": false,
                "searchKey": "xml.DirectChardata",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectChardata struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectChardata struct {\n\tT1       T1\n\tChardata string `xml:\",chardata\"`\n\tT2       T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceChardata",
              "documentation": {
                "identifier": "IfaceChardata",
                "newPage": false,
                "searchKey": "xml.IfaceChardata",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceChardata struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceChardata struct {\n\tT1       T1\n\tChardata interface{} `xml:\",chardata\"`\n\tT2       T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirCDATA",
              "documentation": {
                "identifier": "IndirCDATA",
                "newPage": false,
                "searchKey": "xml.IndirCDATA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirCDATA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirCDATA struct {\n\tT1    T1\n\tCDATA *string `xml:\",cdata\"`\n\tT2    T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectCDATA",
              "documentation": {
                "identifier": "DirectCDATA",
                "newPage": false,
                "searchKey": "xml.DirectCDATA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectCDATA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectCDATA struct {\n\tT1    T1\n\tCDATA string `xml:\",cdata\"`\n\tT2    T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceCDATA",
              "documentation": {
                "identifier": "IfaceCDATA",
                "newPage": false,
                "searchKey": "xml.IfaceCDATA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceCDATA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceCDATA struct {\n\tT1    T1\n\tCDATA interface{} `xml:\",cdata\"`\n\tT2    T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirInnerXML",
              "documentation": {
                "identifier": "IndirInnerXML",
                "newPage": false,
                "searchKey": "xml.IndirInnerXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirInnerXML struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirInnerXML struct {\n\tT1       T1\n\tInnerXML *string `xml:\",innerxml\"`\n\tT2       T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectInnerXML",
              "documentation": {
                "identifier": "DirectInnerXML",
                "newPage": false,
                "searchKey": "xml.DirectInnerXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectInnerXML struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectInnerXML struct {\n\tT1       T1\n\tInnerXML string `xml:\",innerxml\"`\n\tT2       T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceInnerXML",
              "documentation": {
                "identifier": "IfaceInnerXML",
                "newPage": false,
                "searchKey": "xml.IfaceInnerXML",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceInnerXML struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceInnerXML struct {\n\tT1       T1\n\tInnerXML interface{} `xml:\",innerxml\"`\n\tT2       T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirElement",
              "documentation": {
                "identifier": "IndirElement",
                "newPage": false,
                "searchKey": "xml.IndirElement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirElement struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirElement struct {\n\tT1      T1\n\tElement *string\n\tT2      T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectElement",
              "documentation": {
                "identifier": "DirectElement",
                "newPage": false,
                "searchKey": "xml.DirectElement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectElement struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectElement struct {\n\tT1      T1\n\tElement string\n\tT2      T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceElement",
              "documentation": {
                "identifier": "IfaceElement",
                "newPage": false,
                "searchKey": "xml.IfaceElement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceElement struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceElement struct {\n\tT1      T1\n\tElement interface{}\n\tT2      T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirOmitEmpty",
              "documentation": {
                "identifier": "IndirOmitEmpty",
                "newPage": false,
                "searchKey": "xml.IndirOmitEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirOmitEmpty struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirOmitEmpty struct {\n\tT1        T1\n\tOmitEmpty *string `xml:\",omitempty\"`\n\tT2        T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectOmitEmpty",
              "documentation": {
                "identifier": "DirectOmitEmpty",
                "newPage": false,
                "searchKey": "xml.DirectOmitEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectOmitEmpty struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectOmitEmpty struct {\n\tT1        T1\n\tOmitEmpty string `xml:\",omitempty\"`\n\tT2        T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceOmitEmpty",
              "documentation": {
                "identifier": "IfaceOmitEmpty",
                "newPage": false,
                "searchKey": "xml.IfaceOmitEmpty",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceOmitEmpty struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceOmitEmpty struct {\n\tT1        T1\n\tOmitEmpty interface{} `xml:\",omitempty\"`\n\tT2        T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IndirAny",
              "documentation": {
                "identifier": "IndirAny",
                "newPage": false,
                "searchKey": "xml.IndirAny",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IndirAny struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IndirAny struct {\n\tT1  T1\n\tAny *string `xml:\",any\"`\n\tT2  T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#DirectAny",
              "documentation": {
                "identifier": "DirectAny",
                "newPage": false,
                "searchKey": "xml.DirectAny",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type DirectAny struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype DirectAny struct {\n\tT1  T1\n\tAny string `xml:\",any\"`\n\tT2  T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IfaceAny",
              "documentation": {
                "identifier": "IfaceAny",
                "newPage": false,
                "searchKey": "xml.IfaceAny",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IfaceAny struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IfaceAny struct {\n\tT1  T1\n\tAny interface{} `xml:\",any\"`\n\tT2  T2\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#AttrParent",
              "documentation": {
                "identifier": "AttrParent",
                "newPage": false,
                "searchKey": "xml.AttrParent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type AttrParent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype AttrParent struct {\n\tX string `xml:\"X>Y,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadAttr",
              "documentation": {
                "identifier": "BadAttr",
                "newPage": false,
                "searchKey": "xml.BadAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadAttr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadAttr struct {\n\tName map[string]string `xml:\"name,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#limitedBytesWriter",
              "documentation": {
                "identifier": "limitedBytesWriter",
                "newPage": false,
                "searchKey": "xml.limitedBytesWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type limitedBytesWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype limitedBytesWriter struct {\n\tw      io.Writer\n\tremain int // until writes fail\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#limitedBytesWriter.Write",
                    "documentation": {
                      "identifier": "limitedBytesWriter.Write",
                      "newPage": false,
                      "searchKey": "xml.limitedBytesWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (lw *limitedBytesWriter) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (lw *limitedBytesWriter) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#InvalidXMLName",
              "documentation": {
                "identifier": "InvalidXMLName",
                "newPage": false,
                "searchKey": "xml.InvalidXMLName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type InvalidXMLName struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InvalidXMLName struct {\n\tXMLName Name `xml:\"error\"`\n\tType    struct {\n\t\tXMLName Name `xml:\"type,attr\"`\n\t}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Feed",
              "documentation": {
                "identifier": "Feed",
                "newPage": false,
                "searchKey": "xml.Feed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Feed struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Feed struct {\n\tXMLName Name      `xml:\"http://www.w3.org/2005/Atom feed\"`\n\tTitle   string    `xml:\"title\"`\n\tID      string    `xml:\"id\"`\n\tLink    []Link    `xml:\"link\"`\n\tUpdated time.Time `xml:\"updated,attr\"`\n\tAuthor  Person    `xml:\"author\"`\n\tEntry   []Entry   `xml:\"entry\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Entry",
              "documentation": {
                "identifier": "Entry",
                "newPage": false,
                "searchKey": "xml.Entry",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Entry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Entry struct {\n\tTitle   string    `xml:\"title\"`\n\tID      string    `xml:\"id\"`\n\tLink    []Link    `xml:\"link\"`\n\tUpdated time.Time `xml:\"updated\"`\n\tAuthor  Person    `xml:\"author\"`\n\tSummary Text      `xml:\"summary\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Link",
              "documentation": {
                "identifier": "Link",
                "newPage": false,
                "searchKey": "xml.Link",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Link struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Link struct {\n\tRel  string `xml:\"rel,attr,omitempty\"`\n\tHref string `xml:\"href,attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Person",
              "documentation": {
                "identifier": "Person",
                "newPage": false,
                "searchKey": "xml.Person",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Person struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Person struct {\n\tName     string `xml:\"name\"`\n\tURI      string `xml:\"uri\"`\n\tEmail    string `xml:\"email\"`\n\tInnerXML string `xml:\",innerxml\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Text",
              "documentation": {
                "identifier": "Text",
                "newPage": false,
                "searchKey": "xml.Text",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Text struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Text struct {\n\tType string `xml:\"type,attr,omitempty\"`\n\tBody string `xml:\",chardata\"`\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#NewText",
                    "documentation": {
                      "identifier": "NewText",
                      "newPage": false,
                      "searchKey": "xml.NewText",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewText(text string) Text"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewText(text string) Text\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestItem",
              "documentation": {
                "identifier": "PathTestItem",
                "newPage": false,
                "searchKey": "xml.PathTestItem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestItem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestItem struct {\n\tValue string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestA",
              "documentation": {
                "identifier": "PathTestA",
                "newPage": false,
                "searchKey": "xml.PathTestA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestA struct {\n\tItems         []PathTestItem `xml:\">Item1\"`\n\tBefore, After string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestB",
              "documentation": {
                "identifier": "PathTestB",
                "newPage": false,
                "searchKey": "xml.PathTestB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestB struct {\n\tOther         []PathTestItem `xml:\"Items>Item1\"`\n\tBefore, After string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestC",
              "documentation": {
                "identifier": "PathTestC",
                "newPage": false,
                "searchKey": "xml.PathTestC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestC struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestC struct {\n\tValues1       []string `xml:\"Items>Item1>Value\"`\n\tValues2       []string `xml:\"Items>Item2>Value\"`\n\tBefore, After string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestSet",
              "documentation": {
                "identifier": "PathTestSet",
                "newPage": false,
                "searchKey": "xml.PathTestSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestSet struct {\n\tItem1 []PathTestItem\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestD",
              "documentation": {
                "identifier": "PathTestD",
                "newPage": false,
                "searchKey": "xml.PathTestD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestD struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestD struct {\n\tOther         PathTestSet `xml:\"Items\"`\n\tBefore, After string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#PathTestE",
              "documentation": {
                "identifier": "PathTestE",
                "newPage": false,
                "searchKey": "xml.PathTestE",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PathTestE struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PathTestE struct {\n\tUnderline     string `xml:\"Items>_>Value\"`\n\tBefore, After string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadPathTestA",
              "documentation": {
                "identifier": "BadPathTestA",
                "newPage": false,
                "searchKey": "xml.BadPathTestA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadPathTestA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadPathTestA struct {\n\tFirst  string `xml:\"items>item1\"`\n\tOther  string `xml:\"items>item2\"`\n\tSecond string `xml:\"items\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadPathTestB",
              "documentation": {
                "identifier": "BadPathTestB",
                "newPage": false,
                "searchKey": "xml.BadPathTestB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadPathTestB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadPathTestB struct {\n\tOther  string `xml:\"items>item2>value\"`\n\tFirst  string `xml:\"items>item1\"`\n\tSecond string `xml:\"items>item1>value\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadPathTestC",
              "documentation": {
                "identifier": "BadPathTestC",
                "newPage": false,
                "searchKey": "xml.BadPathTestC",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadPathTestC struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadPathTestC struct {\n\tFirst  string\n\tSecond string `xml:\"First\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadPathTestD",
              "documentation": {
                "identifier": "BadPathTestD",
                "newPage": false,
                "searchKey": "xml.BadPathTestD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadPathTestD struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadPathTestD struct {\n\tBadPathEmbeddedA\n\tBadPathEmbeddedB\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadPathEmbeddedA",
              "documentation": {
                "identifier": "BadPathEmbeddedA",
                "newPage": false,
                "searchKey": "xml.BadPathEmbeddedA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadPathEmbeddedA struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadPathEmbeddedA struct {\n\tFirst string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BadPathEmbeddedB",
              "documentation": {
                "identifier": "BadPathEmbeddedB",
                "newPage": false,
                "searchKey": "xml.BadPathEmbeddedB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type BadPathEmbeddedB struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BadPathEmbeddedB struct {\n\tSecond string `xml:\"First\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestThree",
              "documentation": {
                "identifier": "TestThree",
                "newPage": false,
                "searchKey": "xml.TestThree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestThree struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestThree struct {\n\tXMLName Name   `xml:\"Test3\"`\n\tAttr    string `xml:\",attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Tables",
              "documentation": {
                "identifier": "Tables",
                "newPage": false,
                "searchKey": "xml.Tables",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Tables struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Tables struct {\n\tHTable string `xml:\"http://www.w3.org/TR/html4/ table\"`\n\tFTable string `xml:\"http://www.w3schools.com/furniture table\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TableAttrs",
              "documentation": {
                "identifier": "TableAttrs",
                "newPage": false,
                "searchKey": "xml.TableAttrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TableAttrs struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TableAttrs struct {\n\tTAttr TAttr\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TAttr",
              "documentation": {
                "identifier": "TAttr",
                "newPage": false,
                "searchKey": "xml.TAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TAttr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TAttr struct {\n\tHTable string `xml:\"http://www.w3.org/TR/html4/ table,attr\"`\n\tFTable string `xml:\"http://www.w3schools.com/furniture table,attr\"`\n\tLang   string `xml:\"http://www.w3.org/XML/1998/namespace lang,attr,omitempty\"`\n\tOther1 string `xml:\"http://golang.org/xml/ other,attr,omitempty\"`\n\tOther2 string `xml:\"http://golang.org/xmlfoo/ other,attr,omitempty\"`\n\tOther3 string `xml:\"http://golang.org/json/ other,attr,omitempty\"`\n\tOther4 string `xml:\"http://golang.org/2/json/ other,attr,omitempty\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyCharData",
              "documentation": {
                "identifier": "MyCharData",
                "newPage": false,
                "searchKey": "xml.MyCharData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyCharData struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyCharData struct {\n\tbody string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#MyCharData.UnmarshalXML",
                    "documentation": {
                      "identifier": "MyCharData.UnmarshalXML",
                      "newPage": false,
                      "searchKey": "xml.MyCharData.UnmarshalXML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MyCharData) UnmarshalXML(d *Decoder, start StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MyCharData) UnmarshalXML(d *Decoder, start StartElement) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#MyCharData.UnmarshalXMLAttr",
                    "documentation": {
                      "identifier": "MyCharData.UnmarshalXMLAttr",
                      "newPage": false,
                      "searchKey": "xml.MyCharData.UnmarshalXMLAttr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MyCharData) UnmarshalXMLAttr(attr Attr) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MyCharData) UnmarshalXMLAttr(attr Attr) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyAttr",
              "documentation": {
                "identifier": "MyAttr",
                "newPage": false,
                "searchKey": "xml.MyAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyAttr struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyAttr struct {\n\tattr string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#MyAttr.UnmarshalXMLAttr",
                    "documentation": {
                      "identifier": "MyAttr.UnmarshalXMLAttr",
                      "newPage": false,
                      "searchKey": "xml.MyAttr.UnmarshalXMLAttr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *MyAttr) UnmarshalXMLAttr(attr Attr) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *MyAttr) UnmarshalXMLAttr(attr Attr) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MyStruct",
              "documentation": {
                "identifier": "MyStruct",
                "newPage": false,
                "searchKey": "xml.MyStruct",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type MyStruct struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype MyStruct struct {\n\tData *MyCharData\n\tAttr *MyAttr `xml:\",attr\"`\n\n\tData2 MyCharData\n\tAttr2 MyAttr `xml:\",attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Pea",
              "documentation": {
                "identifier": "Pea",
                "newPage": false,
                "searchKey": "xml.Pea",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Pea struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Pea struct {\n\tCotelydon string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Pod",
              "documentation": {
                "identifier": "Pod",
                "newPage": false,
                "searchKey": "xml.Pod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Pod struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Pod struct {\n\tPea interface{} `xml:\"Pea\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#X",
              "documentation": {
                "identifier": "X",
                "newPage": false,
                "searchKey": "xml.X",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type X struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype X struct {\n\tD string `xml:\",comment\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#IXField",
              "documentation": {
                "identifier": "IXField",
                "newPage": false,
                "searchKey": "xml.IXField",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type IXField struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype IXField struct {\n\tFive        int      `xml:\"five\"`\n\tNotInnerXML []string `xml:\",innerxml\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Child",
              "documentation": {
                "identifier": "Child",
                "newPage": false,
                "searchKey": "xml.Child",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Child struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Child struct {\n\tG struct {\n\t\tI int\n\t}\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ChildToEmbed",
              "documentation": {
                "identifier": "ChildToEmbed",
                "newPage": false,
                "searchKey": "xml.ChildToEmbed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ChildToEmbed struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ChildToEmbed struct {\n\tX bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Parent",
              "documentation": {
                "identifier": "Parent",
                "newPage": false,
                "searchKey": "xml.Parent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Parent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Parent struct {\n\tI        int\n\tIPtr     *int\n\tIs       []int\n\tIPtrs    []*int\n\tF        float32\n\tFPtr     *float32\n\tFs       []float32\n\tFPtrs    []*float32\n\tB        bool\n\tBPtr     *bool\n\tBs       []bool\n\tBPtrs    []*bool\n\tBytes    []byte\n\tBytesPtr *[]byte\n\tS        string\n\tSPtr     *string\n\tSs       []string\n\tSPtrs    []*string\n\tMyI      MyInt\n\tChild    Child\n\tChildren []Child\n\tChildPtr *Child\n\tChildToEmbed\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#WhitespaceValuesParent",
              "documentation": {
                "identifier": "WhitespaceValuesParent",
                "newPage": false,
                "searchKey": "xml.WhitespaceValuesParent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type WhitespaceValuesParent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WhitespaceValuesParent struct {\n\tBFalse bool\n\tBTrue  bool\n\tI      int\n\tINeg   int\n\tI8     int8\n\tI8Neg  int8\n\tI16    int16\n\tI16Neg int16\n\tI32    int32\n\tI32Neg int32\n\tI64    int64\n\tI64Neg int64\n\tUI     uint\n\tUI8    uint8\n\tUI16   uint16\n\tUI32   uint32\n\tUI64   uint64\n\tF32    float32\n\tF32Neg float32\n\tF64    float64\n\tF64Neg float64\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#WhitespaceAttrsParent",
              "documentation": {
                "identifier": "WhitespaceAttrsParent",
                "newPage": false,
                "searchKey": "xml.WhitespaceAttrsParent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type WhitespaceAttrsParent struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype WhitespaceAttrsParent struct {\n\tBFalse bool    `xml:\",attr\"`\n\tBTrue  bool    `xml:\",attr\"`\n\tI      int     `xml:\",attr\"`\n\tINeg   int     `xml:\",attr\"`\n\tI8     int8    `xml:\",attr\"`\n\tI8Neg  int8    `xml:\",attr\"`\n\tI16    int16   `xml:\",attr\"`\n\tI16Neg int16   `xml:\",attr\"`\n\tI32    int32   `xml:\",attr\"`\n\tI32Neg int32   `xml:\",attr\"`\n\tI64    int64   `xml:\",attr\"`\n\tI64Neg int64   `xml:\",attr\"`\n\tUI     uint    `xml:\",attr\"`\n\tUI8    uint8   `xml:\",attr\"`\n\tUI16   uint16  `xml:\",attr\"`\n\tUI32   uint32  `xml:\",attr\"`\n\tUI64   uint64  `xml:\",attr\"`\n\tF32    float32 `xml:\",attr\"`\n\tF32Neg float32 `xml:\",attr\"`\n\tF64    float64 `xml:\",attr\"`\n\tF64Neg float64 `xml:\",attr\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#toks",
              "documentation": {
                "identifier": "toks",
                "newPage": false,
                "searchKey": "xml.toks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type toks struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype toks struct {\n\tearlyEOF bool\n\tt        []Token\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#toks.Token",
                    "documentation": {
                      "identifier": "toks.Token",
                      "newPage": false,
                      "searchKey": "xml.toks.Token",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *toks) Token() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *toks) Token() (Token, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#toksNil",
              "documentation": {
                "identifier": "toksNil",
                "newPage": false,
                "searchKey": "xml.toksNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type toksNil struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype toksNil struct {\n\treturnEOF bool\n\tt         []Token\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#toksNil.Token",
                    "documentation": {
                      "identifier": "toksNil.Token",
                      "newPage": false,
                      "searchKey": "xml.toksNil.Token",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *toksNil) Token() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *toksNil) Token() (Token, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#downCaser",
              "documentation": {
                "identifier": "downCaser",
                "newPage": false,
                "searchKey": "xml.downCaser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type downCaser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype downCaser struct {\n\tt *testing.T\n\tr io.ByteReader\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#downCaser.ReadByte",
                    "documentation": {
                      "identifier": "downCaser.ReadByte",
                      "newPage": false,
                      "searchKey": "xml.downCaser.ReadByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *downCaser) ReadByte() (c byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *downCaser) ReadByte() (c byte, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/xml#downCaser.Read",
                    "documentation": {
                      "identifier": "downCaser.Read",
                      "newPage": false,
                      "searchKey": "xml.downCaser.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *downCaser) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *downCaser) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#allScalars",
              "documentation": {
                "identifier": "allScalars",
                "newPage": false,
                "searchKey": "xml.allScalars",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type allScalars struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype allScalars struct {\n\tTrue1     bool\n\tTrue2     bool\n\tFalse1    bool\n\tFalse2    bool\n\tInt       int\n\tInt8      int8\n\tInt16     int16\n\tInt32     int32\n\tInt64     int64\n\tUint      int\n\tUint8     uint8\n\tUint16    uint16\n\tUint32    uint32\n\tUint64    uint64\n\tUintptr   uintptr\n\tFloat32   float32\n\tFloat64   float64\n\tString    string\n\tPtrString *string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#item",
              "documentation": {
                "identifier": "item",
                "newPage": false,
                "searchKey": "xml.item",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type item struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype item struct {\n\tFieldA string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#errWriter",
              "documentation": {
                "identifier": "errWriter",
                "newPage": false,
                "searchKey": "xml.errWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type errWriter struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errWriter struct{}\n```\n\nWriter whose Write method always returns an error. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#errWriter.Write",
                    "documentation": {
                      "identifier": "errWriter.Write",
                      "newPage": false,
                      "searchKey": "xml.errWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (errWriter) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (errWriter) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#mapper",
              "documentation": {
                "identifier": "mapper",
                "newPage": false,
                "searchKey": "xml.mapper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type mapper struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype mapper struct {\n\tt TokenReader\n\tf func(Token) Token\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#mapper.Token",
                    "documentation": {
                      "identifier": "mapper.Token",
                      "newPage": false,
                      "searchKey": "xml.mapper.Token",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m mapper) Token() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m mapper) Token() (Token, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#tokReader",
              "documentation": {
                "identifier": "tokReader",
                "newPage": false,
                "searchKey": "xml.tokReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tokReader struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tokReader struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#tokReader.Token",
                    "documentation": {
                      "identifier": "tokReader.Token",
                      "newPage": false,
                      "searchKey": "xml.tokReader.Token",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tokReader) Token() (Token, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tokReader) Token() (Token, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Failure",
              "documentation": {
                "identifier": "Failure",
                "newPage": false,
                "searchKey": "xml.Failure",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Failure struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Failure struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/xml#Failure.UnmarshalXML",
                    "documentation": {
                      "identifier": "Failure.UnmarshalXML",
                      "newPage": false,
                      "searchKey": "xml.Failure.UnmarshalXML",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (Failure) UnmarshalXML(*Decoder, StartElement) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (Failure) UnmarshalXML(*Decoder, StartElement) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/xml#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/xml#Marshal",
              "documentation": {
                "identifier": "Marshal",
                "newPage": false,
                "searchKey": "xml.Marshal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Marshal(v interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Marshal(v interface{}) ([]byte, error)\n```\n\nMarshal returns the XML encoding of v. \n\nMarshal handles an array or slice by marshaling each of the elements. Marshal handles a pointer by marshaling the value it points at or, if the pointer is nil, by writing nothing. Marshal handles an interface value by marshaling the value it contains or, if the interface value is nil, by writing nothing. Marshal handles all other data by writing one or more XML elements containing the data. \n\nThe name for the XML elements is taken from, in order of preference: \n\n```\n- the tag on the XMLName field, if the data is a struct\n- the value of the XMLName field of type Name\n- the tag of the struct field used to obtain the data\n- the name of the struct field used to obtain the data\n- the name of the marshaled type\n\n```\nThe XML element for a struct contains marshaled elements for each of the exported fields of the struct, with these exceptions: \n\n```\n- the XMLName field, described above, is omitted.\n- a field with tag \"-\" is omitted.\n- a field with tag \"name,attr\" becomes an attribute with\n  the given name in the XML element.\n- a field with tag \",attr\" becomes an attribute with the\n  field name in the XML element.\n- a field with tag \",chardata\" is written as character data,\n  not as an XML element.\n- a field with tag \",cdata\" is written as character data\n  wrapped in one or more <![CDATA[ ... ]]> tags, not as an XML element.\n- a field with tag \",innerxml\" is written verbatim, not subject\n  to the usual marshaling procedure.\n- a field with tag \",comment\" is written as an XML comment, not\n  subject to the usual marshaling procedure. It must not contain\n  the \"--\" string within it.\n- a field with a tag including the \"omitempty\" option is omitted\n  if the field value is empty. The empty values are false, 0, any\n  nil pointer or interface value, and any array, slice, map, or\n  string of length zero.\n- an anonymous struct field is handled as if the fields of its\n  value were part of the outer struct.\n- a field implementing Marshaler is written by calling its MarshalXML\n  method.\n- a field implementing encoding.TextMarshaler is written by encoding the\n  result of its MarshalText method as text.\n\n```\nIf a field uses a tag \"a>b>c\", then the element c will be nested inside parent elements a and b. Fields that appear next to each other that name the same parent will be enclosed in one XML element. \n\nIf the XML name for a struct field is defined by both the field tag and the struct's XMLName field, the names must match. \n\nSee MarshalIndent for an example. \n\nMarshal will return an error if asked to marshal a channel, function, or map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#MarshalIndent",
              "documentation": {
                "identifier": "MarshalIndent",
                "newPage": false,
                "searchKey": "xml.MarshalIndent",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalIndent(v interface{}, prefix, indent string) ([]byte, error)\n```\n\nMarshalIndent works like Marshal, but each XML element begins on a new indented line that starts with prefix and is followed by one or more copies of indent according to the nesting depth. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#isValidDirective",
              "documentation": {
                "identifier": "isValidDirective",
                "newPage": false,
                "searchKey": "xml.isValidDirective",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValidDirective(dir Directive) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValidDirective(dir Directive) bool\n```\n\nisValidDirective reports whether dir is a valid directive text, meaning angle brackets are matched, ignoring comments and strings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#indirect",
              "documentation": {
                "identifier": "indirect",
                "newPage": false,
                "searchKey": "xml.indirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func indirect(vf reflect.Value) reflect.Value"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc indirect(vf reflect.Value) reflect.Value\n```\n\nindirect drills into interfaces and pointers, returning the pointed-at value. If it encounters a nil interface or pointer, indirect returns that nil value. This can turn into an infinite loop given a cyclic chain, but it matches the Go 1 behavior. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#isEmptyValue",
              "documentation": {
                "identifier": "isEmptyValue",
                "newPage": false,
                "searchKey": "xml.isEmptyValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isEmptyValue(v reflect.Value) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isEmptyValue(v reflect.Value) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Unmarshal",
              "documentation": {
                "identifier": "Unmarshal",
                "newPage": false,
                "searchKey": "xml.Unmarshal",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Unmarshal(data []byte, v interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Unmarshal(data []byte, v interface{}) error\n```\n\nUnmarshal parses the XML-encoded data and stores the result in the value pointed to by v, which must be an arbitrary struct, slice, or string. Well-formed data that does not fit into v is discarded. \n\nBecause Unmarshal uses the reflect package, it can only assign to exported (upper case) fields. Unmarshal uses a case-sensitive comparison to match XML element names to tag values and struct field names. \n\nUnmarshal maps an XML element to a struct using the following rules. In the rules, the tag of a field refers to the value associated with the key 'xml' in the struct field's tag (see the example above). \n\n```\n* If the struct has a field of type []byte or string with tag\n   \",innerxml\", Unmarshal accumulates the raw XML nested inside the\n   element in that field. The rest of the rules still apply.\n\n* If the struct has a field named XMLName of type Name,\n   Unmarshal records the element name in that field.\n\n* If the XMLName field has an associated tag of the form\n   \"name\" or \"namespace-URL name\", the XML element must have\n   the given name (and, optionally, name space) or else Unmarshal\n   returns an error.\n\n* If the XML element has an attribute whose name matches a\n   struct field name with an associated tag containing \",attr\" or\n   the explicit name in a struct field tag of the form \"name,attr\",\n   Unmarshal records the attribute value in that field.\n\n* If the XML element has an attribute not handled by the previous\n   rule and the struct has a field with an associated tag containing\n   \",any,attr\", Unmarshal records the attribute value in the first\n   such field.\n\n* If the XML element contains character data, that data is\n   accumulated in the first struct field that has tag \",chardata\".\n   The struct field may have type []byte or string.\n   If there is no such field, the character data is discarded.\n\n* If the XML element contains comments, they are accumulated in\n   the first struct field that has tag \",comment\".  The struct\n   field may have type []byte or string. If there is no such\n   field, the comments are discarded.\n\n* If the XML element contains a sub-element whose name matches\n   the prefix of a tag formatted as \"a\" or \"a>b>c\", unmarshal\n   will descend into the XML structure looking for elements with the\n   given names, and will map the innermost elements to that struct\n   field. A tag starting with \">\" is equivalent to one starting\n   with the field name followed by \">\".\n\n* If the XML element contains a sub-element whose name matches\n   a struct field's XMLName tag and the struct field has no\n   explicit name tag as per the previous rule, unmarshal maps\n   the sub-element to that struct field.\n\n* If the XML element contains a sub-element whose name matches a\n   field without any mode flags (\",attr\", \",chardata\", etc), Unmarshal\n   maps the sub-element to that struct field.\n\n* If the XML element contains a sub-element that hasn't matched any\n   of the above rules and the struct has a field with tag \",any\",\n   unmarshal maps the sub-element to that struct field.\n\n* An anonymous struct field is handled as if the fields of its\n   value were part of the outer struct.\n\n* A struct field with tag \"-\" is never unmarshaled into.\n\n```\nIf Unmarshal encounters a field type that implements the Unmarshaler interface, Unmarshal calls its UnmarshalXML method to produce the value from the XML element.  Otherwise, if the value implements encoding.TextUnmarshaler, Unmarshal calls that value's UnmarshalText method. \n\nUnmarshal maps an XML element to a string or []byte by saving the concatenation of that element's character data in the string or []byte. The saved []byte is never nil. \n\nUnmarshal maps an attribute value to a string or []byte by saving the value in the string or slice. \n\nUnmarshal maps an attribute value to an Attr by saving the attribute, including its name, in the Attr. \n\nUnmarshal maps an XML element or attribute value to a slice by extending the length of the slice and mapping the element or attribute to the newly created value. \n\nUnmarshal maps an XML element or attribute value to a bool by setting it to the boolean value represented by the string. Whitespace is trimmed and ignored. \n\nUnmarshal maps an XML element or attribute value to an integer or floating-point field by setting the field to the result of interpreting the string value in decimal. There is no check for overflow. Whitespace is trimmed and ignored. \n\nUnmarshal maps an XML element to a Name by recording the element name. \n\nUnmarshal maps an XML element to a pointer by setting the pointer to a freshly allocated value and then mapping the element to that value. \n\nA missing element or empty attribute value will be unmarshaled as a zero value. If the field is a slice, a zero value will be appended to the field. Otherwise, the field will be set to its zero value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#receiverType",
              "documentation": {
                "identifier": "receiverType",
                "newPage": false,
                "searchKey": "xml.receiverType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func receiverType(val interface{}) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc receiverType(val interface{}) string\n```\n\nreceiverType returns the receiver type to use in an expression like \"%s.MethodName\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#copyValue",
              "documentation": {
                "identifier": "copyValue",
                "newPage": false,
                "searchKey": "xml.copyValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func copyValue(dst reflect.Value, src []byte) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc copyValue(dst reflect.Value, src []byte) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#min",
              "documentation": {
                "identifier": "min",
                "newPage": false,
                "searchKey": "xml.min",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func min(a, b int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc min(a, b int) int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#addFieldInfo",
              "documentation": {
                "identifier": "addFieldInfo",
                "newPage": false,
                "searchKey": "xml.addFieldInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addFieldInfo(typ reflect.Type, tinfo *typeInfo, newf *fieldInfo) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addFieldInfo(typ reflect.Type, tinfo *typeInfo, newf *fieldInfo) error\n```\n\naddFieldInfo adds finfo to tinfo.fields if there are no conflicts, or if conflicts arise from previous fields that were obtained from deeper embedded structures than finfo. In the latter case, the conflicting entries are dropped. A conflict occurs when the path (parent + name) to a field is itself a prefix of another path, or when two paths match exactly. It is okay for field paths to share a common, shorter prefix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#makeCopy",
              "documentation": {
                "identifier": "makeCopy",
                "newPage": false,
                "searchKey": "xml.makeCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func makeCopy(b []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc makeCopy(b []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#isInCharacterRange",
              "documentation": {
                "identifier": "isInCharacterRange",
                "newPage": false,
                "searchKey": "xml.isInCharacterRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isInCharacterRange(r rune) (inrange bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isInCharacterRange(r rune) (inrange bool)\n```\n\nDecide whether the given rune is in the XML Character Range, per the Char production of [https://www.xml.com/axml/testaxml.htm](https://www.xml.com/axml/testaxml.htm), Section 2.2 Characters. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#isNameByte",
              "documentation": {
                "identifier": "isNameByte",
                "newPage": false,
                "searchKey": "xml.isNameByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isNameByte(c byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isNameByte(c byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#isName",
              "documentation": {
                "identifier": "isName",
                "newPage": false,
                "searchKey": "xml.isName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isName(s []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isName(s []byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#isNameString",
              "documentation": {
                "identifier": "isNameString",
                "newPage": false,
                "searchKey": "xml.isNameString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isNameString(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isNameString(s string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#EscapeText",
              "documentation": {
                "identifier": "EscapeText",
                "newPage": false,
                "searchKey": "xml.EscapeText",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func EscapeText(w io.Writer, s []byte) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc EscapeText(w io.Writer, s []byte) error\n```\n\nEscapeText writes to w the properly escaped XML equivalent of the plain text data s. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#escapeText",
              "documentation": {
                "identifier": "escapeText",
                "newPage": false,
                "searchKey": "xml.escapeText",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func escapeText(w io.Writer, s []byte, escapeNewline bool) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escapeText(w io.Writer, s []byte, escapeNewline bool) error\n```\n\nescapeText writes to w the properly escaped XML equivalent of the plain text data s. If escapeNewline is true, newline characters will be escaped. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#Escape",
              "documentation": {
                "identifier": "Escape",
                "newPage": false,
                "searchKey": "xml.Escape",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Escape(w io.Writer, s []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Escape(w io.Writer, s []byte)\n```\n\nEscape is like EscapeText but omits the error return value. It is provided for backwards compatibility with Go 1.0. Code targeting Go 1.1 or later should use EscapeText. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#emitCDATA",
              "documentation": {
                "identifier": "emitCDATA",
                "newPage": false,
                "searchKey": "xml.emitCDATA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func emitCDATA(w io.Writer, s []byte) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc emitCDATA(w io.Writer, s []byte) error\n```\n\nemitCDATA writes to w the CDATA-wrapped plain text data s. It escapes CDATA directives nested in s. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#procInst",
              "documentation": {
                "identifier": "procInst",
                "newPage": false,
                "searchKey": "xml.procInst",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func procInst(param, s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc procInst(param, s string) string\n```\n\nprocInst parses the `param=\"...\"` or `param='...'` value out of the provided string, returning \"\" if not found. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ParseTime",
              "documentation": {
                "identifier": "ParseTime",
                "newPage": false,
                "searchKey": "xml.ParseTime",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseTime(str string) time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseTime(str string) time.Time\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#ifaceptr",
              "documentation": {
                "identifier": "ifaceptr",
                "newPage": false,
                "searchKey": "xml.ifaceptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ifaceptr(x interface{}) interface{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ifaceptr(x interface{}) interface{}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#stringptr",
              "documentation": {
                "identifier": "stringptr",
                "newPage": false,
                "searchKey": "xml.stringptr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringptr(x string) *string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringptr(x string) *string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshal",
              "documentation": {
                "identifier": "TestMarshal",
                "newPage": false,
                "searchKey": "xml.TestMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshal(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalErrors",
              "documentation": {
                "identifier": "TestMarshalErrors",
                "newPage": false,
                "searchKey": "xml.TestMarshalErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshal",
              "documentation": {
                "identifier": "TestUnmarshal",
                "newPage": false,
                "searchKey": "xml.TestUnmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshal(t *testing.T)\n```\n\nDo invertibility testing on the various structures that we test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalIndent",
              "documentation": {
                "identifier": "TestMarshalIndent",
                "newPage": false,
                "searchKey": "xml.TestMarshalIndent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalIndent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalIndent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalWriteErrors",
              "documentation": {
                "identifier": "TestMarshalWriteErrors",
                "newPage": false,
                "searchKey": "xml.TestMarshalWriteErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalWriteErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalWriteErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalWriteIOErrors",
              "documentation": {
                "identifier": "TestMarshalWriteIOErrors",
                "newPage": false,
                "searchKey": "xml.TestMarshalWriteIOErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalWriteIOErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalWriteIOErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalFlush",
              "documentation": {
                "identifier": "TestMarshalFlush",
                "newPage": false,
                "searchKey": "xml.TestMarshalFlush",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalFlush(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalFlush(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BenchmarkMarshal",
              "documentation": {
                "identifier": "BenchmarkMarshal",
                "newPage": false,
                "searchKey": "xml.BenchmarkMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkMarshal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkMarshal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#BenchmarkUnmarshal",
              "documentation": {
                "identifier": "BenchmarkUnmarshal",
                "newPage": false,
                "searchKey": "xml.BenchmarkUnmarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkUnmarshal(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkUnmarshal(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestStructPointerMarshal",
              "documentation": {
                "identifier": "TestStructPointerMarshal",
                "newPage": false,
                "searchKey": "xml.TestStructPointerMarshal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStructPointerMarshal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStructPointerMarshal(t *testing.T)\n```\n\ngolang.org/issue/6556 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestEncodeToken",
              "documentation": {
                "identifier": "TestEncodeToken",
                "newPage": false,
                "searchKey": "xml.TestEncodeToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodeToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodeToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestProcInstEncodeToken",
              "documentation": {
                "identifier": "TestProcInstEncodeToken",
                "newPage": false,
                "searchKey": "xml.TestProcInstEncodeToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProcInstEncodeToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProcInstEncodeToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestDecodeEncode",
              "documentation": {
                "identifier": "TestDecodeEncode",
                "newPage": false,
                "searchKey": "xml.TestDecodeEncode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeEncode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeEncode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestRace9796",
              "documentation": {
                "identifier": "TestRace9796",
                "newPage": false,
                "searchKey": "xml.TestRace9796",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRace9796(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRace9796(t *testing.T)\n```\n\nIssue 9796. Used to fail with GORACE=\"halt_on_error=1\" -race. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIsValidDirective",
              "documentation": {
                "identifier": "TestIsValidDirective",
                "newPage": false,
                "searchKey": "xml.TestIsValidDirective",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsValidDirective(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsValidDirective(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestSimpleUseOfEncodeToken",
              "documentation": {
                "identifier": "TestSimpleUseOfEncodeToken",
                "newPage": false,
                "searchKey": "xml.TestSimpleUseOfEncodeToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSimpleUseOfEncodeToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSimpleUseOfEncodeToken(t *testing.T)\n```\n\nIssue 11719. EncodeToken used to silently eat tokens with an invalid type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIssue16158",
              "documentation": {
                "identifier": "TestIssue16158",
                "newPage": false,
                "searchKey": "xml.TestIssue16158",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue16158(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue16158(t *testing.T)\n```\n\nIssue 16158. Decoder.unmarshalAttr ignores the return value of copyValue. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestInvalidXMLName",
              "documentation": {
                "identifier": "TestInvalidXMLName",
                "newPage": false,
                "searchKey": "xml.TestInvalidXMLName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidXMLName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidXMLName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalFeed",
              "documentation": {
                "identifier": "TestUnmarshalFeed",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalFeed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalFeed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalFeed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalPaths",
              "documentation": {
                "identifier": "TestUnmarshalPaths",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalPaths",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalPaths(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalPaths(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalBadPaths",
              "documentation": {
                "identifier": "TestUnmarshalBadPaths",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalBadPaths",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalBadPaths(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalBadPaths(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalWithoutNameType",
              "documentation": {
                "identifier": "TestUnmarshalWithoutNameType",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalWithoutNameType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalWithoutNameType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalWithoutNameType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalAttr",
              "documentation": {
                "identifier": "TestUnmarshalAttr",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalAttr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalAttr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalNS",
              "documentation": {
                "identifier": "TestUnmarshalNS",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalNS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalNS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalNS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalNS",
              "documentation": {
                "identifier": "TestMarshalNS",
                "newPage": false,
                "searchKey": "xml.TestMarshalNS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalNS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalNS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalNSAttr",
              "documentation": {
                "identifier": "TestUnmarshalNSAttr",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalNSAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalNSAttr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalNSAttr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMarshalNSAttr",
              "documentation": {
                "identifier": "TestMarshalNSAttr",
                "newPage": false,
                "searchKey": "xml.TestMarshalNSAttr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalNSAttr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalNSAttr(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshaler",
              "documentation": {
                "identifier": "TestUnmarshaler",
                "newPage": false,
                "searchKey": "xml.TestUnmarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshaler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshaler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalIntoInterface",
              "documentation": {
                "identifier": "TestUnmarshalIntoInterface",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalIntoInterface",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalIntoInterface(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalIntoInterface(t *testing.T)\n```\n\n[https://golang.org/issue/6836](https://golang.org/issue/6836) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestMalformedComment",
              "documentation": {
                "identifier": "TestMalformedComment",
                "newPage": false,
                "searchKey": "xml.TestMalformedComment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMalformedComment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMalformedComment(t *testing.T)\n```\n\nIssue 11112. Unmarshal must reject invalid comments. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestInvalidInnerXMLType",
              "documentation": {
                "identifier": "TestInvalidInnerXMLType",
                "newPage": false,
                "searchKey": "xml.TestInvalidInnerXMLType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidInnerXMLType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidInnerXMLType(t *testing.T)\n```\n\nIssue 15600. \",innerxml\" on a field that can't hold it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalEmptyValues",
              "documentation": {
                "identifier": "TestUnmarshalEmptyValues",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalEmptyValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalEmptyValues(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalEmptyValues(t *testing.T)\n```\n\ngolang.org/issues/13417 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalWhitespaceValues",
              "documentation": {
                "identifier": "TestUnmarshalWhitespaceValues",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalWhitespaceValues",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalWhitespaceValues(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalWhitespaceValues(t *testing.T)\n```\n\ngolang.org/issues/22146 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnmarshalWhitespaceAttrs",
              "documentation": {
                "identifier": "TestUnmarshalWhitespaceAttrs",
                "newPage": false,
                "searchKey": "xml.TestUnmarshalWhitespaceAttrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnmarshalWhitespaceAttrs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnmarshalWhitespaceAttrs(t *testing.T)\n```\n\ngolang.org/issues/22146 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestDecodeEOF",
              "documentation": {
                "identifier": "TestDecodeEOF",
                "newPage": false,
                "searchKey": "xml.TestDecodeEOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeEOF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeEOF(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestDecodeNilToken",
              "documentation": {
                "identifier": "TestDecodeNilToken",
                "newPage": false,
                "searchKey": "xml.TestDecodeNilToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecodeNilToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecodeNilToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestRawToken",
              "documentation": {
                "identifier": "TestRawToken",
                "newPage": false,
                "searchKey": "xml.TestRawToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestNonStrictRawToken",
              "documentation": {
                "identifier": "TestNonStrictRawToken",
                "newPage": false,
                "searchKey": "xml.TestNonStrictRawToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNonStrictRawToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNonStrictRawToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestRawTokenAltEncoding",
              "documentation": {
                "identifier": "TestRawTokenAltEncoding",
                "newPage": false,
                "searchKey": "xml.TestRawTokenAltEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawTokenAltEncoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawTokenAltEncoding(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestRawTokenAltEncodingNoConverter",
              "documentation": {
                "identifier": "TestRawTokenAltEncodingNoConverter",
                "newPage": false,
                "searchKey": "xml.TestRawTokenAltEncodingNoConverter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawTokenAltEncodingNoConverter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawTokenAltEncodingNoConverter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#testRawToken",
              "documentation": {
                "identifier": "testRawToken",
                "newPage": false,
                "searchKey": "xml.testRawToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRawToken(t *testing.T, d *Decoder, raw string, rawTokens []Token)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRawToken(t *testing.T, d *Decoder, raw string, rawTokens []Token)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestNestedDirectives",
              "documentation": {
                "identifier": "TestNestedDirectives",
                "newPage": false,
                "searchKey": "xml.TestNestedDirectives",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNestedDirectives(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNestedDirectives(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestToken",
              "documentation": {
                "identifier": "TestToken",
                "newPage": false,
                "searchKey": "xml.TestToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestSyntax",
              "documentation": {
                "identifier": "TestSyntax",
                "newPage": false,
                "searchKey": "xml.TestSyntax",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSyntax(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSyntax(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestAllScalars",
              "documentation": {
                "identifier": "TestAllScalars",
                "newPage": false,
                "searchKey": "xml.TestAllScalars",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAllScalars(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAllScalars(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIssue569",
              "documentation": {
                "identifier": "TestIssue569",
                "newPage": false,
                "searchKey": "xml.TestIssue569",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue569(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue569(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestUnquotedAttrs",
              "documentation": {
                "identifier": "TestUnquotedAttrs",
                "newPage": false,
                "searchKey": "xml.TestUnquotedAttrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnquotedAttrs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnquotedAttrs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestValuelessAttrs",
              "documentation": {
                "identifier": "TestValuelessAttrs",
                "newPage": false,
                "searchKey": "xml.TestValuelessAttrs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValuelessAttrs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValuelessAttrs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestCopyTokenCharData",
              "documentation": {
                "identifier": "TestCopyTokenCharData",
                "newPage": false,
                "searchKey": "xml.TestCopyTokenCharData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCopyTokenCharData(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCopyTokenCharData(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestCopyTokenStartElement",
              "documentation": {
                "identifier": "TestCopyTokenStartElement",
                "newPage": false,
                "searchKey": "xml.TestCopyTokenStartElement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCopyTokenStartElement(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCopyTokenStartElement(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestSyntaxErrorLineNum",
              "documentation": {
                "identifier": "TestSyntaxErrorLineNum",
                "newPage": false,
                "searchKey": "xml.TestSyntaxErrorLineNum",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSyntaxErrorLineNum(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSyntaxErrorLineNum(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestTrailingRawToken",
              "documentation": {
                "identifier": "TestTrailingRawToken",
                "newPage": false,
                "searchKey": "xml.TestTrailingRawToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailingRawToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailingRawToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestTrailingToken",
              "documentation": {
                "identifier": "TestTrailingToken",
                "newPage": false,
                "searchKey": "xml.TestTrailingToken",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailingToken(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailingToken(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestEntityInsideCDATA",
              "documentation": {
                "identifier": "TestEntityInsideCDATA",
                "newPage": false,
                "searchKey": "xml.TestEntityInsideCDATA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEntityInsideCDATA(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEntityInsideCDATA(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestDisallowedCharacters",
              "documentation": {
                "identifier": "TestDisallowedCharacters",
                "newPage": false,
                "searchKey": "xml.TestDisallowedCharacters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDisallowedCharacters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDisallowedCharacters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIsInCharacterRange",
              "documentation": {
                "identifier": "TestIsInCharacterRange",
                "newPage": false,
                "searchKey": "xml.TestIsInCharacterRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsInCharacterRange(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsInCharacterRange(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestProcInstEncoding",
              "documentation": {
                "identifier": "TestProcInstEncoding",
                "newPage": false,
                "searchKey": "xml.TestProcInstEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProcInstEncoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProcInstEncoding(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestDirectivesWithComments",
              "documentation": {
                "identifier": "TestDirectivesWithComments",
                "newPage": false,
                "searchKey": "xml.TestDirectivesWithComments",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDirectivesWithComments(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDirectivesWithComments(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestEscapeTextIOErrors",
              "documentation": {
                "identifier": "TestEscapeTextIOErrors",
                "newPage": false,
                "searchKey": "xml.TestEscapeTextIOErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEscapeTextIOErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEscapeTextIOErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestEscapeTextInvalidChar",
              "documentation": {
                "identifier": "TestEscapeTextInvalidChar",
                "newPage": false,
                "searchKey": "xml.TestEscapeTextInvalidChar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEscapeTextInvalidChar(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEscapeTextInvalidChar(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIssue5880",
              "documentation": {
                "identifier": "TestIssue5880",
                "newPage": false,
                "searchKey": "xml.TestIssue5880",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue5880(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue5880(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIssue11405",
              "documentation": {
                "identifier": "TestIssue11405",
                "newPage": false,
                "searchKey": "xml.TestIssue11405",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue11405(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue11405(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestIssue12417",
              "documentation": {
                "identifier": "TestIssue12417",
                "newPage": false,
                "searchKey": "xml.TestIssue12417",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue12417(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue12417(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#tokenMap",
              "documentation": {
                "identifier": "tokenMap",
                "newPage": false,
                "searchKey": "xml.tokenMap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func tokenMap(mapping func(t Token) Token) func(TokenReader) TokenReader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tokenMap(mapping func(t Token) Token) func(TokenReader) TokenReader\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestNewTokenDecoderIdempotent",
              "documentation": {
                "identifier": "TestNewTokenDecoderIdempotent",
                "newPage": false,
                "searchKey": "xml.TestNewTokenDecoderIdempotent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewTokenDecoderIdempotent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewTokenDecoderIdempotent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestWrapDecoder",
              "documentation": {
                "identifier": "TestWrapDecoder",
                "newPage": false,
                "searchKey": "xml.TestWrapDecoder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWrapDecoder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWrapDecoder(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestTokenUnmarshaler",
              "documentation": {
                "identifier": "TestTokenUnmarshaler",
                "newPage": false,
                "searchKey": "xml.TestTokenUnmarshaler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTokenUnmarshaler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTokenUnmarshaler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#testRoundTrip",
              "documentation": {
                "identifier": "testRoundTrip",
                "newPage": false,
                "searchKey": "xml.testRoundTrip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRoundTrip(t *testing.T, input string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRoundTrip(t *testing.T, input string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/xml#TestRoundTrip",
              "documentation": {
                "identifier": "TestRoundTrip",
                "newPage": false,
                "searchKey": "xml.TestRoundTrip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRoundTrip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRoundTrip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
