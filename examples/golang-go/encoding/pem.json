{
  "pathID": "/encoding/pem",
  "documentation": {
    "identifier": "pem",
    "newPage": true,
    "searchKey": "encoding/pem",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package pem"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package pem implements the PEM data encoding, which originated in Privacy Enhanced Mail. The most common use of PEM encoding today is in TLS keys and certificates. See RFC 1421. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/encoding/pem#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/pem#pemLineLength",
              "documentation": {
                "identifier": "pemLineLength",
                "newPage": false,
                "searchKey": "pem.pemLineLength",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemLineLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemLineLength = 64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemMissingEndingSpace",
              "documentation": {
                "identifier": "pemMissingEndingSpace",
                "newPage": false,
                "searchKey": "pem.pemMissingEndingSpace",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemMissingEndingSpace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemMissingEndingSpace = `\n-----BEGIN FOO-----\ndGVzdA==\n-----ENDBAR-----`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemTooFewEndingDashes",
              "documentation": {
                "identifier": "pemTooFewEndingDashes",
                "newPage": false,
                "searchKey": "pem.pemTooFewEndingDashes",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemTooFewEndingDashes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemTooFewEndingDashes = `\n-----BEGIN FOO-----\ndGVzdA==\n-----END FOO----`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemTooManyEndingDashes",
              "documentation": {
                "identifier": "pemTooManyEndingDashes",
                "newPage": false,
                "searchKey": "pem.pemTooManyEndingDashes",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemTooManyEndingDashes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemTooManyEndingDashes = `\n-----BEGIN FOO-----\ndGVzdA==\n-----END FOO------`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemTrailingNonWhitespace",
              "documentation": {
                "identifier": "pemTrailingNonWhitespace",
                "newPage": false,
                "searchKey": "pem.pemTrailingNonWhitespace",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemTrailingNonWhitespace"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemTrailingNonWhitespace = `\n-----BEGIN FOO-----\ndGVzdA==\n-----END FOO----- .`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemWrongEndingType",
              "documentation": {
                "identifier": "pemWrongEndingType",
                "newPage": false,
                "searchKey": "pem.pemWrongEndingType",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemWrongEndingType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemWrongEndingType = `\n-----BEGIN FOO-----\ndGVzdA==\n-----END BAR-----`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#sixtyFourCharString",
              "documentation": {
                "identifier": "sixtyFourCharString",
                "newPage": false,
                "searchKey": "pem.sixtyFourCharString",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const sixtyFourCharString"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst sixtyFourCharString = \"0123456789012345678901234567890123456789012345678901234567890123\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/pem#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/pem#badPEMTests",
              "documentation": {
                "identifier": "badPEMTests",
                "newPage": false,
                "searchKey": "pem.badPEMTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var badPEMTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar badPEMTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#certificate",
              "documentation": {
                "identifier": "certificate",
                "newPage": false,
                "searchKey": "pem.certificate",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var certificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar certificate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#getLineTests",
              "documentation": {
                "identifier": "getLineTests",
                "newPage": false,
                "searchKey": "pem.getLineTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var getLineTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getLineTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#lineBreakerTests",
              "documentation": {
                "identifier": "lineBreakerTests",
                "newPage": false,
                "searchKey": "pem.lineBreakerTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var lineBreakerTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar lineBreakerTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#nl",
              "documentation": {
                "identifier": "nl",
                "newPage": false,
                "searchKey": "pem.nl",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var nl"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nl = []byte{'\\n'}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemData",
              "documentation": {
                "identifier": "pemData",
                "newPage": false,
                "searchKey": "pem.pemData",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemEnd",
              "documentation": {
                "identifier": "pemEnd",
                "newPage": false,
                "searchKey": "pem.pemEnd",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemEnd"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemEnd = []byte(\"\\n-----END \")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemEndOfLine",
              "documentation": {
                "identifier": "pemEndOfLine",
                "newPage": false,
                "searchKey": "pem.pemEndOfLine",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemEndOfLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemEndOfLine = []byte(\"-----\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemPrivateKey2",
              "documentation": {
                "identifier": "pemPrivateKey2",
                "newPage": false,
                "searchKey": "pem.pemPrivateKey2",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemPrivateKey2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemPrivateKey2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#pemStart",
              "documentation": {
                "identifier": "pemStart",
                "newPage": false,
                "searchKey": "pem.pemStart",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemStart"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemStart = []byte(\"\\n-----BEGIN \")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#privateKey",
              "documentation": {
                "identifier": "privateKey",
                "newPage": false,
                "searchKey": "pem.privateKey",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var privateKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar privateKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#privateKey2",
              "documentation": {
                "identifier": "privateKey2",
                "newPage": false,
                "searchKey": "pem.privateKey2",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var privateKey2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar privateKey2 = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/pem#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/pem#Block",
              "documentation": {
                "identifier": "Block",
                "newPage": false,
                "searchKey": "pem.Block",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Block struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Block struct {\n\tType    string            // The type, taken from the preamble (i.e. \"RSA PRIVATE KEY\").\n\tHeaders map[string]string // Optional headers.\n\tBytes   []byte            // The decoded bytes of the contents. Typically a DER encoded ASN.1 structure.\n}\n```\n\nA Block represents a PEM encoded structure. \n\nThe encoded form is: \n\n```\n-----BEGIN Type-----\nHeaders\nbase64-encoded Bytes\n-----END Type-----\n\n```\nwhere Headers is a possibly empty sequence of Key: Value lines. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/pem#Decode",
                    "documentation": {
                      "identifier": "Decode",
                      "newPage": false,
                      "searchKey": "pem.Decode",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Decode(data []byte) (p *Block, rest []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Decode(data []byte) (p *Block, rest []byte)\n```\n\nDecode will find the next PEM formatted block (certificate, private key etc) in the input. It returns that block and the remainder of the input. If no PEM data is found, p is nil and the whole of the input is returned in rest. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/pem#decodeError",
                    "documentation": {
                      "identifier": "decodeError",
                      "newPage": false,
                      "searchKey": "pem.decodeError",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func decodeError(data, rest []byte) (*Block, []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc decodeError(data, rest []byte) (*Block, []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#GetLineTest",
              "documentation": {
                "identifier": "GetLineTest",
                "newPage": false,
                "searchKey": "pem.GetLineTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type GetLineTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype GetLineTest struct {\n\tin, out1, out2 string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#lineBreaker",
              "documentation": {
                "identifier": "lineBreaker",
                "newPage": false,
                "searchKey": "pem.lineBreaker",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type lineBreaker struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lineBreaker struct {\n\tline [pemLineLength]byte\n\tused int\n\tout  io.Writer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/encoding/pem#lineBreaker.Close",
                    "documentation": {
                      "identifier": "lineBreaker.Close",
                      "newPage": false,
                      "searchKey": "pem.lineBreaker.Close",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lineBreaker) Close() (err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lineBreaker) Close() (err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/encoding/pem#lineBreaker.Write",
                    "documentation": {
                      "identifier": "lineBreaker.Write",
                      "newPage": false,
                      "searchKey": "pem.lineBreaker.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *lineBreaker) Write(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *lineBreaker) Write(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#lineBreakerTest",
              "documentation": {
                "identifier": "lineBreakerTest",
                "newPage": false,
                "searchKey": "pem.lineBreakerTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type lineBreakerTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lineBreakerTest struct {\n\tin, out string\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/encoding/pem#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "package"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/encoding/pem#BenchmarkDecode",
              "documentation": {
                "identifier": "BenchmarkDecode",
                "newPage": false,
                "searchKey": "pem.BenchmarkDecode",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecode(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecode(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#BenchmarkEncode",
              "documentation": {
                "identifier": "BenchmarkEncode",
                "newPage": false,
                "searchKey": "pem.BenchmarkEncode",
                "tags": [
                  "method",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncode(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncode(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#Encode",
              "documentation": {
                "identifier": "Encode",
                "newPage": false,
                "searchKey": "pem.Encode",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Encode(out io.Writer, b *Block) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Encode(out io.Writer, b *Block) error\n```\n\nEncode writes the PEM encoding of b to out. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#EncodeToMemory",
              "documentation": {
                "identifier": "EncodeToMemory",
                "newPage": false,
                "searchKey": "pem.EncodeToMemory",
                "tags": [
                  "method"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func EncodeToMemory(b *Block) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc EncodeToMemory(b *Block) []byte\n```\n\nEncodeToMemory returns the PEM encoding of b. \n\nIf b has invalid headers and cannot be encoded, EncodeToMemory returns nil. If it is important to report details about this error case, use Encode instead. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestBadDecode",
              "documentation": {
                "identifier": "TestBadDecode",
                "newPage": false,
                "searchKey": "pem.TestBadDecode",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadDecode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadDecode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestBadEncode",
              "documentation": {
                "identifier": "TestBadEncode",
                "newPage": false,
                "searchKey": "pem.TestBadEncode",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadEncode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadEncode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestDecode",
              "documentation": {
                "identifier": "TestDecode",
                "newPage": false,
                "searchKey": "pem.TestDecode",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestEncode",
              "documentation": {
                "identifier": "TestEncode",
                "newPage": false,
                "searchKey": "pem.TestEncode",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestFuzz",
              "documentation": {
                "identifier": "TestFuzz",
                "newPage": false,
                "searchKey": "pem.TestFuzz",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFuzz(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFuzz(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestGetLine",
              "documentation": {
                "identifier": "TestGetLine",
                "newPage": false,
                "searchKey": "pem.TestGetLine",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetLine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetLine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#TestLineBreaker",
              "documentation": {
                "identifier": "TestLineBreaker",
                "newPage": false,
                "searchKey": "pem.TestLineBreaker",
                "tags": [
                  "method",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineBreaker(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineBreaker(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#getLine",
              "documentation": {
                "identifier": "getLine",
                "newPage": false,
                "searchKey": "pem.getLine",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getLine(data []byte) (line, rest []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getLine(data []byte) (line, rest []byte)\n```\n\ngetLine results the first \\r\\n or \\n delineated line from the given byte array. The line does not include trailing whitespace or the trailing new line bytes. The remainder of the byte array (also not including the new line bytes) is also returned and this will always be smaller than the original argument. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#removeSpacesAndTabs",
              "documentation": {
                "identifier": "removeSpacesAndTabs",
                "newPage": false,
                "searchKey": "pem.removeSpacesAndTabs",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func removeSpacesAndTabs(data []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc removeSpacesAndTabs(data []byte) []byte\n```\n\nremoveSpacesAndTabs returns a copy of its input with all spaces and tabs removed, if there were any. Otherwise, the input is returned unchanged. \n\nThe base64 decoder already skips newline characters, so we don't need to filter them out here. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#testingKey",
              "documentation": {
                "identifier": "testingKey",
                "newPage": false,
                "searchKey": "pem.testingKey",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testingKey(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testingKey(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/encoding/pem#writeHeader",
              "documentation": {
                "identifier": "writeHeader",
                "newPage": false,
                "searchKey": "pem.writeHeader",
                "tags": [
                  "method",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func writeHeader(out io.Writer, k, v string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writeHeader(out io.Writer, k, v string) error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
