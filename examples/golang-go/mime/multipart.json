{
  "pathID": "/mime/multipart",
  "documentation": {
    "identifier": "multipart",
    "newPage": true,
    "searchKey": "mime/multipart",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package multipart"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package multipart implements MIME multipart parsing, as defined in RFC 2046. \n\nThe implementation is sufficient for HTTP (RFC 2388) and the multipart bodies generated by popular browsers. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/mime/multipart#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/mime/multipart#boundary",
              "documentation": {
                "identifier": "boundary",
                "newPage": false,
                "searchKey": "multipart.boundary",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const boundary"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst boundary = `MyBoundary`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#fileaContents",
              "documentation": {
                "identifier": "fileaContents",
                "newPage": false,
                "searchKey": "multipart.fileaContents",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const fileaContents"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fileaContents = \"This is a test file.\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#filebContents",
              "documentation": {
                "identifier": "filebContents",
                "newPage": false,
                "searchKey": "multipart.filebContents",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const filebContents"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst filebContents = \"Another test file.\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#maxReadThreshold",
              "documentation": {
                "identifier": "maxReadThreshold",
                "newPage": false,
                "searchKey": "multipart.maxReadThreshold",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxReadThreshold"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxReadThreshold = 1 << 20\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#message",
              "documentation": {
                "identifier": "message",
                "newPage": false,
                "searchKey": "multipart.message",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const message"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst message = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#messageWithFileWithoutName",
              "documentation": {
                "identifier": "messageWithFileWithoutName",
                "newPage": false,
                "searchKey": "multipart.messageWithFileWithoutName",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const messageWithFileWithoutName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst messageWithFileWithoutName = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#messageWithTextContentType",
              "documentation": {
                "identifier": "messageWithTextContentType",
                "newPage": false,
                "searchKey": "multipart.messageWithTextContentType",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const messageWithTextContentType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst messageWithTextContentType = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#peekBufferSize",
              "documentation": {
                "identifier": "peekBufferSize",
                "newPage": false,
                "searchKey": "multipart.peekBufferSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const peekBufferSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst peekBufferSize = 4096\n```\n\nThis constant needs to be at least 76 for this package to work correctly. This is because \\r\\n--separator_of_len_70- would fill the buffer and it wouldn't be safe to consume a single byte from it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#textaValue",
              "documentation": {
                "identifier": "textaValue",
                "newPage": false,
                "searchKey": "multipart.textaValue",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const textaValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst textaValue = \"foo\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#textbValue",
              "documentation": {
                "identifier": "textbValue",
                "newPage": false,
                "searchKey": "multipart.textbValue",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const textbValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst textbValue = \"bar\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/mime/multipart#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/mime/multipart#ErrMessageTooLarge",
              "documentation": {
                "identifier": "ErrMessageTooLarge",
                "newPage": false,
                "searchKey": "multipart.ErrMessageTooLarge",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrMessageTooLarge"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrMessageTooLarge = errors.New(\"multipart: message too large\")\n```\n\nErrMessageTooLarge is returned by ReadForm if the message form data is too large to be processed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#emptyParams",
              "documentation": {
                "identifier": "emptyParams",
                "newPage": false,
                "searchKey": "multipart.emptyParams",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var emptyParams"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar emptyParams = make(map[string]string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#longLine",
              "documentation": {
                "identifier": "longLine",
                "newPage": false,
                "searchKey": "multipart.longLine",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var longLine"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar longLine = strings.Repeat(\"\\n\\n\\r\\r\\r\\n\\r\\000\", (1<<20)/8)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#parseTests",
              "documentation": {
                "identifier": "parseTests",
                "newPage": false,
                "searchKey": "multipart.parseTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#quoteEscaper",
              "documentation": {
                "identifier": "quoteEscaper",
                "newPage": false,
                "searchKey": "multipart.quoteEscaper",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var quoteEscaper"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar quoteEscaper = strings.NewReplacer(\"\\\\\", \"\\\\\\\\\", `\"`, \"\\\\\\\"\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/mime/multipart#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/mime/multipart#File",
              "documentation": {
                "identifier": "File",
                "newPage": false,
                "searchKey": "multipart.File",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type File interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype File interface {\n\tio.Reader\n\tio.ReaderAt\n\tio.Seeker\n\tio.Closer\n}\n```\n\nFile is an interface to access the file part of a multipart message. Its contents may be either stored in memory or on disk. If stored on disk, the File's underlying concrete type will be an *os.File. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#testFile",
                    "documentation": {
                      "identifier": "testFile",
                      "newPage": false,
                      "searchKey": "multipart.testFile",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func testFile(t *testing.T, fh *FileHeader, efn, econtent string) File"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc testFile(t *testing.T, fh *FileHeader, efn, econtent string) File\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#FileHeader",
              "documentation": {
                "identifier": "FileHeader",
                "newPage": false,
                "searchKey": "multipart.FileHeader",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FileHeader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FileHeader struct {\n\tFilename string\n\tHeader   textproto.MIMEHeader\n\tSize     int64\n\n\tcontent []byte\n\ttmpfile string\n}\n```\n\nA FileHeader describes a file part of a multipart request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#FileHeader.Open",
                    "documentation": {
                      "identifier": "FileHeader.Open",
                      "newPage": false,
                      "searchKey": "multipart.FileHeader.Open",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fh *FileHeader) Open() (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fh *FileHeader) Open() (File, error)\n```\n\nOpen opens and returns the FileHeader's associated File. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#Form",
              "documentation": {
                "identifier": "Form",
                "newPage": false,
                "searchKey": "multipart.Form",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Form struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Form struct {\n\tValue map[string][]string\n\tFile  map[string][]*FileHeader\n}\n```\n\nForm is a parsed multipart form. Its File parts are stored either in memory or on disk, and are accessible via the *FileHeader's Open method. Its Value parts are stored as strings. Both are keyed by field name. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#Form.RemoveAll",
                    "documentation": {
                      "identifier": "Form.RemoveAll",
                      "newPage": false,
                      "searchKey": "multipart.Form.RemoveAll",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *Form) RemoveAll() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *Form) RemoveAll() error\n```\n\nRemoveAll removes any temporary files associated with a Form. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#Part",
              "documentation": {
                "identifier": "Part",
                "newPage": false,
                "searchKey": "multipart.Part",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Part struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Part struct {\n\t// The headers of the body, if any, with the keys canonicalized\n\t// in the same fashion that the Go http.Request headers are.\n\t// For example, \"foo-bar\" changes case to \"Foo-Bar\"\n\tHeader textproto.MIMEHeader\n\n\tmr *Reader\n\n\tdisposition       string\n\tdispositionParams map[string]string\n\n\t// r is either a reader directly reading from mr, or it's a\n\t// wrapper around such a reader, decoding the\n\t// Content-Transfer-Encoding\n\tr io.Reader\n\n\tn       int   // known data bytes waiting in mr.bufReader\n\ttotal   int64 // total data bytes read already\n\terr     error // error to return when n == 0\n\treadErr error // read error observed from mr.bufReader\n}\n```\n\nA Part represents a single part in a multipart body. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#newPart",
                    "documentation": {
                      "identifier": "newPart",
                      "newPage": false,
                      "searchKey": "multipart.newPart",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newPart(mr *Reader, rawPart bool) (*Part, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newPart(mr *Reader, rawPart bool) (*Part, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Part.Close",
                    "documentation": {
                      "identifier": "Part.Close",
                      "newPage": false,
                      "searchKey": "multipart.Part.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Part) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Part) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Part.FileName",
                    "documentation": {
                      "identifier": "Part.FileName",
                      "newPage": false,
                      "searchKey": "multipart.Part.FileName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Part) FileName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Part) FileName() string\n```\n\nFileName returns the filename parameter of the Part's Content-Disposition header. If not empty, the filename is passed through filepath.Base (which is platform dependent) before being returned. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Part.FormName",
                    "documentation": {
                      "identifier": "Part.FormName",
                      "newPage": false,
                      "searchKey": "multipart.Part.FormName",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Part) FormName() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Part) FormName() string\n```\n\nFormName returns the name parameter if p has a Content-Disposition of type \"form-data\".  Otherwise it returns the empty string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Part.Read",
                    "documentation": {
                      "identifier": "Part.Read",
                      "newPage": false,
                      "searchKey": "multipart.Part.Read",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Part) Read(d []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Part) Read(d []byte) (n int, err error)\n```\n\nRead reads the body of a part, after its headers and before the next part (if any) begins. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Part.parseContentDisposition",
                    "documentation": {
                      "identifier": "Part.parseContentDisposition",
                      "newPage": false,
                      "searchKey": "multipart.Part.parseContentDisposition",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *Part) parseContentDisposition()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *Part) parseContentDisposition()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Part.populateHeaders",
                    "documentation": {
                      "identifier": "Part.populateHeaders",
                      "newPage": false,
                      "searchKey": "multipart.Part.populateHeaders",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bp *Part) populateHeaders() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bp *Part) populateHeaders() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#Reader",
              "documentation": {
                "identifier": "Reader",
                "newPage": false,
                "searchKey": "multipart.Reader",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Reader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Reader struct {\n\tbufReader *bufio.Reader\n\n\tcurrentPart *Part\n\tpartsRead   int\n\n\tnl               []byte // \"\\r\\n\" or \"\\n\" (set after seeing first boundary line)\n\tnlDashBoundary   []byte // nl + \"--boundary\"\n\tdashBoundaryDash []byte // \"--boundary--\"\n\tdashBoundary     []byte // \"--boundary\"\n}\n```\n\nReader is an iterator over parts in a MIME multipart body. Reader's underlying parser consumes its input as needed. Seeking isn't supported. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#NewReader",
                    "documentation": {
                      "identifier": "NewReader",
                      "newPage": false,
                      "searchKey": "multipart.NewReader",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewReader(r io.Reader, boundary string) *Reader"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewReader(r io.Reader, boundary string) *Reader\n```\n\nNewReader creates a new multipart Reader reading from r using the given MIME boundary. \n\nThe boundary is usually obtained from the \"boundary\" parameter of the message's \"Content-Type\" header. Use mime.ParseMediaType to parse such headers. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.NextPart",
                    "documentation": {
                      "identifier": "Reader.NextPart",
                      "newPage": false,
                      "searchKey": "multipart.Reader.NextPart",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) NextPart() (*Part, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) NextPart() (*Part, error)\n```\n\nNextPart returns the next part in the multipart or an error. When there are no more parts, the error io.EOF is returned. \n\nAs a special case, if the \"Content-Transfer-Encoding\" header has a value of \"quoted-printable\", that header is instead hidden and the body is transparently decoded during Read calls. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.NextRawPart",
                    "documentation": {
                      "identifier": "Reader.NextRawPart",
                      "newPage": false,
                      "searchKey": "multipart.Reader.NextRawPart",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) NextRawPart() (*Part, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) NextRawPart() (*Part, error)\n```\n\nNextRawPart returns the next part in the multipart or an error. When there are no more parts, the error io.EOF is returned. \n\nUnlike NextPart, it does not have special handling for \"Content-Transfer-Encoding: quoted-printable\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.ReadForm",
                    "documentation": {
                      "identifier": "Reader.ReadForm",
                      "newPage": false,
                      "searchKey": "multipart.Reader.ReadForm",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) ReadForm(maxMemory int64) (*Form, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) ReadForm(maxMemory int64) (*Form, error)\n```\n\nReadForm parses an entire multipart message whose parts have a Content-Disposition of \"form-data\". It stores up to maxMemory bytes + 10MB (reserved for non-file parts) in memory. File parts which can't be stored in memory will be stored on disk in temporary files. It returns ErrMessageTooLarge if all non-file parts can't be stored in memory. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.isBoundaryDelimiterLine",
                    "documentation": {
                      "identifier": "Reader.isBoundaryDelimiterLine",
                      "newPage": false,
                      "searchKey": "multipart.Reader.isBoundaryDelimiterLine",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (mr *Reader) isBoundaryDelimiterLine(line []byte) (ret bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (mr *Reader) isBoundaryDelimiterLine(line []byte) (ret bool)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.isFinalBoundary",
                    "documentation": {
                      "identifier": "Reader.isFinalBoundary",
                      "newPage": false,
                      "searchKey": "multipart.Reader.isFinalBoundary",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (mr *Reader) isFinalBoundary(line []byte) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (mr *Reader) isFinalBoundary(line []byte) bool\n```\n\nisFinalBoundary reports whether line is the final boundary line indicating that all parts are over. It matches `^--boundary--[ \\t]*(\\r\\n)?$` \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.nextPart",
                    "documentation": {
                      "identifier": "Reader.nextPart",
                      "newPage": false,
                      "searchKey": "multipart.Reader.nextPart",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) nextPart(rawPart bool) (*Part, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) nextPart(rawPart bool) (*Part, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Reader.readForm",
                    "documentation": {
                      "identifier": "Reader.readForm",
                      "newPage": false,
                      "searchKey": "multipart.Reader.readForm",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Reader) readForm(maxMemory int64) (_ *Form, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Reader) readForm(maxMemory int64) (_ *Form, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#Writer",
              "documentation": {
                "identifier": "Writer",
                "newPage": false,
                "searchKey": "multipart.Writer",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Writer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Writer struct {\n\tw        io.Writer\n\tboundary string\n\tlastpart *part\n}\n```\n\nA Writer generates multipart messages. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#NewWriter",
                    "documentation": {
                      "identifier": "NewWriter",
                      "newPage": false,
                      "searchKey": "multipart.NewWriter",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewWriter(w io.Writer) *Writer"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewWriter(w io.Writer) *Writer\n```\n\nNewWriter returns a new multipart Writer with a random boundary, writing to w. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.Boundary",
                    "documentation": {
                      "identifier": "Writer.Boundary",
                      "newPage": false,
                      "searchKey": "multipart.Writer.Boundary",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Boundary() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Boundary() string\n```\n\nBoundary returns the Writer's boundary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.Close",
                    "documentation": {
                      "identifier": "Writer.Close",
                      "newPage": false,
                      "searchKey": "multipart.Writer.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) Close() error\n```\n\nClose finishes the multipart message and writes the trailing boundary end line to the output. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.CreateFormField",
                    "documentation": {
                      "identifier": "Writer.CreateFormField",
                      "newPage": false,
                      "searchKey": "multipart.Writer.CreateFormField",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) CreateFormField(fieldname string) (io.Writer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) CreateFormField(fieldname string) (io.Writer, error)\n```\n\nCreateFormField calls CreatePart with a header using the given field name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.CreateFormFile",
                    "documentation": {
                      "identifier": "Writer.CreateFormFile",
                      "newPage": false,
                      "searchKey": "multipart.Writer.CreateFormFile",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) CreateFormFile(fieldname, filename string) (io.Writer, error)\n```\n\nCreateFormFile is a convenience wrapper around CreatePart. It creates a new form-data header with the provided field name and file name. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.CreatePart",
                    "documentation": {
                      "identifier": "Writer.CreatePart",
                      "newPage": false,
                      "searchKey": "multipart.Writer.CreatePart",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) CreatePart(header textproto.MIMEHeader) (io.Writer, error)\n```\n\nCreatePart creates a new multipart section with the provided header. The body of the part should be written to the returned Writer. After calling CreatePart, any previous part may no longer be written to. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.FormDataContentType",
                    "documentation": {
                      "identifier": "Writer.FormDataContentType",
                      "newPage": false,
                      "searchKey": "multipart.Writer.FormDataContentType",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) FormDataContentType() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) FormDataContentType() string\n```\n\nFormDataContentType returns the Content-Type for an HTTP multipart/form-data with this Writer's Boundary. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.SetBoundary",
                    "documentation": {
                      "identifier": "Writer.SetBoundary",
                      "newPage": false,
                      "searchKey": "multipart.Writer.SetBoundary",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) SetBoundary(boundary string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) SetBoundary(boundary string) error\n```\n\nSetBoundary overrides the Writer's default randomly-generated boundary separator with an explicit value. \n\nSetBoundary must be called before any parts are created, may only contain certain ASCII characters, and must be non-empty and at most 70 bytes long. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#Writer.WriteField",
                    "documentation": {
                      "identifier": "Writer.WriteField",
                      "newPage": false,
                      "searchKey": "multipart.Writer.WriteField",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *Writer) WriteField(fieldname, value string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *Writer) WriteField(fieldname, value string) error\n```\n\nWriteField calls CreateFormField and then writes the given value. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#failOnReadAfterErrorReader",
              "documentation": {
                "identifier": "failOnReadAfterErrorReader",
                "newPage": false,
                "searchKey": "multipart.failOnReadAfterErrorReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type failOnReadAfterErrorReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype failOnReadAfterErrorReader struct {\n\tt      *testing.T\n\tr      io.Reader\n\tsawErr error\n}\n```\n\nfailOnReadAfterErrorReader is an io.Reader wrapping r. It fails t if any Read is called after a failing Read. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#failOnReadAfterErrorReader.Read",
                    "documentation": {
                      "identifier": "failOnReadAfterErrorReader.Read",
                      "newPage": false,
                      "searchKey": "multipart.failOnReadAfterErrorReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *failOnReadAfterErrorReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *failOnReadAfterErrorReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#headerBody",
              "documentation": {
                "identifier": "headerBody",
                "newPage": false,
                "searchKey": "multipart.headerBody",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type headerBody struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype headerBody struct {\n\theader textproto.MIMEHeader\n\tbody   string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#formData",
                    "documentation": {
                      "identifier": "formData",
                      "newPage": false,
                      "searchKey": "multipart.formData",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func formData(key, value string) headerBody"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc formData(key, value string) headerBody\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#maliciousReader",
              "documentation": {
                "identifier": "maliciousReader",
                "newPage": false,
                "searchKey": "multipart.maliciousReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type maliciousReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype maliciousReader struct {\n\tt *testing.T\n\tn int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#maliciousReader.Read",
                    "documentation": {
                      "identifier": "maliciousReader.Read",
                      "newPage": false,
                      "searchKey": "multipart.maliciousReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (mr *maliciousReader) Read(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (mr *maliciousReader) Read(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#parseTest",
              "documentation": {
                "identifier": "parseTest",
                "newPage": false,
                "searchKey": "multipart.parseTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type parseTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parseTest struct {\n\tname    string\n\tin, sep string\n\twant    []headerBody\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#roundTripParseTest",
                    "documentation": {
                      "identifier": "roundTripParseTest",
                      "newPage": false,
                      "searchKey": "multipart.roundTripParseTest",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func roundTripParseTest() parseTest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc roundTripParseTest() parseTest\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#part",
              "documentation": {
                "identifier": "part",
                "newPage": false,
                "searchKey": "multipart.part",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type part struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype part struct {\n\tmw     *Writer\n\tclosed bool\n\twe     error // last error that occurred writing\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#part.Write",
                    "documentation": {
                      "identifier": "part.Write",
                      "newPage": false,
                      "searchKey": "multipart.part.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *part) Write(d []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *part) Write(d []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/mime/multipart#part.close",
                    "documentation": {
                      "identifier": "part.close",
                      "newPage": false,
                      "searchKey": "multipart.part.close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *part) close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *part) close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#partReader",
              "documentation": {
                "identifier": "partReader",
                "newPage": false,
                "searchKey": "multipart.partReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type partReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype partReader struct {\n\tp *Part\n}\n```\n\npartReader implements io.Reader by reading raw bytes directly from the wrapped *Part, without doing any Transfer-Encoding decoding. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#partReader.Read",
                    "documentation": {
                      "identifier": "partReader.Read",
                      "newPage": false,
                      "searchKey": "multipart.partReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pr partReader) Read(d []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pr partReader) Read(d []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#sectionReadCloser",
              "documentation": {
                "identifier": "sectionReadCloser",
                "newPage": false,
                "searchKey": "multipart.sectionReadCloser",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sectionReadCloser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sectionReadCloser struct {\n\t*io.SectionReader\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#sectionReadCloser.Close",
                    "documentation": {
                      "identifier": "sectionReadCloser.Close",
                      "newPage": false,
                      "searchKey": "multipart.sectionReadCloser.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rc sectionReadCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rc sectionReadCloser) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#sentinelReader",
              "documentation": {
                "identifier": "sentinelReader",
                "newPage": false,
                "searchKey": "multipart.sentinelReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type sentinelReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sentinelReader struct {\n\t// done is closed when this reader is read from.\n\tdone chan struct{}\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#sentinelReader.Read",
                    "documentation": {
                      "identifier": "sentinelReader.Read",
                      "newPage": false,
                      "searchKey": "multipart.sentinelReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *sentinelReader) Read([]byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *sentinelReader) Read([]byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#slowReader",
              "documentation": {
                "identifier": "slowReader",
                "newPage": false,
                "searchKey": "multipart.slowReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type slowReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype slowReader struct {\n\tr io.Reader\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#slowReader.Read",
                    "documentation": {
                      "identifier": "slowReader.Read",
                      "newPage": false,
                      "searchKey": "multipart.slowReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *slowReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *slowReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#stickyErrorReader",
              "documentation": {
                "identifier": "stickyErrorReader",
                "newPage": false,
                "searchKey": "multipart.stickyErrorReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type stickyErrorReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stickyErrorReader struct {\n\tr   io.Reader\n\terr error\n}\n```\n\nstickyErrorReader is an io.Reader which never calls Read on its underlying Reader once an error has been seen. (the io.Reader interface's contract promises nothing about the return values of Read calls after an error, yet this package does do multiple Reads after error) \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/mime/multipart#stickyErrorReader.Read",
                    "documentation": {
                      "identifier": "stickyErrorReader.Read",
                      "newPage": false,
                      "searchKey": "multipart.stickyErrorReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *stickyErrorReader) Read(p []byte) (n int, _ error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *stickyErrorReader) Read(p []byte) (n int, _ error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/mime/multipart#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/mime/multipart#TestBoundaryLine",
              "documentation": {
                "identifier": "TestBoundaryLine",
                "newPage": false,
                "searchKey": "multipart.TestBoundaryLine",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBoundaryLine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBoundaryLine(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestLineContinuation",
              "documentation": {
                "identifier": "TestLineContinuation",
                "newPage": false,
                "searchKey": "multipart.TestLineContinuation",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineContinuation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineContinuation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestLineLimit",
              "documentation": {
                "identifier": "TestLineLimit",
                "newPage": false,
                "searchKey": "multipart.TestLineLimit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLineLimit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLineLimit(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestMultipart",
              "documentation": {
                "identifier": "TestMultipart",
                "newPage": false,
                "searchKey": "multipart.TestMultipart",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipart(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipart(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestMultipartOnlyNewlines",
              "documentation": {
                "identifier": "TestMultipartOnlyNewlines",
                "newPage": false,
                "searchKey": "multipart.TestMultipartOnlyNewlines",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartOnlyNewlines(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartOnlyNewlines(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestMultipartSlowInput",
              "documentation": {
                "identifier": "TestMultipartSlowInput",
                "newPage": false,
                "searchKey": "multipart.TestMultipartSlowInput",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartSlowInput(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartSlowInput(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestMultipartStreamReadahead",
              "documentation": {
                "identifier": "TestMultipartStreamReadahead",
                "newPage": false,
                "searchKey": "multipart.TestMultipartStreamReadahead",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartStreamReadahead(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartStreamReadahead(t *testing.T)\n```\n\nTestMultipartStreamReadahead tests that PartReader does not block on reading past the end of a part, ensuring that it can be used on a stream like multipart/x-mixed-replace. See golang.org/issue/15431 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestMultipartTruncated",
              "documentation": {
                "identifier": "TestMultipartTruncated",
                "newPage": false,
                "searchKey": "multipart.TestMultipartTruncated",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartTruncated(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartTruncated(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestNameAccessors",
              "documentation": {
                "identifier": "TestNameAccessors",
                "newPage": false,
                "searchKey": "multipart.TestNameAccessors",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNameAccessors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNameAccessors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestNested",
              "documentation": {
                "identifier": "TestNested",
                "newPage": false,
                "searchKey": "multipart.TestNested",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNested(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNested(t *testing.T)\n```\n\nTest parsing an image attachment from gmail, which previously failed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestNoBoundary",
              "documentation": {
                "identifier": "TestNoBoundary",
                "newPage": false,
                "searchKey": "multipart.TestNoBoundary",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoBoundary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoBoundary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestParse",
              "documentation": {
                "identifier": "TestParse",
                "newPage": false,
                "searchKey": "multipart.TestParse",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestParseAllSizes",
              "documentation": {
                "identifier": "TestParseAllSizes",
                "newPage": false,
                "searchKey": "multipart.TestParseAllSizes",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseAllSizes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseAllSizes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestQuotedPrintableEncoding",
              "documentation": {
                "identifier": "TestQuotedPrintableEncoding",
                "newPage": false,
                "searchKey": "multipart.TestQuotedPrintableEncoding",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQuotedPrintableEncoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQuotedPrintableEncoding(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestRawPart",
              "documentation": {
                "identifier": "TestRawPart",
                "newPage": false,
                "searchKey": "multipart.TestRawPart",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRawPart(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRawPart(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestReadForm",
              "documentation": {
                "identifier": "TestReadForm",
                "newPage": false,
                "searchKey": "multipart.TestReadForm",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadForm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadForm(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestReadFormMaxMemoryOverflow",
              "documentation": {
                "identifier": "TestReadFormMaxMemoryOverflow",
                "newPage": false,
                "searchKey": "multipart.TestReadFormMaxMemoryOverflow",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFormMaxMemoryOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFormMaxMemoryOverflow(t *testing.T)\n```\n\nIssue 40430: Handle ReadForm(math.MaxInt64) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestReadFormWithNamelessFile",
              "documentation": {
                "identifier": "TestReadFormWithNamelessFile",
                "newPage": false,
                "searchKey": "multipart.TestReadFormWithNamelessFile",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFormWithNamelessFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFormWithNamelessFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestReadFormWithTextContentType",
              "documentation": {
                "identifier": "TestReadFormWithTextContentType",
                "newPage": false,
                "searchKey": "multipart.TestReadFormWithTextContentType",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadFormWithTextContentType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadFormWithTextContentType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestReadForm_NoReadAfterEOF",
              "documentation": {
                "identifier": "TestReadForm_NoReadAfterEOF",
                "newPage": false,
                "searchKey": "multipart.TestReadForm_NoReadAfterEOF",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadForm_NoReadAfterEOF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadForm_NoReadAfterEOF(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestReadForm_NonFileMaxMemory",
              "documentation": {
                "identifier": "TestReadForm_NonFileMaxMemory",
                "newPage": false,
                "searchKey": "multipart.TestReadForm_NonFileMaxMemory",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadForm_NonFileMaxMemory(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadForm_NonFileMaxMemory(t *testing.T)\n```\n\nTestReadForm_NonFileMaxMemory asserts that the ReadForm maxMemory limit is applied while processing non-file form data as well as file form data. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestSortedHeader",
              "documentation": {
                "identifier": "TestSortedHeader",
                "newPage": false,
                "searchKey": "multipart.TestSortedHeader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSortedHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSortedHeader(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestVariousTextLineEndings",
              "documentation": {
                "identifier": "TestVariousTextLineEndings",
                "newPage": false,
                "searchKey": "multipart.TestVariousTextLineEndings",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariousTextLineEndings(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariousTextLineEndings(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestWriter",
              "documentation": {
                "identifier": "TestWriter",
                "newPage": false,
                "searchKey": "multipart.TestWriter",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestWriterBoundaryGoroutines",
              "documentation": {
                "identifier": "TestWriterBoundaryGoroutines",
                "newPage": false,
                "searchKey": "multipart.TestWriterBoundaryGoroutines",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterBoundaryGoroutines(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterBoundaryGoroutines(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#TestWriterSetBoundary",
              "documentation": {
                "identifier": "TestWriterSetBoundary",
                "newPage": false,
                "searchKey": "multipart.TestWriterSetBoundary",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriterSetBoundary(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriterSetBoundary(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#escapeQuotes",
              "documentation": {
                "identifier": "escapeQuotes",
                "newPage": false,
                "searchKey": "multipart.escapeQuotes",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func escapeQuotes(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escapeQuotes(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#escapeString",
              "documentation": {
                "identifier": "escapeString",
                "newPage": false,
                "searchKey": "multipart.escapeString",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func escapeString(v string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escapeString(v string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#expectEq",
              "documentation": {
                "identifier": "expectEq",
                "newPage": false,
                "searchKey": "multipart.expectEq",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectEq(t *testing.T, expected, actual, what string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectEq(t *testing.T, expected, actual, what string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#matchAfterPrefix",
              "documentation": {
                "identifier": "matchAfterPrefix",
                "newPage": false,
                "searchKey": "multipart.matchAfterPrefix",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchAfterPrefix(buf, prefix []byte, readErr error) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchAfterPrefix(buf, prefix []byte, readErr error) int\n```\n\nmatchAfterPrefix checks whether buf should be considered to match the boundary. The prefix is \"--boundary\" or \"\\r\\n--boundary\" or \"\\n--boundary\", and the caller has verified already that bytes.HasPrefix(buf, prefix) is true. \n\nmatchAfterPrefix returns +1 if the buffer does match the boundary, meaning the prefix is followed by a dash, space, tab, cr, nl, or end of input. It returns -1 if the buffer definitely does NOT match the boundary, meaning the prefix is followed by some other character. For example, \"--foobar\" does not match \"--foo\". It returns 0 more input needs to be read to make the decision, meaning that len(buf) == len(prefix) and readErr == nil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#partsFromReader",
              "documentation": {
                "identifier": "partsFromReader",
                "newPage": false,
                "searchKey": "multipart.partsFromReader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func partsFromReader(r *Reader) ([]headerBody, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc partsFromReader(r *Reader) ([]headerBody, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#randomBoundary",
              "documentation": {
                "identifier": "randomBoundary",
                "newPage": false,
                "searchKey": "multipart.randomBoundary",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func randomBoundary() string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc randomBoundary() string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#scanUntilBoundary",
              "documentation": {
                "identifier": "scanUntilBoundary",
                "newPage": false,
                "searchKey": "multipart.scanUntilBoundary",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func scanUntilBoundary(buf, dashBoundary, nlDashBoundary []byte, total int64, readErr error) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc scanUntilBoundary(buf, dashBoundary, nlDashBoundary []byte, total int64, readErr error) (int, error)\n```\n\nscanUntilBoundary scans buf to identify how much of it can be safely returned as part of the Part body. dashBoundary is \"--boundary\". nlDashBoundary is \"\\r\\n--boundary\" or \"\\n--boundary\", depending on what mode we are in. The comments below (and the name) assume \"\\n--boundary\", but either is accepted. total is the number of bytes read out so far. If total == 0, then a leading \"--boundary\" is recognized. readErr is the read error, if any, that followed reading the bytes in buf. scanUntilBoundary returns the number of data bytes from buf that can be returned as part of the Part body and also the error to return (if any) once those data bytes are done. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#skipLWSPChar",
              "documentation": {
                "identifier": "skipLWSPChar",
                "newPage": false,
                "searchKey": "multipart.skipLWSPChar",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func skipLWSPChar(b []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skipLWSPChar(b []byte) []byte\n```\n\nskipLWSPChar returns b with leading spaces and tabs removed. RFC 822 defines: \n\n```\nLWSP-char = SPACE / HTAB\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#testMultipart",
              "documentation": {
                "identifier": "testMultipart",
                "newPage": false,
                "searchKey": "multipart.testMultipart",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMultipart(t *testing.T, r io.Reader, onlyNewlines bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMultipart(t *testing.T, r io.Reader, onlyNewlines bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#testMultipartBody",
              "documentation": {
                "identifier": "testMultipartBody",
                "newPage": false,
                "searchKey": "multipart.testMultipartBody",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMultipartBody(sep string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMultipartBody(sep string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/mime/multipart#testQuotedPrintableEncoding",
              "documentation": {
                "identifier": "testQuotedPrintableEncoding",
                "newPage": false,
                "searchKey": "multipart.testQuotedPrintableEncoding",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testQuotedPrintableEncoding(t *testing.T, cte string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testQuotedPrintableEncoding(t *testing.T, cte string)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
