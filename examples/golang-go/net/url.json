{
  "pathID": "/net/url",
  "documentation": {
    "identifier": "url",
    "newPage": true,
    "searchKey": "net/url",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package url"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package url parses URLs and implements query escaping. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/net/url#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/url#encodeFragment",
              "documentation": {
                "identifier": "encodeFragment",
                "newPage": false,
                "searchKey": "url.encodeFragment",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeFragment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeFragment\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#encodeHost",
              "documentation": {
                "identifier": "encodeHost",
                "newPage": false,
                "searchKey": "url.encodeHost",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeHost"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeHost\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#encodePath",
              "documentation": {
                "identifier": "encodePath",
                "newPage": false,
                "searchKey": "url.encodePath",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodePath"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodePath encoding = 1 + iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#encodePathSegment",
              "documentation": {
                "identifier": "encodePathSegment",
                "newPage": false,
                "searchKey": "url.encodePathSegment",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodePathSegment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodePathSegment\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#encodeQueryComponent",
              "documentation": {
                "identifier": "encodeQueryComponent",
                "newPage": false,
                "searchKey": "url.encodeQueryComponent",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeQueryComponent"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeQueryComponent\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#encodeUserPassword",
              "documentation": {
                "identifier": "encodeUserPassword",
                "newPage": false,
                "searchKey": "url.encodeUserPassword",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeUserPassword"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeUserPassword\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#encodeZone",
              "documentation": {
                "identifier": "encodeZone",
                "newPage": false,
                "searchKey": "url.encodeZone",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const encodeZone"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst encodeZone\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#pathThatLooksSchemeRelative",
              "documentation": {
                "identifier": "pathThatLooksSchemeRelative",
                "newPage": false,
                "searchKey": "url.pathThatLooksSchemeRelative",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pathThatLooksSchemeRelative"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pathThatLooksSchemeRelative = \"//not.a.user@not.a.host/just/a/path\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#upperhex",
              "documentation": {
                "identifier": "upperhex",
                "newPage": false,
                "searchKey": "url.upperhex",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const upperhex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst upperhex = \"0123456789ABCDEF\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/url#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/url#encodeQueryTests",
              "documentation": {
                "identifier": "encodeQueryTests",
                "newPage": false,
                "searchKey": "url.encodeQueryTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var encodeQueryTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encodeQueryTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#escapeBenchmarks",
              "documentation": {
                "identifier": "escapeBenchmarks",
                "newPage": false,
                "searchKey": "url.escapeBenchmarks",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var escapeBenchmarks"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar escapeBenchmarks = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#netErrorTests",
              "documentation": {
                "identifier": "netErrorTests",
                "newPage": false,
                "searchKey": "url.netErrorTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var netErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar netErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#parseRequestURLTests",
              "documentation": {
                "identifier": "parseRequestURLTests",
                "newPage": false,
                "searchKey": "url.parseRequestURLTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseRequestURLTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseRequestURLTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#parseTests",
              "documentation": {
                "identifier": "parseTests",
                "newPage": false,
                "searchKey": "url.parseTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#pathEscapeTests",
              "documentation": {
                "identifier": "pathEscapeTests",
                "newPage": false,
                "searchKey": "url.pathEscapeTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var pathEscapeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pathEscapeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#queryEscapeTests",
              "documentation": {
                "identifier": "queryEscapeTests",
                "newPage": false,
                "searchKey": "url.queryEscapeTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var queryEscapeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar queryEscapeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#requritests",
              "documentation": {
                "identifier": "requritests",
                "newPage": false,
                "searchKey": "url.requritests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var requritests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar requritests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#resolvePathTests",
              "documentation": {
                "identifier": "resolvePathTests",
                "newPage": false,
                "searchKey": "url.resolvePathTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var resolvePathTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar resolvePathTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#resolveReferenceTests",
              "documentation": {
                "identifier": "resolveReferenceTests",
                "newPage": false,
                "searchKey": "url.resolveReferenceTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var resolveReferenceTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar resolveReferenceTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#shouldEscapeTests",
              "documentation": {
                "identifier": "shouldEscapeTests",
                "newPage": false,
                "searchKey": "url.shouldEscapeTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var shouldEscapeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar shouldEscapeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#sink",
              "documentation": {
                "identifier": "sink",
                "newPage": false,
                "searchKey": "url.sink",
                "tags": [
                  "variable",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sink string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#stringURLTests",
              "documentation": {
                "identifier": "stringURLTests",
                "newPage": false,
                "searchKey": "url.stringURLTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var stringURLTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar stringURLTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#unescapeTests",
              "documentation": {
                "identifier": "unescapeTests",
                "newPage": false,
                "searchKey": "url.unescapeTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var unescapeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unescapeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#urltests",
              "documentation": {
                "identifier": "urltests",
                "newPage": false,
                "searchKey": "url.urltests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var urltests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar urltests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/url#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/url#EncodeQueryTest",
              "documentation": {
                "identifier": "EncodeQueryTest",
                "newPage": false,
                "searchKey": "url.EncodeQueryTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EncodeQueryTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EncodeQueryTest struct {\n\tm        Values\n\texpected string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#Error",
              "documentation": {
                "identifier": "Error",
                "newPage": false,
                "searchKey": "url.Error",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Error struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Error struct {\n\tOp  string\n\tURL string\n\tErr error\n}\n```\n\nError reports an error and the operation and URL that caused it. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#Error.Error",
                    "documentation": {
                      "identifier": "Error.Error",
                      "newPage": false,
                      "searchKey": "url.Error.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Error) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Error) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Error.Temporary",
                    "documentation": {
                      "identifier": "Error.Temporary",
                      "newPage": false,
                      "searchKey": "url.Error.Temporary",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Error) Temporary() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Error) Temporary() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Error.Timeout",
                    "documentation": {
                      "identifier": "Error.Timeout",
                      "newPage": false,
                      "searchKey": "url.Error.Timeout",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Error) Timeout() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Error) Timeout() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Error.Unwrap",
                    "documentation": {
                      "identifier": "Error.Unwrap",
                      "newPage": false,
                      "searchKey": "url.Error.Unwrap",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *Error) Unwrap() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *Error) Unwrap() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#EscapeError",
              "documentation": {
                "identifier": "EscapeError",
                "newPage": false,
                "searchKey": "url.EscapeError",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EscapeError string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EscapeError string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#EscapeError.Error",
                    "documentation": {
                      "identifier": "EscapeError.Error",
                      "newPage": false,
                      "searchKey": "url.EscapeError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e EscapeError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e EscapeError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#EscapeTest",
              "documentation": {
                "identifier": "EscapeTest",
                "newPage": false,
                "searchKey": "url.EscapeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type EscapeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype EscapeTest struct {\n\tin  string\n\tout string\n\terr error\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#InvalidHostError",
              "documentation": {
                "identifier": "InvalidHostError",
                "newPage": false,
                "searchKey": "url.InvalidHostError",
                "tags": [
                  "string"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InvalidHostError string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InvalidHostError string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#InvalidHostError.Error",
                    "documentation": {
                      "identifier": "InvalidHostError.Error",
                      "newPage": false,
                      "searchKey": "url.InvalidHostError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e InvalidHostError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e InvalidHostError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#RequestURITest",
              "documentation": {
                "identifier": "RequestURITest",
                "newPage": false,
                "searchKey": "url.RequestURITest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RequestURITest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RequestURITest struct {\n\turl *URL\n\tout string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#URL",
              "documentation": {
                "identifier": "URL",
                "newPage": false,
                "searchKey": "url.URL",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type URL struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype URL struct {\n\tScheme      string\n\tOpaque      string    // encoded opaque data\n\tUser        *Userinfo // username and password information\n\tHost        string    // host or host:port\n\tPath        string    // path (relative paths may omit leading slash)\n\tRawPath     string    // encoded path hint (see EscapedPath method)\n\tForceQuery  bool      // append a query ('?') even if RawQuery is empty\n\tRawQuery    string    // encoded query values, without '?'\n\tFragment    string    // fragment for references, without '#'\n\tRawFragment string    // encoded fragment hint (see EscapedFragment method)\n}\n```\n\nA URL represents a parsed URL (technically, a URI reference). \n\nThe general form represented is: \n\n```\n[scheme:][//[userinfo@]host][/]path[?query][#fragment]\n\n```\nURLs that do not start with a slash after the scheme are interpreted as: \n\n```\nscheme:opaque[?query][#fragment]\n\n```\nNote that the Path field is stored in decoded form: /%47%6f%2f becomes /Go/. A consequence is that it is impossible to tell which slashes in the Path were slashes in the raw URL and which were %2f. This distinction is rarely important, but when it is, the code should use RawPath, an optional field which only gets set if the default encoding is different from Path. \n\nURL's String method uses the EscapedPath method to obtain the path. See the EscapedPath method for more details. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#Parse",
                    "documentation": {
                      "identifier": "Parse",
                      "newPage": false,
                      "searchKey": "url.Parse",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Parse(rawURL string) (*URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Parse(rawURL string) (*URL, error)\n```\n\nParse parses a raw url into a URL structure. \n\nThe url may be relative (a path, without a host) or absolute (starting with a scheme). Trying to parse a hostname and path without a scheme is invalid but may not necessarily return an error, due to parsing ambiguities. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#ParseRequestURI",
                    "documentation": {
                      "identifier": "ParseRequestURI",
                      "newPage": false,
                      "searchKey": "url.ParseRequestURI",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseRequestURI(rawURL string) (*URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseRequestURI(rawURL string) (*URL, error)\n```\n\nParseRequestURI parses a raw url into a URL structure. It assumes that url was received in an HTTP request, so the url is interpreted only as an absolute URI or an absolute path. The string url is assumed not to have a #fragment suffix. (Web browsers strip #fragment before sending the URL to a web server.) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#parse",
                    "documentation": {
                      "identifier": "parse",
                      "newPage": false,
                      "searchKey": "url.parse",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parse(rawURL string, viaRequest bool) (*URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parse(rawURL string, viaRequest bool) (*URL, error)\n```\n\nparse parses a URL from a string in one of two contexts. If viaRequest is true, the URL is assumed to have arrived via an HTTP request, in which case only absolute URLs or path-absolute relative URLs are allowed. If viaRequest is false, all forms of relative URLs are allowed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.EscapedFragment",
                    "documentation": {
                      "identifier": "URL.EscapedFragment",
                      "newPage": false,
                      "searchKey": "url.URL.EscapedFragment",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) EscapedFragment() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) EscapedFragment() string\n```\n\nEscapedFragment returns the escaped form of u.Fragment. In general there are multiple possible escaped forms of any fragment. EscapedFragment returns u.RawFragment when it is a valid escaping of u.Fragment. Otherwise EscapedFragment ignores u.RawFragment and computes an escaped form on its own. The String method uses EscapedFragment to construct its result. In general, code should call EscapedFragment instead of reading u.RawFragment directly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.EscapedPath",
                    "documentation": {
                      "identifier": "URL.EscapedPath",
                      "newPage": false,
                      "searchKey": "url.URL.EscapedPath",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) EscapedPath() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) EscapedPath() string\n```\n\nEscapedPath returns the escaped form of u.Path. In general there are multiple possible escaped forms of any path. EscapedPath returns u.RawPath when it is a valid escaping of u.Path. Otherwise EscapedPath ignores u.RawPath and computes an escaped form on its own. The String and RequestURI methods use EscapedPath to construct their results. In general, code should call EscapedPath instead of reading u.RawPath directly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.Hostname",
                    "documentation": {
                      "identifier": "URL.Hostname",
                      "newPage": false,
                      "searchKey": "url.URL.Hostname",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) Hostname() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) Hostname() string\n```\n\nHostname returns u.Host, stripping any valid port number if present. \n\nIf the result is enclosed in square brackets, as literal IPv6 addresses are, the square brackets are removed from the result. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.IsAbs",
                    "documentation": {
                      "identifier": "URL.IsAbs",
                      "newPage": false,
                      "searchKey": "url.URL.IsAbs",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) IsAbs() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) IsAbs() bool\n```\n\nIsAbs reports whether the URL is absolute. Absolute means that it has a non-empty scheme. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.MarshalBinary",
                    "documentation": {
                      "identifier": "URL.MarshalBinary",
                      "newPage": false,
                      "searchKey": "url.URL.MarshalBinary",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) MarshalBinary() (text []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) MarshalBinary() (text []byte, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.Parse",
                    "documentation": {
                      "identifier": "URL.Parse",
                      "newPage": false,
                      "searchKey": "url.URL.Parse",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) Parse(ref string) (*URL, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) Parse(ref string) (*URL, error)\n```\n\nParse parses a URL in the context of the receiver. The provided URL may be relative or absolute. Parse returns nil, err on parse failure, otherwise its return value is the same as ResolveReference. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.Port",
                    "documentation": {
                      "identifier": "URL.Port",
                      "newPage": false,
                      "searchKey": "url.URL.Port",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) Port() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) Port() string\n```\n\nPort returns the port part of u.Host, without the leading colon. \n\nIf u.Host doesn't contain a valid numeric port, Port returns an empty string. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.Query",
                    "documentation": {
                      "identifier": "URL.Query",
                      "newPage": false,
                      "searchKey": "url.URL.Query",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) Query() Values"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) Query() Values\n```\n\nQuery parses RawQuery and returns the corresponding values. It silently discards malformed value pairs. To check errors use ParseQuery. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.Redacted",
                    "documentation": {
                      "identifier": "URL.Redacted",
                      "newPage": false,
                      "searchKey": "url.URL.Redacted",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) Redacted() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) Redacted() string\n```\n\nRedacted is like String but replaces any password with \"xxxxx\". Only the password in u.URL is redacted. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.RequestURI",
                    "documentation": {
                      "identifier": "URL.RequestURI",
                      "newPage": false,
                      "searchKey": "url.URL.RequestURI",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) RequestURI() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) RequestURI() string\n```\n\nRequestURI returns the encoded path?query or opaque?query string that would be used in an HTTP request for u. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.ResolveReference",
                    "documentation": {
                      "identifier": "URL.ResolveReference",
                      "newPage": false,
                      "searchKey": "url.URL.ResolveReference",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) ResolveReference(ref *URL) *URL"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) ResolveReference(ref *URL) *URL\n```\n\nResolveReference resolves a URI reference to an absolute URI from an absolute base URI u, per RFC 3986 Section 5.2. The URI reference may be relative or absolute. ResolveReference always returns a new URL instance, even if the returned URL is identical to either the base or reference. If ref is an absolute URL, then ResolveReference ignores base and returns a copy of ref. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.String",
                    "documentation": {
                      "identifier": "URL.String",
                      "newPage": false,
                      "searchKey": "url.URL.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) String() string\n```\n\nString reassembles the URL into a valid URL string. The general form of the result is one of: \n\n```\nscheme:opaque?query#fragment\nscheme://userinfo@host/path?query#fragment\n\n```\nIf u.Opaque is non-empty, String uses the first form; otherwise it uses the second form. Any non-ASCII characters in host are escaped. To obtain the path, String uses u.EscapedPath(). \n\nIn the second form, the following rules apply: \n\n```\n- if u.Scheme is empty, scheme: is omitted.\n- if u.User is nil, userinfo@ is omitted.\n- if u.Host is empty, host/ is omitted.\n- if u.Scheme and u.Host are empty and u.User is nil,\n   the entire scheme://userinfo@host/ is omitted.\n- if u.Host is non-empty and u.Path begins with a /,\n   the form host/path does not add its own /.\n- if u.RawQuery is empty, ?query is omitted.\n- if u.Fragment is empty, #fragment is omitted.\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.UnmarshalBinary",
                    "documentation": {
                      "identifier": "URL.UnmarshalBinary",
                      "newPage": false,
                      "searchKey": "url.URL.UnmarshalBinary",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) UnmarshalBinary(text []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) UnmarshalBinary(text []byte) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.setFragment",
                    "documentation": {
                      "identifier": "URL.setFragment",
                      "newPage": false,
                      "searchKey": "url.URL.setFragment",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) setFragment(f string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) setFragment(f string) error\n```\n\nsetFragment is like setPath but for Fragment/RawFragment. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#URL.setPath",
                    "documentation": {
                      "identifier": "URL.setPath",
                      "newPage": false,
                      "searchKey": "url.URL.setPath",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *URL) setPath(p string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *URL) setPath(p string) error\n```\n\nsetPath sets the Path and RawPath fields of the URL based on the provided escaped path p. It maintains the invariant that RawPath is only specified when it differs from the default encoding of the path. For example: - setPath(\"/foo/bar\")   will set Path=\"/foo/bar\" and RawPath=\"\" - setPath(\"/foo%2fbar\") will set Path=\"/foo/bar\" and RawPath=\"/foo%2fbar\" setPath will return an error only if the provided path contains an invalid escaping. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#URLTest",
              "documentation": {
                "identifier": "URLTest",
                "newPage": false,
                "searchKey": "url.URLTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type URLTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype URLTest struct {\n\tin        string\n\tout       *URL   // expected parse\n\troundtrip string // expected result of reserializing the URL; empty means same as \"in\".\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#Userinfo",
              "documentation": {
                "identifier": "Userinfo",
                "newPage": false,
                "searchKey": "url.Userinfo",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Userinfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Userinfo struct {\n\tusername    string\n\tpassword    string\n\tpasswordSet bool\n}\n```\n\nThe Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#User",
                    "documentation": {
                      "identifier": "User",
                      "newPage": false,
                      "searchKey": "url.User",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func User(username string) *Userinfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc User(username string) *Userinfo\n```\n\nUser returns a Userinfo containing the provided username and no password set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#UserPassword",
                    "documentation": {
                      "identifier": "UserPassword",
                      "newPage": false,
                      "searchKey": "url.UserPassword",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func UserPassword(username, password string) *Userinfo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc UserPassword(username, password string) *Userinfo\n```\n\nUserPassword returns a Userinfo containing the provided username and password. \n\nThis functionality should only be used with legacy web sites. RFC 2396 warns that interpreting Userinfo this way `is NOT RECOMMENDED, because the passing of authentication information in clear text (such as URI) has proven to be a security risk in almost every case where it has been used.' \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#parseAuthority",
                    "documentation": {
                      "identifier": "parseAuthority",
                      "newPage": false,
                      "searchKey": "url.parseAuthority",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseAuthority(authority string) (user *Userinfo, host string, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseAuthority(authority string) (user *Userinfo, host string, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Userinfo.Password",
                    "documentation": {
                      "identifier": "Userinfo.Password",
                      "newPage": false,
                      "searchKey": "url.Userinfo.Password",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *Userinfo) Password() (string, bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *Userinfo) Password() (string, bool)\n```\n\nPassword returns the password in case it is set, and whether it is set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Userinfo.String",
                    "documentation": {
                      "identifier": "Userinfo.String",
                      "newPage": false,
                      "searchKey": "url.Userinfo.String",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *Userinfo) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *Userinfo) String() string\n```\n\nString returns the encoded userinfo information in the standard form of \"username[:password]\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Userinfo.Username",
                    "documentation": {
                      "identifier": "Userinfo.Username",
                      "newPage": false,
                      "searchKey": "url.Userinfo.Username",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (u *Userinfo) Username() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (u *Userinfo) Username() string\n```\n\nUsername returns the username. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#Values",
              "documentation": {
                "identifier": "Values",
                "newPage": false,
                "searchKey": "url.Values",
                "tags": [
                  "object"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Values map[string][]string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Values map[string][]string\n```\n\nValues maps a string key to a list of values. It is typically used for query parameters and form values. Unlike in the http.Header map, the keys in a Values map are case-sensitive. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#ParseQuery",
                    "documentation": {
                      "identifier": "ParseQuery",
                      "newPage": false,
                      "searchKey": "url.ParseQuery",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseQuery(query string) (Values, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseQuery(query string) (Values, error)\n```\n\nParseQuery parses the URL-encoded query string and returns a map listing the values specified for each key. ParseQuery always returns a non-nil map containing all the valid query parameters found; err describes the first decoding error encountered, if any. \n\nQuery is expected to be a list of key=value settings separated by ampersands. A setting without an equals sign is interpreted as a key set to an empty value. Settings containing a non-URL-encoded semicolon are considered invalid. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Values.Add",
                    "documentation": {
                      "identifier": "Values.Add",
                      "newPage": false,
                      "searchKey": "url.Values.Add",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Values) Add(key, value string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Values) Add(key, value string)\n```\n\nAdd adds the value to key. It appends to any existing values associated with key. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Values.Del",
                    "documentation": {
                      "identifier": "Values.Del",
                      "newPage": false,
                      "searchKey": "url.Values.Del",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Values) Del(key string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Values) Del(key string)\n```\n\nDel deletes the values associated with key. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Values.Encode",
                    "documentation": {
                      "identifier": "Values.Encode",
                      "newPage": false,
                      "searchKey": "url.Values.Encode",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Values) Encode() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Values) Encode() string\n```\n\nEncode encodes the values into `URL encoded' form (\"bar=baz&foo=quux\") sorted by key. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Values.Get",
                    "documentation": {
                      "identifier": "Values.Get",
                      "newPage": false,
                      "searchKey": "url.Values.Get",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Values) Get(key string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Values) Get(key string) string\n```\n\nGet gets the first value associated with the given key. If there are no values associated with the key, Get returns the empty string. To access multiple values, use the map directly. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Values.Has",
                    "documentation": {
                      "identifier": "Values.Has",
                      "newPage": false,
                      "searchKey": "url.Values.Has",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Values) Has(key string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Values) Has(key string) bool\n```\n\nHas checks whether a given key is set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#Values.Set",
                    "documentation": {
                      "identifier": "Values.Set",
                      "newPage": false,
                      "searchKey": "url.Values.Set",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v Values) Set(key, value string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v Values) Set(key, value string)\n```\n\nSet sets the key to value. It replaces any existing values. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#encoding",
              "documentation": {
                "identifier": "encoding",
                "newPage": false,
                "searchKey": "url.encoding",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type encoding int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype encoding int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#parseTest",
              "documentation": {
                "identifier": "parseTest",
                "newPage": false,
                "searchKey": "url.parseTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type parseTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype parseTest struct {\n\tquery string\n\tout   Values\n\tok    bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#shouldEscapeTest",
              "documentation": {
                "identifier": "shouldEscapeTest",
                "newPage": false,
                "searchKey": "url.shouldEscapeTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type shouldEscapeTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype shouldEscapeTest struct {\n\tin     byte\n\tmode   encoding\n\tescape bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#temporaryError",
              "documentation": {
                "identifier": "temporaryError",
                "newPage": false,
                "searchKey": "url.temporaryError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type temporaryError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype temporaryError struct {\n\ttemporary bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#temporaryError.Error",
                    "documentation": {
                      "identifier": "temporaryError.Error",
                      "newPage": false,
                      "searchKey": "url.temporaryError.Error",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *temporaryError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *temporaryError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#temporaryError.Temporary",
                    "documentation": {
                      "identifier": "temporaryError.Temporary",
                      "newPage": false,
                      "searchKey": "url.temporaryError.Temporary",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *temporaryError) Temporary() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *temporaryError) Temporary() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#timeoutError",
              "documentation": {
                "identifier": "timeoutError",
                "newPage": false,
                "searchKey": "url.timeoutError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type timeoutError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype timeoutError struct {\n\ttimeout bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#timeoutError.Error",
                    "documentation": {
                      "identifier": "timeoutError.Error",
                      "newPage": false,
                      "searchKey": "url.timeoutError.Error",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *timeoutError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *timeoutError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/url#timeoutError.Timeout",
                    "documentation": {
                      "identifier": "timeoutError.Timeout",
                      "newPage": false,
                      "searchKey": "url.timeoutError.Timeout",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *timeoutError) Timeout() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *timeoutError) Timeout() bool\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/url#timeoutTemporaryError",
              "documentation": {
                "identifier": "timeoutTemporaryError",
                "newPage": false,
                "searchKey": "url.timeoutTemporaryError",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type timeoutTemporaryError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype timeoutTemporaryError struct {\n\ttimeoutError\n\ttemporaryError\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/url#timeoutTemporaryError.Error",
                    "documentation": {
                      "identifier": "timeoutTemporaryError.Error",
                      "newPage": false,
                      "searchKey": "url.timeoutTemporaryError.Error",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *timeoutTemporaryError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *timeoutTemporaryError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/url#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/url#BenchmarkPathEscape",
              "documentation": {
                "identifier": "BenchmarkPathEscape",
                "newPage": false,
                "searchKey": "url.BenchmarkPathEscape",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPathEscape(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPathEscape(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#BenchmarkPathUnescape",
              "documentation": {
                "identifier": "BenchmarkPathUnescape",
                "newPage": false,
                "searchKey": "url.BenchmarkPathUnescape",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPathUnescape(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPathUnescape(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#BenchmarkQueryEscape",
              "documentation": {
                "identifier": "BenchmarkQueryEscape",
                "newPage": false,
                "searchKey": "url.BenchmarkQueryEscape",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkQueryEscape(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkQueryEscape(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#BenchmarkQueryUnescape",
              "documentation": {
                "identifier": "BenchmarkQueryUnescape",
                "newPage": false,
                "searchKey": "url.BenchmarkQueryUnescape",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkQueryUnescape(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkQueryUnescape(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#BenchmarkResolvePath",
              "documentation": {
                "identifier": "BenchmarkResolvePath",
                "newPage": false,
                "searchKey": "url.BenchmarkResolvePath",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkResolvePath(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkResolvePath(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#BenchmarkSplit",
              "documentation": {
                "identifier": "BenchmarkSplit",
                "newPage": false,
                "searchKey": "url.BenchmarkSplit",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSplit(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSplit(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#BenchmarkString",
              "documentation": {
                "identifier": "BenchmarkString",
                "newPage": false,
                "searchKey": "url.BenchmarkString",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkString(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkString(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#PathEscape",
              "documentation": {
                "identifier": "PathEscape",
                "newPage": false,
                "searchKey": "url.PathEscape",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PathEscape(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PathEscape(s string) string\n```\n\nPathEscape escapes the string so it can be safely placed inside a URL path segment, replacing special characters (including /) with %XX sequences as needed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#PathUnescape",
              "documentation": {
                "identifier": "PathUnescape",
                "newPage": false,
                "searchKey": "url.PathUnescape",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func PathUnescape(s string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc PathUnescape(s string) (string, error)\n```\n\nPathUnescape does the inverse transformation of PathEscape, converting each 3-byte encoded substring of the form \"%AB\" into the hex-decoded byte 0xAB. It returns an error if any % is not followed by two hexadecimal digits. \n\nPathUnescape is identical to QueryUnescape except that it does not unescape '+' to ' ' (space). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#QueryEscape",
              "documentation": {
                "identifier": "QueryEscape",
                "newPage": false,
                "searchKey": "url.QueryEscape",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func QueryEscape(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc QueryEscape(s string) string\n```\n\nQueryEscape escapes the string so it can be safely placed inside a URL query. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#QueryUnescape",
              "documentation": {
                "identifier": "QueryUnescape",
                "newPage": false,
                "searchKey": "url.QueryUnescape",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func QueryUnescape(s string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc QueryUnescape(s string) (string, error)\n```\n\nQueryUnescape does the inverse transformation of QueryEscape, converting each 3-byte encoded substring of the form \"%AB\" into the hex-decoded byte 0xAB. It returns an error if any % is not followed by two hexadecimal digits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestEncodeQuery",
              "documentation": {
                "identifier": "TestEncodeQuery",
                "newPage": false,
                "searchKey": "url.TestEncodeQuery",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncodeQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncodeQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestGob",
              "documentation": {
                "identifier": "TestGob",
                "newPage": false,
                "searchKey": "url.TestGob",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGob(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGob(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestInvalidUserPassword",
              "documentation": {
                "identifier": "TestInvalidUserPassword",
                "newPage": false,
                "searchKey": "url.TestInvalidUserPassword",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidUserPassword(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidUserPassword(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestJSON",
              "documentation": {
                "identifier": "TestJSON",
                "newPage": false,
                "searchKey": "url.TestJSON",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestJSON(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestJSON(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestNilUser",
              "documentation": {
                "identifier": "TestNilUser",
                "newPage": false,
                "searchKey": "url.TestNilUser",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilUser(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilUser(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestParse",
              "documentation": {
                "identifier": "TestParse",
                "newPage": false,
                "searchKey": "url.TestParse",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestParseErrors",
              "documentation": {
                "identifier": "TestParseErrors",
                "newPage": false,
                "searchKey": "url.TestParseErrors",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestParseFailure",
              "documentation": {
                "identifier": "TestParseFailure",
                "newPage": false,
                "searchKey": "url.TestParseFailure",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFailure(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFailure(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestParseQuery",
              "documentation": {
                "identifier": "TestParseQuery",
                "newPage": false,
                "searchKey": "url.TestParseQuery",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestParseRequestURI",
              "documentation": {
                "identifier": "TestParseRequestURI",
                "newPage": false,
                "searchKey": "url.TestParseRequestURI",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseRequestURI(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseRequestURI(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestPathEscape",
              "documentation": {
                "identifier": "TestPathEscape",
                "newPage": false,
                "searchKey": "url.TestPathEscape",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPathEscape(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPathEscape(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestQueryEscape",
              "documentation": {
                "identifier": "TestQueryEscape",
                "newPage": false,
                "searchKey": "url.TestQueryEscape",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryEscape(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryEscape(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestQueryValues",
              "documentation": {
                "identifier": "TestQueryValues",
                "newPage": false,
                "searchKey": "url.TestQueryValues",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQueryValues(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQueryValues(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestRejectControlCharacters",
              "documentation": {
                "identifier": "TestRejectControlCharacters",
                "newPage": false,
                "searchKey": "url.TestRejectControlCharacters",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRejectControlCharacters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRejectControlCharacters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestRequestURI",
              "documentation": {
                "identifier": "TestRequestURI",
                "newPage": false,
                "searchKey": "url.TestRequestURI",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestURI(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestURI(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestResolvePath",
              "documentation": {
                "identifier": "TestResolvePath",
                "newPage": false,
                "searchKey": "url.TestResolvePath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolvePath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolvePath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestResolveReference",
              "documentation": {
                "identifier": "TestResolveReference",
                "newPage": false,
                "searchKey": "url.TestResolveReference",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResolveReference(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResolveReference(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestShouldEscape",
              "documentation": {
                "identifier": "TestShouldEscape",
                "newPage": false,
                "searchKey": "url.TestShouldEscape",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestShouldEscape(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestShouldEscape(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestStarRequest",
              "documentation": {
                "identifier": "TestStarRequest",
                "newPage": false,
                "searchKey": "url.TestStarRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStarRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStarRequest(t *testing.T)\n```\n\nIssue 11202 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestURLErrorImplementsNetError",
              "documentation": {
                "identifier": "TestURLErrorImplementsNetError",
                "newPage": false,
                "searchKey": "url.TestURLErrorImplementsNetError",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestURLErrorImplementsNetError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestURLErrorImplementsNetError(t *testing.T)\n```\n\nTest that url.Error implements net.Error and that it forwards \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestURLHostnameAndPort",
              "documentation": {
                "identifier": "TestURLHostnameAndPort",
                "newPage": false,
                "searchKey": "url.TestURLHostnameAndPort",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestURLHostnameAndPort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestURLHostnameAndPort(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestURLRedacted",
              "documentation": {
                "identifier": "TestURLRedacted",
                "newPage": false,
                "searchKey": "url.TestURLRedacted",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestURLRedacted(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestURLRedacted(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestURLString",
              "documentation": {
                "identifier": "TestURLString",
                "newPage": false,
                "searchKey": "url.TestURLString",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestURLString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestURLString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#TestUnescape",
              "documentation": {
                "identifier": "TestUnescape",
                "newPage": false,
                "searchKey": "url.TestUnescape",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnescape(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnescape(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#escape",
              "documentation": {
                "identifier": "escape",
                "newPage": false,
                "searchKey": "url.escape",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func escape(s string, mode encoding) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc escape(s string, mode encoding) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#getScheme",
              "documentation": {
                "identifier": "getScheme",
                "newPage": false,
                "searchKey": "url.getScheme",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func getScheme(rawURL string) (scheme, path string, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getScheme(rawURL string) (scheme, path string, err error)\n```\n\nMaybe rawURL is of the form scheme:path. (Scheme must be [a-zA-Z][a-zA-Z0-9+-.]*) If so, return scheme, path; else return \"\", rawURL. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#ishex",
              "documentation": {
                "identifier": "ishex",
                "newPage": false,
                "searchKey": "url.ishex",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ishex(c byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ishex(c byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#parseHost",
              "documentation": {
                "identifier": "parseHost",
                "newPage": false,
                "searchKey": "url.parseHost",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseHost(host string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseHost(host string) (string, error)\n```\n\nparseHost parses host as an authority without user information. That is, as host[:port]. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#parseQuery",
              "documentation": {
                "identifier": "parseQuery",
                "newPage": false,
                "searchKey": "url.parseQuery",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseQuery(m Values, query string) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseQuery(m Values, query string) (err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#resolvePath",
              "documentation": {
                "identifier": "resolvePath",
                "newPage": false,
                "searchKey": "url.resolvePath",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func resolvePath(base, ref string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc resolvePath(base, ref string) string\n```\n\nresolvePath applies special path segments from refs and applies them to base, per RFC 3986. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#shouldEscape",
              "documentation": {
                "identifier": "shouldEscape",
                "newPage": false,
                "searchKey": "url.shouldEscape",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func shouldEscape(c byte, mode encoding) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shouldEscape(c byte, mode encoding) bool\n```\n\nReturn true if the specified character should be escaped when appearing in a URL string, according to RFC 3986. \n\nPlease be informed that for now shouldEscape does not check all reserved characters correctly. See golang.org/issue/5684. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#split",
              "documentation": {
                "identifier": "split",
                "newPage": false,
                "searchKey": "url.split",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func split(s string, sep byte, cutc bool) (string, string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc split(s string, sep byte, cutc bool) (string, string)\n```\n\nsplit slices s into two substrings separated by the first occurrence of sep. If cutc is true then sep is excluded from the second substring. If sep does not occur in s then s and the empty string is returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#splitHostPort",
              "documentation": {
                "identifier": "splitHostPort",
                "newPage": false,
                "searchKey": "url.splitHostPort",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func splitHostPort(hostPort string) (host, port string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc splitHostPort(hostPort string) (host, port string)\n```\n\nsplitHostPort separates host and port. If the port is not valid, it returns the entire input as host, and it doesn't check the validity of the host. Unlike net.SplitHostPort, but per RFC 3986, it requires ports to be numeric. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#stringContainsCTLByte",
              "documentation": {
                "identifier": "stringContainsCTLByte",
                "newPage": false,
                "searchKey": "url.stringContainsCTLByte",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func stringContainsCTLByte(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc stringContainsCTLByte(s string) bool\n```\n\nstringContainsCTLByte reports whether s contains any ASCII control character. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#ufmt",
              "documentation": {
                "identifier": "ufmt",
                "newPage": false,
                "searchKey": "url.ufmt",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ufmt(u *URL) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ufmt(u *URL) string\n```\n\nmore useful string for debugging than fmt's struct printer \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#unescape",
              "documentation": {
                "identifier": "unescape",
                "newPage": false,
                "searchKey": "url.unescape",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unescape(s string, mode encoding) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unescape(s string, mode encoding) (string, error)\n```\n\nunescape unescapes a string; the mode specifies which section of the URL string is being unescaped. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#unhex",
              "documentation": {
                "identifier": "unhex",
                "newPage": false,
                "searchKey": "url.unhex",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unhex(c byte) byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unhex(c byte) byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#validEncoded",
              "documentation": {
                "identifier": "validEncoded",
                "newPage": false,
                "searchKey": "url.validEncoded",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validEncoded(s string, mode encoding) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validEncoded(s string, mode encoding) bool\n```\n\nvalidEncoded reports whether s is a valid encoded path or fragment, according to mode. It must not contain any bytes that require escaping during encoding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#validOptionalPort",
              "documentation": {
                "identifier": "validOptionalPort",
                "newPage": false,
                "searchKey": "url.validOptionalPort",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validOptionalPort(port string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validOptionalPort(port string) bool\n```\n\nvalidOptionalPort reports whether port is either an empty string or matches /^:\\d*$/ \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/url#validUserinfo",
              "documentation": {
                "identifier": "validUserinfo",
                "newPage": false,
                "searchKey": "url.validUserinfo",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validUserinfo(s string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validUserinfo(s string) bool\n```\n\nvalidUserinfo reports whether s is a valid userinfo string per RFC 3986 Section 3.2.1: \n\n```\nuserinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\nunreserved  = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\nsub-delims  = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n              / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n\n```\nIt doesn't validate pct-encoded. The caller does that via func unescape. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
