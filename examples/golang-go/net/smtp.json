{
  "pathID": "/net/smtp",
  "documentation": {
    "identifier": "smtp",
    "newPage": true,
    "searchKey": "net/smtp",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package smtp"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package smtp implements the Simple Mail Transfer Protocol as defined in RFC 5321. It also implements the following extensions: \n\n```\n8BITMIME  RFC 1652\nAUTH      RFC 2554\nSTARTTLS  RFC 3207\n\n```\nAdditional extensions may be handled by clients. \n\nThe smtp package is frozen and is not accepting new features. Some external packages provide more functionality. See: \n\n```\n[https://godoc.org/?q=smtp](https://godoc.org/?q=smtp)\n\n```\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/net/smtp#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/smtp#testHookStartTLS",
              "documentation": {
                "identifier": "testHookStartTLS",
                "newPage": false,
                "searchKey": "smtp.testHookStartTLS",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var testHookStartTLS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testHookStartTLS func(*tls.Config) // nil, except for tests\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#authTests",
              "documentation": {
                "identifier": "authTests",
                "newPage": false,
                "searchKey": "smtp.authTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var authTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar authTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#basicServer",
              "documentation": {
                "identifier": "basicServer",
                "newPage": false,
                "searchKey": "smtp.basicServer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var basicServer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar basicServer = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#basicClient",
              "documentation": {
                "identifier": "basicClient",
                "newPage": false,
                "searchKey": "smtp.basicClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var basicClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar basicClient = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#newClientServer",
              "documentation": {
                "identifier": "newClientServer",
                "newPage": false,
                "searchKey": "smtp.newClientServer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var newClientServer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar newClientServer = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#newClientClient",
              "documentation": {
                "identifier": "newClientClient",
                "newPage": false,
                "searchKey": "smtp.newClientClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var newClientClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar newClientClient = `EHLO localhost\nQUIT\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#newClient2Server",
              "documentation": {
                "identifier": "newClient2Server",
                "newPage": false,
                "searchKey": "smtp.newClient2Server",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var newClient2Server"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar newClient2Server = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#newClient2Client",
              "documentation": {
                "identifier": "newClient2Client",
                "newPage": false,
                "searchKey": "smtp.newClient2Client",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var newClient2Client"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar newClient2Client = `EHLO localhost\nHELO localhost\nQUIT\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#baseHelloServer",
              "documentation": {
                "identifier": "baseHelloServer",
                "newPage": false,
                "searchKey": "smtp.baseHelloServer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var baseHelloServer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar baseHelloServer = `220 hello world\n502 EH?\n250-mx.google.com at your service\n250 FEATURE\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#helloServer",
              "documentation": {
                "identifier": "helloServer",
                "newPage": false,
                "searchKey": "smtp.helloServer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var helloServer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar helloServer = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#baseHelloClient",
              "documentation": {
                "identifier": "baseHelloClient",
                "newPage": false,
                "searchKey": "smtp.baseHelloClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var baseHelloClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar baseHelloClient = `EHLO customhost\nHELO customhost\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#helloClient",
              "documentation": {
                "identifier": "helloClient",
                "newPage": false,
                "searchKey": "smtp.helloClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var helloClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar helloClient = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#sendMailServer",
              "documentation": {
                "identifier": "sendMailServer",
                "newPage": false,
                "searchKey": "smtp.sendMailServer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sendMailServer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sendMailServer = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#sendMailClient",
              "documentation": {
                "identifier": "sendMailClient",
                "newPage": false,
                "searchKey": "smtp.sendMailClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sendMailClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sendMailClient = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#authFailedServer",
              "documentation": {
                "identifier": "authFailedServer",
                "newPage": false,
                "searchKey": "smtp.authFailedServer",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var authFailedServer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar authFailedServer = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#authFailedClient",
              "documentation": {
                "identifier": "authFailedClient",
                "newPage": false,
                "searchKey": "smtp.authFailedClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var authFailedClient"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar authFailedClient = `EHLO localhost\nAUTH PLAIN AHVzZXIAcGFzcw==\n*\nQUIT\n`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#localhostCert",
              "documentation": {
                "identifier": "localhostCert",
                "newPage": false,
                "searchKey": "smtp.localhostCert",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var localhostCert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar localhostCert = ...\n```\n\nlocalhostCert is a PEM-encoded TLS cert generated from src/crypto/tls: go run generate_cert.go --rsa-bits 1024 --host 127.0.0.1,::1,example.com \\ \n\n```\n--ca --start-date \"Jan 1 00:00:00 1970\" --duration=1000000h\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#localhostKey",
              "documentation": {
                "identifier": "localhostKey",
                "newPage": false,
                "searchKey": "smtp.localhostKey",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var localhostKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar localhostKey = ...\n```\n\nlocalhostKey is the private key for localhostCert. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/smtp#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/smtp#Auth",
              "documentation": {
                "identifier": "Auth",
                "newPage": false,
                "searchKey": "smtp.Auth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Auth interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Auth interface {\n\t// Start begins an authentication with a server.\n\t// It returns the name of the authentication protocol\n\t// and optionally data to include in the initial AUTH message\n\t// sent to the server. It can return proto == \"\" to indicate\n\t// that the authentication should be skipped.\n\t// If it returns a non-nil error, the SMTP client aborts\n\t// the authentication attempt and closes the connection.\n\tStart(server *ServerInfo) (proto string, toServer []byte, err error)\n\n\t// Next continues the authentication. The server has just sent\n\t// the fromServer data. If more is true, the server expects a\n\t// response, which Next should return as toServer; otherwise\n\t// Next should return toServer == nil.\n\t// If Next returns a non-nil error, the SMTP client aborts\n\t// the authentication attempt and closes the connection.\n\tNext(fromServer []byte, more bool) (toServer []byte, err error)\n}\n```\n\nAuth is implemented by an SMTP authentication mechanism. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#PlainAuth",
                    "documentation": {
                      "identifier": "PlainAuth",
                      "newPage": false,
                      "searchKey": "smtp.PlainAuth",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func PlainAuth(identity, username, password, host string) Auth"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc PlainAuth(identity, username, password, host string) Auth\n```\n\nPlainAuth returns an Auth that implements the PLAIN authentication mechanism as defined in RFC 4616. The returned Auth uses the given username and password to authenticate to host and act as identity. Usually identity should be the empty string, to act as username. \n\nPlainAuth will only send the credentials if the connection is using TLS or is connected to localhost. Otherwise authentication will fail with an error, without sending the credentials. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#CRAMMD5Auth",
                    "documentation": {
                      "identifier": "CRAMMD5Auth",
                      "newPage": false,
                      "searchKey": "smtp.CRAMMD5Auth",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func CRAMMD5Auth(username, secret string) Auth"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc CRAMMD5Auth(username, secret string) Auth\n```\n\nCRAMMD5Auth returns an Auth that implements the CRAM-MD5 authentication mechanism as defined in RFC 2195. The returned Auth uses the given username and secret to authenticate to the server using the challenge-response mechanism. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#ServerInfo",
              "documentation": {
                "identifier": "ServerInfo",
                "newPage": false,
                "searchKey": "smtp.ServerInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ServerInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ServerInfo struct {\n\tName string   // SMTP server name\n\tTLS  bool     // using TLS, with valid certificate for Name\n\tAuth []string // advertised authentication mechanisms\n}\n```\n\nServerInfo records information about an SMTP server. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#plainAuth",
              "documentation": {
                "identifier": "plainAuth",
                "newPage": false,
                "searchKey": "smtp.plainAuth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type plainAuth struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype plainAuth struct {\n\tidentity, username, password string\n\thost                         string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#plainAuth.Start",
                    "documentation": {
                      "identifier": "plainAuth.Start",
                      "newPage": false,
                      "searchKey": "smtp.plainAuth.Start",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *plainAuth) Start(server *ServerInfo) (string, []byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *plainAuth) Start(server *ServerInfo) (string, []byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#plainAuth.Next",
                    "documentation": {
                      "identifier": "plainAuth.Next",
                      "newPage": false,
                      "searchKey": "smtp.plainAuth.Next",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *plainAuth) Next(fromServer []byte, more bool) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *plainAuth) Next(fromServer []byte, more bool) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#cramMD5Auth",
              "documentation": {
                "identifier": "cramMD5Auth",
                "newPage": false,
                "searchKey": "smtp.cramMD5Auth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type cramMD5Auth struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype cramMD5Auth struct {\n\tusername, secret string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#cramMD5Auth.Start",
                    "documentation": {
                      "identifier": "cramMD5Auth.Start",
                      "newPage": false,
                      "searchKey": "smtp.cramMD5Auth.Start",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *cramMD5Auth) Start(server *ServerInfo) (string, []byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *cramMD5Auth) Start(server *ServerInfo) (string, []byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#cramMD5Auth.Next",
                    "documentation": {
                      "identifier": "cramMD5Auth.Next",
                      "newPage": false,
                      "searchKey": "smtp.cramMD5Auth.Next",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a *cramMD5Auth) Next(fromServer []byte, more bool) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a *cramMD5Auth) Next(fromServer []byte, more bool) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#Client",
              "documentation": {
                "identifier": "Client",
                "newPage": false,
                "searchKey": "smtp.Client",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Client struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Client struct {\n\t// Text is the textproto.Conn used by the Client. It is exported to allow for\n\t// clients to add extensions.\n\tText *textproto.Conn\n\t// keep a reference to the connection so it can be used to create a TLS\n\t// connection later\n\tconn net.Conn\n\t// whether the Client is using TLS\n\ttls        bool\n\tserverName string\n\t// map of supported extensions\n\text map[string]string\n\t// supported auth mechanisms\n\tauth       []string\n\tlocalName  string // the name to use in HELO/EHLO\n\tdidHello   bool   // whether we've said HELO/EHLO\n\thelloError error  // the error from the hello\n}\n```\n\nA Client represents a client connection to an SMTP server. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#Dial",
                    "documentation": {
                      "identifier": "Dial",
                      "newPage": false,
                      "searchKey": "smtp.Dial",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func Dial(addr string) (*Client, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc Dial(addr string) (*Client, error)\n```\n\nDial returns a new Client connected to an SMTP server at addr. The addr must include a port, as in \"mail.example.com:smtp\". \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#NewClient",
                    "documentation": {
                      "identifier": "NewClient",
                      "newPage": false,
                      "searchKey": "smtp.NewClient",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewClient(conn net.Conn, host string) (*Client, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewClient(conn net.Conn, host string) (*Client, error)\n```\n\nNewClient returns a new Client using an existing connection and host as a server name to be used when authenticating. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Close",
                    "documentation": {
                      "identifier": "Client.Close",
                      "newPage": false,
                      "searchKey": "smtp.Client.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Close() error\n```\n\nClose closes the connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.hello",
                    "documentation": {
                      "identifier": "Client.hello",
                      "newPage": false,
                      "searchKey": "smtp.Client.hello",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) hello() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) hello() error\n```\n\nhello runs a hello exchange if needed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Hello",
                    "documentation": {
                      "identifier": "Client.Hello",
                      "newPage": false,
                      "searchKey": "smtp.Client.Hello",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Hello(localName string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Hello(localName string) error\n```\n\nHello sends a HELO or EHLO to the server as the given host name. Calling this method is only necessary if the client needs control over the host name used. The client will introduce itself as \"localhost\" automatically otherwise. If Hello is called, it must be called before any of the other methods. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.cmd",
                    "documentation": {
                      "identifier": "Client.cmd",
                      "newPage": false,
                      "searchKey": "smtp.Client.cmd",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) cmd(expectCode int, format string, args ...interface{}) (int, string, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) cmd(expectCode int, format string, args ...interface{}) (int, string, error)\n```\n\ncmd is a convenience function that sends a command and returns the response \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.helo",
                    "documentation": {
                      "identifier": "Client.helo",
                      "newPage": false,
                      "searchKey": "smtp.Client.helo",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) helo() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) helo() error\n```\n\nhelo sends the HELO greeting to the server. It should be used only when the server does not support ehlo. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.ehlo",
                    "documentation": {
                      "identifier": "Client.ehlo",
                      "newPage": false,
                      "searchKey": "smtp.Client.ehlo",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) ehlo() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) ehlo() error\n```\n\nehlo sends the EHLO (extended hello) greeting to the server. It should be the preferred greeting for servers that support it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.StartTLS",
                    "documentation": {
                      "identifier": "Client.StartTLS",
                      "newPage": false,
                      "searchKey": "smtp.Client.StartTLS",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) StartTLS(config *tls.Config) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) StartTLS(config *tls.Config) error\n```\n\nStartTLS sends the STARTTLS command and encrypts all further communication. Only servers that advertise the STARTTLS extension support this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.TLSConnectionState",
                    "documentation": {
                      "identifier": "Client.TLSConnectionState",
                      "newPage": false,
                      "searchKey": "smtp.Client.TLSConnectionState",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) TLSConnectionState() (state tls.ConnectionState, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) TLSConnectionState() (state tls.ConnectionState, ok bool)\n```\n\nTLSConnectionState returns the client's TLS connection state. The return values are their zero values if StartTLS did not succeed. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Verify",
                    "documentation": {
                      "identifier": "Client.Verify",
                      "newPage": false,
                      "searchKey": "smtp.Client.Verify",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Verify(addr string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Verify(addr string) error\n```\n\nVerify checks the validity of an email address on the server. If Verify returns nil, the address is valid. A non-nil return does not necessarily indicate an invalid address. Many servers will not verify addresses for security reasons. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Auth",
                    "documentation": {
                      "identifier": "Client.Auth",
                      "newPage": false,
                      "searchKey": "smtp.Client.Auth",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Auth(a Auth) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Auth(a Auth) error\n```\n\nAuth authenticates a client using the provided authentication mechanism. A failed authentication closes the connection. Only servers that advertise the AUTH extension support this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Mail",
                    "documentation": {
                      "identifier": "Client.Mail",
                      "newPage": false,
                      "searchKey": "smtp.Client.Mail",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Mail(from string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Mail(from string) error\n```\n\nMail issues a MAIL command to the server using the provided email address. If the server supports the 8BITMIME extension, Mail adds the BODY=8BITMIME parameter. If the server supports the SMTPUTF8 extension, Mail adds the SMTPUTF8 parameter. This initiates a mail transaction and is followed by one or more Rcpt calls. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Rcpt",
                    "documentation": {
                      "identifier": "Client.Rcpt",
                      "newPage": false,
                      "searchKey": "smtp.Client.Rcpt",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Rcpt(to string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Rcpt(to string) error\n```\n\nRcpt issues a RCPT command to the server using the provided email address. A call to Rcpt must be preceded by a call to Mail and may be followed by a Data call or another Rcpt call. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Data",
                    "documentation": {
                      "identifier": "Client.Data",
                      "newPage": false,
                      "searchKey": "smtp.Client.Data",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Data() (io.WriteCloser, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Data() (io.WriteCloser, error)\n```\n\nData issues a DATA command to the server and returns a writer that can be used to write the mail headers and body. The caller should close the writer before calling any more methods on c. A call to Data must be preceded by one or more calls to Rcpt. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Extension",
                    "documentation": {
                      "identifier": "Client.Extension",
                      "newPage": false,
                      "searchKey": "smtp.Client.Extension",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Extension(ext string) (bool, string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Extension(ext string) (bool, string)\n```\n\nExtension reports whether an extension is support by the server. The extension name is case-insensitive. If the extension is supported, Extension also returns a string that contains any parameters the server specifies for the extension. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Reset",
                    "documentation": {
                      "identifier": "Client.Reset",
                      "newPage": false,
                      "searchKey": "smtp.Client.Reset",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Reset() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Reset() error\n```\n\nReset sends the RSET command to the server, aborting the current mail transaction. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Noop",
                    "documentation": {
                      "identifier": "Client.Noop",
                      "newPage": false,
                      "searchKey": "smtp.Client.Noop",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Noop() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Noop() error\n```\n\nNoop sends the NOOP command to the server. It does nothing but check that the connection to the server is okay. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#Client.Quit",
                    "documentation": {
                      "identifier": "Client.Quit",
                      "newPage": false,
                      "searchKey": "smtp.Client.Quit",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Client) Quit() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Client) Quit() error\n```\n\nQuit sends the QUIT command and closes the connection to the server. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#dataCloser",
              "documentation": {
                "identifier": "dataCloser",
                "newPage": false,
                "searchKey": "smtp.dataCloser",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dataCloser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dataCloser struct {\n\tc *Client\n\tio.WriteCloser\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#dataCloser.Close",
                    "documentation": {
                      "identifier": "dataCloser.Close",
                      "newPage": false,
                      "searchKey": "smtp.dataCloser.Close",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *dataCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *dataCloser) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#authTest",
              "documentation": {
                "identifier": "authTest",
                "newPage": false,
                "searchKey": "smtp.authTest",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type authTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authTest struct {\n\tauth       Auth\n\tchallenges []string\n\tname       string\n\tresponses  []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#toServerEmptyAuth",
              "documentation": {
                "identifier": "toServerEmptyAuth",
                "newPage": false,
                "searchKey": "smtp.toServerEmptyAuth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type toServerEmptyAuth struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype toServerEmptyAuth struct{}\n```\n\ntoServerEmptyAuth is an implementation of Auth that only implements the Start method, and returns \"FOOAUTH\", nil, nil. Notably, it returns zero bytes for \"toServer\" so we can test that we don't send spaces at the end of the line. See TestClientAuthTrimSpace. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#toServerEmptyAuth.Start",
                    "documentation": {
                      "identifier": "toServerEmptyAuth.Start",
                      "newPage": false,
                      "searchKey": "smtp.toServerEmptyAuth.Start",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (toServerEmptyAuth) Start(server *ServerInfo) (proto string, toServer []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (toServerEmptyAuth) Start(server *ServerInfo) (proto string, toServer []byte, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#toServerEmptyAuth.Next",
                    "documentation": {
                      "identifier": "toServerEmptyAuth.Next",
                      "newPage": false,
                      "searchKey": "smtp.toServerEmptyAuth.Next",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (toServerEmptyAuth) Next(fromServer []byte, more bool) (toServer []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (toServerEmptyAuth) Next(fromServer []byte, more bool) (toServer []byte, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#faker",
              "documentation": {
                "identifier": "faker",
                "newPage": false,
                "searchKey": "smtp.faker",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type faker struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype faker struct {\n\tio.ReadWriter\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#faker.Close",
                    "documentation": {
                      "identifier": "faker.Close",
                      "newPage": false,
                      "searchKey": "smtp.faker.Close",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f faker) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f faker) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#faker.LocalAddr",
                    "documentation": {
                      "identifier": "faker.LocalAddr",
                      "newPage": false,
                      "searchKey": "smtp.faker.LocalAddr",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f faker) LocalAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f faker) LocalAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#faker.RemoteAddr",
                    "documentation": {
                      "identifier": "faker.RemoteAddr",
                      "newPage": false,
                      "searchKey": "smtp.faker.RemoteAddr",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f faker) RemoteAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f faker) RemoteAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#faker.SetDeadline",
                    "documentation": {
                      "identifier": "faker.SetDeadline",
                      "newPage": false,
                      "searchKey": "smtp.faker.SetDeadline",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f faker) SetDeadline(time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f faker) SetDeadline(time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#faker.SetReadDeadline",
                    "documentation": {
                      "identifier": "faker.SetReadDeadline",
                      "newPage": false,
                      "searchKey": "smtp.faker.SetReadDeadline",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f faker) SetReadDeadline(time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f faker) SetReadDeadline(time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/smtp#faker.SetWriteDeadline",
                    "documentation": {
                      "identifier": "faker.SetWriteDeadline",
                      "newPage": false,
                      "searchKey": "smtp.faker.SetWriteDeadline",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f faker) SetWriteDeadline(time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f faker) SetWriteDeadline(time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#smtpSender",
              "documentation": {
                "identifier": "smtpSender",
                "newPage": false,
                "searchKey": "smtp.smtpSender",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type smtpSender struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype smtpSender struct {\n\tw io.Writer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/smtp#smtpSender.send",
                    "documentation": {
                      "identifier": "smtpSender.send",
                      "newPage": false,
                      "searchKey": "smtp.smtpSender.send",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s smtpSender) send(f string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s smtpSender) send(f string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/smtp#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/smtp#isLocalhost",
              "documentation": {
                "identifier": "isLocalhost",
                "newPage": false,
                "searchKey": "smtp.isLocalhost",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isLocalhost(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isLocalhost(name string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#SendMail",
              "documentation": {
                "identifier": "SendMail",
                "newPage": false,
                "searchKey": "smtp.SendMail",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func SendMail(addr string, a Auth, from string, to []string, msg []byte) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc SendMail(addr string, a Auth, from string, to []string, msg []byte) error\n```\n\nSendMail connects to the server at addr, switches to TLS if possible, authenticates with the optional mechanism a if possible, and then sends an email from address from, to addresses to, with message msg. The addr must include a port, as in \"mail.example.com:smtp\". \n\nThe addresses in the to parameter are the SMTP RCPT addresses. \n\nThe msg parameter should be an RFC 822-style email with headers first, a blank line, and then the message body. The lines of msg should be CRLF terminated. The msg headers should usually include fields such as \"From\", \"To\", \"Subject\", and \"Cc\".  Sending \"Bcc\" messages is accomplished by including an email address in the to parameter but not including it in the msg headers. \n\nThe SendMail function and the net/smtp package are low-level mechanisms and provide no support for DKIM signing, MIME attachments (see the mime/multipart package), or other mail functionality. Higher-level packages exist outside of the standard library. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#validateLine",
              "documentation": {
                "identifier": "validateLine",
                "newPage": false,
                "searchKey": "smtp.validateLine",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateLine(line string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateLine(line string) error\n```\n\nvalidateLine checks to see if a line has CR or LF as per RFC 5321 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestAuth",
              "documentation": {
                "identifier": "TestAuth",
                "newPage": false,
                "searchKey": "smtp.TestAuth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestAuthPlain",
              "documentation": {
                "identifier": "TestAuthPlain",
                "newPage": false,
                "searchKey": "smtp.TestAuthPlain",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAuthPlain(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAuthPlain(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestClientAuthTrimSpace",
              "documentation": {
                "identifier": "TestClientAuthTrimSpace",
                "newPage": false,
                "searchKey": "smtp.TestClientAuthTrimSpace",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientAuthTrimSpace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientAuthTrimSpace(t *testing.T)\n```\n\nIssue 17794: don't send a trailing space on AUTH command when there's no password. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestBasic",
              "documentation": {
                "identifier": "TestBasic",
                "newPage": false,
                "searchKey": "smtp.TestBasic",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasic(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestExtensions",
              "documentation": {
                "identifier": "TestExtensions",
                "newPage": false,
                "searchKey": "smtp.TestExtensions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExtensions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExtensions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestNewClient",
              "documentation": {
                "identifier": "TestNewClient",
                "newPage": false,
                "searchKey": "smtp.TestNewClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewClient(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewClient(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestNewClient2",
              "documentation": {
                "identifier": "TestNewClient2",
                "newPage": false,
                "searchKey": "smtp.TestNewClient2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewClient2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewClient2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestNewClientWithTLS",
              "documentation": {
                "identifier": "TestNewClientWithTLS",
                "newPage": false,
                "searchKey": "smtp.TestNewClientWithTLS",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewClientWithTLS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewClientWithTLS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestHello",
              "documentation": {
                "identifier": "TestHello",
                "newPage": false,
                "searchKey": "smtp.TestHello",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHello(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHello(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestSendMail",
              "documentation": {
                "identifier": "TestSendMail",
                "newPage": false,
                "searchKey": "smtp.TestSendMail",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSendMail(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSendMail(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestSendMailWithAuth",
              "documentation": {
                "identifier": "TestSendMailWithAuth",
                "newPage": false,
                "searchKey": "smtp.TestSendMailWithAuth",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSendMailWithAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSendMailWithAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestAuthFailed",
              "documentation": {
                "identifier": "TestAuthFailed",
                "newPage": false,
                "searchKey": "smtp.TestAuthFailed",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAuthFailed(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAuthFailed(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestTLSClient",
              "documentation": {
                "identifier": "TestTLSClient",
                "newPage": false,
                "searchKey": "smtp.TestTLSClient",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSClient(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSClient(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#TestTLSConnState",
              "documentation": {
                "identifier": "TestTLSConnState",
                "newPage": false,
                "searchKey": "smtp.TestTLSConnState",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSConnState(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSConnState(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#newLocalListener",
              "documentation": {
                "identifier": "newLocalListener",
                "newPage": false,
                "searchKey": "smtp.newLocalListener",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newLocalListener(t *testing.T) net.Listener"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newLocalListener(t *testing.T) net.Listener\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#serverHandle",
              "documentation": {
                "identifier": "serverHandle",
                "newPage": false,
                "searchKey": "smtp.serverHandle",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func serverHandle(c net.Conn, t *testing.T) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc serverHandle(c net.Conn, t *testing.T) error\n```\n\nsmtp server, finely tailored to deal with our own client only! \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#serverHandleTLS",
              "documentation": {
                "identifier": "serverHandleTLS",
                "newPage": false,
                "searchKey": "smtp.serverHandleTLS",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func serverHandleTLS(c net.Conn, t *testing.T) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc serverHandleTLS(c net.Conn, t *testing.T) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#init.smtp_test.go",
              "documentation": {
                "identifier": "init.smtp_test.go",
                "newPage": false,
                "searchKey": "smtp.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#sendMail",
              "documentation": {
                "identifier": "sendMail",
                "newPage": false,
                "searchKey": "smtp.sendMail",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sendMail(hostPort string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sendMail(hostPort string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/smtp#testingKey",
              "documentation": {
                "identifier": "testingKey",
                "newPage": false,
                "searchKey": "smtp.testingKey",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testingKey(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testingKey(s string) string\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
