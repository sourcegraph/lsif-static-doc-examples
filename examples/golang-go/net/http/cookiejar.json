{
  "pathID": "/net/http/cookiejar",
  "documentation": {
    "identifier": "cookiejar",
    "newPage": true,
    "searchKey": "net/http/cookiejar",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package cookiejar"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package cookiejar implements an in-memory RFC 6265-compliant http.CookieJar. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/net/http/cookiejar#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/cookiejar#acePrefix",
              "documentation": {
                "identifier": "acePrefix",
                "newPage": false,
                "searchKey": "cookiejar.acePrefix",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const acePrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst acePrefix = \"xn--\"\n```\n\nacePrefix is the ASCII Compatible Encoding prefix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#base",
              "documentation": {
                "identifier": "base",
                "newPage": false,
                "searchKey": "cookiejar.base",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const base"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst base int32 = 36\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#damp",
              "documentation": {
                "identifier": "damp",
                "newPage": false,
                "searchKey": "cookiejar.damp",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const damp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst damp int32 = 700\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#initialBias",
              "documentation": {
                "identifier": "initialBias",
                "newPage": false,
                "searchKey": "cookiejar.initialBias",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const initialBias"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst initialBias int32 = 72\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#initialN",
              "documentation": {
                "identifier": "initialN",
                "newPage": false,
                "searchKey": "cookiejar.initialN",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const initialN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst initialN int32 = 128\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#skew",
              "documentation": {
                "identifier": "skew",
                "newPage": false,
                "searchKey": "cookiejar.skew",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const skew"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst skew int32 = 38\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#tmax",
              "documentation": {
                "identifier": "tmax",
                "newPage": false,
                "searchKey": "cookiejar.tmax",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tmax"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tmax int32 = 26\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#tmin",
              "documentation": {
                "identifier": "tmin",
                "newPage": false,
                "searchKey": "cookiejar.tmin",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const tmin"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst tmin int32 = 1\n```\n\nThese parameter values are specified in section 5. \n\nAll computation is done with int32s, so that overflow behavior is identical regardless of whether int is 32-bit or 64-bit. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/cookiejar#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/cookiejar#basicsTests",
              "documentation": {
                "identifier": "basicsTests",
                "newPage": false,
                "searchKey": "cookiejar.basicsTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var basicsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar basicsTests = ...\n```\n\nbasicsTests contains fundamental tests. Each jarTest has to be performed on a fresh, empty Jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#canonicalHostTests",
              "documentation": {
                "identifier": "canonicalHostTests",
                "newPage": false,
                "searchKey": "cookiejar.canonicalHostTests",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var canonicalHostTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar canonicalHostTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#chromiumBasicsTests",
              "documentation": {
                "identifier": "chromiumBasicsTests",
                "newPage": false,
                "searchKey": "cookiejar.chromiumBasicsTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var chromiumBasicsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar chromiumBasicsTests = ...\n```\n\nchromiumBasicsTests contains fundamental tests. Each jarTest has to be performed on a fresh, empty Jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#chromiumDeletionTests",
              "documentation": {
                "identifier": "chromiumDeletionTests",
                "newPage": false,
                "searchKey": "cookiejar.chromiumDeletionTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var chromiumDeletionTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar chromiumDeletionTests = ...\n```\n\nchromiumDeletionTests must be performed all on the same Jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#chromiumDomainTests",
              "documentation": {
                "identifier": "chromiumDomainTests",
                "newPage": false,
                "searchKey": "cookiejar.chromiumDomainTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var chromiumDomainTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar chromiumDomainTests = ...\n```\n\nchromiumDomainTests contains jarTests which must be executed all on the same Jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#defaultPathTests",
              "documentation": {
                "identifier": "defaultPathTests",
                "newPage": false,
                "searchKey": "cookiejar.defaultPathTests",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var defaultPathTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar defaultPathTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#domainAndTypeTests",
              "documentation": {
                "identifier": "domainAndTypeTests",
                "newPage": false,
                "searchKey": "cookiejar.domainAndTypeTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var domainAndTypeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar domainAndTypeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#domainHandlingTests",
              "documentation": {
                "identifier": "domainHandlingTests",
                "newPage": false,
                "searchKey": "cookiejar.domainHandlingTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var domainHandlingTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar domainHandlingTests = ...\n```\n\ndomainHandlingTests tests and documents the rules for domain handling. Each test must be performed on an empty new Jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#endOfTime",
              "documentation": {
                "identifier": "endOfTime",
                "newPage": false,
                "searchKey": "cookiejar.endOfTime",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var endOfTime"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar endOfTime = time.Date(9999, 12, 31, 23, 59, 59, 0, time.UTC)\n```\n\nendOfTime is the time when session (non-persistent) cookies expire. This instant is representable in most date/time formats (not just Go's time.Time) and should be far enough in the future. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#errIllegalDomain",
              "documentation": {
                "identifier": "errIllegalDomain",
                "newPage": false,
                "searchKey": "cookiejar.errIllegalDomain",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errIllegalDomain"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errIllegalDomain = errors.New(\"cookiejar: illegal cookie domain attribute\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#errMalformedDomain",
              "documentation": {
                "identifier": "errMalformedDomain",
                "newPage": false,
                "searchKey": "cookiejar.errMalformedDomain",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errMalformedDomain"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errMalformedDomain = errors.New(\"cookiejar: malformed cookie domain attribute\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#errNoHostname",
              "documentation": {
                "identifier": "errNoHostname",
                "newPage": false,
                "searchKey": "cookiejar.errNoHostname",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNoHostname"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNoHostname = errors.New(\"cookiejar: no host name available (IP only)\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#hasDotSuffixTests",
              "documentation": {
                "identifier": "hasDotSuffixTests",
                "newPage": false,
                "searchKey": "cookiejar.hasDotSuffixTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hasDotSuffixTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hasDotSuffixTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#hasPortTests",
              "documentation": {
                "identifier": "hasPortTests",
                "newPage": false,
                "searchKey": "cookiejar.hasPortTests",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hasPortTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hasPortTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#isIPTests",
              "documentation": {
                "identifier": "isIPTests",
                "newPage": false,
                "searchKey": "cookiejar.isIPTests",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var isIPTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isIPTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#jarKeyNilPSLTests",
              "documentation": {
                "identifier": "jarKeyNilPSLTests",
                "newPage": false,
                "searchKey": "cookiejar.jarKeyNilPSLTests",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var jarKeyNilPSLTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar jarKeyNilPSLTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#jarKeyTests",
              "documentation": {
                "identifier": "jarKeyTests",
                "newPage": false,
                "searchKey": "cookiejar.jarKeyTests",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var jarKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar jarKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#punycodeTestCases",
              "documentation": {
                "identifier": "punycodeTestCases",
                "newPage": false,
                "searchKey": "cookiejar.punycodeTestCases",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var punycodeTestCases"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar punycodeTestCases = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#tNow",
              "documentation": {
                "identifier": "tNow",
                "newPage": false,
                "searchKey": "cookiejar.tNow",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tNow"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tNow = time.Date(2013, 1, 1, 12, 0, 0, 0, time.UTC)\n```\n\ntNow is the synthetic current time used as now during testing. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#updateAndDeleteTests",
              "documentation": {
                "identifier": "updateAndDeleteTests",
                "newPage": false,
                "searchKey": "cookiejar.updateAndDeleteTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var updateAndDeleteTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar updateAndDeleteTests = ...\n```\n\nupdateAndDeleteTests contains jarTests which must be performed on the same Jar. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/cookiejar#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/cookiejar#Jar",
              "documentation": {
                "identifier": "Jar",
                "newPage": false,
                "searchKey": "cookiejar.Jar",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Jar struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Jar struct {\n\tpsList PublicSuffixList\n\n\t// mu locks the remaining fields.\n\tmu sync.Mutex\n\n\t// entries is a set of entries, keyed by their eTLD+1 and subkeyed by\n\t// their name/domain/path.\n\tentries map[string]map[string]entry\n\n\t// nextSeqNum is the next sequence number assigned to a new cookie\n\t// created SetCookies.\n\tnextSeqNum uint64\n}\n```\n\nJar implements the http.CookieJar interface from the net/http package. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "cookiejar.New",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(o *Options) (*Jar, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(o *Options) (*Jar, error)\n```\n\nNew returns a new cookie jar. A nil *Options is equivalent to a zero Options. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#newTestJar",
                    "documentation": {
                      "identifier": "newTestJar",
                      "newPage": false,
                      "searchKey": "cookiejar.newTestJar",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newTestJar() *Jar"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newTestJar() *Jar\n```\n\nnewTestJar creates an empty Jar with testPSL as the public suffix list. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#Jar.Cookies",
                    "documentation": {
                      "identifier": "Jar.Cookies",
                      "newPage": false,
                      "searchKey": "cookiejar.Jar.Cookies",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *Jar) Cookies(u *url.URL) (cookies []*http.Cookie)\n```\n\nCookies implements the Cookies method of the http.CookieJar interface. \n\nIt returns an empty slice if the URL's scheme is not HTTP or HTTPS. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#Jar.SetCookies",
                    "documentation": {
                      "identifier": "Jar.SetCookies",
                      "newPage": false,
                      "searchKey": "cookiejar.Jar.SetCookies",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *Jar) SetCookies(u *url.URL, cookies []*http.Cookie)\n```\n\nSetCookies implements the SetCookies method of the http.CookieJar interface. \n\nIt does nothing if the URL's scheme is not HTTP or HTTPS. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#Jar.cookies",
                    "documentation": {
                      "identifier": "Jar.cookies",
                      "newPage": false,
                      "searchKey": "cookiejar.Jar.cookies",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *Jar) cookies(u *url.URL, now time.Time) (cookies []*http.Cookie)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *Jar) cookies(u *url.URL, now time.Time) (cookies []*http.Cookie)\n```\n\ncookies is like Cookies but takes the current time as a parameter. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#Jar.domainAndType",
                    "documentation": {
                      "identifier": "Jar.domainAndType",
                      "newPage": false,
                      "searchKey": "cookiejar.Jar.domainAndType",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *Jar) domainAndType(host, domain string) (string, bool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *Jar) domainAndType(host, domain string) (string, bool, error)\n```\n\ndomainAndType determines the cookie's domain and hostOnly attribute. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#Jar.newEntry",
                    "documentation": {
                      "identifier": "Jar.newEntry",
                      "newPage": false,
                      "searchKey": "cookiejar.Jar.newEntry",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *Jar) newEntry(c *http.Cookie, now time.Time, defPath, host string) (e entry, remove bool, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *Jar) newEntry(c *http.Cookie, now time.Time, defPath, host string) (e entry, remove bool, err error)\n```\n\nnewEntry creates an entry from a http.Cookie c. now is the current time and is compared to c.Expires to determine deletion of c. defPath and host are the default-path and the canonical host name of the URL c was received from. \n\nremove records whether the jar should delete this cookie, as it has already expired with respect to now. In this case, e may be incomplete, but it will be valid to call e.id (which depends on e's Name, Domain and Path). \n\nA malformed c.Domain will result in an error. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#Jar.setCookies",
                    "documentation": {
                      "identifier": "Jar.setCookies",
                      "newPage": false,
                      "searchKey": "cookiejar.Jar.setCookies",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *Jar) setCookies(u *url.URL, cookies []*http.Cookie, now time.Time)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *Jar) setCookies(u *url.URL, cookies []*http.Cookie, now time.Time)\n```\n\nsetCookies is like SetCookies but takes the current time as parameter. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#Options",
              "documentation": {
                "identifier": "Options",
                "newPage": false,
                "searchKey": "cookiejar.Options",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Options struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Options struct {\n\t// PublicSuffixList is the public suffix list that determines whether\n\t// an HTTP server can set a cookie for a domain.\n\t//\n\t// A nil value is valid and may be useful for testing but it is not\n\t// secure: it means that the HTTP server for foo.co.uk can set a cookie\n\t// for bar.co.uk.\n\tPublicSuffixList PublicSuffixList\n}\n```\n\nOptions are the options for creating a new Jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#PublicSuffixList",
              "documentation": {
                "identifier": "PublicSuffixList",
                "newPage": false,
                "searchKey": "cookiejar.PublicSuffixList",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PublicSuffixList interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PublicSuffixList interface {\n\t// PublicSuffix returns the public suffix of domain.\n\t//\n\t// TODO: specify which of the caller and callee is responsible for IP\n\t// addresses, for leading and trailing dots, for case sensitivity, and\n\t// for IDN/Punycode.\n\tPublicSuffix(domain string) string\n\n\t// String returns a description of the source of this public suffix\n\t// list. The description will typically contain something like a time\n\t// stamp or version number.\n\tString() string\n}\n```\n\nPublicSuffixList provides the public suffix of a domain. For example: \n\n```\n- the public suffix of \"example.com\" is \"com\",\n- the public suffix of \"foo1.foo2.foo3.co.uk\" is \"co.uk\", and\n- the public suffix of \"bar.pvt.k12.ma.us\" is \"pvt.k12.ma.us\".\n\n```\nImplementations of PublicSuffixList must be safe for concurrent use by multiple goroutines. \n\nAn implementation that always returns \"\" is valid and may be useful for testing but it is not secure: it means that the HTTP server for foo.com can set a cookie for bar.com. \n\nA public suffix list implementation is in the package golang.org/x/net/publicsuffix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#entry",
              "documentation": {
                "identifier": "entry",
                "newPage": false,
                "searchKey": "cookiejar.entry",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type entry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype entry struct {\n\tName       string\n\tValue      string\n\tDomain     string\n\tPath       string\n\tSameSite   string\n\tSecure     bool\n\tHttpOnly   bool\n\tPersistent bool\n\tHostOnly   bool\n\tExpires    time.Time\n\tCreation   time.Time\n\tLastAccess time.Time\n\n\t// seqNum is a sequence number so that Cookies returns cookies in a\n\t// deterministic order, even for cookies that have equal Path length and\n\t// equal Creation time. This simplifies testing.\n\tseqNum uint64\n}\n```\n\nentry is the internal representation of a cookie. \n\nThis struct type is not used outside of this package per se, but the exported fields are those of RFC 6265. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#entry.domainMatch",
                    "documentation": {
                      "identifier": "entry.domainMatch",
                      "newPage": false,
                      "searchKey": "cookiejar.entry.domainMatch",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *entry) domainMatch(host string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *entry) domainMatch(host string) bool\n```\n\ndomainMatch implements \"domain-match\" of RFC 6265 section 5.1.3. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#entry.id",
                    "documentation": {
                      "identifier": "entry.id",
                      "newPage": false,
                      "searchKey": "cookiejar.entry.id",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *entry) id() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *entry) id() string\n```\n\nid returns the domain;path;name triple of e as an id. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#entry.pathMatch",
                    "documentation": {
                      "identifier": "entry.pathMatch",
                      "newPage": false,
                      "searchKey": "cookiejar.entry.pathMatch",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *entry) pathMatch(requestPath string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *entry) pathMatch(requestPath string) bool\n```\n\npathMatch implements \"path-match\" according to RFC 6265 section 5.1.4. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#entry.shouldSend",
                    "documentation": {
                      "identifier": "entry.shouldSend",
                      "newPage": false,
                      "searchKey": "cookiejar.entry.shouldSend",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *entry) shouldSend(https bool, host, path string) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *entry) shouldSend(https bool, host, path string) bool\n```\n\nshouldSend determines whether e's cookie qualifies to be included in a request to host/path. It is the caller's responsibility to check if the cookie is expired. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#jarTest",
              "documentation": {
                "identifier": "jarTest",
                "newPage": false,
                "searchKey": "cookiejar.jarTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type jarTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype jarTest struct {\n\tdescription string   // The description of what this test is supposed to test\n\tfromURL     string   // The full URL of the request from which Set-Cookie headers where received\n\tsetCookies  []string // All the cookies received from fromURL\n\tcontent     string   // The whole (non-expired) content of the jar\n\tqueries     []query  // Queries to test the Jar.Cookies method\n}\n```\n\njarTest encapsulates the following actions on a jar: \n\n```\n1. Perform SetCookies with fromURL and the cookies from setCookies.\n   (Done at time tNow + 0 ms.)\n2. Check that the entries in the jar matches content.\n   (Done at time tNow + 1001 ms.)\n3. For each query in tests: Check that Cookies with toURL yields the\n   cookies in want.\n   (Query n done at tNow + (n+2)*1001 ms.)\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#jarTest.run",
                    "documentation": {
                      "identifier": "jarTest.run",
                      "newPage": false,
                      "searchKey": "cookiejar.jarTest.run",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (test jarTest) run(t *testing.T, jar *Jar)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (test jarTest) run(t *testing.T, jar *Jar)\n```\n\nrun runs the jarTest. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#query",
              "documentation": {
                "identifier": "query",
                "newPage": false,
                "searchKey": "cookiejar.query",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type query struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype query struct {\n\ttoURL string // the URL in the Cookies call\n\twant  string // the expected list of cookies (order matters)\n}\n```\n\nquery contains one test of the cookies returned from Jar.Cookies. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#testPSL",
              "documentation": {
                "identifier": "testPSL",
                "newPage": false,
                "searchKey": "cookiejar.testPSL",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type testPSL struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testPSL struct{}\n```\n\ntestPSL implements PublicSuffixList with just two rules: \"co.uk\" and the default rule \"*\". The implementation has two intentional bugs: \n\n```\nPublicSuffix(\"www.buggy.psl\") == \"xy\"\nPublicSuffix(\"www2.buggy.psl\") == \"com\"\n\n```\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#testPSL.PublicSuffix",
                    "documentation": {
                      "identifier": "testPSL.PublicSuffix",
                      "newPage": false,
                      "searchKey": "cookiejar.testPSL.PublicSuffix",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (testPSL) PublicSuffix(d string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (testPSL) PublicSuffix(d string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/cookiejar#testPSL.String",
                    "documentation": {
                      "identifier": "testPSL.String",
                      "newPage": false,
                      "searchKey": "cookiejar.testPSL.String",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (testPSL) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (testPSL) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/cookiejar#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestBasics",
              "documentation": {
                "identifier": "TestBasics",
                "newPage": false,
                "searchKey": "cookiejar.TestBasics",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestCanonicalHost",
              "documentation": {
                "identifier": "TestCanonicalHost",
                "newPage": false,
                "searchKey": "cookiejar.TestCanonicalHost",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCanonicalHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCanonicalHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestChromiumBasics",
              "documentation": {
                "identifier": "TestChromiumBasics",
                "newPage": false,
                "searchKey": "cookiejar.TestChromiumBasics",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChromiumBasics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChromiumBasics(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestChromiumDeletion",
              "documentation": {
                "identifier": "TestChromiumDeletion",
                "newPage": false,
                "searchKey": "cookiejar.TestChromiumDeletion",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChromiumDeletion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChromiumDeletion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestChromiumDomain",
              "documentation": {
                "identifier": "TestChromiumDomain",
                "newPage": false,
                "searchKey": "cookiejar.TestChromiumDomain",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChromiumDomain(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChromiumDomain(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestDefaultPath",
              "documentation": {
                "identifier": "TestDefaultPath",
                "newPage": false,
                "searchKey": "cookiejar.TestDefaultPath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDefaultPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDefaultPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestDomainAndType",
              "documentation": {
                "identifier": "TestDomainAndType",
                "newPage": false,
                "searchKey": "cookiejar.TestDomainAndType",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDomainAndType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDomainAndType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestDomainHandling",
              "documentation": {
                "identifier": "TestDomainHandling",
                "newPage": false,
                "searchKey": "cookiejar.TestDomainHandling",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDomainHandling(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDomainHandling(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestExpiration",
              "documentation": {
                "identifier": "TestExpiration",
                "newPage": false,
                "searchKey": "cookiejar.TestExpiration",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestExpiration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestExpiration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestHasDotSuffix",
              "documentation": {
                "identifier": "TestHasDotSuffix",
                "newPage": false,
                "searchKey": "cookiejar.TestHasDotSuffix",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHasDotSuffix(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHasDotSuffix(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestHasPort",
              "documentation": {
                "identifier": "TestHasPort",
                "newPage": false,
                "searchKey": "cookiejar.TestHasPort",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHasPort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHasPort(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestIsIP",
              "documentation": {
                "identifier": "TestIsIP",
                "newPage": false,
                "searchKey": "cookiejar.TestIsIP",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIsIP(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIsIP(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestIssue19384",
              "documentation": {
                "identifier": "TestIssue19384",
                "newPage": false,
                "searchKey": "cookiejar.TestIssue19384",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue19384(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue19384(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestJarKey",
              "documentation": {
                "identifier": "TestJarKey",
                "newPage": false,
                "searchKey": "cookiejar.TestJarKey",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestJarKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestJarKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestJarKeyNilPSL",
              "documentation": {
                "identifier": "TestJarKeyNilPSL",
                "newPage": false,
                "searchKey": "cookiejar.TestJarKeyNilPSL",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestJarKeyNilPSL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestJarKeyNilPSL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestPunycode",
              "documentation": {
                "identifier": "TestPunycode",
                "newPage": false,
                "searchKey": "cookiejar.TestPunycode",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPunycode(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPunycode(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#TestUpdateAndDelete",
              "documentation": {
                "identifier": "TestUpdateAndDelete",
                "newPage": false,
                "searchKey": "cookiejar.TestUpdateAndDelete",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUpdateAndDelete(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUpdateAndDelete(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#adapt",
              "documentation": {
                "identifier": "adapt",
                "newPage": false,
                "searchKey": "cookiejar.adapt",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func adapt(delta, numPoints int32, firstTime bool) int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc adapt(delta, numPoints int32, firstTime bool) int32\n```\n\nadapt is the bias adaptation function specified in section 6.1. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#canonicalHost",
              "documentation": {
                "identifier": "canonicalHost",
                "newPage": false,
                "searchKey": "cookiejar.canonicalHost",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func canonicalHost(host string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc canonicalHost(host string) (string, error)\n```\n\ncanonicalHost strips port from host if present and returns the canonicalized host name. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#defaultPath",
              "documentation": {
                "identifier": "defaultPath",
                "newPage": false,
                "searchKey": "cookiejar.defaultPath",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func defaultPath(path string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc defaultPath(path string) string\n```\n\ndefaultPath returns the directory part of an URL's path according to RFC 6265 section 5.1.4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#encode",
              "documentation": {
                "identifier": "encode",
                "newPage": false,
                "searchKey": "cookiejar.encode",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func encode(prefix, s string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encode(prefix, s string) (string, error)\n```\n\nencode encodes a string as specified in section 6.3 and prepends prefix to the result. \n\nThe \"while h < length(input)\" line in the specification becomes \"for remaining != 0\" in the Go code, because len(s) in Go is in bytes, not runes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#encodeDigit",
              "documentation": {
                "identifier": "encodeDigit",
                "newPage": false,
                "searchKey": "cookiejar.encodeDigit",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func encodeDigit(digit int32) byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encodeDigit(digit int32) byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#expiresIn",
              "documentation": {
                "identifier": "expiresIn",
                "newPage": false,
                "searchKey": "cookiejar.expiresIn",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func expiresIn(delta int) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expiresIn(delta int) string\n```\n\nexpiresIn creates an expires attribute delta seconds from tNow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#hasDotSuffix",
              "documentation": {
                "identifier": "hasDotSuffix",
                "newPage": false,
                "searchKey": "cookiejar.hasDotSuffix",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hasDotSuffix(s, suffix string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hasDotSuffix(s, suffix string) bool\n```\n\nhasDotSuffix reports whether s ends in \".\"+suffix. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#hasPort",
              "documentation": {
                "identifier": "hasPort",
                "newPage": false,
                "searchKey": "cookiejar.hasPort",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func hasPort(host string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc hasPort(host string) bool\n```\n\nhasPort reports whether host contains a port number. host may be a host name, an IPv4 or an IPv6 address. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#isIP",
              "documentation": {
                "identifier": "isIP",
                "newPage": false,
                "searchKey": "cookiejar.isIP",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func isIP(host string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isIP(host string) bool\n```\n\nisIP reports whether host is an IP address. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#jarKey",
              "documentation": {
                "identifier": "jarKey",
                "newPage": false,
                "searchKey": "cookiejar.jarKey",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func jarKey(host string, psl PublicSuffixList) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc jarKey(host string, psl PublicSuffixList) string\n```\n\njarKey returns the key to use for a jar. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#mustParseURL",
              "documentation": {
                "identifier": "mustParseURL",
                "newPage": false,
                "searchKey": "cookiejar.mustParseURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustParseURL(s string) *url.URL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustParseURL(s string) *url.URL\n```\n\nmustParseURL parses s to an URL and panics on error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/cookiejar#toASCII",
              "documentation": {
                "identifier": "toASCII",
                "newPage": false,
                "searchKey": "cookiejar.toASCII",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func toASCII(s string) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toASCII(s string) (string, error)\n```\n\ntoASCII converts a domain or domain label to its ASCII form. For example, toASCII(\"bücher.example.com\") is \"xn--bcher-kva.example.com\", and toASCII(\"golang\") is \"golang\". \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
