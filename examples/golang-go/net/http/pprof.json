{
  "pathID": "/net/http/pprof",
  "documentation": {
    "identifier": "pprof",
    "newPage": true,
    "searchKey": "net/http/pprof",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package pprof"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package pprof serves via its HTTP server runtime profiling data in the format expected by the pprof visualization tool. \n\nThe package is typically only imported for the side effect of registering its HTTP handlers. The handled paths all begin with /debug/pprof/. \n\nTo use pprof, link this package into your program: \n\n```\nimport _ \"net/http/pprof\"\n\n```\nIf your application is not already running an http server, you need to start one. Add \"net/http\" and \"log\" to your imports and the following code to your main function: \n\n```\ngo func() {\n\tlog.Println(http.ListenAndServe(\"localhost:6060\", nil))\n}()\n\n```\nIf you are not using DefaultServeMux, you will have to register handlers with the mux you are using. \n\nThen use the pprof tool to look at the heap profile: \n\n```\ngo tool pprof [http://localhost:6060/debug/pprof/heap](http://localhost:6060/debug/pprof/heap)\n\n```\nOr to look at a 30-second CPU profile: \n\n```\ngo tool pprof [http://localhost:6060/debug/pprof/profile?seconds=30](http://localhost:6060/debug/pprof/profile?seconds=30)\n\n```\nOr to look at the goroutine blocking profile, after calling runtime.SetBlockProfileRate in your program: \n\n```\ngo tool pprof [http://localhost:6060/debug/pprof/block](http://localhost:6060/debug/pprof/block)\n\n```\nOr to look at the holders of contended mutexes, after calling runtime.SetMutexProfileFraction in your program: \n\n```\ngo tool pprof [http://localhost:6060/debug/pprof/mutex](http://localhost:6060/debug/pprof/mutex)\n\n```\nThe package also exports a handler that serves execution trace data for the \"go tool trace\" command. To collect a 5-second execution trace: \n\n```\nwget -O trace.out [http://localhost:6060/debug/pprof/trace?seconds=5](http://localhost:6060/debug/pprof/trace?seconds=5)\ngo tool trace trace.out\n\n```\nTo view all available profiles, open [http://localhost:6060/debug/pprof/](http://localhost:6060/debug/pprof/) in your browser. \n\nFor a study of the facility in action, visit \n\n```\n[https://blog.golang.org/2011/06/profiling-go-programs.html](https://blog.golang.org/2011/06/profiling-go-programs.html)\n\n```\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/net/http/pprof#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/pprof#profileSupportsDelta",
              "documentation": {
                "identifier": "profileSupportsDelta",
                "newPage": false,
                "searchKey": "pprof.profileSupportsDelta",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var profileSupportsDelta"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar profileSupportsDelta = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#profileDescriptions",
              "documentation": {
                "identifier": "profileDescriptions",
                "newPage": false,
                "searchKey": "pprof.profileDescriptions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var profileDescriptions"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar profileDescriptions = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Sink",
              "documentation": {
                "identifier": "Sink",
                "newPage": false,
                "searchKey": "pprof.Sink",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var Sink"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar Sink uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#srv",
              "documentation": {
                "identifier": "srv",
                "newPage": false,
                "searchKey": "pprof.srv",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var srv"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar srv = httptest.NewServer(nil)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/pprof#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/pprof#handler",
              "documentation": {
                "identifier": "handler",
                "newPage": false,
                "searchKey": "pprof.handler",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type handler string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype handler string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/pprof#handler.ServeHTTP",
                    "documentation": {
                      "identifier": "handler.ServeHTTP",
                      "newPage": false,
                      "searchKey": "pprof.handler.ServeHTTP",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (name handler) ServeHTTP(w http.ResponseWriter, r *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (name handler) ServeHTTP(w http.ResponseWriter, r *http.Request)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/pprof#handler.serveDeltaProfile",
                    "documentation": {
                      "identifier": "handler.serveDeltaProfile",
                      "newPage": false,
                      "searchKey": "pprof.handler.serveDeltaProfile",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (name handler) serveDeltaProfile(w http.ResponseWriter, r *http.Request, p *pprof.Profile, secStr string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (name handler) serveDeltaProfile(w http.ResponseWriter, r *http.Request, p *pprof.Profile, secStr string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#profileEntry",
              "documentation": {
                "identifier": "profileEntry",
                "newPage": false,
                "searchKey": "pprof.profileEntry",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type profileEntry struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype profileEntry struct {\n\tName  string\n\tHref  string\n\tDesc  string\n\tCount int\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/pprof#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/pprof#init.pprof.go",
              "documentation": {
                "identifier": "init.pprof.go",
                "newPage": false,
                "searchKey": "pprof.init",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Cmdline",
              "documentation": {
                "identifier": "Cmdline",
                "newPage": false,
                "searchKey": "pprof.Cmdline",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Cmdline(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Cmdline(w http.ResponseWriter, r *http.Request)\n```\n\nCmdline responds with the running program's command line, with arguments separated by NUL bytes. The package initialization registers it as /debug/pprof/cmdline. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#sleep",
              "documentation": {
                "identifier": "sleep",
                "newPage": false,
                "searchKey": "pprof.sleep",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sleep(r *http.Request, d time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sleep(r *http.Request, d time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#durationExceedsWriteTimeout",
              "documentation": {
                "identifier": "durationExceedsWriteTimeout",
                "newPage": false,
                "searchKey": "pprof.durationExceedsWriteTimeout",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func durationExceedsWriteTimeout(r *http.Request, seconds float64) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc durationExceedsWriteTimeout(r *http.Request, seconds float64) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#serveError",
              "documentation": {
                "identifier": "serveError",
                "newPage": false,
                "searchKey": "pprof.serveError",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func serveError(w http.ResponseWriter, status int, txt string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc serveError(w http.ResponseWriter, status int, txt string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Profile",
              "documentation": {
                "identifier": "Profile",
                "newPage": false,
                "searchKey": "pprof.Profile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Profile(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Profile(w http.ResponseWriter, r *http.Request)\n```\n\nProfile responds with the pprof-formatted cpu profile. Profiling lasts for duration specified in seconds GET parameter, or for 30 seconds if not specified. The package initialization registers it as /debug/pprof/profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Trace",
              "documentation": {
                "identifier": "Trace",
                "newPage": false,
                "searchKey": "pprof.Trace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Trace(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Trace(w http.ResponseWriter, r *http.Request)\n```\n\nTrace responds with the execution trace in binary form. Tracing lasts for duration specified in seconds GET parameter, or for 1 second if not specified. The package initialization registers it as /debug/pprof/trace. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Symbol",
              "documentation": {
                "identifier": "Symbol",
                "newPage": false,
                "searchKey": "pprof.Symbol",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Symbol(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Symbol(w http.ResponseWriter, r *http.Request)\n```\n\nSymbol looks up the program counters listed in the request, responding with a table mapping program counters to function names. The package initialization registers it as /debug/pprof/symbol. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Handler",
              "documentation": {
                "identifier": "Handler",
                "newPage": false,
                "searchKey": "pprof.Handler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Handler(name string) http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Handler(name string) http.Handler\n```\n\nHandler returns an HTTP handler that serves the named profile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#collectProfile",
              "documentation": {
                "identifier": "collectProfile",
                "newPage": false,
                "searchKey": "pprof.collectProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func collectProfile(p *pprof.Profile) (*profile.Profile, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc collectProfile(p *pprof.Profile) (*profile.Profile, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#Index",
              "documentation": {
                "identifier": "Index",
                "newPage": false,
                "searchKey": "pprof.Index",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Index(w http.ResponseWriter, r *http.Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Index(w http.ResponseWriter, r *http.Request)\n```\n\nIndex responds with the pprof-formatted profile named by the request. For example, \"/debug/pprof/heap\" serves the \"heap\" profile. Index responds to a request for \"/debug/pprof/\" with an HTML page listing the available profiles. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#indexTmplExecute",
              "documentation": {
                "identifier": "indexTmplExecute",
                "newPage": false,
                "searchKey": "pprof.indexTmplExecute",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func indexTmplExecute(w io.Writer, profiles []profileEntry) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc indexTmplExecute(w io.Writer, profiles []profileEntry) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#TestDescriptions",
              "documentation": {
                "identifier": "TestDescriptions",
                "newPage": false,
                "searchKey": "pprof.TestDescriptions",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDescriptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDescriptions(t *testing.T)\n```\n\nTestDescriptions checks that the profile names under runtime/pprof package have a key in the description map. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#TestHandlers",
              "documentation": {
                "identifier": "TestHandlers",
                "newPage": false,
                "searchKey": "pprof.TestHandlers",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#mutexHog1",
              "documentation": {
                "identifier": "mutexHog1",
                "newPage": false,
                "searchKey": "pprof.mutexHog1",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mutexHog1(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mutexHog1(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#mutexHog2",
              "documentation": {
                "identifier": "mutexHog2",
                "newPage": false,
                "searchKey": "pprof.mutexHog2",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mutexHog2(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mutexHog2(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration)\n```\n\nmutexHog2 is almost identical to mutexHog but we keep them separate in order to distinguish them with function names in the stack trace. We make them slightly different, using Sink, because otherwise gccgo -c opt will merge them. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#mutexHog",
              "documentation": {
                "identifier": "mutexHog",
                "newPage": false,
                "searchKey": "pprof.mutexHog",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mutexHog(duration time.Duration, hogger func(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mutexHog(duration time.Duration, hogger func(mu1, mu2 *sync.Mutex, start time.Time, dt time.Duration))\n```\n\nmutexHog starts multiple goroutines that runs the given hogger function for the specified duration. The hogger function will be given two mutexes to lock & unlock. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#TestDeltaProfile",
              "documentation": {
                "identifier": "TestDeltaProfile",
                "newPage": false,
                "searchKey": "pprof.TestDeltaProfile",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeltaProfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeltaProfile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#query",
              "documentation": {
                "identifier": "query",
                "newPage": false,
                "searchKey": "pprof.query",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func query(endpoint string) (*profile.Profile, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc query(endpoint string) (*profile.Profile, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/pprof#seen",
              "documentation": {
                "identifier": "seen",
                "newPage": false,
                "searchKey": "pprof.seen",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func seen(p *profile.Profile, fname string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc seen(p *profile.Profile, fname string) bool\n```\n\nseen returns true if the profile includes samples whose stacks include the specified function name (fname). \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
