{
  "pathID": "/net/http/internal",
  "documentation": {
    "identifier": "internal",
    "newPage": true,
    "searchKey": "net/http/internal",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package internal"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package internal contains HTTP internals shared by net/http and net/http/httputil. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/net/http/internal#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/internal#maxLineLength",
              "documentation": {
                "identifier": "maxLineLength",
                "newPage": false,
                "searchKey": "internal.maxLineLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxLineLength"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxLineLength = 4096 // assumed <= bufio.defaultBufSize\n\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/internal#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/internal#ErrLineTooLong",
              "documentation": {
                "identifier": "ErrLineTooLong",
                "newPage": false,
                "searchKey": "internal.ErrLineTooLong",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrLineTooLong"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrLineTooLong = errors.New(\"header line too long\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/internal#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/internal#chunkedReader",
              "documentation": {
                "identifier": "chunkedReader",
                "newPage": false,
                "searchKey": "internal.chunkedReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type chunkedReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype chunkedReader struct {\n\tr        *bufio.Reader\n\tn        uint64 // unread bytes in chunk\n\terr      error\n\tbuf      [2]byte\n\tcheckEnd bool // whether need to check for \\r\\n chunk footer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/internal#chunkedReader.beginChunk",
                    "documentation": {
                      "identifier": "chunkedReader.beginChunk",
                      "newPage": false,
                      "searchKey": "internal.chunkedReader.beginChunk",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cr *chunkedReader) beginChunk()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cr *chunkedReader) beginChunk()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/internal#chunkedReader.chunkHeaderAvailable",
                    "documentation": {
                      "identifier": "chunkedReader.chunkHeaderAvailable",
                      "newPage": false,
                      "searchKey": "internal.chunkedReader.chunkHeaderAvailable",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cr *chunkedReader) chunkHeaderAvailable() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cr *chunkedReader) chunkHeaderAvailable() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/internal#chunkedReader.Read",
                    "documentation": {
                      "identifier": "chunkedReader.Read",
                      "newPage": false,
                      "searchKey": "internal.chunkedReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cr *chunkedReader) Read(b []uint8) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cr *chunkedReader) Read(b []uint8) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#chunkedWriter",
              "documentation": {
                "identifier": "chunkedWriter",
                "newPage": false,
                "searchKey": "internal.chunkedWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type chunkedWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype chunkedWriter struct {\n\tWire io.Writer\n}\n```\n\nWriting to chunkedWriter translates to writing in HTTP chunked Transfer Encoding wire format to the underlying Wire chunkedWriter. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/internal#chunkedWriter.Write",
                    "documentation": {
                      "identifier": "chunkedWriter.Write",
                      "newPage": false,
                      "searchKey": "internal.chunkedWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cw *chunkedWriter) Write(data []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cw *chunkedWriter) Write(data []byte) (n int, err error)\n```\n\nWrite the contents of data as one chunk to Wire. NOTE: Note that the corresponding chunk-writing procedure in Conn.Write has a bug since it does not check for success of io.WriteString \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/internal#chunkedWriter.Close",
                    "documentation": {
                      "identifier": "chunkedWriter.Close",
                      "newPage": false,
                      "searchKey": "internal.chunkedWriter.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cw *chunkedWriter) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cw *chunkedWriter) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#FlushAfterChunkWriter",
              "documentation": {
                "identifier": "FlushAfterChunkWriter",
                "newPage": false,
                "searchKey": "internal.FlushAfterChunkWriter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type FlushAfterChunkWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype FlushAfterChunkWriter struct {\n\t*bufio.Writer\n}\n```\n\nFlushAfterChunkWriter signals from the caller of NewChunkedWriter that each chunk should be followed by a flush. It is used by the http.Transport code to keep the buffering behavior for headers and trailers, but flush out chunks aggressively in the middle for request bodies which may be generated slowly. See Issue 6574. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/internal#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/internal#NewChunkedReader",
              "documentation": {
                "identifier": "NewChunkedReader",
                "newPage": false,
                "searchKey": "internal.NewChunkedReader",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewChunkedReader(r io.Reader) io.Reader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewChunkedReader(r io.Reader) io.Reader\n```\n\nNewChunkedReader returns a new chunkedReader that translates the data read from r out of HTTP \"chunked\" format before returning it. The chunkedReader returns io.EOF when the final 0-length chunk is read. \n\nNewChunkedReader is not needed by normal applications. The http package automatically decodes chunking when reading response bodies. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#readChunkLine",
              "documentation": {
                "identifier": "readChunkLine",
                "newPage": false,
                "searchKey": "internal.readChunkLine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func readChunkLine(b *bufio.Reader) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc readChunkLine(b *bufio.Reader) ([]byte, error)\n```\n\nRead a line of bytes (up to \\n) from b. Give up if the line exceeds maxLineLength. The returned bytes are owned by the bufio.Reader so they are only valid until the next bufio read. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#trimTrailingWhitespace",
              "documentation": {
                "identifier": "trimTrailingWhitespace",
                "newPage": false,
                "searchKey": "internal.trimTrailingWhitespace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func trimTrailingWhitespace(b []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc trimTrailingWhitespace(b []byte) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#isASCIISpace",
              "documentation": {
                "identifier": "isASCIISpace",
                "newPage": false,
                "searchKey": "internal.isASCIISpace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isASCIISpace(b byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isASCIISpace(b byte) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#removeChunkExtension",
              "documentation": {
                "identifier": "removeChunkExtension",
                "newPage": false,
                "searchKey": "internal.removeChunkExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func removeChunkExtension(p []byte) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc removeChunkExtension(p []byte) ([]byte, error)\n```\n\nremoveChunkExtension removes any chunk-extension from p. For example, \n\n```\n\"0\" => \"0\"\n\"0;token\" => \"0\"\n\"0;token=val\" => \"0\"\n`0;token=\"quoted string\"` => \"0\"\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#NewChunkedWriter",
              "documentation": {
                "identifier": "NewChunkedWriter",
                "newPage": false,
                "searchKey": "internal.NewChunkedWriter",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewChunkedWriter(w io.Writer) io.WriteCloser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewChunkedWriter(w io.Writer) io.WriteCloser\n```\n\nNewChunkedWriter returns a new chunkedWriter that translates writes into HTTP \"chunked\" format before writing them to w. Closing the returned chunkedWriter sends the final 0-length chunk that marks the end of the stream but does not send the final CRLF that appears after trailers; trailers and the last CRLF must be written separately. \n\nNewChunkedWriter is not needed by normal applications. The http package adds chunking automatically if handlers don't set a Content-Length header. Using newChunkedWriter inside a handler would result in double chunking or chunking with a Content-Length length, both of which are wrong. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#parseHexUint",
              "documentation": {
                "identifier": "parseHexUint",
                "newPage": false,
                "searchKey": "internal.parseHexUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseHexUint(v []byte) (n uint64, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseHexUint(v []byte) (n uint64, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#TestChunk",
              "documentation": {
                "identifier": "TestChunk",
                "newPage": false,
                "searchKey": "internal.TestChunk",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunk(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunk(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#TestChunkReadMultiple",
              "documentation": {
                "identifier": "TestChunkReadMultiple",
                "newPage": false,
                "searchKey": "internal.TestChunkReadMultiple",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkReadMultiple(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkReadMultiple(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#TestChunkReaderAllocs",
              "documentation": {
                "identifier": "TestChunkReaderAllocs",
                "newPage": false,
                "searchKey": "internal.TestChunkReaderAllocs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkReaderAllocs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkReaderAllocs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#TestParseHexUint",
              "documentation": {
                "identifier": "TestParseHexUint",
                "newPage": false,
                "searchKey": "internal.TestParseHexUint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseHexUint(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseHexUint(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#TestChunkReadingIgnoresExtensions",
              "documentation": {
                "identifier": "TestChunkReadingIgnoresExtensions",
                "newPage": false,
                "searchKey": "internal.TestChunkReadingIgnoresExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkReadingIgnoresExtensions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkReadingIgnoresExtensions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/internal#TestChunkReadPartial",
              "documentation": {
                "identifier": "TestChunkReadPartial",
                "newPage": false,
                "searchKey": "internal.TestChunkReadPartial",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkReadPartial(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkReadPartial(t *testing.T)\n```\n\nIssue 17355: ChunkedReader shouldn't block waiting for more data if it can return something. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/net/http/internal/ascii"
    },
    {
      "pathID": "/net/http/internal/testcert"
    }
  ]
}
