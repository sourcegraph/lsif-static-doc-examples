{
  "pathID": "/net/http/httputil",
  "documentation": {
    "identifier": "httputil",
    "newPage": true,
    "searchKey": "net/http/httputil",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package httputil"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package httputil provides HTTP utility functions, complementing the more common ones in the net/http package. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/net/http/httputil#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/httputil#fakeHopHeader",
              "documentation": {
                "identifier": "fakeHopHeader",
                "newPage": false,
                "searchKey": "httputil.fakeHopHeader",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const fakeHopHeader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fakeHopHeader = \"X-Fake-Hop-Header-For-Test\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/httputil#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/httputil#ErrClosed",
              "documentation": {
                "identifier": "ErrClosed",
                "newPage": false,
                "searchKey": "httputil.ErrClosed",
                "tags": [
                  "variable",
                  "struct",
                  "deprecated"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrClosed = &http.ProtocolError{ErrorString: \"connection closed by user\"}\n```\n\nDeprecated: No longer used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#ErrLineTooLong",
              "documentation": {
                "identifier": "ErrLineTooLong",
                "newPage": false,
                "searchKey": "httputil.ErrLineTooLong",
                "tags": [
                  "variable",
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrLineTooLong"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrLineTooLong = internal.ErrLineTooLong\n```\n\nErrLineTooLong is returned when reading malformed chunked data with lines that are too long. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#ErrPersistEOF",
              "documentation": {
                "identifier": "ErrPersistEOF",
                "newPage": false,
                "searchKey": "httputil.ErrPersistEOF",
                "tags": [
                  "variable",
                  "struct",
                  "deprecated"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrPersistEOF"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrPersistEOF = &http.ProtocolError{ErrorString: \"persistent connection closed\"}\n```\n\nDeprecated: No longer used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#ErrPipeline",
              "documentation": {
                "identifier": "ErrPipeline",
                "newPage": false,
                "searchKey": "httputil.ErrPipeline",
                "tags": [
                  "variable",
                  "struct",
                  "deprecated"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrPipeline"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrPipeline = &http.ProtocolError{ErrorString: \"pipeline error\"}\n```\n\nDeprecated: No longer used. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#dumpResTests",
              "documentation": {
                "identifier": "dumpResTests",
                "newPage": false,
                "searchKey": "httputil.dumpResTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dumpResTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dumpResTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#dumpTests",
              "documentation": {
                "identifier": "dumpTests",
                "newPage": false,
                "searchKey": "httputil.dumpTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var dumpTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dumpTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#emptyBody",
              "documentation": {
                "identifier": "emptyBody",
                "newPage": false,
                "searchKey": "httputil.emptyBody",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var emptyBody"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar emptyBody = io.NopCloser(strings.NewReader(\"\"))\n```\n\nemptyBody is an instance of empty reader. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#errClosed",
              "documentation": {
                "identifier": "errClosed",
                "newPage": false,
                "searchKey": "httputil.errClosed",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errClosed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errClosed = errors.New(\"i/o operation on closed connection\")\n```\n\nThis is an API usage error - the local side is closed. ErrPersistEOF (above) reports that the remote side is closed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#errNoBody",
              "documentation": {
                "identifier": "errNoBody",
                "newPage": false,
                "searchKey": "httputil.errNoBody",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNoBody"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNoBody = errors.New(\"sentinel error value\")\n```\n\nerrNoBody is a sentinel error value used by failureToReadBody so we can detect that the lack of body was intentional. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#hopHeaders",
              "documentation": {
                "identifier": "hopHeaders",
                "newPage": false,
                "searchKey": "httputil.hopHeaders",
                "tags": [
                  "variable",
                  "array",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var hopHeaders"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hopHeaders = ...\n```\n\nHop-by-hop headers. These are removed when sent to the backend. As of RFC 7230, hop-by-hop headers are required to appear in the Connection header field. These are the headers defined by the obsoleted RFC 2616 (section 13.5.1) and are used for backward compatibility. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#inOurTests",
              "documentation": {
                "identifier": "inOurTests",
                "newPage": false,
                "searchKey": "httputil.inOurTests",
                "tags": [
                  "variable",
                  "boolean",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var inOurTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar inOurTests bool // whether we're in our own tests\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#proxyQueryTests",
              "documentation": {
                "identifier": "proxyQueryTests",
                "newPage": false,
                "searchKey": "httputil.proxyQueryTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var proxyQueryTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar proxyQueryTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#reqWriteExcludeHeaderDump",
              "documentation": {
                "identifier": "reqWriteExcludeHeaderDump",
                "newPage": false,
                "searchKey": "httputil.reqWriteExcludeHeaderDump",
                "tags": [
                  "variable",
                  "object",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var reqWriteExcludeHeaderDump"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar reqWriteExcludeHeaderDump = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/httputil#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/httputil#BufferPool",
              "documentation": {
                "identifier": "BufferPool",
                "newPage": false,
                "searchKey": "httputil.BufferPool",
                "tags": [
                  "interface"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type BufferPool interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype BufferPool interface {\n\tGet() []byte\n\tPut([]byte)\n}\n```\n\nA BufferPool is an interface for getting and returning temporary byte slices for use by io.CopyBuffer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#ClientConn",
              "documentation": {
                "identifier": "ClientConn",
                "newPage": false,
                "searchKey": "httputil.ClientConn",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ClientConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ClientConn struct {\n\tmu              sync.Mutex // read-write protects the following fields\n\tc               net.Conn\n\tr               *bufio.Reader\n\tre, we          error // read/write errors\n\tlastbody        io.ReadCloser\n\tnread, nwritten int\n\tpipereq         map[*http.Request]uint\n\n\tpipe     textproto.Pipeline\n\twriteReq func(*http.Request, io.Writer) error\n}\n```\n\nClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. \n\nDeprecated: Use Client or Transport in package net/http instead. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#NewClientConn",
                    "documentation": {
                      "identifier": "NewClientConn",
                      "newPage": false,
                      "searchKey": "httputil.NewClientConn",
                      "tags": [
                        "function",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewClientConn(c net.Conn, r *bufio.Reader) *ClientConn\n```\n\nNewClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. \n\nDeprecated: Use the Client or Transport in package net/http instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#NewProxyClientConn",
                    "documentation": {
                      "identifier": "NewProxyClientConn",
                      "newPage": false,
                      "searchKey": "httputil.NewProxyClientConn",
                      "tags": [
                        "function",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewProxyClientConn(c net.Conn, r *bufio.Reader) *ClientConn\n```\n\nNewProxyClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. \n\nDeprecated: Use the Client or Transport in package net/http instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ClientConn.Close",
                    "documentation": {
                      "identifier": "ClientConn.Close",
                      "newPage": false,
                      "searchKey": "httputil.ClientConn.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *ClientConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *ClientConn) Close() error\n```\n\nClose calls Hijack and then also closes the underlying connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ClientConn.Do",
                    "documentation": {
                      "identifier": "ClientConn.Do",
                      "newPage": false,
                      "searchKey": "httputil.ClientConn.Do",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *ClientConn) Do(req *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *ClientConn) Do(req *http.Request) (*http.Response, error)\n```\n\nDo is convenience method that writes a request and reads a response. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ClientConn.Hijack",
                    "documentation": {
                      "identifier": "ClientConn.Hijack",
                      "newPage": false,
                      "searchKey": "httputil.ClientConn.Hijack",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *ClientConn) Hijack() (c net.Conn, r *bufio.Reader)\n```\n\nHijack detaches the ClientConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before the user or Read have signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ClientConn.Pending",
                    "documentation": {
                      "identifier": "ClientConn.Pending",
                      "newPage": false,
                      "searchKey": "httputil.ClientConn.Pending",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *ClientConn) Pending() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *ClientConn) Pending() int\n```\n\nPending returns the number of unanswered requests that have been sent on the connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ClientConn.Read",
                    "documentation": {
                      "identifier": "ClientConn.Read",
                      "newPage": false,
                      "searchKey": "httputil.ClientConn.Read",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *ClientConn) Read(req *http.Request) (resp *http.Response, err error)\n```\n\nRead reads the next response from the wire. A valid response might be returned together with an ErrPersistEOF, which means that the remote requested that this be the last request serviced. Read can be called concurrently with Write, but not with another Read. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ClientConn.Write",
                    "documentation": {
                      "identifier": "ClientConn.Write",
                      "newPage": false,
                      "searchKey": "httputil.ClientConn.Write",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *ClientConn) Write(req *http.Request) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *ClientConn) Write(req *http.Request) error\n```\n\nWrite writes a request. An ErrPersistEOF error is returned if the connection has been closed in an HTTP keep-alive sense. If req.Close equals true, the keep-alive connection is logically closed after this request and the opposing server is informed. An ErrUnexpectedEOF indicates the remote closed the underlying TCP connection, which is usually considered as graceful close. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#ReverseProxy",
              "documentation": {
                "identifier": "ReverseProxy",
                "newPage": false,
                "searchKey": "httputil.ReverseProxy",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ReverseProxy struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ReverseProxy struct {\n\t// Director must be a function which modifies\n\t// the request into a new request to be sent\n\t// using Transport. Its response is then copied\n\t// back to the original client unmodified.\n\t// Director must not access the provided Request\n\t// after returning.\n\tDirector func(*http.Request)\n\n\t// The transport used to perform proxy requests.\n\t// If nil, http.DefaultTransport is used.\n\tTransport http.RoundTripper\n\n\t// FlushInterval specifies the flush interval\n\t// to flush to the client while copying the\n\t// response body.\n\t// If zero, no periodic flushing is done.\n\t// A negative value means to flush immediately\n\t// after each write to the client.\n\t// The FlushInterval is ignored when ReverseProxy\n\t// recognizes a response as a streaming response, or\n\t// if its ContentLength is -1; for such responses, writes\n\t// are flushed to the client immediately.\n\tFlushInterval time.Duration\n\n\t// ErrorLog specifies an optional logger for errors\n\t// that occur when attempting to proxy the request.\n\t// If nil, logging is done via the log package's standard logger.\n\tErrorLog *log.Logger\n\n\t// BufferPool optionally specifies a buffer pool to\n\t// get byte slices for use by io.CopyBuffer when\n\t// copying HTTP response bodies.\n\tBufferPool BufferPool\n\n\t// ModifyResponse is an optional function that modifies the\n\t// Response from the backend. It is called if the backend\n\t// returns a response at all, with any HTTP status code.\n\t// If the backend is unreachable, the optional ErrorHandler is\n\t// called without any call to ModifyResponse.\n\t//\n\t// If ModifyResponse returns an error, ErrorHandler is called\n\t// with its error value. If ErrorHandler is nil, its default\n\t// implementation is used.\n\tModifyResponse func(*http.Response) error\n\n\t// ErrorHandler is an optional function that handles errors\n\t// reaching the backend or errors from ModifyResponse.\n\t//\n\t// If nil, the default is to log the provided error and return\n\t// a 502 Status Bad Gateway response.\n\tErrorHandler func(http.ResponseWriter, *http.Request, error)\n}\n```\n\nReverseProxy is an HTTP Handler that takes an incoming request and sends it to another server, proxying the response back to the client. \n\nReverseProxy by default sets the client IP as the value of the X-Forwarded-For header. \n\nIf an X-Forwarded-For header already exists, the client IP is appended to the existing values. As a special case, if the header exists in the Request.Header map but has a nil value (such as when set by the Director func), the X-Forwarded-For header is not modified. \n\nTo prevent IP spoofing, be sure to delete any pre-existing X-Forwarded-For header coming from the client or an untrusted proxy. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#NewSingleHostReverseProxy",
                    "documentation": {
                      "identifier": "NewSingleHostReverseProxy",
                      "newPage": false,
                      "searchKey": "httputil.NewSingleHostReverseProxy",
                      "tags": [
                        "function"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSingleHostReverseProxy(target *url.URL) *ReverseProxy"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSingleHostReverseProxy(target *url.URL) *ReverseProxy\n```\n\nNewSingleHostReverseProxy returns a new ReverseProxy that routes URLs to the scheme, host, and base path provided in target. If the target's path is \"/base\" and the incoming request was for \"/dir\", the target request will be for /base/dir. NewSingleHostReverseProxy does not rewrite the Host header. To rewrite Host headers, use ReverseProxy directly with a custom Director policy. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.ServeHTTP",
                    "documentation": {
                      "identifier": "ReverseProxy.ServeHTTP",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.ServeHTTP",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) ServeHTTP(rw http.ResponseWriter, req *http.Request)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.copyBuffer",
                    "documentation": {
                      "identifier": "ReverseProxy.copyBuffer",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.copyBuffer",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) copyBuffer(dst io.Writer, src io.Reader, buf []byte) (int64, error)\n```\n\ncopyBuffer returns any write errors or non-EOF read errors, and the amount of bytes written. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.copyResponse",
                    "documentation": {
                      "identifier": "ReverseProxy.copyResponse",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.copyResponse",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) copyResponse(dst io.Writer, src io.Reader, flushInterval time.Duration) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) copyResponse(dst io.Writer, src io.Reader, flushInterval time.Duration) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.defaultErrorHandler",
                    "documentation": {
                      "identifier": "ReverseProxy.defaultErrorHandler",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.defaultErrorHandler",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) defaultErrorHandler(rw http.ResponseWriter, req *http.Request, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) defaultErrorHandler(rw http.ResponseWriter, req *http.Request, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.flushInterval",
                    "documentation": {
                      "identifier": "ReverseProxy.flushInterval",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.flushInterval",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) flushInterval(res *http.Response) time.Duration"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) flushInterval(res *http.Response) time.Duration\n```\n\nflushInterval returns the p.FlushInterval value, conditionally overriding its value for a specific request/response. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.getErrorHandler",
                    "documentation": {
                      "identifier": "ReverseProxy.getErrorHandler",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.getErrorHandler",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) getErrorHandler() func(http.ResponseWriter, *http.Request, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) getErrorHandler() func(http.ResponseWriter, *http.Request, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.handleUpgradeResponse",
                    "documentation": {
                      "identifier": "ReverseProxy.handleUpgradeResponse",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.handleUpgradeResponse",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) handleUpgradeResponse(rw http.ResponseWriter, req *http.Request, res *http.Response)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) handleUpgradeResponse(rw http.ResponseWriter, req *http.Request, res *http.Response)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.logf",
                    "documentation": {
                      "identifier": "ReverseProxy.logf",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.logf",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) logf(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) logf(format string, args ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ReverseProxy.modifyResponse",
                    "documentation": {
                      "identifier": "ReverseProxy.modifyResponse",
                      "newPage": false,
                      "searchKey": "httputil.ReverseProxy.modifyResponse",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *ReverseProxy) modifyResponse(rw http.ResponseWriter, res *http.Response, req *http.Request) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *ReverseProxy) modifyResponse(rw http.ResponseWriter, res *http.Response, req *http.Request) bool\n```\n\nmodifyResponse conditionally runs the optional ModifyResponse hook and reports whether the request should proceed. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#RoundTripperFunc",
              "documentation": {
                "identifier": "RoundTripperFunc",
                "newPage": false,
                "searchKey": "httputil.RoundTripperFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RoundTripperFunc func(*net/http.Request) (*net/http.Response, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RoundTripperFunc func(*http.Request) (*http.Response, error)\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#RoundTripperFunc.RoundTrip",
                    "documentation": {
                      "identifier": "RoundTripperFunc.RoundTrip",
                      "newPage": false,
                      "searchKey": "httputil.RoundTripperFunc.RoundTrip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fn RoundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fn RoundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#ServerConn",
              "documentation": {
                "identifier": "ServerConn",
                "newPage": false,
                "searchKey": "httputil.ServerConn",
                "tags": [
                  "struct"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ServerConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ServerConn struct {\n\tmu              sync.Mutex // read-write protects the following fields\n\tc               net.Conn\n\tr               *bufio.Reader\n\tre, we          error // read/write errors\n\tlastbody        io.ReadCloser\n\tnread, nwritten int\n\tpipereq         map[*http.Request]uint\n\n\tpipe textproto.Pipeline\n}\n```\n\nServerConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. \n\nDeprecated: Use the Server in package net/http instead. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#NewServerConn",
                    "documentation": {
                      "identifier": "NewServerConn",
                      "newPage": false,
                      "searchKey": "httputil.NewServerConn",
                      "tags": [
                        "function",
                        "deprecated"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewServerConn(c net.Conn, r *bufio.Reader) *ServerConn\n```\n\nNewServerConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1. \n\nDeprecated: Use the Server in package net/http instead. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ServerConn.Close",
                    "documentation": {
                      "identifier": "ServerConn.Close",
                      "newPage": false,
                      "searchKey": "httputil.ServerConn.Close",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *ServerConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *ServerConn) Close() error\n```\n\nClose calls Hijack and then also closes the underlying connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ServerConn.Hijack",
                    "documentation": {
                      "identifier": "ServerConn.Hijack",
                      "newPage": false,
                      "searchKey": "httputil.ServerConn.Hijack",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *ServerConn) Hijack() (net.Conn, *bufio.Reader)\n```\n\nHijack detaches the ServerConn and returns the underlying connection as well as the read-side bufio which may have some left over data. Hijack may be called before Read has signaled the end of the keep-alive logic. The user should not call Hijack while Read or Write is in progress. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ServerConn.Pending",
                    "documentation": {
                      "identifier": "ServerConn.Pending",
                      "newPage": false,
                      "searchKey": "httputil.ServerConn.Pending",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *ServerConn) Pending() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *ServerConn) Pending() int\n```\n\nPending returns the number of unanswered requests that have been received on the connection. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ServerConn.Read",
                    "documentation": {
                      "identifier": "ServerConn.Read",
                      "newPage": false,
                      "searchKey": "httputil.ServerConn.Read",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *ServerConn) Read() (*http.Request, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *ServerConn) Read() (*http.Request, error)\n```\n\nRead returns the next request on the wire. An ErrPersistEOF is returned if it is gracefully determined that there are no more requests (e.g. after the first request on an HTTP/1.0 connection, or after a Connection:close on a HTTP/1.1 connection). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#ServerConn.Write",
                    "documentation": {
                      "identifier": "ServerConn.Write",
                      "newPage": false,
                      "searchKey": "httputil.ServerConn.Write",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sc *ServerConn) Write(req *http.Request, resp *http.Response) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sc *ServerConn) Write(req *http.Request, resp *http.Response) error\n```\n\nWrite writes resp in response to req. To close the connection gracefully, set the Response.Close field to true. Write should be considered operational until it returns an error, regardless of any errors returned on the Read side. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#bufferPool",
              "documentation": {
                "identifier": "bufferPool",
                "newPage": false,
                "searchKey": "httputil.bufferPool",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type bufferPool struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bufferPool struct {\n\tget func() []byte\n\tput func([]byte)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#bufferPool.Get",
                    "documentation": {
                      "identifier": "bufferPool.Get",
                      "newPage": false,
                      "searchKey": "httputil.bufferPool.Get",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bp bufferPool) Get() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bp bufferPool) Get() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#bufferPool.Put",
                    "documentation": {
                      "identifier": "bufferPool.Put",
                      "newPage": false,
                      "searchKey": "httputil.bufferPool.Put",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bp bufferPool) Put(v []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bp bufferPool) Put(v []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#checkCloser",
              "documentation": {
                "identifier": "checkCloser",
                "newPage": false,
                "searchKey": "httputil.checkCloser",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type checkCloser struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype checkCloser struct {\n\tclosed bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#checkCloser.Close",
                    "documentation": {
                      "identifier": "checkCloser.Close",
                      "newPage": false,
                      "searchKey": "httputil.checkCloser.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *checkCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *checkCloser) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#checkCloser.Read",
                    "documentation": {
                      "identifier": "checkCloser.Read",
                      "newPage": false,
                      "searchKey": "httputil.checkCloser.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *checkCloser) Read(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *checkCloser) Read(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#delegateReader",
              "documentation": {
                "identifier": "delegateReader",
                "newPage": false,
                "searchKey": "httputil.delegateReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type delegateReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype delegateReader struct {\n\tc   chan io.Reader\n\terr error     // only used if r is nil and c is closed.\n\tr   io.Reader // nil until received from c\n}\n```\n\ndelegateReader is a reader that delegates to another reader, once it arrives on a channel. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#delegateReader.Read",
                    "documentation": {
                      "identifier": "delegateReader.Read",
                      "newPage": false,
                      "searchKey": "httputil.delegateReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *delegateReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *delegateReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#dumpConn",
              "documentation": {
                "identifier": "dumpConn",
                "newPage": false,
                "searchKey": "httputil.dumpConn",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dumpConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dumpConn struct {\n\tio.Writer\n\tio.Reader\n}\n```\n\ndumpConn is a net.Conn which writes to Writer and reads from Reader \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#dumpConn.Close",
                    "documentation": {
                      "identifier": "dumpConn.Close",
                      "newPage": false,
                      "searchKey": "httputil.dumpConn.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#dumpConn.LocalAddr",
                    "documentation": {
                      "identifier": "dumpConn.LocalAddr",
                      "newPage": false,
                      "searchKey": "httputil.dumpConn.LocalAddr",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) LocalAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) LocalAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#dumpConn.RemoteAddr",
                    "documentation": {
                      "identifier": "dumpConn.RemoteAddr",
                      "newPage": false,
                      "searchKey": "httputil.dumpConn.RemoteAddr",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) RemoteAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) RemoteAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#dumpConn.SetDeadline",
                    "documentation": {
                      "identifier": "dumpConn.SetDeadline",
                      "newPage": false,
                      "searchKey": "httputil.dumpConn.SetDeadline",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) SetDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) SetDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#dumpConn.SetReadDeadline",
                    "documentation": {
                      "identifier": "dumpConn.SetReadDeadline",
                      "newPage": false,
                      "searchKey": "httputil.dumpConn.SetReadDeadline",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) SetReadDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) SetReadDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#dumpConn.SetWriteDeadline",
                    "documentation": {
                      "identifier": "dumpConn.SetWriteDeadline",
                      "newPage": false,
                      "searchKey": "httputil.dumpConn.SetWriteDeadline",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) SetWriteDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) SetWriteDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#dumpTest",
              "documentation": {
                "identifier": "dumpTest",
                "newPage": false,
                "searchKey": "httputil.dumpTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type dumpTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dumpTest struct {\n\t// Either Req or GetReq can be set/nil but not both.\n\tReq    *http.Request\n\tGetReq func() *http.Request\n\n\tBody interface{} // optional []byte or func() io.ReadCloser to populate Req.Body\n\n\tWantDump    string\n\tWantDumpOut string\n\tMustError   bool // if true, the test is expected to throw an error\n\tNoBody      bool // if true, set DumpRequest{,Out} body to false\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#eofReader",
              "documentation": {
                "identifier": "eofReader",
                "newPage": false,
                "searchKey": "httputil.eofReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type eofReader struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eofReader struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#eofReader.Close",
                    "documentation": {
                      "identifier": "eofReader.Close",
                      "newPage": false,
                      "searchKey": "httputil.eofReader.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n eofReader) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n eofReader) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#eofReader.Read",
                    "documentation": {
                      "identifier": "eofReader.Read",
                      "newPage": false,
                      "searchKey": "httputil.eofReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (n eofReader) Read([]byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (n eofReader) Read([]byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#failingRoundTripper",
              "documentation": {
                "identifier": "failingRoundTripper",
                "newPage": false,
                "searchKey": "httputil.failingRoundTripper",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type failingRoundTripper struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype failingRoundTripper struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#failingRoundTripper.RoundTrip",
                    "documentation": {
                      "identifier": "failingRoundTripper.RoundTrip",
                      "newPage": false,
                      "searchKey": "httputil.failingRoundTripper.RoundTrip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (failingRoundTripper) RoundTrip(*http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (failingRoundTripper) RoundTrip(*http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#failureToReadBody",
              "documentation": {
                "identifier": "failureToReadBody",
                "newPage": false,
                "searchKey": "httputil.failureToReadBody",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type failureToReadBody struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype failureToReadBody struct{}\n```\n\nfailureToReadBody is a io.ReadCloser that just returns errNoBody on Read. It's swapped in when we don't actually want to consume the body, but need a non-nil one, and want to distinguish the error from reading the dummy body. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#failureToReadBody.Close",
                    "documentation": {
                      "identifier": "failureToReadBody.Close",
                      "newPage": false,
                      "searchKey": "httputil.failureToReadBody.Close",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (failureToReadBody) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (failureToReadBody) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#failureToReadBody.Read",
                    "documentation": {
                      "identifier": "failureToReadBody.Read",
                      "newPage": false,
                      "searchKey": "httputil.failureToReadBody.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (failureToReadBody) Read([]byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (failureToReadBody) Read([]byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#maxLatencyWriter",
              "documentation": {
                "identifier": "maxLatencyWriter",
                "newPage": false,
                "searchKey": "httputil.maxLatencyWriter",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type maxLatencyWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype maxLatencyWriter struct {\n\tdst     writeFlusher\n\tlatency time.Duration // non-zero; negative means to flush immediately\n\n\tmu           sync.Mutex // protects t, flushPending, and dst.Flush\n\tt            *time.Timer\n\tflushPending bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#maxLatencyWriter.Write",
                    "documentation": {
                      "identifier": "maxLatencyWriter.Write",
                      "newPage": false,
                      "searchKey": "httputil.maxLatencyWriter.Write",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *maxLatencyWriter) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *maxLatencyWriter) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#maxLatencyWriter.delayedFlush",
                    "documentation": {
                      "identifier": "maxLatencyWriter.delayedFlush",
                      "newPage": false,
                      "searchKey": "httputil.maxLatencyWriter.delayedFlush",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *maxLatencyWriter) delayedFlush()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *maxLatencyWriter) delayedFlush()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#maxLatencyWriter.stop",
                    "documentation": {
                      "identifier": "maxLatencyWriter.stop",
                      "newPage": false,
                      "searchKey": "httputil.maxLatencyWriter.stop",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (m *maxLatencyWriter) stop()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (m *maxLatencyWriter) stop()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#neverEnding",
              "documentation": {
                "identifier": "neverEnding",
                "newPage": false,
                "searchKey": "httputil.neverEnding",
                "tags": [
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type neverEnding byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype neverEnding byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#neverEnding.Read",
                    "documentation": {
                      "identifier": "neverEnding.Read",
                      "newPage": false,
                      "searchKey": "httputil.neverEnding.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b neverEnding) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b neverEnding) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#roundTripperFunc",
              "documentation": {
                "identifier": "roundTripperFunc",
                "newPage": false,
                "searchKey": "httputil.roundTripperFunc",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type roundTripperFunc func(req *net/http.Request) (*net/http.Response, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype roundTripperFunc func(req *http.Request) (*http.Response, error)\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#roundTripperFunc.RoundTrip",
                    "documentation": {
                      "identifier": "roundTripperFunc.RoundTrip",
                      "newPage": false,
                      "searchKey": "httputil.roundTripperFunc.RoundTrip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fn roundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fn roundTripperFunc) RoundTrip(req *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#staticResponseRoundTripper",
              "documentation": {
                "identifier": "staticResponseRoundTripper",
                "newPage": false,
                "searchKey": "httputil.staticResponseRoundTripper",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type staticResponseRoundTripper struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype staticResponseRoundTripper struct{ res *http.Response }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#staticResponseRoundTripper.RoundTrip",
                    "documentation": {
                      "identifier": "staticResponseRoundTripper.RoundTrip",
                      "newPage": false,
                      "searchKey": "httputil.staticResponseRoundTripper.RoundTrip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rt staticResponseRoundTripper) RoundTrip(*http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rt staticResponseRoundTripper) RoundTrip(*http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#staticTransport",
              "documentation": {
                "identifier": "staticTransport",
                "newPage": false,
                "searchKey": "httputil.staticTransport",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type staticTransport struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype staticTransport struct {\n\tres *http.Response\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#staticTransport.RoundTrip",
                    "documentation": {
                      "identifier": "staticTransport.RoundTrip",
                      "newPage": false,
                      "searchKey": "httputil.staticTransport.RoundTrip",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *staticTransport) RoundTrip(r *http.Request) (*http.Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *staticTransport) RoundTrip(r *http.Request) (*http.Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#switchProtocolCopier",
              "documentation": {
                "identifier": "switchProtocolCopier",
                "newPage": false,
                "searchKey": "httputil.switchProtocolCopier",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type switchProtocolCopier struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype switchProtocolCopier struct {\n\tuser, backend io.ReadWriter\n}\n```\n\nswitchProtocolCopier exists so goroutines proxying data back and forth have nice names in stacks. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http/httputil#switchProtocolCopier.copyFromBackend",
                    "documentation": {
                      "identifier": "switchProtocolCopier.copyFromBackend",
                      "newPage": false,
                      "searchKey": "httputil.switchProtocolCopier.copyFromBackend",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c switchProtocolCopier) copyFromBackend(errc chan<- error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c switchProtocolCopier) copyFromBackend(errc chan<- error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http/httputil#switchProtocolCopier.copyToBackend",
                    "documentation": {
                      "identifier": "switchProtocolCopier.copyToBackend",
                      "newPage": false,
                      "searchKey": "httputil.switchProtocolCopier.copyToBackend",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c switchProtocolCopier) copyToBackend(errc chan<- error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c switchProtocolCopier) copyToBackend(errc chan<- error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#writeFlusher",
              "documentation": {
                "identifier": "writeFlusher",
                "newPage": false,
                "searchKey": "httputil.writeFlusher",
                "tags": [
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type writeFlusher interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype writeFlusher interface {\n\tio.Writer\n\thttp.Flusher\n}\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http/httputil#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http/httputil#BenchmarkServeHTTP",
              "documentation": {
                "identifier": "BenchmarkServeHTTP",
                "newPage": false,
                "searchKey": "httputil.BenchmarkServeHTTP",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServeHTTP(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServeHTTP(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#DumpRequest",
              "documentation": {
                "identifier": "DumpRequest",
                "newPage": false,
                "searchKey": "httputil.DumpRequest",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DumpRequest(req *http.Request, body bool) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DumpRequest(req *http.Request, body bool) ([]byte, error)\n```\n\nDumpRequest returns the given request in its HTTP/1.x wire representation. It should only be used by servers to debug client requests. The returned representation is an approximation only; some details of the initial request are lost while parsing it into an http.Request. In particular, the order and case of header field names are lost. The order of values in multi-valued headers is kept intact. HTTP/2 requests are dumped in HTTP/1.x form, not in their original binary representations. \n\nIf body is true, DumpRequest also returns the body. To do so, it consumes req.Body and then replaces it with a new io.ReadCloser that yields the same bytes. If DumpRequest returns an error, the state of req is undefined. \n\nThe documentation for http.Request.Write details which fields of req are included in the dump. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#DumpRequestOut",
              "documentation": {
                "identifier": "DumpRequestOut",
                "newPage": false,
                "searchKey": "httputil.DumpRequestOut",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DumpRequestOut(req *http.Request, body bool) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DumpRequestOut(req *http.Request, body bool) ([]byte, error)\n```\n\nDumpRequestOut is like DumpRequest but for outgoing client requests. It includes any headers that the standard http.Transport adds, such as User-Agent. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#DumpResponse",
              "documentation": {
                "identifier": "DumpResponse",
                "newPage": false,
                "searchKey": "httputil.DumpResponse",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DumpResponse(resp *http.Response, body bool) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DumpResponse(resp *http.Response, body bool) ([]byte, error)\n```\n\nDumpResponse is like DumpRequest but dumps a response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#NewChunkedReader",
              "documentation": {
                "identifier": "NewChunkedReader",
                "newPage": false,
                "searchKey": "httputil.NewChunkedReader",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewChunkedReader(r io.Reader) io.Reader"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewChunkedReader(r io.Reader) io.Reader\n```\n\nNewChunkedReader returns a new chunkedReader that translates the data read from r out of HTTP \"chunked\" format before returning it. The chunkedReader returns io.EOF when the final 0-length chunk is read. \n\nNewChunkedReader is not needed by normal applications. The http package automatically decodes chunking when reading response bodies. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#NewChunkedWriter",
              "documentation": {
                "identifier": "NewChunkedWriter",
                "newPage": false,
                "searchKey": "httputil.NewChunkedWriter",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewChunkedWriter(w io.Writer) io.WriteCloser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewChunkedWriter(w io.Writer) io.WriteCloser\n```\n\nNewChunkedWriter returns a new chunkedWriter that translates writes into HTTP \"chunked\" format before writing them to w. Closing the returned chunkedWriter sends the final 0-length chunk that marks the end of the stream but does not send the final CRLF that appears after trailers; trailers and the last CRLF must be written separately. \n\nNewChunkedWriter is not needed by normal applications. The http package adds chunking automatically if handlers don't set a Content-Length header. Using NewChunkedWriter inside a handler would result in double chunking or chunking with a Content-Length length, both of which are wrong. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestClonesRequestHeaders",
              "documentation": {
                "identifier": "TestClonesRequestHeaders",
                "newPage": false,
                "searchKey": "httputil.TestClonesRequestHeaders",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClonesRequestHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClonesRequestHeaders(t *testing.T)\n```\n\nIssue 18327: verify we always do a deep copy of the Request.Header map before any mutations. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestDumpRequest",
              "documentation": {
                "identifier": "TestDumpRequest",
                "newPage": false,
                "searchKey": "httputil.TestDumpRequest",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDumpRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDumpRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestDumpRequestOutIssue38352",
              "documentation": {
                "identifier": "TestDumpRequestOutIssue38352",
                "newPage": false,
                "searchKey": "httputil.TestDumpRequestOutIssue38352",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDumpRequestOutIssue38352(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDumpRequestOutIssue38352(t *testing.T)\n```\n\nIssue 38352: Check for deadlock on canceled requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestDumpResponse",
              "documentation": {
                "identifier": "TestDumpResponse",
                "newPage": false,
                "searchKey": "httputil.TestDumpResponse",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDumpResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDumpResponse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestJoinURLPath",
              "documentation": {
                "identifier": "TestJoinURLPath",
                "newPage": false,
                "searchKey": "httputil.TestJoinURLPath",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestJoinURLPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestJoinURLPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestModifyResponseClosesBody",
              "documentation": {
                "identifier": "TestModifyResponseClosesBody",
                "newPage": false,
                "searchKey": "httputil.TestModifyResponseClosesBody",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestModifyResponseClosesBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestModifyResponseClosesBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestNilBody",
              "documentation": {
                "identifier": "TestNilBody",
                "newPage": false,
                "searchKey": "httputil.TestNilBody",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNilBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNilBody(t *testing.T)\n```\n\nIssue 12344 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxy",
              "documentation": {
                "identifier": "TestReverseProxy",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxy",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyCancellation",
              "documentation": {
                "identifier": "TestReverseProxyCancellation",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyCancellation",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyCancellation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyCancellation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyErrorHandler",
              "documentation": {
                "identifier": "TestReverseProxyErrorHandler",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyErrorHandler",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyErrorHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyErrorHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyFlushInterval",
              "documentation": {
                "identifier": "TestReverseProxyFlushInterval",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyFlushInterval",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyFlushInterval(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyFlushInterval(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyFlushIntervalHeaders",
              "documentation": {
                "identifier": "TestReverseProxyFlushIntervalHeaders",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyFlushIntervalHeaders",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyFlushIntervalHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyFlushIntervalHeaders(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyGetPutBuffer",
              "documentation": {
                "identifier": "TestReverseProxyGetPutBuffer",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyGetPutBuffer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyGetPutBuffer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyGetPutBuffer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyModifyResponse",
              "documentation": {
                "identifier": "TestReverseProxyModifyResponse",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyModifyResponse",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyModifyResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyModifyResponse(t *testing.T)\n```\n\nIssue 14237. Test ModifyResponse and that an error from it causes the proxy to return StatusBadGateway, or StatusOK otherwise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyQuery",
              "documentation": {
                "identifier": "TestReverseProxyQuery",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyQuery",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyStripEmptyConnection",
              "documentation": {
                "identifier": "TestReverseProxyStripEmptyConnection",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyStripEmptyConnection",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyStripEmptyConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyStripEmptyConnection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyStripHeadersPresentInConnection",
              "documentation": {
                "identifier": "TestReverseProxyStripHeadersPresentInConnection",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyStripHeadersPresentInConnection",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyStripHeadersPresentInConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyStripHeadersPresentInConnection(t *testing.T)\n```\n\nIssue 16875: remove any proxied headers mentioned in the \"Connection\" header value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyWebSocket",
              "documentation": {
                "identifier": "TestReverseProxyWebSocket",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyWebSocket",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyWebSocket(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyWebSocket(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxyWebSocketCancellation",
              "documentation": {
                "identifier": "TestReverseProxyWebSocketCancellation",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxyWebSocketCancellation",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxyWebSocketCancellation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxyWebSocketCancellation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxy_AllocatedHeader",
              "documentation": {
                "identifier": "TestReverseProxy_AllocatedHeader",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxy_AllocatedHeader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxy_AllocatedHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxy_AllocatedHeader(t *testing.T)\n```\n\nIssue 33142: always allocate the request headers \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxy_CopyBuffer",
              "documentation": {
                "identifier": "TestReverseProxy_CopyBuffer",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxy_CopyBuffer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxy_CopyBuffer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxy_CopyBuffer(t *testing.T)\n```\n\nIssue 16659: log errors from short read \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxy_NilBody",
              "documentation": {
                "identifier": "TestReverseProxy_NilBody",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxy_NilBody",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxy_NilBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxy_NilBody(t *testing.T)\n```\n\nIssue 16036: send a Request with a nil Body when possible \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxy_PanicBodyError",
              "documentation": {
                "identifier": "TestReverseProxy_PanicBodyError",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxy_PanicBodyError",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxy_PanicBodyError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxy_PanicBodyError(t *testing.T)\n```\n\nIssue 23643: panic on body copy error \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestReverseProxy_Post",
              "documentation": {
                "identifier": "TestReverseProxy_Post",
                "newPage": false,
                "searchKey": "httputil.TestReverseProxy_Post",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReverseProxy_Post(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReverseProxy_Post(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestSelectFlushInterval",
              "documentation": {
                "identifier": "TestSelectFlushInterval",
                "newPage": false,
                "searchKey": "httputil.TestSelectFlushInterval",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSelectFlushInterval(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSelectFlushInterval(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestServeHTTPDeepCopy",
              "documentation": {
                "identifier": "TestServeHTTPDeepCopy",
                "newPage": false,
                "searchKey": "httputil.TestServeHTTPDeepCopy",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeHTTPDeepCopy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeHTTPDeepCopy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestSingleJoinSlash",
              "documentation": {
                "identifier": "TestSingleJoinSlash",
                "newPage": false,
                "searchKey": "httputil.TestSingleJoinSlash",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSingleJoinSlash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSingleJoinSlash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestUnannouncedTrailer",
              "documentation": {
                "identifier": "TestUnannouncedTrailer",
                "newPage": false,
                "searchKey": "httputil.TestUnannouncedTrailer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnannouncedTrailer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnannouncedTrailer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestUserAgentHeader",
              "documentation": {
                "identifier": "TestUserAgentHeader",
                "newPage": false,
                "searchKey": "httputil.TestUserAgentHeader",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUserAgentHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUserAgentHeader(t *testing.T)\n```\n\nIssue 15524 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestXForwardedFor",
              "documentation": {
                "identifier": "TestXForwardedFor",
                "newPage": false,
                "searchKey": "httputil.TestXForwardedFor",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestXForwardedFor(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestXForwardedFor(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#TestXForwardedFor_Omit",
              "documentation": {
                "identifier": "TestXForwardedFor_Omit",
                "newPage": false,
                "searchKey": "httputil.TestXForwardedFor_Omit",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestXForwardedFor_Omit(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestXForwardedFor_Omit(t *testing.T)\n```\n\nIssue 38079: don't append to X-Forwarded-For if it's present but nil \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#chunk",
              "documentation": {
                "identifier": "chunk",
                "newPage": false,
                "searchKey": "httputil.chunk",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func chunk(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc chunk(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#copyHeader",
              "documentation": {
                "identifier": "copyHeader",
                "newPage": false,
                "searchKey": "httputil.copyHeader",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func copyHeader(dst, src http.Header)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc copyHeader(dst, src http.Header)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#deadline",
              "documentation": {
                "identifier": "deadline",
                "newPage": false,
                "searchKey": "httputil.deadline",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func deadline(t *testing.T, defaultDelay, needed time.Duration) time.Time"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc deadline(t *testing.T, defaultDelay, needed time.Duration) time.Time\n```\n\ndeadline returns the time which is needed before t.Deadline() if one is configured and it is s greater than needed in the future, otherwise defaultDelay from the current time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#drainBody",
              "documentation": {
                "identifier": "drainBody",
                "newPage": false,
                "searchKey": "httputil.drainBody",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc drainBody(b io.ReadCloser) (r1, r2 io.ReadCloser, err error)\n```\n\ndrainBody reads all of b to memory and then returns two equivalent ReadClosers yielding the same bytes. \n\nIt returns an error if the initial slurp of all bytes fails. It does not attempt to make the returned ReadClosers have identical error-matching behavior. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#init.reverseproxy_test.go",
              "documentation": {
                "identifier": "init.reverseproxy_test.go",
                "newPage": false,
                "searchKey": "httputil.init",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#joinURLPath",
              "documentation": {
                "identifier": "joinURLPath",
                "newPage": false,
                "searchKey": "httputil.joinURLPath",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func joinURLPath(a, b *url.URL) (path, rawpath string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc joinURLPath(a, b *url.URL) (path, rawpath string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#mustNewRequest",
              "documentation": {
                "identifier": "mustNewRequest",
                "newPage": false,
                "searchKey": "httputil.mustNewRequest",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustNewRequest(method, url string, body io.Reader) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustNewRequest(method, url string, body io.Reader) *http.Request\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#mustParseURL",
              "documentation": {
                "identifier": "mustParseURL",
                "newPage": false,
                "searchKey": "httputil.mustParseURL",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustParseURL(s string) *url.URL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustParseURL(s string) *url.URL\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#mustReadRequest",
              "documentation": {
                "identifier": "mustReadRequest",
                "newPage": false,
                "searchKey": "httputil.mustReadRequest",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustReadRequest(s string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustReadRequest(s string) *http.Request\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#outgoingLength",
              "documentation": {
                "identifier": "outgoingLength",
                "newPage": false,
                "searchKey": "httputil.outgoingLength",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func outgoingLength(req *http.Request) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc outgoingLength(req *http.Request) int64\n```\n\noutGoingLength is a copy of the unexported (*http.Request).outgoingLength method. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#removeConnectionHeaders",
              "documentation": {
                "identifier": "removeConnectionHeaders",
                "newPage": false,
                "searchKey": "httputil.removeConnectionHeaders",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func removeConnectionHeaders(h http.Header)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc removeConnectionHeaders(h http.Header)\n```\n\nremoveConnectionHeaders removes hop-by-hop headers listed in the \"Connection\" header of h. See RFC 7230, section 6.1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#req",
              "documentation": {
                "identifier": "req",
                "newPage": false,
                "searchKey": "httputil.req",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func req(t *testing.T, v string) *http.Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc req(t *testing.T, v string) *http.Request\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#shouldPanicOnCopyError",
              "documentation": {
                "identifier": "shouldPanicOnCopyError",
                "newPage": false,
                "searchKey": "httputil.shouldPanicOnCopyError",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func shouldPanicOnCopyError(req *http.Request) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc shouldPanicOnCopyError(req *http.Request) bool\n```\n\nshouldPanicOnCopyError reports whether the reverse proxy should panic with http.ErrAbortHandler. This is the right thing to do by default, but Go 1.10 and earlier did not, so existing unit tests weren't expecting panics. Only panic in our own tests, or when running under the HTTP server. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#singleJoiningSlash",
              "documentation": {
                "identifier": "singleJoiningSlash",
                "newPage": false,
                "searchKey": "httputil.singleJoiningSlash",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func singleJoiningSlash(a, b string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc singleJoiningSlash(a, b string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#upgradeType",
              "documentation": {
                "identifier": "upgradeType",
                "newPage": false,
                "searchKey": "httputil.upgradeType",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func upgradeType(h http.Header) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc upgradeType(h http.Header) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http/httputil#valueOrDefault",
              "documentation": {
                "identifier": "valueOrDefault",
                "newPage": false,
                "searchKey": "httputil.valueOrDefault",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func valueOrDefault(value, def string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc valueOrDefault(value, def string) string\n```\n\nReturn value if nonempty, def otherwise. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
