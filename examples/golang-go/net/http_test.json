{
  "pathID": "/net/http_test",
  "documentation": {
    "identifier": "http_test",
    "newPage": true,
    "searchKey": "net/http_test",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package http_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/net/http_test#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http_test#h1Mode",
              "documentation": {
                "identifier": "h1Mode",
                "newPage": false,
                "searchKey": "http_test.h1Mode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const h1Mode"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst h1Mode = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#h2Mode",
              "documentation": {
                "identifier": "h2Mode",
                "newPage": false,
                "searchKey": "http_test.h2Mode",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const h2Mode"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst h2Mode = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testFile",
              "documentation": {
                "identifier": "testFile",
                "newPage": false,
                "searchKey": "http_test.testFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testFile"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testFile = \"testdata/file\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testFileLen",
              "documentation": {
                "identifier": "testFileLen",
                "newPage": false,
                "searchKey": "http_test.testFileLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testFileLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testFileLen = 11\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fileaContents",
              "documentation": {
                "identifier": "fileaContents",
                "newPage": false,
                "searchKey": "http_test.fileaContents",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const fileaContents"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst fileaContents = \"This is a test file.\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#filebContents",
              "documentation": {
                "identifier": "filebContents",
                "newPage": false,
                "searchKey": "http_test.filebContents",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const filebContents"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst filebContents = \"Another test file.\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#textaValue",
              "documentation": {
                "identifier": "textaValue",
                "newPage": false,
                "searchKey": "http_test.textaValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const textaValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst textaValue = \"foo\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#textbValue",
              "documentation": {
                "identifier": "textbValue",
                "newPage": false,
                "searchKey": "http_test.textbValue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const textbValue"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst textbValue = \"bar\"\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#boundary",
              "documentation": {
                "identifier": "boundary",
                "newPage": false,
                "searchKey": "http_test.boundary",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const boundary"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst boundary = `MyBoundary`\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#message",
              "documentation": {
                "identifier": "message",
                "newPage": false,
                "searchKey": "http_test.message",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const message"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst message = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#withTLS",
              "documentation": {
                "identifier": "withTLS",
                "newPage": false,
                "searchKey": "http_test.withTLS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const withTLS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst withTLS = true\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#noTLS",
              "documentation": {
                "identifier": "noTLS",
                "newPage": false,
                "searchKey": "http_test.noTLS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const noTLS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst noTLS = false\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#someResponse",
              "documentation": {
                "identifier": "someResponse",
                "newPage": false,
                "searchKey": "http_test.someResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const someResponse"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst someResponse = \"<html>some response</html>\"\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http_test#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http_test#robotsTxtHandler",
              "documentation": {
                "identifier": "robotsTxtHandler",
                "newPage": false,
                "searchKey": "http_test.robotsTxtHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var robotsTxtHandler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar robotsTxtHandler = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#expectedCookies",
              "documentation": {
                "identifier": "expectedCookies",
                "newPage": false,
                "searchKey": "http_test.expectedCookies",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var expectedCookies"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar expectedCookies = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#echoCookiesRedirectHandler",
              "documentation": {
                "identifier": "echoCookiesRedirectHandler",
                "newPage": false,
                "searchKey": "http_test.echoCookiesRedirectHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var echoCookiesRedirectHandler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar echoCookiesRedirectHandler = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#optQuietLog",
              "documentation": {
                "identifier": "optQuietLog",
                "newPage": false,
                "searchKey": "http_test.optQuietLog",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var optQuietLog"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar optQuietLog = func(ts *httptest.Server) {\n\tts.Config.ErrorLog = quietLog\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ServeFileRangeTests",
              "documentation": {
                "identifier": "ServeFileRangeTests",
                "newPage": false,
                "searchKey": "http_test.ServeFileRangeTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ServeFileRangeTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ServeFileRangeTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fsRedirectTestData",
              "documentation": {
                "identifier": "fsRedirectTestData",
                "newPage": false,
                "searchKey": "http_test.fsRedirectTestData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fsRedirectTestData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fsRedirectTestData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#quietLog",
              "documentation": {
                "identifier": "quietLog",
                "newPage": false,
                "searchKey": "http_test.quietLog",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var quietLog"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar quietLog = log.New(io.Discard, \"\", 0)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#readRequestErrorTests",
              "documentation": {
                "identifier": "readRequestErrorTests",
                "newPage": false,
                "searchKey": "http_test.readRequestErrorTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var readRequestErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar readRequestErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#newRequestHostTests",
              "documentation": {
                "identifier": "newRequestHostTests",
                "newPage": false,
                "searchKey": "http_test.newRequestHostTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var newRequestHostTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar newRequestHostTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#parseHTTPVersionTests",
              "documentation": {
                "identifier": "parseHTTPVersionTests",
                "newPage": false,
                "searchKey": "http_test.parseHTTPVersionTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseHTTPVersionTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseHTTPVersionTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#getBasicAuthTests",
              "documentation": {
                "identifier": "getBasicAuthTests",
                "newPage": false,
                "searchKey": "http_test.getBasicAuthTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var getBasicAuthTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar getBasicAuthTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#parseBasicAuthTests",
              "documentation": {
                "identifier": "parseBasicAuthTests",
                "newPage": false,
                "searchKey": "http_test.parseBasicAuthTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var parseBasicAuthTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar parseBasicAuthTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#handlers",
              "documentation": {
                "identifier": "handlers",
                "newPage": false,
                "searchKey": "http_test.handlers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var handlers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar handlers = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#vtests",
              "documentation": {
                "identifier": "vtests",
                "newPage": false,
                "searchKey": "http_test.vtests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var vtests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar vtests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#serveMuxRegister",
              "documentation": {
                "identifier": "serveMuxRegister",
                "newPage": false,
                "searchKey": "http_test.serveMuxRegister",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var serveMuxRegister"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar serveMuxRegister = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#serveMuxTests",
              "documentation": {
                "identifier": "serveMuxTests",
                "newPage": false,
                "searchKey": "http_test.serveMuxTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var serveMuxTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar serveMuxTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#serveMuxTests2",
              "documentation": {
                "identifier": "serveMuxTests2",
                "newPage": false,
                "searchKey": "http_test.serveMuxTests2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var serveMuxTests2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar serveMuxTests2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#serverExpectTests",
              "documentation": {
                "identifier": "serverExpectTests",
                "newPage": false,
                "searchKey": "http_test.serverExpectTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var serverExpectTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar serverExpectTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#handlerBodyCloseTests",
              "documentation": {
                "identifier": "handlerBodyCloseTests",
                "newPage": false,
                "searchKey": "http_test.handlerBodyCloseTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var handlerBodyCloseTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar handlerBodyCloseTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHandlerBodyConsumers",
              "documentation": {
                "identifier": "testHandlerBodyConsumers",
                "newPage": false,
                "searchKey": "http_test.testHandlerBodyConsumers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testHandlerBodyConsumers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testHandlerBodyConsumers = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#response",
              "documentation": {
                "identifier": "response",
                "newPage": false,
                "searchKey": "http_test.response",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var response"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar response = bytes.Repeat([]byte(someResponse), 2<<10/len(someResponse))\n```\n\nA Response that's just no bigger than 2KB, the buffer-before-chunking threshold. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#sniffTests",
              "documentation": {
                "identifier": "sniffTests",
                "newPage": false,
                "searchKey": "http_test.sniffTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var sniffTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sniffTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#hostPortHandler",
              "documentation": {
                "identifier": "hostPortHandler",
                "newPage": false,
                "searchKey": "http_test.hostPortHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var hostPortHandler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hostPortHandler = ...\n```\n\nhostPortHandler writes back the client's \"host:port\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#roundTripTests",
              "documentation": {
                "identifier": "roundTripTests",
                "newPage": false,
                "searchKey": "http_test.roundTripTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var roundTripTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar roundTripTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#proxyFromEnvTests",
              "documentation": {
                "identifier": "proxyFromEnvTests",
                "newPage": false,
                "searchKey": "http_test.proxyFromEnvTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var proxyFromEnvTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar proxyFromEnvTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#isDNSHijackedOnce",
              "documentation": {
                "identifier": "isDNSHijackedOnce",
                "newPage": false,
                "searchKey": "http_test.isDNSHijackedOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var isDNSHijackedOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isDNSHijackedOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#isDNSHijacked",
              "documentation": {
                "identifier": "isDNSHijacked",
                "newPage": false,
                "searchKey": "http_test.isDNSHijacked",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var isDNSHijacked"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar isDNSHijacked bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#errFakeRoundTrip",
              "documentation": {
                "identifier": "errFakeRoundTrip",
                "newPage": false,
                "searchKey": "http_test.errFakeRoundTrip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errFakeRoundTrip"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errFakeRoundTrip = errors.New(\"fake roundtrip\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#rgz",
              "documentation": {
                "identifier": "rgz",
                "newPage": false,
                "searchKey": "http_test.rgz",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rgz"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rgz = ...\n```\n\nrgz is a gzip quine that uncompresses to itself. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#timeoutProtoErr",
              "documentation": {
                "identifier": "timeoutProtoErr",
                "newPage": false,
                "searchKey": "http_test.timeoutProtoErr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var timeoutProtoErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar timeoutProtoErr = errors.New(\"canceled as expected\")\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http_test#http09Writer",
              "documentation": {
                "identifier": "http09Writer",
                "newPage": false,
                "searchKey": "http_test.http09Writer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type http09Writer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype http09Writer struct {\n\tio.Writer\n\th Header\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#http09Writer.Header",
                    "documentation": {
                      "identifier": "http09Writer.Header",
                      "newPage": false,
                      "searchKey": "http_test.http09Writer.Header",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w http09Writer) Header() Header"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w http09Writer) Header() Header\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#http09Writer.WriteHeader",
                    "documentation": {
                      "identifier": "http09Writer.WriteHeader",
                      "newPage": false,
                      "searchKey": "http_test.http09Writer.WriteHeader",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w http09Writer) WriteHeader(int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w http09Writer) WriteHeader(int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#chanWriter",
              "documentation": {
                "identifier": "chanWriter",
                "newPage": false,
                "searchKey": "http_test.chanWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type chanWriter chan string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype chanWriter chan string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#chanWriter.Write",
                    "documentation": {
                      "identifier": "chanWriter.Write",
                      "newPage": false,
                      "searchKey": "http_test.chanWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w chanWriter) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w chanWriter) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#recordingTransport",
              "documentation": {
                "identifier": "recordingTransport",
                "newPage": false,
                "searchKey": "http_test.recordingTransport",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type recordingTransport struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype recordingTransport struct {\n\treq *Request\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#recordingTransport.RoundTrip",
                    "documentation": {
                      "identifier": "recordingTransport.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.recordingTransport.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *recordingTransport) RoundTrip(req *Request) (resp *Response, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *recordingTransport) RoundTrip(req *Request) (resp *Response, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#redirectTest",
              "documentation": {
                "identifier": "redirectTest",
                "newPage": false,
                "searchKey": "http_test.redirectTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type redirectTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype redirectTest struct {\n\tsuffix       string\n\twant         int // response code\n\tredirectBody string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestJar",
              "documentation": {
                "identifier": "TestJar",
                "newPage": false,
                "searchKey": "http_test.TestJar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type TestJar struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype TestJar struct {\n\tm      sync.Mutex\n\tperURL map[string][]*Cookie\n}\n```\n\nJust enough correctness for our redirect tests. Uses the URL.Host as the scope of all cookies. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#TestJar.SetCookies",
                    "documentation": {
                      "identifier": "TestJar.SetCookies",
                      "newPage": false,
                      "searchKey": "http_test.TestJar.SetCookies",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *TestJar) SetCookies(u *url.URL, cookies []*Cookie)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *TestJar) SetCookies(u *url.URL, cookies []*Cookie)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#TestJar.Cookies",
                    "documentation": {
                      "identifier": "TestJar.Cookies",
                      "newPage": false,
                      "searchKey": "http_test.TestJar.Cookies",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *TestJar) Cookies(u *url.URL) []*Cookie"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *TestJar) Cookies(u *url.URL) []*Cookie\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#RecordingJar",
              "documentation": {
                "identifier": "RecordingJar",
                "newPage": false,
                "searchKey": "http_test.RecordingJar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type RecordingJar struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RecordingJar struct {\n\tmu  sync.Mutex\n\tlog bytes.Buffer\n}\n```\n\nRecordingJar keeps a log of calls made to it, without tracking any cookies. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#RecordingJar.SetCookies",
                    "documentation": {
                      "identifier": "RecordingJar.SetCookies",
                      "newPage": false,
                      "searchKey": "http_test.RecordingJar.SetCookies",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *RecordingJar) SetCookies(u *url.URL, cookies []*Cookie)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *RecordingJar) SetCookies(u *url.URL, cookies []*Cookie)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#RecordingJar.Cookies",
                    "documentation": {
                      "identifier": "RecordingJar.Cookies",
                      "newPage": false,
                      "searchKey": "http_test.RecordingJar.Cookies",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *RecordingJar) Cookies(u *url.URL) []*Cookie"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *RecordingJar) Cookies(u *url.URL) []*Cookie\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#RecordingJar.logf",
                    "documentation": {
                      "identifier": "RecordingJar.logf",
                      "newPage": false,
                      "searchKey": "http_test.RecordingJar.logf",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (j *RecordingJar) logf(format string, args ...interface{})"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (j *RecordingJar) logf(format string, args ...interface{})\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#writeCountingConn",
              "documentation": {
                "identifier": "writeCountingConn",
                "newPage": false,
                "searchKey": "http_test.writeCountingConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type writeCountingConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype writeCountingConn struct {\n\tnet.Conn\n\tcount *int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#writeCountingConn.Write",
                    "documentation": {
                      "identifier": "writeCountingConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.writeCountingConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *writeCountingConn) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *writeCountingConn) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#eofReaderFunc",
              "documentation": {
                "identifier": "eofReaderFunc",
                "newPage": false,
                "searchKey": "http_test.eofReaderFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type eofReaderFunc func()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eofReaderFunc func()\n```\n\neofReaderFunc is an io.Reader that runs itself, and then returns io.EOF. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#eofReaderFunc.Read",
                    "documentation": {
                      "identifier": "eofReaderFunc.Read",
                      "newPage": false,
                      "searchKey": "http_test.eofReaderFunc.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f eofReaderFunc) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f eofReaderFunc) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#issue15577Tripper",
              "documentation": {
                "identifier": "issue15577Tripper",
                "newPage": false,
                "searchKey": "http_test.issue15577Tripper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type issue15577Tripper struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype issue15577Tripper struct{}\n```\n\nissue15577Tripper returns a Response with a redirect response header and doesn't populate its Response.Request field. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#issue15577Tripper.RoundTrip",
                    "documentation": {
                      "identifier": "issue15577Tripper.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.issue15577Tripper.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (issue15577Tripper) RoundTrip(*Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (issue15577Tripper) RoundTrip(*Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#issue18239Body",
              "documentation": {
                "identifier": "issue18239Body",
                "newPage": false,
                "searchKey": "http_test.issue18239Body",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type issue18239Body struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype issue18239Body struct {\n\treadCalls  *int32\n\tcloseCalls *int32\n\treadErr    error\n}\n```\n\nissue18239Body is an io.ReadCloser for TestTransportBodyReadError. Its Read returns readErr and increments *readCalls atomically. Its Close returns nil and increments *closeCalls atomically. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#issue18239Body.Read",
                    "documentation": {
                      "identifier": "issue18239Body.Read",
                      "newPage": false,
                      "searchKey": "http_test.issue18239Body.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b issue18239Body) Read([]byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b issue18239Body) Read([]byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#issue18239Body.Close",
                    "documentation": {
                      "identifier": "issue18239Body.Close",
                      "newPage": false,
                      "searchKey": "http_test.issue18239Body.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b issue18239Body) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b issue18239Body) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#roundTripperWithoutCloseIdle",
              "documentation": {
                "identifier": "roundTripperWithoutCloseIdle",
                "newPage": false,
                "searchKey": "http_test.roundTripperWithoutCloseIdle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type roundTripperWithoutCloseIdle struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype roundTripperWithoutCloseIdle struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#roundTripperWithoutCloseIdle.RoundTrip",
                    "documentation": {
                      "identifier": "roundTripperWithoutCloseIdle.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.roundTripperWithoutCloseIdle.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (roundTripperWithoutCloseIdle) RoundTrip(*Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (roundTripperWithoutCloseIdle) RoundTrip(*Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#roundTripperWithCloseIdle",
              "documentation": {
                "identifier": "roundTripperWithCloseIdle",
                "newPage": false,
                "searchKey": "http_test.roundTripperWithCloseIdle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type roundTripperWithCloseIdle func()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype roundTripperWithCloseIdle func() // underlying func is CloseIdleConnections func\n\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#roundTripperWithCloseIdle.RoundTrip",
                    "documentation": {
                      "identifier": "roundTripperWithCloseIdle.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.roundTripperWithCloseIdle.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (roundTripperWithCloseIdle) RoundTrip(*Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (roundTripperWithCloseIdle) RoundTrip(*Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#roundTripperWithCloseIdle.CloseIdleConnections",
                    "documentation": {
                      "identifier": "roundTripperWithCloseIdle.CloseIdleConnections",
                      "newPage": false,
                      "searchKey": "http_test.roundTripperWithCloseIdle.CloseIdleConnections",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f roundTripperWithCloseIdle) CloseIdleConnections()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f roundTripperWithCloseIdle) CloseIdleConnections()\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#nilBodyRoundTripper",
              "documentation": {
                "identifier": "nilBodyRoundTripper",
                "newPage": false,
                "searchKey": "http_test.nilBodyRoundTripper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nilBodyRoundTripper struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nilBodyRoundTripper struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#nilBodyRoundTripper.RoundTrip",
                    "documentation": {
                      "identifier": "nilBodyRoundTripper.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.nilBodyRoundTripper.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (nilBodyRoundTripper) RoundTrip(req *Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (nilBodyRoundTripper) RoundTrip(req *Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#issue40382Body",
              "documentation": {
                "identifier": "issue40382Body",
                "newPage": false,
                "searchKey": "http_test.issue40382Body",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type issue40382Body struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype issue40382Body struct {\n\tt                *testing.T\n\tn                int\n\tcloseCallsAtomic int32\n}\n```\n\nissue40382Body is an io.ReadCloser for TestClientCallsCloseOnlyOnce. Its Read reads n bytes before returning io.EOF. Its Close returns nil but fails the test if called more than once. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#issue40382Body.Read",
                    "documentation": {
                      "identifier": "issue40382Body.Read",
                      "newPage": false,
                      "searchKey": "http_test.issue40382Body.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *issue40382Body) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *issue40382Body) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#issue40382Body.Close",
                    "documentation": {
                      "identifier": "issue40382Body.Close",
                      "newPage": false,
                      "searchKey": "http_test.issue40382Body.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *issue40382Body) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *issue40382Body) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#clientServerTest",
              "documentation": {
                "identifier": "clientServerTest",
                "newPage": false,
                "searchKey": "http_test.clientServerTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type clientServerTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype clientServerTest struct {\n\tt  *testing.T\n\th2 bool\n\th  Handler\n\tts *httptest.Server\n\ttr *Transport\n\tc  *Client\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#newClientServerTest",
                    "documentation": {
                      "identifier": "newClientServerTest",
                      "newPage": false,
                      "searchKey": "http_test.newClientServerTest",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newClientServerTest(t *testing.T, h2 bool, h Handler, opts ...interface{}) *clientServerTest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newClientServerTest(t *testing.T, h2 bool, h Handler, opts ...interface{}) *clientServerTest\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#clientServerTest.close",
                    "documentation": {
                      "identifier": "clientServerTest.close",
                      "newPage": false,
                      "searchKey": "http_test.clientServerTest.close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *clientServerTest) close()"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *clientServerTest) close()\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#clientServerTest.getURL",
                    "documentation": {
                      "identifier": "clientServerTest.getURL",
                      "newPage": false,
                      "searchKey": "http_test.clientServerTest.getURL",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *clientServerTest) getURL(u string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *clientServerTest) getURL(u string) string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#clientServerTest.scheme",
                    "documentation": {
                      "identifier": "clientServerTest.scheme",
                      "newPage": false,
                      "searchKey": "http_test.clientServerTest.scheme",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t *clientServerTest) scheme() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t *clientServerTest) scheme() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#reqFunc",
              "documentation": {
                "identifier": "reqFunc",
                "newPage": false,
                "searchKey": "http_test.reqFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type reqFunc func(c *net/http.Client, url string) (*net/http.Response, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype reqFunc func(c *Client, url string) (*Response, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#h12Compare",
              "documentation": {
                "identifier": "h12Compare",
                "newPage": false,
                "searchKey": "http_test.h12Compare",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type h12Compare struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype h12Compare struct {\n\tHandler            func(ResponseWriter, *Request)    // required\n\tReqFunc            reqFunc                           // optional\n\tCheckResponse      func(proto string, res *Response) // optional\n\tEarlyCheckResponse func(proto string, res *Response) // optional; pre-normalize\n\tOpts               []interface{}\n}\n```\n\nh12Compare is a test that compares HTTP/1 and HTTP/2 behavior against each other. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#h12Compare.reqFunc",
                    "documentation": {
                      "identifier": "h12Compare.reqFunc",
                      "newPage": false,
                      "searchKey": "http_test.h12Compare.reqFunc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tt h12Compare) reqFunc() reqFunc"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tt h12Compare) reqFunc() reqFunc\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#h12Compare.run",
                    "documentation": {
                      "identifier": "h12Compare.run",
                      "newPage": false,
                      "searchKey": "http_test.h12Compare.run",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tt h12Compare) run(t *testing.T)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tt h12Compare) run(t *testing.T)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#h12Compare.normalizeRes",
                    "documentation": {
                      "identifier": "h12Compare.normalizeRes",
                      "newPage": false,
                      "searchKey": "http_test.h12Compare.normalizeRes",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tt h12Compare) normalizeRes(t *testing.T, res *Response, wantProto string)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tt h12Compare) normalizeRes(t *testing.T, res *Response, wantProto string)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#slurpResult",
              "documentation": {
                "identifier": "slurpResult",
                "newPage": false,
                "searchKey": "http_test.slurpResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type slurpResult struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype slurpResult struct {\n\tio.ReadCloser\n\tbody []byte\n\terr  error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#slurpResult.String",
                    "documentation": {
                      "identifier": "slurpResult.String",
                      "newPage": false,
                      "searchKey": "http_test.slurpResult.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (sr slurpResult) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (sr slurpResult) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#lockedBytesBuffer",
              "documentation": {
                "identifier": "lockedBytesBuffer",
                "newPage": false,
                "searchKey": "http_test.lockedBytesBuffer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type lockedBytesBuffer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lockedBytesBuffer struct {\n\tsync.Mutex\n\tbytes.Buffer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#lockedBytesBuffer.Write",
                    "documentation": {
                      "identifier": "lockedBytesBuffer.Write",
                      "newPage": false,
                      "searchKey": "http_test.lockedBytesBuffer.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *lockedBytesBuffer) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *lockedBytesBuffer) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#noteCloseConn",
              "documentation": {
                "identifier": "noteCloseConn",
                "newPage": false,
                "searchKey": "http_test.noteCloseConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type noteCloseConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype noteCloseConn struct {\n\tnet.Conn\n\tcloseFunc func()\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#noteCloseConn.Close",
                    "documentation": {
                      "identifier": "noteCloseConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.noteCloseConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (x noteCloseConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (x noteCloseConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testErrorReader",
              "documentation": {
                "identifier": "testErrorReader",
                "newPage": false,
                "searchKey": "http_test.testErrorReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testErrorReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testErrorReader struct{ t *testing.T }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#testErrorReader.Read",
                    "documentation": {
                      "identifier": "testErrorReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.testErrorReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r testErrorReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r testErrorReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#dotFileHidingFile",
              "documentation": {
                "identifier": "dotFileHidingFile",
                "newPage": false,
                "searchKey": "http_test.dotFileHidingFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dotFileHidingFile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dotFileHidingFile struct {\n\thttp.File\n}\n```\n\ndotFileHidingFile is the http.File use in dotFileHidingFileSystem. It is used to wrap the Readdir method of http.File so that we can remove files and directories that start with a period from its output. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#dotFileHidingFile.Readdir",
                    "documentation": {
                      "identifier": "dotFileHidingFile.Readdir",
                      "newPage": false,
                      "searchKey": "http_test.dotFileHidingFile.Readdir",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f dotFileHidingFile) Readdir(n int) (fis []fs.FileInfo, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f dotFileHidingFile) Readdir(n int) (fis []fs.FileInfo, err error)\n```\n\nReaddir is a wrapper around the Readdir method of the embedded File that filters out all files that start with a period in their name. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#dotFileHidingFileSystem",
              "documentation": {
                "identifier": "dotFileHidingFileSystem",
                "newPage": false,
                "searchKey": "http_test.dotFileHidingFileSystem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dotFileHidingFileSystem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dotFileHidingFileSystem struct {\n\thttp.FileSystem\n}\n```\n\ndotFileHidingFileSystem is an http.FileSystem that hides hidden \"dot files\" from being served. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#dotFileHidingFileSystem.Open",
                    "documentation": {
                      "identifier": "dotFileHidingFileSystem.Open",
                      "newPage": false,
                      "searchKey": "http_test.dotFileHidingFileSystem.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fsys dotFileHidingFileSystem) Open(name string) (http.File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fsys dotFileHidingFileSystem) Open(name string) (http.File, error)\n```\n\nOpen is a wrapper around the Open method of the embedded FileSystem that serves a 403 permission error when name has a file or directory with whose name starts with a period in its path. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countHandler",
              "documentation": {
                "identifier": "countHandler",
                "newPage": false,
                "searchKey": "http_test.countHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countHandler struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countHandler struct {\n\tmu sync.Mutex // guards n\n\tn  int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#countHandler.ServeHTTP",
                    "documentation": {
                      "identifier": "countHandler.ServeHTTP",
                      "newPage": false,
                      "searchKey": "http_test.countHandler.ServeHTTP",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h *countHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h *countHandler) ServeHTTP(w http.ResponseWriter, r *http.Request)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#apiHandler",
              "documentation": {
                "identifier": "apiHandler",
                "newPage": false,
                "searchKey": "http_test.apiHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type apiHandler struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype apiHandler struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#apiHandler.ServeHTTP",
                    "documentation": {
                      "identifier": "apiHandler.ServeHTTP",
                      "newPage": false,
                      "searchKey": "http_test.apiHandler.ServeHTTP",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (apiHandler) ServeHTTP(http.ResponseWriter, *http.Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (apiHandler) ServeHTTP(http.ResponseWriter, *http.Request)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#wantRange",
              "documentation": {
                "identifier": "wantRange",
                "newPage": false,
                "searchKey": "http_test.wantRange",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type wantRange struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype wantRange struct {\n\tstart, end int64 // range [start,end)\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testFileSystem",
              "documentation": {
                "identifier": "testFileSystem",
                "newPage": false,
                "searchKey": "http_test.testFileSystem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testFileSystem struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testFileSystem struct {\n\topen func(name string) (File, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#testFileSystem.Open",
                    "documentation": {
                      "identifier": "testFileSystem.Open",
                      "newPage": false,
                      "searchKey": "http_test.testFileSystem.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fs *testFileSystem) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fs *testFileSystem) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fakeFileInfo",
              "documentation": {
                "identifier": "fakeFileInfo",
                "newPage": false,
                "searchKey": "http_test.fakeFileInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeFileInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeFileInfo struct {\n\tdir      bool\n\tbasename string\n\tmodtime  time.Time\n\tents     []*fakeFileInfo\n\tcontents string\n\terr      error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFileInfo.Name",
                    "documentation": {
                      "identifier": "fakeFileInfo.Name",
                      "newPage": false,
                      "searchKey": "http_test.fakeFileInfo.Name",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFileInfo) Name() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFileInfo) Name() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFileInfo.Sys",
                    "documentation": {
                      "identifier": "fakeFileInfo.Sys",
                      "newPage": false,
                      "searchKey": "http_test.fakeFileInfo.Sys",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFileInfo) Sys() interface{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFileInfo) Sys() interface{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFileInfo.ModTime",
                    "documentation": {
                      "identifier": "fakeFileInfo.ModTime",
                      "newPage": false,
                      "searchKey": "http_test.fakeFileInfo.ModTime",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFileInfo) ModTime() time.Time"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFileInfo) ModTime() time.Time\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFileInfo.IsDir",
                    "documentation": {
                      "identifier": "fakeFileInfo.IsDir",
                      "newPage": false,
                      "searchKey": "http_test.fakeFileInfo.IsDir",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFileInfo) IsDir() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFileInfo) IsDir() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFileInfo.Size",
                    "documentation": {
                      "identifier": "fakeFileInfo.Size",
                      "newPage": false,
                      "searchKey": "http_test.fakeFileInfo.Size",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFileInfo) Size() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFileInfo) Size() int64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFileInfo.Mode",
                    "documentation": {
                      "identifier": "fakeFileInfo.Mode",
                      "newPage": false,
                      "searchKey": "http_test.fakeFileInfo.Mode",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFileInfo) Mode() fs.FileMode"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFileInfo) Mode() fs.FileMode\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fakeFile",
              "documentation": {
                "identifier": "fakeFile",
                "newPage": false,
                "searchKey": "http_test.fakeFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeFile struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeFile struct {\n\tio.ReadSeeker\n\tfi     *fakeFileInfo\n\tpath   string // as opened\n\tentpos int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFile.Close",
                    "documentation": {
                      "identifier": "fakeFile.Close",
                      "newPage": false,
                      "searchKey": "http_test.fakeFile.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFile) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFile) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFile.Stat",
                    "documentation": {
                      "identifier": "fakeFile.Stat",
                      "newPage": false,
                      "searchKey": "http_test.fakeFile.Stat",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFile) Stat() (fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFile) Stat() (fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFile.Readdir",
                    "documentation": {
                      "identifier": "fakeFile.Readdir",
                      "newPage": false,
                      "searchKey": "http_test.fakeFile.Readdir",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f *fakeFile) Readdir(count int) ([]fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f *fakeFile) Readdir(count int) ([]fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fakeFS",
              "documentation": {
                "identifier": "fakeFS",
                "newPage": false,
                "searchKey": "http_test.fakeFS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fakeFS map[string]*http_test.fakeFileInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fakeFS map[string]*fakeFileInfo\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#fakeFS.Open",
                    "documentation": {
                      "identifier": "fakeFS.Open",
                      "newPage": false,
                      "searchKey": "http_test.fakeFS.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fsys fakeFS) Open(name string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fsys fakeFS) Open(name string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#issue12991FS",
              "documentation": {
                "identifier": "issue12991FS",
                "newPage": false,
                "searchKey": "http_test.issue12991FS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type issue12991FS struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype issue12991FS struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#issue12991FS.Open",
                    "documentation": {
                      "identifier": "issue12991FS.Open",
                      "newPage": false,
                      "searchKey": "http_test.issue12991FS.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (issue12991FS) Open(string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (issue12991FS) Open(string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#issue12991File",
              "documentation": {
                "identifier": "issue12991File",
                "newPage": false,
                "searchKey": "http_test.issue12991File",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type issue12991File struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype issue12991File struct{ File }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#issue12991File.Stat",
                    "documentation": {
                      "identifier": "issue12991File.Stat",
                      "newPage": false,
                      "searchKey": "http_test.issue12991File.Stat",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (issue12991File) Stat() (fs.FileInfo, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (issue12991File) Stat() (fs.FileInfo, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#issue12991File.Close",
                    "documentation": {
                      "identifier": "issue12991File.Close",
                      "newPage": false,
                      "searchKey": "http_test.issue12991File.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (issue12991File) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (issue12991File) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fileServerCleanPathDir",
              "documentation": {
                "identifier": "fileServerCleanPathDir",
                "newPage": false,
                "searchKey": "http_test.fileServerCleanPathDir",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fileServerCleanPathDir struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fileServerCleanPathDir struct {\n\tlog *[]string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#fileServerCleanPathDir.Open",
                    "documentation": {
                      "identifier": "fileServerCleanPathDir.Open",
                      "newPage": false,
                      "searchKey": "http_test.fileServerCleanPathDir.Open",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d fileServerCleanPathDir) Open(path string) (File, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d fileServerCleanPathDir) Open(path string) (File, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#panicOnSeek",
              "documentation": {
                "identifier": "panicOnSeek",
                "newPage": false,
                "searchKey": "http_test.panicOnSeek",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type panicOnSeek struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype panicOnSeek struct{ io.ReadSeeker }\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#getBasicAuthTest",
              "documentation": {
                "identifier": "getBasicAuthTest",
                "newPage": false,
                "searchKey": "http_test.getBasicAuthTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type getBasicAuthTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype getBasicAuthTest struct {\n\tusername, password string\n\tok                 bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#basicAuthCredentialsTest",
              "documentation": {
                "identifier": "basicAuthCredentialsTest",
                "newPage": false,
                "searchKey": "http_test.basicAuthCredentialsTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicAuthCredentialsTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicAuthCredentialsTest struct {\n\tusername, password string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#logWrites",
              "documentation": {
                "identifier": "logWrites",
                "newPage": false,
                "searchKey": "http_test.logWrites",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type logWrites struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype logWrites struct {\n\tt   *testing.T\n\tdst *[]string\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#logWrites.WriteByte",
                    "documentation": {
                      "identifier": "logWrites.WriteByte",
                      "newPage": false,
                      "searchKey": "http_test.logWrites.WriteByte",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l logWrites) WriteByte(c byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l logWrites) WriteByte(c byte) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#logWrites.Write",
                    "documentation": {
                      "identifier": "logWrites.Write",
                      "newPage": false,
                      "searchKey": "http_test.logWrites.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l logWrites) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l logWrites) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#responseWriterJustWriter",
              "documentation": {
                "identifier": "responseWriterJustWriter",
                "newPage": false,
                "searchKey": "http_test.responseWriterJustWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type responseWriterJustWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype responseWriterJustWriter struct {\n\tio.Writer\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#responseWriterJustWriter.Header",
                    "documentation": {
                      "identifier": "responseWriterJustWriter.Header",
                      "newPage": false,
                      "searchKey": "http_test.responseWriterJustWriter.Header",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (responseWriterJustWriter) Header() Header"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (responseWriterJustWriter) Header() Header\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#responseWriterJustWriter.WriteHeader",
                    "documentation": {
                      "identifier": "responseWriterJustWriter.WriteHeader",
                      "newPage": false,
                      "searchKey": "http_test.responseWriterJustWriter.WriteHeader",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (responseWriterJustWriter) WriteHeader(int)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (responseWriterJustWriter) WriteHeader(int)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#delayedEOFReader",
              "documentation": {
                "identifier": "delayedEOFReader",
                "newPage": false,
                "searchKey": "http_test.delayedEOFReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type delayedEOFReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype delayedEOFReader struct {\n\tr io.Reader\n}\n```\n\ndelayedEOFReader never returns (n > 0, io.EOF), instead putting off the io.EOF until a subsequent Read call. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#delayedEOFReader.Read",
                    "documentation": {
                      "identifier": "delayedEOFReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.delayedEOFReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (dr delayedEOFReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (dr delayedEOFReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#infiniteReader",
              "documentation": {
                "identifier": "infiniteReader",
                "newPage": false,
                "searchKey": "http_test.infiniteReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type infiniteReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype infiniteReader struct {\n\tbuf    []byte\n\toffset int\n}\n```\n\ninfiniteReader satisfies Read requests as if the contents of buf loop indefinitely. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#infiniteReader.Read",
                    "documentation": {
                      "identifier": "infiniteReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.infiniteReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *infiniteReader) Read(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *infiniteReader) Read(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#dummyAddr",
              "documentation": {
                "identifier": "dummyAddr",
                "newPage": false,
                "searchKey": "http_test.dummyAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dummyAddr string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dummyAddr string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#dummyAddr.Network",
                    "documentation": {
                      "identifier": "dummyAddr.Network",
                      "newPage": false,
                      "searchKey": "http_test.dummyAddr.Network",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a dummyAddr) Network() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a dummyAddr) Network() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#dummyAddr.String",
                    "documentation": {
                      "identifier": "dummyAddr.String",
                      "newPage": false,
                      "searchKey": "http_test.dummyAddr.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (a dummyAddr) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (a dummyAddr) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#oneConnListener",
              "documentation": {
                "identifier": "oneConnListener",
                "newPage": false,
                "searchKey": "http_test.oneConnListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type oneConnListener struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype oneConnListener struct {\n\tconn net.Conn\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#oneConnListener.Accept",
                    "documentation": {
                      "identifier": "oneConnListener.Accept",
                      "newPage": false,
                      "searchKey": "http_test.oneConnListener.Accept",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *oneConnListener) Accept() (c net.Conn, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *oneConnListener) Accept() (c net.Conn, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#oneConnListener.Close",
                    "documentation": {
                      "identifier": "oneConnListener.Close",
                      "newPage": false,
                      "searchKey": "http_test.oneConnListener.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *oneConnListener) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *oneConnListener) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#oneConnListener.Addr",
                    "documentation": {
                      "identifier": "oneConnListener.Addr",
                      "newPage": false,
                      "searchKey": "http_test.oneConnListener.Addr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *oneConnListener) Addr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *oneConnListener) Addr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#noopConn",
              "documentation": {
                "identifier": "noopConn",
                "newPage": false,
                "searchKey": "http_test.noopConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type noopConn struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype noopConn struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#noopConn.LocalAddr",
                    "documentation": {
                      "identifier": "noopConn.LocalAddr",
                      "newPage": false,
                      "searchKey": "http_test.noopConn.LocalAddr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (noopConn) LocalAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (noopConn) LocalAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#noopConn.RemoteAddr",
                    "documentation": {
                      "identifier": "noopConn.RemoteAddr",
                      "newPage": false,
                      "searchKey": "http_test.noopConn.RemoteAddr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (noopConn) RemoteAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (noopConn) RemoteAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#noopConn.SetDeadline",
                    "documentation": {
                      "identifier": "noopConn.SetDeadline",
                      "newPage": false,
                      "searchKey": "http_test.noopConn.SetDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (noopConn) SetDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (noopConn) SetDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#noopConn.SetReadDeadline",
                    "documentation": {
                      "identifier": "noopConn.SetReadDeadline",
                      "newPage": false,
                      "searchKey": "http_test.noopConn.SetReadDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (noopConn) SetReadDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (noopConn) SetReadDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#noopConn.SetWriteDeadline",
                    "documentation": {
                      "identifier": "noopConn.SetWriteDeadline",
                      "newPage": false,
                      "searchKey": "http_test.noopConn.SetWriteDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (noopConn) SetWriteDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (noopConn) SetWriteDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#rwTestConn",
              "documentation": {
                "identifier": "rwTestConn",
                "newPage": false,
                "searchKey": "http_test.rwTestConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type rwTestConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rwTestConn struct {\n\tio.Reader\n\tio.Writer\n\tnoopConn\n\n\tcloseFunc func() error // called if non-nil\n\tclosec    chan bool    // else, if non-nil, send value to it on close\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#rwTestConn.Close",
                    "documentation": {
                      "identifier": "rwTestConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.rwTestConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *rwTestConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *rwTestConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testConn",
              "documentation": {
                "identifier": "testConn",
                "newPage": false,
                "searchKey": "http_test.testConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testConn struct {\n\treadMu   sync.Mutex // for TestHandlerBodyClose\n\treadBuf  bytes.Buffer\n\twriteBuf bytes.Buffer\n\tclosec   chan bool // if non-nil, send value to it on close\n\tnoopConn\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#testConn.Read",
                    "documentation": {
                      "identifier": "testConn.Read",
                      "newPage": false,
                      "searchKey": "http_test.testConn.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testConn) Read(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testConn) Read(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#testConn.Write",
                    "documentation": {
                      "identifier": "testConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.testConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testConn) Write(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testConn) Write(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#testConn.Close",
                    "documentation": {
                      "identifier": "testConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.testConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#handlerTest",
              "documentation": {
                "identifier": "handlerTest",
                "newPage": false,
                "searchKey": "http_test.handlerTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type handlerTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype handlerTest struct {\n\tlogbuf  bytes.Buffer\n\thandler Handler\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#newHandlerTest",
                    "documentation": {
                      "identifier": "newHandlerTest",
                      "newPage": false,
                      "searchKey": "http_test.newHandlerTest",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newHandlerTest(h Handler) handlerTest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newHandlerTest(h Handler) handlerTest\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#handlerTest.rawResponse",
                    "documentation": {
                      "identifier": "handlerTest.rawResponse",
                      "newPage": false,
                      "searchKey": "http_test.handlerTest.rawResponse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ht *handlerTest) rawResponse(req string) string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ht *handlerTest) rawResponse(req string) string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#stringHandler",
              "documentation": {
                "identifier": "stringHandler",
                "newPage": false,
                "searchKey": "http_test.stringHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type stringHandler string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype stringHandler string\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#stringHandler.ServeHTTP",
                    "documentation": {
                      "identifier": "stringHandler.ServeHTTP",
                      "newPage": false,
                      "searchKey": "http_test.stringHandler.ServeHTTP",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s stringHandler) ServeHTTP(w ResponseWriter, r *Request)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s stringHandler) ServeHTTP(w ResponseWriter, r *Request)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#trackLastConnListener",
              "documentation": {
                "identifier": "trackLastConnListener",
                "newPage": false,
                "searchKey": "http_test.trackLastConnListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type trackLastConnListener struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype trackLastConnListener struct {\n\tnet.Listener\n\n\tmu   *sync.RWMutex\n\tlast *net.Conn // destination\n}\n```\n\ntrackLastConnListener tracks the last net.Conn that was accepted. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#trackLastConnListener.Accept",
                    "documentation": {
                      "identifier": "trackLastConnListener.Accept",
                      "newPage": false,
                      "searchKey": "http_test.trackLastConnListener.Accept",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l trackLastConnListener) Accept() (c net.Conn, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l trackLastConnListener) Accept() (c net.Conn, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#blockingRemoteAddrListener",
              "documentation": {
                "identifier": "blockingRemoteAddrListener",
                "newPage": false,
                "searchKey": "http_test.blockingRemoteAddrListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type blockingRemoteAddrListener struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype blockingRemoteAddrListener struct {\n\tnet.Listener\n\tconns chan<- net.Conn\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#blockingRemoteAddrListener.Accept",
                    "documentation": {
                      "identifier": "blockingRemoteAddrListener.Accept",
                      "newPage": false,
                      "searchKey": "http_test.blockingRemoteAddrListener.Accept",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *blockingRemoteAddrListener) Accept() (net.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *blockingRemoteAddrListener) Accept() (net.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#blockingRemoteAddrConn",
              "documentation": {
                "identifier": "blockingRemoteAddrConn",
                "newPage": false,
                "searchKey": "http_test.blockingRemoteAddrConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type blockingRemoteAddrConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype blockingRemoteAddrConn struct {\n\tnet.Conn\n\taddrs chan net.Addr\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#blockingRemoteAddrConn.RemoteAddr",
                    "documentation": {
                      "identifier": "blockingRemoteAddrConn.RemoteAddr",
                      "newPage": false,
                      "searchKey": "http_test.blockingRemoteAddrConn.RemoteAddr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *blockingRemoteAddrConn) RemoteAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *blockingRemoteAddrConn) RemoteAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#serverExpectTest",
              "documentation": {
                "identifier": "serverExpectTest",
                "newPage": false,
                "searchKey": "http_test.serverExpectTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type serverExpectTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype serverExpectTest struct {\n\tcontentLength    int // of request body\n\tchunked          bool\n\texpectation      string // e.g. \"100-continue\"\n\treadBody         bool   // whether handler should read the body (if false, sends StatusUnauthorized)\n\texpectedResponse string // expected substring in first line of http response\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#expectTest",
                    "documentation": {
                      "identifier": "expectTest",
                      "newPage": false,
                      "searchKey": "http_test.expectTest",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func expectTest(contentLength int, expectation string, readBody bool, expectedResponse string) serverExpectTest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc expectTest(contentLength int, expectation string, readBody bool, expectedResponse string) serverExpectTest\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#handlerBodyCloseTest",
              "documentation": {
                "identifier": "handlerBodyCloseTest",
                "newPage": false,
                "searchKey": "http_test.handlerBodyCloseTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type handlerBodyCloseTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype handlerBodyCloseTest struct {\n\tbodySize     int\n\tbodyChunked  bool\n\treqConnClose bool\n\n\twantEOFSearch bool // should Handler's Body.Close do Reads, looking for EOF?\n\twantNextReq   bool // should it find the next request on the same conn?\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#handlerBodyCloseTest.connectionHeader",
                    "documentation": {
                      "identifier": "handlerBodyCloseTest.connectionHeader",
                      "newPage": false,
                      "searchKey": "http_test.handlerBodyCloseTest.connectionHeader",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t handlerBodyCloseTest) connectionHeader() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t handlerBodyCloseTest) connectionHeader() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHandlerBodyConsumer",
              "documentation": {
                "identifier": "testHandlerBodyConsumer",
                "newPage": false,
                "searchKey": "http_test.testHandlerBodyConsumer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testHandlerBodyConsumer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testHandlerBodyConsumer struct {\n\tname string\n\tf    func(io.ReadCloser)\n}\n```\n\ntestHandlerBodyConsumer represents a function injected into a test handler to vary work done on a request Body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#slowTestConn",
              "documentation": {
                "identifier": "slowTestConn",
                "newPage": false,
                "searchKey": "http_test.slowTestConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type slowTestConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype slowTestConn struct {\n\t// over multiple calls to Read, time.Durations are slept, strings are read.\n\tscript []interface{}\n\tclosec chan bool\n\n\tmu     sync.Mutex // guards rd/wd\n\trd, wd time.Time  // read, write deadline\n\tnoopConn\n}\n```\n\nslowTestConn is a net.Conn that provides a means to simulate parts of a request being received piecemeal. Deadlines can be set and enforced in both Read and Write. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#slowTestConn.SetDeadline",
                    "documentation": {
                      "identifier": "slowTestConn.SetDeadline",
                      "newPage": false,
                      "searchKey": "http_test.slowTestConn.SetDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *slowTestConn) SetDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *slowTestConn) SetDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#slowTestConn.SetReadDeadline",
                    "documentation": {
                      "identifier": "slowTestConn.SetReadDeadline",
                      "newPage": false,
                      "searchKey": "http_test.slowTestConn.SetReadDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *slowTestConn) SetReadDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *slowTestConn) SetReadDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#slowTestConn.SetWriteDeadline",
                    "documentation": {
                      "identifier": "slowTestConn.SetWriteDeadline",
                      "newPage": false,
                      "searchKey": "http_test.slowTestConn.SetWriteDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *slowTestConn) SetWriteDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *slowTestConn) SetWriteDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#slowTestConn.Read",
                    "documentation": {
                      "identifier": "slowTestConn.Read",
                      "newPage": false,
                      "searchKey": "http_test.slowTestConn.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *slowTestConn) Read(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *slowTestConn) Read(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#slowTestConn.Close",
                    "documentation": {
                      "identifier": "slowTestConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.slowTestConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *slowTestConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *slowTestConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#slowTestConn.Write",
                    "documentation": {
                      "identifier": "slowTestConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.slowTestConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *slowTestConn) Write(b []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *slowTestConn) Write(b []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#terrorWriter",
              "documentation": {
                "identifier": "terrorWriter",
                "newPage": false,
                "searchKey": "http_test.terrorWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type terrorWriter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype terrorWriter struct{ t *testing.T }\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#terrorWriter.Write",
                    "documentation": {
                      "identifier": "terrorWriter.Write",
                      "newPage": false,
                      "searchKey": "http_test.terrorWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w terrorWriter) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w terrorWriter) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#neverEnding",
              "documentation": {
                "identifier": "neverEnding",
                "newPage": false,
                "searchKey": "http_test.neverEnding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type neverEnding byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype neverEnding byte\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#neverEnding.Read",
                    "documentation": {
                      "identifier": "neverEnding.Read",
                      "newPage": false,
                      "searchKey": "http_test.neverEnding.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b neverEnding) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b neverEnding) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countReader",
              "documentation": {
                "identifier": "countReader",
                "newPage": false,
                "searchKey": "http_test.countReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countReader struct {\n\tr io.Reader\n\tn *int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#countReader.Read",
                    "documentation": {
                      "identifier": "countReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.countReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cr countReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cr countReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#errorListener",
              "documentation": {
                "identifier": "errorListener",
                "newPage": false,
                "searchKey": "http_test.errorListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type errorListener struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype errorListener struct {\n\terrs []error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#errorListener.Accept",
                    "documentation": {
                      "identifier": "errorListener.Accept",
                      "newPage": false,
                      "searchKey": "http_test.errorListener.Accept",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *errorListener) Accept() (c net.Conn, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *errorListener) Accept() (c net.Conn, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#errorListener.Close",
                    "documentation": {
                      "identifier": "errorListener.Close",
                      "newPage": false,
                      "searchKey": "http_test.errorListener.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *errorListener) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *errorListener) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#errorListener.Addr",
                    "documentation": {
                      "identifier": "errorListener.Addr",
                      "newPage": false,
                      "searchKey": "http_test.errorListener.Addr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (l *errorListener) Addr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (l *errorListener) Addr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#closeWriteTestConn",
              "documentation": {
                "identifier": "closeWriteTestConn",
                "newPage": false,
                "searchKey": "http_test.closeWriteTestConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type closeWriteTestConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype closeWriteTestConn struct {\n\trwTestConn\n\tdidCloseWrite bool\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#closeWriteTestConn.CloseWrite",
                    "documentation": {
                      "identifier": "closeWriteTestConn.CloseWrite",
                      "newPage": false,
                      "searchKey": "http_test.closeWriteTestConn.CloseWrite",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *closeWriteTestConn) CloseWrite() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *closeWriteTestConn) CloseWrite() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#repeatReader",
              "documentation": {
                "identifier": "repeatReader",
                "newPage": false,
                "searchKey": "http_test.repeatReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type repeatReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype repeatReader struct {\n\tcontent []byte\n\tcount   int\n\toff     int\n}\n```\n\nrepeatReader reads content count times, then EOFs. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#repeatReader.Read",
                    "documentation": {
                      "identifier": "repeatReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.repeatReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *repeatReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *repeatReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#eofListenerNotComparable",
              "documentation": {
                "identifier": "eofListenerNotComparable",
                "newPage": false,
                "searchKey": "http_test.eofListenerNotComparable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type eofListenerNotComparable []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype eofListenerNotComparable []int\n```\n\nListener for TestServerListenNotComparableListener. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#eofListenerNotComparable.Accept",
                    "documentation": {
                      "identifier": "eofListenerNotComparable.Accept",
                      "newPage": false,
                      "searchKey": "http_test.eofListenerNotComparable.Accept",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (eofListenerNotComparable) Accept() (net.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (eofListenerNotComparable) Accept() (net.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#eofListenerNotComparable.Addr",
                    "documentation": {
                      "identifier": "eofListenerNotComparable.Addr",
                      "newPage": false,
                      "searchKey": "http_test.eofListenerNotComparable.Addr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (eofListenerNotComparable) Addr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (eofListenerNotComparable) Addr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#eofListenerNotComparable.Close",
                    "documentation": {
                      "identifier": "eofListenerNotComparable.Close",
                      "newPage": false,
                      "searchKey": "http_test.eofListenerNotComparable.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (eofListenerNotComparable) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (eofListenerNotComparable) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countCloseListener",
              "documentation": {
                "identifier": "countCloseListener",
                "newPage": false,
                "searchKey": "http_test.countCloseListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countCloseListener struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countCloseListener struct {\n\tnet.Listener\n\tcloses int32 // atomic\n}\n```\n\ncountCloseListener is a Listener wrapper that counts the number of Close calls. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#countCloseListener.Close",
                    "documentation": {
                      "identifier": "countCloseListener.Close",
                      "newPage": false,
                      "searchKey": "http_test.countCloseListener.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (p *countCloseListener) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (p *countCloseListener) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#byteAtATimeReader",
              "documentation": {
                "identifier": "byteAtATimeReader",
                "newPage": false,
                "searchKey": "http_test.byteAtATimeReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteAtATimeReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteAtATimeReader struct {\n\tbuf []byte\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#byteAtATimeReader.Read",
                    "documentation": {
                      "identifier": "byteAtATimeReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.byteAtATimeReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (b *byteAtATimeReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (b *byteAtATimeReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testCloseConn",
              "documentation": {
                "identifier": "testCloseConn",
                "newPage": false,
                "searchKey": "http_test.testCloseConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testCloseConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testCloseConn struct {\n\tnet.Conn\n\tset *testConnSet\n}\n```\n\ntestCloseConn is a net.Conn tracked by a testConnSet. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#testCloseConn.Close",
                    "documentation": {
                      "identifier": "testCloseConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.testCloseConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testCloseConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testCloseConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testConnSet",
              "documentation": {
                "identifier": "testConnSet",
                "newPage": false,
                "searchKey": "http_test.testConnSet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testConnSet struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testConnSet struct {\n\tt      *testing.T\n\tmu     sync.Mutex // guards closed and list\n\tclosed map[net.Conn]bool\n\tlist   []net.Conn // in order created\n}\n```\n\ntestConnSet tracks a set of TCP connections and whether they've been closed. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#makeTestDial",
                    "documentation": {
                      "identifier": "makeTestDial",
                      "newPage": false,
                      "searchKey": "http_test.makeTestDial",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeTestDial(t *testing.T) (*testConnSet, func(n, addr string) (net.Conn, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeTestDial(t *testing.T) (*testConnSet, func(n, addr string) (net.Conn, error))\n```\n\nsome tests use this to manage raw tcp connections for later inspection \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#testConnSet.insert",
                    "documentation": {
                      "identifier": "testConnSet.insert",
                      "newPage": false,
                      "searchKey": "http_test.testConnSet.insert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tcs *testConnSet) insert(c net.Conn)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tcs *testConnSet) insert(c net.Conn)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#testConnSet.remove",
                    "documentation": {
                      "identifier": "testConnSet.remove",
                      "newPage": false,
                      "searchKey": "http_test.testConnSet.remove",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tcs *testConnSet) remove(c net.Conn)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tcs *testConnSet) remove(c net.Conn)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#testConnSet.check",
                    "documentation": {
                      "identifier": "testConnSet.check",
                      "newPage": false,
                      "searchKey": "http_test.testConnSet.check",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (tcs *testConnSet) check(t *testing.T)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (tcs *testConnSet) check(t *testing.T)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countedConn",
              "documentation": {
                "identifier": "countedConn",
                "newPage": false,
                "searchKey": "http_test.countedConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countedConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countedConn struct {\n\tnet.Conn\n}\n```\n\nA countedConn is a net.Conn that decrements an atomic counter when finalized. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countingDialer",
              "documentation": {
                "identifier": "countingDialer",
                "newPage": false,
                "searchKey": "http_test.countingDialer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countingDialer struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countingDialer struct {\n\tdialer      net.Dialer\n\tmu          sync.Mutex\n\ttotal, live int64\n}\n```\n\nA countingDialer dials connections and counts the number that remain reachable. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#countingDialer.DialContext",
                    "documentation": {
                      "identifier": "countingDialer.DialContext",
                      "newPage": false,
                      "searchKey": "http_test.countingDialer.DialContext",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *countingDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *countingDialer) DialContext(ctx context.Context, network, address string) (net.Conn, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#countingDialer.decrement",
                    "documentation": {
                      "identifier": "countingDialer.decrement",
                      "newPage": false,
                      "searchKey": "http_test.countingDialer.decrement",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *countingDialer) decrement(*countedConn)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *countingDialer) decrement(*countedConn)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#countingDialer.Read",
                    "documentation": {
                      "identifier": "countingDialer.Read",
                      "newPage": false,
                      "searchKey": "http_test.countingDialer.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d *countingDialer) Read() (total, live int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d *countingDialer) Read() (total, live int64)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countedContext",
              "documentation": {
                "identifier": "countedContext",
                "newPage": false,
                "searchKey": "http_test.countedContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countedContext struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countedContext struct {\n\tcontext.Context\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#contextCounter",
              "documentation": {
                "identifier": "contextCounter",
                "newPage": false,
                "searchKey": "http_test.contextCounter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type contextCounter struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype contextCounter struct {\n\tmu   sync.Mutex\n\tlive int64\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#contextCounter.Track",
                    "documentation": {
                      "identifier": "contextCounter.Track",
                      "newPage": false,
                      "searchKey": "http_test.contextCounter.Track",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *contextCounter) Track(ctx context.Context) context.Context"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *contextCounter) Track(ctx context.Context) context.Context\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#contextCounter.decrement",
                    "documentation": {
                      "identifier": "contextCounter.decrement",
                      "newPage": false,
                      "searchKey": "http_test.contextCounter.decrement",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *contextCounter) decrement(*countedContext)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *contextCounter) decrement(*countedContext)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#contextCounter.Read",
                    "documentation": {
                      "identifier": "contextCounter.Read",
                      "newPage": false,
                      "searchKey": "http_test.contextCounter.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cc *contextCounter) Read() (live int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cc *contextCounter) Read() (live int64)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fooProto",
              "documentation": {
                "identifier": "fooProto",
                "newPage": false,
                "searchKey": "http_test.fooProto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type fooProto struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype fooProto struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#fooProto.RoundTrip",
                    "documentation": {
                      "identifier": "fooProto.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.fooProto.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fooProto) RoundTrip(req *Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fooProto) RoundTrip(req *Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#proxyFromEnvTest",
              "documentation": {
                "identifier": "proxyFromEnvTest",
                "newPage": false,
                "searchKey": "http_test.proxyFromEnvTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type proxyFromEnvTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype proxyFromEnvTest struct {\n\treq string // URL to fetch; blank means \"http://example.com\"\n\n\tenv      string // HTTP_PROXY\n\thttpsenv string // HTTPS_PROXY\n\tnoenv    string // NO_PROXY\n\treqmeth  string // REQUEST_METHOD\n\n\twant    string\n\twanterr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#proxyFromEnvTest.String",
                    "documentation": {
                      "identifier": "proxyFromEnvTest.String",
                      "newPage": false,
                      "searchKey": "http_test.proxyFromEnvTest.String",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (t proxyFromEnvTest) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (t proxyFromEnvTest) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#byteFromChanReader",
              "documentation": {
                "identifier": "byteFromChanReader",
                "newPage": false,
                "searchKey": "http_test.byteFromChanReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type byteFromChanReader chan byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype byteFromChanReader chan byte\n```\n\nbyteFromChanReader is an io.Reader that reads a single byte at a time from the channel. When the channel is closed, the reader returns io.EOF. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#byteFromChanReader.Read",
                    "documentation": {
                      "identifier": "byteFromChanReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.byteFromChanReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c byteFromChanReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c byteFromChanReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#closerFunc",
              "documentation": {
                "identifier": "closerFunc",
                "newPage": false,
                "searchKey": "http_test.closerFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type closerFunc func() error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype closerFunc func() error\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#closerFunc.Close",
                    "documentation": {
                      "identifier": "closerFunc.Close",
                      "newPage": false,
                      "searchKey": "http_test.closerFunc.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f closerFunc) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f closerFunc) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#writerFuncConn",
              "documentation": {
                "identifier": "writerFuncConn",
                "newPage": false,
                "searchKey": "http_test.writerFuncConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type writerFuncConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype writerFuncConn struct {\n\tnet.Conn\n\twrite func(p []byte) (n int, err error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#writerFuncConn.Write",
                    "documentation": {
                      "identifier": "writerFuncConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.writerFuncConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c writerFuncConn) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c writerFuncConn) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#logWritesConn",
              "documentation": {
                "identifier": "logWritesConn",
                "newPage": false,
                "searchKey": "http_test.logWritesConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type logWritesConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype logWritesConn struct {\n\tnet.Conn // nil. crash on use.\n\n\tw io.Writer\n\n\trch <-chan io.Reader\n\tr   io.Reader // nil until received by rch\n\n\tmu     sync.Mutex\n\twrites []string\n}\n```\n\nlogWritesConn is a net.Conn that logs each Write call to writes and then proxies to w. It proxies Read calls to a reader it receives from rch. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#logWritesConn.Write",
                    "documentation": {
                      "identifier": "logWritesConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.logWritesConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *logWritesConn) Write(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *logWritesConn) Write(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#logWritesConn.Read",
                    "documentation": {
                      "identifier": "logWritesConn.Read",
                      "newPage": false,
                      "searchKey": "http_test.logWritesConn.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *logWritesConn) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *logWritesConn) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#logWritesConn.Close",
                    "documentation": {
                      "identifier": "logWritesConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.logWritesConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *logWritesConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *logWritesConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#funcConn",
              "documentation": {
                "identifier": "funcConn",
                "newPage": false,
                "searchKey": "http_test.funcConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type funcConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype funcConn struct {\n\tnet.Conn\n\tread  func([]byte) (int, error)\n\twrite func([]byte) (int, error)\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#funcConn.Read",
                    "documentation": {
                      "identifier": "funcConn.Read",
                      "newPage": false,
                      "searchKey": "http_test.funcConn.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c funcConn) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c funcConn) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#funcConn.Write",
                    "documentation": {
                      "identifier": "funcConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.funcConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c funcConn) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c funcConn) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#funcConn.Close",
                    "documentation": {
                      "identifier": "funcConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.funcConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c funcConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c funcConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#funcRoundTripper",
              "documentation": {
                "identifier": "funcRoundTripper",
                "newPage": false,
                "searchKey": "http_test.funcRoundTripper",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type funcRoundTripper func()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype funcRoundTripper func()\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#funcRoundTripper.RoundTrip",
                    "documentation": {
                      "identifier": "funcRoundTripper.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.funcRoundTripper.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (fn funcRoundTripper) RoundTrip(*Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (fn funcRoundTripper) RoundTrip(*Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#countCloseReader",
              "documentation": {
                "identifier": "countCloseReader",
                "newPage": false,
                "searchKey": "http_test.countCloseReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type countCloseReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countCloseReader struct {\n\tn *int\n\tio.Reader\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#countCloseReader.Close",
                    "documentation": {
                      "identifier": "countCloseReader.Close",
                      "newPage": false,
                      "searchKey": "http_test.countCloseReader.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (cr countCloseReader) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (cr countCloseReader) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#funcWriter",
              "documentation": {
                "identifier": "funcWriter",
                "newPage": false,
                "searchKey": "http_test.funcWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type funcWriter func([]byte) (int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype funcWriter func([]byte) (int, error)\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#funcWriter.Write",
                    "documentation": {
                      "identifier": "funcWriter.Write",
                      "newPage": false,
                      "searchKey": "http_test.funcWriter.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f funcWriter) Write(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f funcWriter) Write(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#doneContext",
              "documentation": {
                "identifier": "doneContext",
                "newPage": false,
                "searchKey": "http_test.doneContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type doneContext struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype doneContext struct {\n\tcontext.Context\n\terr error\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#doneContext.Done",
                    "documentation": {
                      "identifier": "doneContext.Done",
                      "newPage": false,
                      "searchKey": "http_test.doneContext.Done",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (doneContext) Done() <-chan struct{}"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (doneContext) Done() <-chan struct{}\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#doneContext.Err",
                    "documentation": {
                      "identifier": "doneContext.Err",
                      "newPage": false,
                      "searchKey": "http_test.doneContext.Err",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (d doneContext) Err() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (d doneContext) Err() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testMockTCPConn",
              "documentation": {
                "identifier": "testMockTCPConn",
                "newPage": false,
                "searchKey": "http_test.testMockTCPConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type testMockTCPConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype testMockTCPConn struct {\n\t*net.TCPConn\n\n\tReadFromCalled bool\n}\n```\n\ntestMockTCPConn is a mock TCP connection used to test that ReadFrom is called when sending the request body. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#testMockTCPConn.ReadFrom",
                    "documentation": {
                      "identifier": "testMockTCPConn.ReadFrom",
                      "newPage": false,
                      "searchKey": "http_test.testMockTCPConn.ReadFrom",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *testMockTCPConn) ReadFrom(r io.Reader) (int64, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *testMockTCPConn) ReadFrom(r io.Reader) (int64, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#bodyCloser",
              "documentation": {
                "identifier": "bodyCloser",
                "newPage": false,
                "searchKey": "http_test.bodyCloser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type bodyCloser bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype bodyCloser bool\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#bodyCloser.Close",
                    "documentation": {
                      "identifier": "bodyCloser.Close",
                      "newPage": false,
                      "searchKey": "http_test.bodyCloser.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bc *bodyCloser) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bc *bodyCloser) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#bodyCloser.Read",
                    "documentation": {
                      "identifier": "bodyCloser.Read",
                      "newPage": false,
                      "searchKey": "http_test.bodyCloser.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bc *bodyCloser) Read(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bc *bodyCloser) Read(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#breakableConn",
              "documentation": {
                "identifier": "breakableConn",
                "newPage": false,
                "searchKey": "http_test.breakableConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type breakableConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype breakableConn struct {\n\tnet.Conn\n\t*brokenState\n}\n```\n\nbreakableConn is a net.Conn wrapper with a Write method that will fail when its brokenState is true. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#breakableConn.Write",
                    "documentation": {
                      "identifier": "breakableConn.Write",
                      "newPage": false,
                      "searchKey": "http_test.breakableConn.Write",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (w *breakableConn) Write(b []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (w *breakableConn) Write(b []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#brokenState",
              "documentation": {
                "identifier": "brokenState",
                "newPage": false,
                "searchKey": "http_test.brokenState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type brokenState struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype brokenState struct {\n\tsync.Mutex\n\tbroken bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#timeoutProto",
              "documentation": {
                "identifier": "timeoutProto",
                "newPage": false,
                "searchKey": "http_test.timeoutProto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type timeoutProto struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype timeoutProto struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#timeoutProto.RoundTrip",
                    "documentation": {
                      "identifier": "timeoutProto.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.timeoutProto.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (timeoutProto) RoundTrip(req *Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (timeoutProto) RoundTrip(req *Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#roundTripFunc",
              "documentation": {
                "identifier": "roundTripFunc",
                "newPage": false,
                "searchKey": "http_test.roundTripFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type roundTripFunc func(r *net/http.Request) (*net/http.Response, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype roundTripFunc func(r *Request) (*Response, error)\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#roundTripFunc.RoundTrip",
                    "documentation": {
                      "identifier": "roundTripFunc.RoundTrip",
                      "newPage": false,
                      "searchKey": "http_test.roundTripFunc.RoundTrip",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (f roundTripFunc) RoundTrip(r *Request) (*Response, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (f roundTripFunc) RoundTrip(r *Request) (*Response, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#dumpConn",
              "documentation": {
                "identifier": "dumpConn",
                "newPage": false,
                "searchKey": "http_test.dumpConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dumpConn struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dumpConn struct {\n\tio.Writer\n\tio.Reader\n}\n```\n\ndumpConn is a net.Conn which writes to Writer and reads from Reader \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#dumpConn.Close",
                    "documentation": {
                      "identifier": "dumpConn.Close",
                      "newPage": false,
                      "searchKey": "http_test.dumpConn.Close",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) Close() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) Close() error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#dumpConn.LocalAddr",
                    "documentation": {
                      "identifier": "dumpConn.LocalAddr",
                      "newPage": false,
                      "searchKey": "http_test.dumpConn.LocalAddr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) LocalAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) LocalAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#dumpConn.RemoteAddr",
                    "documentation": {
                      "identifier": "dumpConn.RemoteAddr",
                      "newPage": false,
                      "searchKey": "http_test.dumpConn.RemoteAddr",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) RemoteAddr() net.Addr"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) RemoteAddr() net.Addr\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#dumpConn.SetDeadline",
                    "documentation": {
                      "identifier": "dumpConn.SetDeadline",
                      "newPage": false,
                      "searchKey": "http_test.dumpConn.SetDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) SetDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) SetDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#dumpConn.SetReadDeadline",
                    "documentation": {
                      "identifier": "dumpConn.SetReadDeadline",
                      "newPage": false,
                      "searchKey": "http_test.dumpConn.SetReadDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) SetReadDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) SetReadDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/net/http_test#dumpConn.SetWriteDeadline",
                    "documentation": {
                      "identifier": "dumpConn.SetWriteDeadline",
                      "newPage": false,
                      "searchKey": "http_test.dumpConn.SetWriteDeadline",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *dumpConn) SetWriteDeadline(t time.Time) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *dumpConn) SetWriteDeadline(t time.Time) error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#delegateReader",
              "documentation": {
                "identifier": "delegateReader",
                "newPage": false,
                "searchKey": "http_test.delegateReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type delegateReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype delegateReader struct {\n\tc chan io.Reader\n\tr io.Reader // nil until received from c\n}\n```\n\ndelegateReader is a reader that delegates to another reader, once it arrives on a channel. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/net/http_test#delegateReader.Read",
                    "documentation": {
                      "identifier": "delegateReader.Read",
                      "newPage": false,
                      "searchKey": "http_test.delegateReader.Read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *delegateReader) Read(p []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *delegateReader) Read(p []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/net/http_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/net/http_test#TestNextProtoUpgrade",
              "documentation": {
                "identifier": "TestNextProtoUpgrade",
                "newPage": false,
                "searchKey": "http_test.TestNextProtoUpgrade",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNextProtoUpgrade(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNextProtoUpgrade(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#handleTLSProtocol09",
              "documentation": {
                "identifier": "handleTLSProtocol09",
                "newPage": false,
                "searchKey": "http_test.handleTLSProtocol09",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func handleTLSProtocol09(srv *Server, conn *tls.Conn, h Handler)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc handleTLSProtocol09(srv *Server, conn *tls.Conn, h Handler)\n```\n\nhandleTLSProtocol09 implements the HTTP/0.9 protocol over TLS, for the TestNextProtoUpgrade test. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#pedanticReadAll",
              "documentation": {
                "identifier": "pedanticReadAll",
                "newPage": false,
                "searchKey": "http_test.pedanticReadAll",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func pedanticReadAll(r io.Reader) (b []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc pedanticReadAll(r io.Reader) (b []byte, err error)\n```\n\npedanticReadAll works like io.ReadAll but additionally verifies that r obeys the documented io.Reader contract. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClient",
              "documentation": {
                "identifier": "TestClient",
                "newPage": false,
                "searchKey": "http_test.TestClient",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClient(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClient(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientHead_h1",
              "documentation": {
                "identifier": "TestClientHead_h1",
                "newPage": false,
                "searchKey": "http_test.TestClientHead_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientHead_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientHead_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientHead_h2",
              "documentation": {
                "identifier": "TestClientHead_h2",
                "newPage": false,
                "searchKey": "http_test.TestClientHead_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientHead_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientHead_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testClientHead",
              "documentation": {
                "identifier": "testClientHead",
                "newPage": false,
                "searchKey": "http_test.testClientHead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testClientHead(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testClientHead(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestGetRequestFormat",
              "documentation": {
                "identifier": "TestGetRequestFormat",
                "newPage": false,
                "searchKey": "http_test.TestGetRequestFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetRequestFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetRequestFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestPostRequestFormat",
              "documentation": {
                "identifier": "TestPostRequestFormat",
                "newPage": false,
                "searchKey": "http_test.TestPostRequestFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPostRequestFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPostRequestFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestPostFormRequestFormat",
              "documentation": {
                "identifier": "TestPostFormRequestFormat",
                "newPage": false,
                "searchKey": "http_test.TestPostFormRequestFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPostFormRequestFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPostFormRequestFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirects",
              "documentation": {
                "identifier": "TestClientRedirects",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirects(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirectContext",
              "documentation": {
                "identifier": "TestClientRedirectContext",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirectContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirectContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirectContext(t *testing.T)\n```\n\nTests that Client redirects' contexts are derived from the original request's context. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestPostRedirects",
              "documentation": {
                "identifier": "TestPostRedirects",
                "newPage": false,
                "searchKey": "http_test.TestPostRedirects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPostRedirects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPostRedirects(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDeleteRedirects",
              "documentation": {
                "identifier": "TestDeleteRedirects",
                "newPage": false,
                "searchKey": "http_test.TestDeleteRedirects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDeleteRedirects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDeleteRedirects(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testRedirectsByMethod",
              "documentation": {
                "identifier": "testRedirectsByMethod",
                "newPage": false,
                "searchKey": "http_test.testRedirectsByMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRedirectsByMethod(t *testing.T, method string, table []redirectTest, want string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRedirectsByMethod(t *testing.T, method string, table []redirectTest, want string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#removeCommonLines",
              "documentation": {
                "identifier": "removeCommonLines",
                "newPage": false,
                "searchKey": "http_test.removeCommonLines",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func removeCommonLines(a, b string) (asuffix, bsuffix string, commonLines int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc removeCommonLines(a, b string) (asuffix, bsuffix string, commonLines int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirectUseResponse",
              "documentation": {
                "identifier": "TestClientRedirectUseResponse",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirectUseResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirectUseResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirectUseResponse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirect308NoLocation",
              "documentation": {
                "identifier": "TestClientRedirect308NoLocation",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirect308NoLocation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirect308NoLocation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirect308NoLocation(t *testing.T)\n```\n\nIssue 17773: don't follow a 308 (or 307) if the response doesn't have a Location header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirect308NoGetBody",
              "documentation": {
                "identifier": "TestClientRedirect308NoGetBody",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirect308NoGetBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirect308NoGetBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirect308NoGetBody(t *testing.T)\n```\n\nDon't follow a 307/308 if we can't resent the request body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientSendsCookieFromJar",
              "documentation": {
                "identifier": "TestClientSendsCookieFromJar",
                "newPage": false,
                "searchKey": "http_test.TestClientSendsCookieFromJar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientSendsCookieFromJar(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientSendsCookieFromJar(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRedirectCookiesJar",
              "documentation": {
                "identifier": "TestRedirectCookiesJar",
                "newPage": false,
                "searchKey": "http_test.TestRedirectCookiesJar",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirectCookiesJar(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirectCookiesJar(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#matchReturnedCookies",
              "documentation": {
                "identifier": "matchReturnedCookies",
                "newPage": false,
                "searchKey": "http_test.matchReturnedCookies",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchReturnedCookies(t *testing.T, expected, given []*Cookie)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchReturnedCookies(t *testing.T, expected, given []*Cookie)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestJarCalls",
              "documentation": {
                "identifier": "TestJarCalls",
                "newPage": false,
                "searchKey": "http_test.TestJarCalls",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestJarCalls(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestJarCalls(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStreamingGet_h1",
              "documentation": {
                "identifier": "TestStreamingGet_h1",
                "newPage": false,
                "searchKey": "http_test.TestStreamingGet_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStreamingGet_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStreamingGet_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStreamingGet_h2",
              "documentation": {
                "identifier": "TestStreamingGet_h2",
                "newPage": false,
                "searchKey": "http_test.TestStreamingGet_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStreamingGet_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStreamingGet_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testStreamingGet",
              "documentation": {
                "identifier": "testStreamingGet",
                "newPage": false,
                "searchKey": "http_test.testStreamingGet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStreamingGet(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStreamingGet(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientWrites",
              "documentation": {
                "identifier": "TestClientWrites",
                "newPage": false,
                "searchKey": "http_test.TestClientWrites",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientWrites(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientWrites(t *testing.T)\n```\n\nTestClientWrites verifies that client requests are buffered and we don't send a TCP packet per line of the http request + body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientInsecureTransport",
              "documentation": {
                "identifier": "TestClientInsecureTransport",
                "newPage": false,
                "searchKey": "http_test.TestClientInsecureTransport",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientInsecureTransport(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientInsecureTransport(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientErrorWithRequestURI",
              "documentation": {
                "identifier": "TestClientErrorWithRequestURI",
                "newPage": false,
                "searchKey": "http_test.TestClientErrorWithRequestURI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientErrorWithRequestURI(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientErrorWithRequestURI(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientWithCorrectTLSServerName",
              "documentation": {
                "identifier": "TestClientWithCorrectTLSServerName",
                "newPage": false,
                "searchKey": "http_test.TestClientWithCorrectTLSServerName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientWithCorrectTLSServerName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientWithCorrectTLSServerName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientWithIncorrectTLSServerName",
              "documentation": {
                "identifier": "TestClientWithIncorrectTLSServerName",
                "newPage": false,
                "searchKey": "http_test.TestClientWithIncorrectTLSServerName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientWithIncorrectTLSServerName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientWithIncorrectTLSServerName(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportUsesTLSConfigServerName",
              "documentation": {
                "identifier": "TestTransportUsesTLSConfigServerName",
                "newPage": false,
                "searchKey": "http_test.TestTransportUsesTLSConfigServerName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportUsesTLSConfigServerName(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportUsesTLSConfigServerName(t *testing.T)\n```\n\nTest for golang.org/issue/5829; the Transport should respect TLSClientConfig.ServerName when not empty. \n\ntls.Config.ServerName (non-empty, set to \"example.com\") takes precedence over \"some-other-host.tld\" which previously incorrectly took precedence. We don't actually connect to (or even resolve) \"some-other-host.tld\", though, because of the Transport.Dial hook. \n\nThe httptest.Server has a cert with \"example.com\" as its name. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestResponseSetsTLSConnectionState",
              "documentation": {
                "identifier": "TestResponseSetsTLSConnectionState",
                "newPage": false,
                "searchKey": "http_test.TestResponseSetsTLSConnectionState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResponseSetsTLSConnectionState(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResponseSetsTLSConnectionState(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTPSClientDetectsHTTPServer",
              "documentation": {
                "identifier": "TestHTTPSClientDetectsHTTPServer",
                "newPage": false,
                "searchKey": "http_test.TestHTTPSClientDetectsHTTPServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTPSClientDetectsHTTPServer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTPSClientDetectsHTTPServer(t *testing.T)\n```\n\nCheck that an HTTPS client can interpret a particular TLS error to determine that the server is speaking HTTP. See golang.org/issue/11111. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientHeadContentLength_h1",
              "documentation": {
                "identifier": "TestClientHeadContentLength_h1",
                "newPage": false,
                "searchKey": "http_test.TestClientHeadContentLength_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientHeadContentLength_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientHeadContentLength_h1(t *testing.T)\n```\n\nVerify Response.ContentLength is populated. [https://golang.org/issue/4126](https://golang.org/issue/4126) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientHeadContentLength_h2",
              "documentation": {
                "identifier": "TestClientHeadContentLength_h2",
                "newPage": false,
                "searchKey": "http_test.TestClientHeadContentLength_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientHeadContentLength_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientHeadContentLength_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testClientHeadContentLength",
              "documentation": {
                "identifier": "testClientHeadContentLength",
                "newPage": false,
                "searchKey": "http_test.testClientHeadContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testClientHeadContentLength(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testClientHeadContentLength(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestEmptyPasswordAuth",
              "documentation": {
                "identifier": "TestEmptyPasswordAuth",
                "newPage": false,
                "searchKey": "http_test.TestEmptyPasswordAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyPasswordAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyPasswordAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestBasicAuth",
              "documentation": {
                "identifier": "TestBasicAuth",
                "newPage": false,
                "searchKey": "http_test.TestBasicAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasicAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasicAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestBasicAuthHeadersPreserved",
              "documentation": {
                "identifier": "TestBasicAuthHeadersPreserved",
                "newPage": false,
                "searchKey": "http_test.TestBasicAuthHeadersPreserved",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBasicAuthHeadersPreserved(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBasicAuthHeadersPreserved(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStripPasswordFromError",
              "documentation": {
                "identifier": "TestStripPasswordFromError",
                "newPage": false,
                "searchKey": "http_test.TestStripPasswordFromError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStripPasswordFromError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStripPasswordFromError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeout_h1",
              "documentation": {
                "identifier": "TestClientTimeout_h1",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeout_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeout_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeout_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeout_h2",
              "documentation": {
                "identifier": "TestClientTimeout_h2",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeout_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeout_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeout_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testClientTimeout",
              "documentation": {
                "identifier": "testClientTimeout",
                "newPage": false,
                "searchKey": "http_test.testClientTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testClientTimeout(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testClientTimeout(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeout_Headers_h1",
              "documentation": {
                "identifier": "TestClientTimeout_Headers_h1",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeout_Headers_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeout_Headers_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeout_Headers_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeout_Headers_h2",
              "documentation": {
                "identifier": "TestClientTimeout_Headers_h2",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeout_Headers_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeout_Headers_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeout_Headers_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testClientTimeout_Headers",
              "documentation": {
                "identifier": "testClientTimeout_Headers",
                "newPage": false,
                "searchKey": "http_test.testClientTimeout_Headers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testClientTimeout_Headers(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testClientTimeout_Headers(t *testing.T, h2 bool)\n```\n\nClient.Timeout firing before getting to the body \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeoutCancel",
              "documentation": {
                "identifier": "TestClientTimeoutCancel",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeoutCancel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeoutCancel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeoutCancel(t *testing.T)\n```\n\nIssue 16094: if Client.Timeout is set but not hit, a Timeout error shouldn't be returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirectEatsBody_h1",
              "documentation": {
                "identifier": "TestClientRedirectEatsBody_h1",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirectEatsBody_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirectEatsBody_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirectEatsBody_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirectEatsBody_h2",
              "documentation": {
                "identifier": "TestClientRedirectEatsBody_h2",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirectEatsBody_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirectEatsBody_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirectEatsBody_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testClientRedirectEatsBody",
              "documentation": {
                "identifier": "testClientRedirectEatsBody",
                "newPage": false,
                "searchKey": "http_test.testClientRedirectEatsBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testClientRedirectEatsBody(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testClientRedirectEatsBody(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestReferer",
              "documentation": {
                "identifier": "TestReferer",
                "newPage": false,
                "searchKey": "http_test.TestReferer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReferer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReferer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirectResponseWithoutRequest",
              "documentation": {
                "identifier": "TestClientRedirectResponseWithoutRequest",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirectResponseWithoutRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirectResponseWithoutRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirectResponseWithoutRequest(t *testing.T)\n```\n\nIssue 15577: don't assume the roundtripper's response populates its Request field. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientCopyHeadersOnRedirect",
              "documentation": {
                "identifier": "TestClientCopyHeadersOnRedirect",
                "newPage": false,
                "searchKey": "http_test.TestClientCopyHeadersOnRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientCopyHeadersOnRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientCopyHeadersOnRedirect(t *testing.T)\n```\n\nIssue 4800: copy (some) headers when Client follows a redirect. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientCopyHostOnRedirect",
              "documentation": {
                "identifier": "TestClientCopyHostOnRedirect",
                "newPage": false,
                "searchKey": "http_test.TestClientCopyHostOnRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientCopyHostOnRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientCopyHostOnRedirect(t *testing.T)\n```\n\nIssue 22233: copy host when Client follows a relative redirect. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientAltersCookiesOnRedirect",
              "documentation": {
                "identifier": "TestClientAltersCookiesOnRedirect",
                "newPage": false,
                "searchKey": "http_test.TestClientAltersCookiesOnRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientAltersCookiesOnRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientAltersCookiesOnRedirect(t *testing.T)\n```\n\nIssue 17494: cookies should be altered when Client follows redirects. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestShouldCopyHeaderOnRedirect",
              "documentation": {
                "identifier": "TestShouldCopyHeaderOnRedirect",
                "newPage": false,
                "searchKey": "http_test.TestShouldCopyHeaderOnRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestShouldCopyHeaderOnRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestShouldCopyHeaderOnRedirect(t *testing.T)\n```\n\nPart of Issue 4800 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientRedirectTypes",
              "documentation": {
                "identifier": "TestClientRedirectTypes",
                "newPage": false,
                "searchKey": "http_test.TestClientRedirectTypes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientRedirectTypes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientRedirectTypes(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportBodyReadError",
              "documentation": {
                "identifier": "TestTransportBodyReadError",
                "newPage": false,
                "searchKey": "http_test.TestTransportBodyReadError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportBodyReadError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportBodyReadError(t *testing.T)\n```\n\nIssue 18239: make sure the Transport doesn't retry requests with bodies if Request.GetBody is not defined. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientCloseIdleConnections",
              "documentation": {
                "identifier": "TestClientCloseIdleConnections",
                "newPage": false,
                "searchKey": "http_test.TestClientCloseIdleConnections",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientCloseIdleConnections(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientCloseIdleConnections(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientPropagatesTimeoutToContext",
              "documentation": {
                "identifier": "TestClientPropagatesTimeoutToContext",
                "newPage": false,
                "searchKey": "http_test.TestClientPropagatesTimeoutToContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientPropagatesTimeoutToContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientPropagatesTimeoutToContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientDoCanceledVsTimeout_h1",
              "documentation": {
                "identifier": "TestClientDoCanceledVsTimeout_h1",
                "newPage": false,
                "searchKey": "http_test.TestClientDoCanceledVsTimeout_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientDoCanceledVsTimeout_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientDoCanceledVsTimeout_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientDoCanceledVsTimeout_h2",
              "documentation": {
                "identifier": "TestClientDoCanceledVsTimeout_h2",
                "newPage": false,
                "searchKey": "http_test.TestClientDoCanceledVsTimeout_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientDoCanceledVsTimeout_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientDoCanceledVsTimeout_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testClientDoCanceledVsTimeout",
              "documentation": {
                "identifier": "testClientDoCanceledVsTimeout",
                "newPage": false,
                "searchKey": "http_test.testClientDoCanceledVsTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testClientDoCanceledVsTimeout(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testClientDoCanceledVsTimeout(t *testing.T, h2 bool)\n```\n\nIssue 33545: lock-in the behavior promised by Client.Do's docs about request cancellation vs timing out. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientPopulatesNilResponseBody",
              "documentation": {
                "identifier": "TestClientPopulatesNilResponseBody",
                "newPage": false,
                "searchKey": "http_test.TestClientPopulatesNilResponseBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientPopulatesNilResponseBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientPopulatesNilResponseBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientCallsCloseOnlyOnce",
              "documentation": {
                "identifier": "TestClientCallsCloseOnlyOnce",
                "newPage": false,
                "searchKey": "http_test.TestClientCallsCloseOnlyOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientCallsCloseOnlyOnce(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientCallsCloseOnlyOnce(t *testing.T)\n```\n\nIssue 40382: Client calls Close multiple times on Request.Body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#optWithServerLog",
              "documentation": {
                "identifier": "optWithServerLog",
                "newPage": false,
                "searchKey": "http_test.optWithServerLog",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func optWithServerLog(lg *log.Logger) func(*httptest.Server)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc optWithServerLog(lg *log.Logger) func(*httptest.Server)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNewClientServerTest",
              "documentation": {
                "identifier": "TestNewClientServerTest",
                "newPage": false,
                "searchKey": "http_test.TestNewClientServerTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewClientServerTest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewClientServerTest(t *testing.T)\n```\n\nTesting the newClientServerTest helper itself. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestChunkedResponseHeaders_h1",
              "documentation": {
                "identifier": "TestChunkedResponseHeaders_h1",
                "newPage": false,
                "searchKey": "http_test.TestChunkedResponseHeaders_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkedResponseHeaders_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkedResponseHeaders_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestChunkedResponseHeaders_h2",
              "documentation": {
                "identifier": "TestChunkedResponseHeaders_h2",
                "newPage": false,
                "searchKey": "http_test.TestChunkedResponseHeaders_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkedResponseHeaders_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkedResponseHeaders_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testChunkedResponseHeaders",
              "documentation": {
                "identifier": "testChunkedResponseHeaders",
                "newPage": false,
                "searchKey": "http_test.testChunkedResponseHeaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testChunkedResponseHeaders(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testChunkedResponseHeaders(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#mostlyCopy",
              "documentation": {
                "identifier": "mostlyCopy",
                "newPage": false,
                "searchKey": "http_test.mostlyCopy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mostlyCopy(r *Response) *Response"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mostlyCopy(r *Response) *Response\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_HeadContentLengthNoBody",
              "documentation": {
                "identifier": "TestH12_HeadContentLengthNoBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_HeadContentLengthNoBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_HeadContentLengthNoBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_HeadContentLengthNoBody(t *testing.T)\n```\n\nIssue 13532 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_HeadContentLengthSmallBody",
              "documentation": {
                "identifier": "TestH12_HeadContentLengthSmallBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_HeadContentLengthSmallBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_HeadContentLengthSmallBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_HeadContentLengthSmallBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_HeadContentLengthLargeBody",
              "documentation": {
                "identifier": "TestH12_HeadContentLengthLargeBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_HeadContentLengthLargeBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_HeadContentLengthLargeBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_HeadContentLengthLargeBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_200NoBody",
              "documentation": {
                "identifier": "TestH12_200NoBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_200NoBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_200NoBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_200NoBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH2_204NoBody",
              "documentation": {
                "identifier": "TestH2_204NoBody",
                "newPage": false,
                "searchKey": "http_test.TestH2_204NoBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH2_204NoBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH2_204NoBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH2_304NoBody",
              "documentation": {
                "identifier": "TestH2_304NoBody",
                "newPage": false,
                "searchKey": "http_test.TestH2_304NoBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH2_304NoBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH2_304NoBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH2_404NoBody",
              "documentation": {
                "identifier": "TestH2_404NoBody",
                "newPage": false,
                "searchKey": "http_test.TestH2_404NoBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH2_404NoBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH2_404NoBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testH12_noBody",
              "documentation": {
                "identifier": "testH12_noBody",
                "newPage": false,
                "searchKey": "http_test.testH12_noBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testH12_noBody(t *testing.T, status int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testH12_noBody(t *testing.T, status int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_SmallBody",
              "documentation": {
                "identifier": "TestH12_SmallBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_SmallBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_SmallBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_SmallBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_ExplicitContentLength",
              "documentation": {
                "identifier": "TestH12_ExplicitContentLength",
                "newPage": false,
                "searchKey": "http_test.TestH12_ExplicitContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_ExplicitContentLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_ExplicitContentLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_FlushBeforeBody",
              "documentation": {
                "identifier": "TestH12_FlushBeforeBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_FlushBeforeBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_FlushBeforeBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_FlushBeforeBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_FlushMidBody",
              "documentation": {
                "identifier": "TestH12_FlushMidBody",
                "newPage": false,
                "searchKey": "http_test.TestH12_FlushMidBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_FlushMidBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_FlushMidBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_Head_ExplicitLen",
              "documentation": {
                "identifier": "TestH12_Head_ExplicitLen",
                "newPage": false,
                "searchKey": "http_test.TestH12_Head_ExplicitLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_Head_ExplicitLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_Head_ExplicitLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_Head_ImplicitLen",
              "documentation": {
                "identifier": "TestH12_Head_ImplicitLen",
                "newPage": false,
                "searchKey": "http_test.TestH12_Head_ImplicitLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_Head_ImplicitLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_Head_ImplicitLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_HandlerWritesTooLittle",
              "documentation": {
                "identifier": "TestH12_HandlerWritesTooLittle",
                "newPage": false,
                "searchKey": "http_test.TestH12_HandlerWritesTooLittle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_HandlerWritesTooLittle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_HandlerWritesTooLittle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_HandlerWritesTooMuch",
              "documentation": {
                "identifier": "TestH12_HandlerWritesTooMuch",
                "newPage": false,
                "searchKey": "http_test.TestH12_HandlerWritesTooMuch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_HandlerWritesTooMuch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_HandlerWritesTooMuch(t *testing.T)\n```\n\nTests that the HTTP/1 and HTTP/2 servers prevent handlers from writing more than they declared. This test does not test whether the transport deals with too much data, though, since the server doesn't make it possible to send bogus data. For those tests, see transport_test.go (for HTTP/1) or x/net/http2/transport_test.go (for HTTP/2). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_AutoGzip",
              "documentation": {
                "identifier": "TestH12_AutoGzip",
                "newPage": false,
                "searchKey": "http_test.TestH12_AutoGzip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_AutoGzip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_AutoGzip(t *testing.T)\n```\n\nVerify that both our HTTP/1 and HTTP/2 request and auto-decompress gzip. Some hosts send gzip even if you don't ask for it; see golang.org/issue/13298 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_AutoGzip_Disabled",
              "documentation": {
                "identifier": "TestH12_AutoGzip_Disabled",
                "newPage": false,
                "searchKey": "http_test.TestH12_AutoGzip_Disabled",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_AutoGzip_Disabled(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_AutoGzip_Disabled(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#Test304Responses_h1",
              "documentation": {
                "identifier": "Test304Responses_h1",
                "newPage": false,
                "searchKey": "http_test.Test304Responses_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test304Responses_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test304Responses_h1(t *testing.T)\n```\n\nTest304Responses verifies that 304s don't declare that they're chunking in their response headers and aren't allowed to produce output. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#Test304Responses_h2",
              "documentation": {
                "identifier": "Test304Responses_h2",
                "newPage": false,
                "searchKey": "http_test.Test304Responses_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test304Responses_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test304Responses_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#test304Responses",
              "documentation": {
                "identifier": "test304Responses",
                "newPage": false,
                "searchKey": "http_test.test304Responses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func test304Responses(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc test304Responses(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_ServerEmptyContentLength",
              "documentation": {
                "identifier": "TestH12_ServerEmptyContentLength",
                "newPage": false,
                "searchKey": "http_test.TestH12_ServerEmptyContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_ServerEmptyContentLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_ServerEmptyContentLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_RequestContentLength_Known_NonZero",
              "documentation": {
                "identifier": "TestH12_RequestContentLength_Known_NonZero",
                "newPage": false,
                "searchKey": "http_test.TestH12_RequestContentLength_Known_NonZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_RequestContentLength_Known_NonZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_RequestContentLength_Known_NonZero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_RequestContentLength_Known_Zero",
              "documentation": {
                "identifier": "TestH12_RequestContentLength_Known_Zero",
                "newPage": false,
                "searchKey": "http_test.TestH12_RequestContentLength_Known_Zero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_RequestContentLength_Known_Zero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_RequestContentLength_Known_Zero(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_RequestContentLength_Unknown",
              "documentation": {
                "identifier": "TestH12_RequestContentLength_Unknown",
                "newPage": false,
                "searchKey": "http_test.TestH12_RequestContentLength_Unknown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_RequestContentLength_Unknown(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_RequestContentLength_Unknown(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#h12requestContentLength",
              "documentation": {
                "identifier": "h12requestContentLength",
                "newPage": false,
                "searchKey": "http_test.h12requestContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func h12requestContentLength(t *testing.T, bodyfn func() io.Reader, wantLen int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc h12requestContentLength(t *testing.T, bodyfn func() io.Reader, wantLen int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCancelRequestMidBody_h1",
              "documentation": {
                "identifier": "TestCancelRequestMidBody_h1",
                "newPage": false,
                "searchKey": "http_test.TestCancelRequestMidBody_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCancelRequestMidBody_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCancelRequestMidBody_h1(t *testing.T)\n```\n\nTests that closing the Request.Cancel channel also while still reading the response body. Issue 13159. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCancelRequestMidBody_h2",
              "documentation": {
                "identifier": "TestCancelRequestMidBody_h2",
                "newPage": false,
                "searchKey": "http_test.TestCancelRequestMidBody_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCancelRequestMidBody_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCancelRequestMidBody_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testCancelRequestMidBody",
              "documentation": {
                "identifier": "testCancelRequestMidBody",
                "newPage": false,
                "searchKey": "http_test.testCancelRequestMidBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCancelRequestMidBody(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCancelRequestMidBody(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTrailersClientToServer_h1",
              "documentation": {
                "identifier": "TestTrailersClientToServer_h1",
                "newPage": false,
                "searchKey": "http_test.TestTrailersClientToServer_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailersClientToServer_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailersClientToServer_h1(t *testing.T)\n```\n\nTests that clients can send trailers to a server and that the server can read them. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTrailersClientToServer_h2",
              "documentation": {
                "identifier": "TestTrailersClientToServer_h2",
                "newPage": false,
                "searchKey": "http_test.TestTrailersClientToServer_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailersClientToServer_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailersClientToServer_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTrailersClientToServer",
              "documentation": {
                "identifier": "testTrailersClientToServer",
                "newPage": false,
                "searchKey": "http_test.testTrailersClientToServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTrailersClientToServer(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTrailersClientToServer(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTrailersServerToClient_h1",
              "documentation": {
                "identifier": "TestTrailersServerToClient_h1",
                "newPage": false,
                "searchKey": "http_test.TestTrailersServerToClient_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailersServerToClient_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailersServerToClient_h1(t *testing.T)\n```\n\nTests that servers send trailers to a client and that the client can read them. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTrailersServerToClient_h2",
              "documentation": {
                "identifier": "TestTrailersServerToClient_h2",
                "newPage": false,
                "searchKey": "http_test.TestTrailersServerToClient_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailersServerToClient_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailersServerToClient_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTrailersServerToClient_Flush_h1",
              "documentation": {
                "identifier": "TestTrailersServerToClient_Flush_h1",
                "newPage": false,
                "searchKey": "http_test.TestTrailersServerToClient_Flush_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailersServerToClient_Flush_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailersServerToClient_Flush_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTrailersServerToClient_Flush_h2",
              "documentation": {
                "identifier": "TestTrailersServerToClient_Flush_h2",
                "newPage": false,
                "searchKey": "http_test.TestTrailersServerToClient_Flush_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTrailersServerToClient_Flush_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTrailersServerToClient_Flush_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTrailersServerToClient",
              "documentation": {
                "identifier": "testTrailersServerToClient",
                "newPage": false,
                "searchKey": "http_test.testTrailersServerToClient",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTrailersServerToClient(t *testing.T, h2, flush bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTrailersServerToClient(t *testing.T, h2, flush bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestResponseBodyReadAfterClose_h1",
              "documentation": {
                "identifier": "TestResponseBodyReadAfterClose_h1",
                "newPage": false,
                "searchKey": "http_test.TestResponseBodyReadAfterClose_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResponseBodyReadAfterClose_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResponseBodyReadAfterClose_h1(t *testing.T)\n```\n\nDon't allow a Body.Read after Body.Close. Issue 13648. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestResponseBodyReadAfterClose_h2",
              "documentation": {
                "identifier": "TestResponseBodyReadAfterClose_h2",
                "newPage": false,
                "searchKey": "http_test.TestResponseBodyReadAfterClose_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResponseBodyReadAfterClose_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResponseBodyReadAfterClose_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testResponseBodyReadAfterClose",
              "documentation": {
                "identifier": "testResponseBodyReadAfterClose",
                "newPage": false,
                "searchKey": "http_test.testResponseBodyReadAfterClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testResponseBodyReadAfterClose(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testResponseBodyReadAfterClose(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConcurrentReadWriteReqBody_h1",
              "documentation": {
                "identifier": "TestConcurrentReadWriteReqBody_h1",
                "newPage": false,
                "searchKey": "http_test.TestConcurrentReadWriteReqBody_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentReadWriteReqBody_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentReadWriteReqBody_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConcurrentReadWriteReqBody_h2",
              "documentation": {
                "identifier": "TestConcurrentReadWriteReqBody_h2",
                "newPage": false,
                "searchKey": "http_test.TestConcurrentReadWriteReqBody_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentReadWriteReqBody_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentReadWriteReqBody_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testConcurrentReadWriteReqBody",
              "documentation": {
                "identifier": "testConcurrentReadWriteReqBody",
                "newPage": false,
                "searchKey": "http_test.testConcurrentReadWriteReqBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testConcurrentReadWriteReqBody(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testConcurrentReadWriteReqBody(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConnectRequest_h1",
              "documentation": {
                "identifier": "TestConnectRequest_h1",
                "newPage": false,
                "searchKey": "http_test.TestConnectRequest_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnectRequest_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnectRequest_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConnectRequest_h2",
              "documentation": {
                "identifier": "TestConnectRequest_h2",
                "newPage": false,
                "searchKey": "http_test.TestConnectRequest_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnectRequest_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnectRequest_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testConnectRequest",
              "documentation": {
                "identifier": "testConnectRequest",
                "newPage": false,
                "searchKey": "http_test.testConnectRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testConnectRequest(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testConnectRequest(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportUserAgent_h1",
              "documentation": {
                "identifier": "TestTransportUserAgent_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportUserAgent_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportUserAgent_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportUserAgent_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportUserAgent_h2",
              "documentation": {
                "identifier": "TestTransportUserAgent_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportUserAgent_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportUserAgent_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportUserAgent_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportUserAgent",
              "documentation": {
                "identifier": "testTransportUserAgent",
                "newPage": false,
                "searchKey": "http_test.testTransportUserAgent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportUserAgent(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportUserAgent(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStarRequestFoo_h1",
              "documentation": {
                "identifier": "TestStarRequestFoo_h1",
                "newPage": false,
                "searchKey": "http_test.TestStarRequestFoo_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStarRequestFoo_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStarRequestFoo_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStarRequestFoo_h2",
              "documentation": {
                "identifier": "TestStarRequestFoo_h2",
                "newPage": false,
                "searchKey": "http_test.TestStarRequestFoo_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStarRequestFoo_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStarRequestFoo_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStarRequestOptions_h1",
              "documentation": {
                "identifier": "TestStarRequestOptions_h1",
                "newPage": false,
                "searchKey": "http_test.TestStarRequestOptions_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStarRequestOptions_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStarRequestOptions_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStarRequestOptions_h2",
              "documentation": {
                "identifier": "TestStarRequestOptions_h2",
                "newPage": false,
                "searchKey": "http_test.TestStarRequestOptions_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStarRequestOptions_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStarRequestOptions_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testStarRequest",
              "documentation": {
                "identifier": "testStarRequest",
                "newPage": false,
                "searchKey": "http_test.testStarRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testStarRequest(t *testing.T, method string, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testStarRequest(t *testing.T, method string, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDiscardsUnneededConns",
              "documentation": {
                "identifier": "TestTransportDiscardsUnneededConns",
                "newPage": false,
                "searchKey": "http_test.TestTransportDiscardsUnneededConns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDiscardsUnneededConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDiscardsUnneededConns(t *testing.T)\n```\n\nIssue 13957 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGCRequest_Body_h1",
              "documentation": {
                "identifier": "TestTransportGCRequest_Body_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportGCRequest_Body_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGCRequest_Body_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGCRequest_Body_h1(t *testing.T)\n```\n\ntests that Transport doesn't retain a pointer to the provided request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGCRequest_Body_h2",
              "documentation": {
                "identifier": "TestTransportGCRequest_Body_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportGCRequest_Body_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGCRequest_Body_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGCRequest_Body_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGCRequest_NoBody_h1",
              "documentation": {
                "identifier": "TestTransportGCRequest_NoBody_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportGCRequest_NoBody_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGCRequest_NoBody_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGCRequest_NoBody_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGCRequest_NoBody_h2",
              "documentation": {
                "identifier": "TestTransportGCRequest_NoBody_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportGCRequest_NoBody_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGCRequest_NoBody_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGCRequest_NoBody_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportGCRequest",
              "documentation": {
                "identifier": "testTransportGCRequest",
                "newPage": false,
                "searchKey": "http_test.testTransportGCRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportGCRequest(t *testing.T, h2, body bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportGCRequest(t *testing.T, h2, body bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRejectsInvalidHeaders_h1",
              "documentation": {
                "identifier": "TestTransportRejectsInvalidHeaders_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportRejectsInvalidHeaders_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRejectsInvalidHeaders_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRejectsInvalidHeaders_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRejectsInvalidHeaders_h2",
              "documentation": {
                "identifier": "TestTransportRejectsInvalidHeaders_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportRejectsInvalidHeaders_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRejectsInvalidHeaders_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRejectsInvalidHeaders_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportRejectsInvalidHeaders",
              "documentation": {
                "identifier": "testTransportRejectsInvalidHeaders",
                "newPage": false,
                "searchKey": "http_test.testTransportRejectsInvalidHeaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportRejectsInvalidHeaders(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportRejectsInvalidHeaders(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInterruptWithPanic_h1",
              "documentation": {
                "identifier": "TestInterruptWithPanic_h1",
                "newPage": false,
                "searchKey": "http_test.TestInterruptWithPanic_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterruptWithPanic_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterruptWithPanic_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInterruptWithPanic_h2",
              "documentation": {
                "identifier": "TestInterruptWithPanic_h2",
                "newPage": false,
                "searchKey": "http_test.TestInterruptWithPanic_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterruptWithPanic_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterruptWithPanic_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInterruptWithPanic_nil_h1",
              "documentation": {
                "identifier": "TestInterruptWithPanic_nil_h1",
                "newPage": false,
                "searchKey": "http_test.TestInterruptWithPanic_nil_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterruptWithPanic_nil_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterruptWithPanic_nil_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInterruptWithPanic_nil_h2",
              "documentation": {
                "identifier": "TestInterruptWithPanic_nil_h2",
                "newPage": false,
                "searchKey": "http_test.TestInterruptWithPanic_nil_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterruptWithPanic_nil_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterruptWithPanic_nil_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInterruptWithPanic_ErrAbortHandler_h1",
              "documentation": {
                "identifier": "TestInterruptWithPanic_ErrAbortHandler_h1",
                "newPage": false,
                "searchKey": "http_test.TestInterruptWithPanic_ErrAbortHandler_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterruptWithPanic_ErrAbortHandler_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterruptWithPanic_ErrAbortHandler_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInterruptWithPanic_ErrAbortHandler_h2",
              "documentation": {
                "identifier": "TestInterruptWithPanic_ErrAbortHandler_h2",
                "newPage": false,
                "searchKey": "http_test.TestInterruptWithPanic_ErrAbortHandler_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInterruptWithPanic_ErrAbortHandler_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInterruptWithPanic_ErrAbortHandler_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testInterruptWithPanic",
              "documentation": {
                "identifier": "testInterruptWithPanic",
                "newPage": false,
                "searchKey": "http_test.testInterruptWithPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testInterruptWithPanic(t *testing.T, h2 bool, panicValue interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testInterruptWithPanic(t *testing.T, h2 bool, panicValue interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_AutoGzipWithDumpResponse",
              "documentation": {
                "identifier": "TestH12_AutoGzipWithDumpResponse",
                "newPage": false,
                "searchKey": "http_test.TestH12_AutoGzipWithDumpResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_AutoGzipWithDumpResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_AutoGzipWithDumpResponse(t *testing.T)\n```\n\nIssue 15366 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCloseIdleConnections_h1",
              "documentation": {
                "identifier": "TestCloseIdleConnections_h1",
                "newPage": false,
                "searchKey": "http_test.TestCloseIdleConnections_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseIdleConnections_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseIdleConnections_h1(t *testing.T)\n```\n\nIssue 14607 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCloseIdleConnections_h2",
              "documentation": {
                "identifier": "TestCloseIdleConnections_h2",
                "newPage": false,
                "searchKey": "http_test.TestCloseIdleConnections_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseIdleConnections_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseIdleConnections_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testCloseIdleConnections",
              "documentation": {
                "identifier": "testCloseIdleConnections",
                "newPage": false,
                "searchKey": "http_test.testCloseIdleConnections",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCloseIdleConnections(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCloseIdleConnections(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoSniffExpectRequestBody_h1",
              "documentation": {
                "identifier": "TestNoSniffExpectRequestBody_h1",
                "newPage": false,
                "searchKey": "http_test.TestNoSniffExpectRequestBody_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoSniffExpectRequestBody_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoSniffExpectRequestBody_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoSniffExpectRequestBody_h2",
              "documentation": {
                "identifier": "TestNoSniffExpectRequestBody_h2",
                "newPage": false,
                "searchKey": "http_test.TestNoSniffExpectRequestBody_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoSniffExpectRequestBody_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoSniffExpectRequestBody_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testNoSniffExpectRequestBody",
              "documentation": {
                "identifier": "testNoSniffExpectRequestBody",
                "newPage": false,
                "searchKey": "http_test.testNoSniffExpectRequestBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testNoSniffExpectRequestBody(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testNoSniffExpectRequestBody(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerUndeclaredTrailers_h1",
              "documentation": {
                "identifier": "TestServerUndeclaredTrailers_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerUndeclaredTrailers_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerUndeclaredTrailers_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerUndeclaredTrailers_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerUndeclaredTrailers_h2",
              "documentation": {
                "identifier": "TestServerUndeclaredTrailers_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerUndeclaredTrailers_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerUndeclaredTrailers_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerUndeclaredTrailers_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerUndeclaredTrailers",
              "documentation": {
                "identifier": "testServerUndeclaredTrailers",
                "newPage": false,
                "searchKey": "http_test.testServerUndeclaredTrailers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerUndeclaredTrailers(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerUndeclaredTrailers(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestBadResponseAfterReadingBody",
              "documentation": {
                "identifier": "TestBadResponseAfterReadingBody",
                "newPage": false,
                "searchKey": "http_test.TestBadResponseAfterReadingBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadResponseAfterReadingBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadResponseAfterReadingBody(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWriteHeader0_h1",
              "documentation": {
                "identifier": "TestWriteHeader0_h1",
                "newPage": false,
                "searchKey": "http_test.TestWriteHeader0_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteHeader0_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteHeader0_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWriteHeader0_h2",
              "documentation": {
                "identifier": "TestWriteHeader0_h2",
                "newPage": false,
                "searchKey": "http_test.TestWriteHeader0_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteHeader0_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteHeader0_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testWriteHeader0",
              "documentation": {
                "identifier": "testWriteHeader0",
                "newPage": false,
                "searchKey": "http_test.testWriteHeader0",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testWriteHeader0(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testWriteHeader0(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWriteHeaderNoCodeCheck_h1",
              "documentation": {
                "identifier": "TestWriteHeaderNoCodeCheck_h1",
                "newPage": false,
                "searchKey": "http_test.TestWriteHeaderNoCodeCheck_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteHeaderNoCodeCheck_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteHeaderNoCodeCheck_h1(t *testing.T)\n```\n\nIssue 23010: don't be super strict checking WriteHeader's code if it's not even valid to call WriteHeader then anyway. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWriteHeaderNoCodeCheck_h1hijack",
              "documentation": {
                "identifier": "TestWriteHeaderNoCodeCheck_h1hijack",
                "newPage": false,
                "searchKey": "http_test.TestWriteHeaderNoCodeCheck_h1hijack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteHeaderNoCodeCheck_h1hijack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteHeaderNoCodeCheck_h1hijack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWriteHeaderNoCodeCheck_h2",
              "documentation": {
                "identifier": "TestWriteHeaderNoCodeCheck_h2",
                "newPage": false,
                "searchKey": "http_test.TestWriteHeaderNoCodeCheck_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteHeaderNoCodeCheck_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteHeaderNoCodeCheck_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testWriteHeaderAfterWrite",
              "documentation": {
                "identifier": "testWriteHeaderAfterWrite",
                "newPage": false,
                "searchKey": "http_test.testWriteHeaderAfterWrite",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testWriteHeaderAfterWrite(t *testing.T, h2, hijack bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testWriteHeaderAfterWrite(t *testing.T, h2, hijack bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestBidiStreamReverseProxy",
              "documentation": {
                "identifier": "TestBidiStreamReverseProxy",
                "newPage": false,
                "searchKey": "http_test.TestBidiStreamReverseProxy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBidiStreamReverseProxy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBidiStreamReverseProxy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestH12_WebSocketUpgrade",
              "documentation": {
                "identifier": "TestH12_WebSocketUpgrade",
                "newPage": false,
                "searchKey": "http_test.TestH12_WebSocketUpgrade",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestH12_WebSocketUpgrade(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestH12_WebSocketUpgrade(t *testing.T)\n```\n\nAlways use HTTP/1.1 for WebSocket upgrades. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#containsDotFile",
              "documentation": {
                "identifier": "containsDotFile",
                "newPage": false,
                "searchKey": "http_test.containsDotFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func containsDotFile(name string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc containsDotFile(name string) bool\n```\n\ncontainsDotFile reports whether name contains a path element starting with a period. The name is assumed to be a delimited by forward slashes, as guaranteed by the http.FileSystem interface. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleFileServer_dotFileHiding",
              "documentation": {
                "identifier": "ExampleFileServer_dotFileHiding",
                "newPage": false,
                "searchKey": "http_test.ExampleFileServer_dotFileHiding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFileServer_dotFileHiding()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFileServer_dotFileHiding()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleHandle",
              "documentation": {
                "identifier": "ExampleHandle",
                "newPage": false,
                "searchKey": "http_test.ExampleHandle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleHandle()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleHandle()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleHijacker",
              "documentation": {
                "identifier": "ExampleHijacker",
                "newPage": false,
                "searchKey": "http_test.ExampleHijacker",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleHijacker()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleHijacker()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleGet",
              "documentation": {
                "identifier": "ExampleGet",
                "newPage": false,
                "searchKey": "http_test.ExampleGet",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleGet()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleGet()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleFileServer",
              "documentation": {
                "identifier": "ExampleFileServer",
                "newPage": false,
                "searchKey": "http_test.ExampleFileServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFileServer()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFileServer()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleFileServer_stripPrefix",
              "documentation": {
                "identifier": "ExampleFileServer_stripPrefix",
                "newPage": false,
                "searchKey": "http_test.ExampleFileServer_stripPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleFileServer_stripPrefix()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleFileServer_stripPrefix()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleStripPrefix",
              "documentation": {
                "identifier": "ExampleStripPrefix",
                "newPage": false,
                "searchKey": "http_test.ExampleStripPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleStripPrefix()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleStripPrefix()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleServeMux_Handle",
              "documentation": {
                "identifier": "ExampleServeMux_Handle",
                "newPage": false,
                "searchKey": "http_test.ExampleServeMux_Handle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleServeMux_Handle()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleServeMux_Handle()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleResponseWriter_trailers",
              "documentation": {
                "identifier": "ExampleResponseWriter_trailers",
                "newPage": false,
                "searchKey": "http_test.ExampleResponseWriter_trailers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleResponseWriter_trailers()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleResponseWriter_trailers()\n```\n\nHTTP Trailers are a set of key/value pairs like headers that come after the HTTP response, instead of before. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleServer_Shutdown",
              "documentation": {
                "identifier": "ExampleServer_Shutdown",
                "newPage": false,
                "searchKey": "http_test.ExampleServer_Shutdown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleServer_Shutdown()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleServer_Shutdown()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleListenAndServeTLS",
              "documentation": {
                "identifier": "ExampleListenAndServeTLS",
                "newPage": false,
                "searchKey": "http_test.ExampleListenAndServeTLS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleListenAndServeTLS()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleListenAndServeTLS()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleListenAndServe",
              "documentation": {
                "identifier": "ExampleListenAndServe",
                "newPage": false,
                "searchKey": "http_test.ExampleListenAndServe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleListenAndServe()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleListenAndServe()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleHandleFunc",
              "documentation": {
                "identifier": "ExampleHandleFunc",
                "newPage": false,
                "searchKey": "http_test.ExampleHandleFunc",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleHandleFunc()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleHandleFunc()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#newPeopleHandler",
              "documentation": {
                "identifier": "newPeopleHandler",
                "newPage": false,
                "searchKey": "http_test.newPeopleHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newPeopleHandler() http.Handler"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newPeopleHandler() http.Handler\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#ExampleNotFoundHandler",
              "documentation": {
                "identifier": "ExampleNotFoundHandler",
                "newPage": false,
                "searchKey": "http_test.ExampleNotFoundHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleNotFoundHandler()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleNotFoundHandler()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFile",
              "documentation": {
                "identifier": "TestServeFile",
                "newPage": false,
                "searchKey": "http_test.TestServeFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFile(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFile_DotDot",
              "documentation": {
                "identifier": "TestServeFile_DotDot",
                "newPage": false,
                "searchKey": "http_test.TestServeFile_DotDot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFile_DotDot(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFile_DotDot(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileDirPanicEmptyPath",
              "documentation": {
                "identifier": "TestServeFileDirPanicEmptyPath",
                "newPage": false,
                "searchKey": "http_test.TestServeFileDirPanicEmptyPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileDirPanicEmptyPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileDirPanicEmptyPath(t *testing.T)\n```\n\nTests that this doesn't panic. (Issue 30165) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFSRedirect",
              "documentation": {
                "identifier": "TestFSRedirect",
                "newPage": false,
                "searchKey": "http_test.TestFSRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFSRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFSRedirect(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerCleans",
              "documentation": {
                "identifier": "TestFileServerCleans",
                "newPage": false,
                "searchKey": "http_test.TestFileServerCleans",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerCleans(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerCleans(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerEscapesNames",
              "documentation": {
                "identifier": "TestFileServerEscapesNames",
                "newPage": false,
                "searchKey": "http_test.TestFileServerEscapesNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerEscapesNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerEscapesNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerSortsNames",
              "documentation": {
                "identifier": "TestFileServerSortsNames",
                "newPage": false,
                "searchKey": "http_test.TestFileServerSortsNames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerSortsNames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerSortsNames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#mustRemoveAll",
              "documentation": {
                "identifier": "mustRemoveAll",
                "newPage": false,
                "searchKey": "http_test.mustRemoveAll",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustRemoveAll(dir string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustRemoveAll(dir string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerImplicitLeadingSlash",
              "documentation": {
                "identifier": "TestFileServerImplicitLeadingSlash",
                "newPage": false,
                "searchKey": "http_test.TestFileServerImplicitLeadingSlash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerImplicitLeadingSlash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerImplicitLeadingSlash(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDirJoin",
              "documentation": {
                "identifier": "TestDirJoin",
                "newPage": false,
                "searchKey": "http_test.TestDirJoin",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDirJoin(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDirJoin(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestEmptyDirOpenCWD",
              "documentation": {
                "identifier": "TestEmptyDirOpenCWD",
                "newPage": false,
                "searchKey": "http_test.TestEmptyDirOpenCWD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyDirOpenCWD(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyDirOpenCWD(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileContentType",
              "documentation": {
                "identifier": "TestServeFileContentType",
                "newPage": false,
                "searchKey": "http_test.TestServeFileContentType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileContentType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileContentType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileMimeType",
              "documentation": {
                "identifier": "TestServeFileMimeType",
                "newPage": false,
                "searchKey": "http_test.TestServeFileMimeType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileMimeType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileMimeType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileFromCWD",
              "documentation": {
                "identifier": "TestServeFileFromCWD",
                "newPage": false,
                "searchKey": "http_test.TestServeFileFromCWD",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileFromCWD(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileFromCWD(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeDirWithoutTrailingSlash",
              "documentation": {
                "identifier": "TestServeDirWithoutTrailingSlash",
                "newPage": false,
                "searchKey": "http_test.TestServeDirWithoutTrailingSlash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeDirWithoutTrailingSlash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeDirWithoutTrailingSlash(t *testing.T)\n```\n\nIssue 13996 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileWithContentEncoding_h1",
              "documentation": {
                "identifier": "TestServeFileWithContentEncoding_h1",
                "newPage": false,
                "searchKey": "http_test.TestServeFileWithContentEncoding_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileWithContentEncoding_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileWithContentEncoding_h1(t *testing.T)\n```\n\nTests that ServeFile doesn't add a Content-Length if a Content-Encoding is specified. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileWithContentEncoding_h2",
              "documentation": {
                "identifier": "TestServeFileWithContentEncoding_h2",
                "newPage": false,
                "searchKey": "http_test.TestServeFileWithContentEncoding_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileWithContentEncoding_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileWithContentEncoding_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServeFileWithContentEncoding",
              "documentation": {
                "identifier": "testServeFileWithContentEncoding",
                "newPage": false,
                "searchKey": "http_test.testServeFileWithContentEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServeFileWithContentEncoding(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServeFileWithContentEncoding(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeIndexHtml",
              "documentation": {
                "identifier": "TestServeIndexHtml",
                "newPage": false,
                "searchKey": "http_test.TestServeIndexHtml",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeIndexHtml(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeIndexHtml(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeIndexHtmlFS",
              "documentation": {
                "identifier": "TestServeIndexHtmlFS",
                "newPage": false,
                "searchKey": "http_test.TestServeIndexHtmlFS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeIndexHtmlFS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeIndexHtmlFS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerZeroByte",
              "documentation": {
                "identifier": "TestFileServerZeroByte",
                "newPage": false,
                "searchKey": "http_test.TestFileServerZeroByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerZeroByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerZeroByte(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDirectoryIfNotModified",
              "documentation": {
                "identifier": "TestDirectoryIfNotModified",
                "newPage": false,
                "searchKey": "http_test.TestDirectoryIfNotModified",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDirectoryIfNotModified(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDirectoryIfNotModified(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#mustStat",
              "documentation": {
                "identifier": "mustStat",
                "newPage": false,
                "searchKey": "http_test.mustStat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func mustStat(t *testing.T, fileName string) fs.FileInfo"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc mustStat(t *testing.T, fileName string) fs.FileInfo\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeContent",
              "documentation": {
                "identifier": "TestServeContent",
                "newPage": false,
                "searchKey": "http_test.TestServeContent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeContent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeContent(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerFileStatError",
              "documentation": {
                "identifier": "TestServerFileStatError",
                "newPage": false,
                "searchKey": "http_test.TestServerFileStatError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerFileStatError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerFileStatError(t *testing.T)\n```\n\nIssue 12991 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeContentErrorMessages",
              "documentation": {
                "identifier": "TestServeContentErrorMessages",
                "newPage": false,
                "searchKey": "http_test.TestServeContentErrorMessages",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeContentErrorMessages(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeContentErrorMessages(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestLinuxSendfile",
              "documentation": {
                "identifier": "TestLinuxSendfile",
                "newPage": false,
                "searchKey": "http_test.TestLinuxSendfile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLinuxSendfile(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLinuxSendfile(t *testing.T)\n```\n\nverifies that sendfile is being used on Linux \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#getBody",
              "documentation": {
                "identifier": "getBody",
                "newPage": false,
                "searchKey": "http_test.getBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getBody(t *testing.T, testName string, req Request, client *Client) (*Response, []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getBody(t *testing.T, testName string, req Request, client *Client) (*Response, []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestLinuxSendfileChild",
              "documentation": {
                "identifier": "TestLinuxSendfileChild",
                "newPage": false,
                "searchKey": "http_test.TestLinuxSendfileChild",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLinuxSendfileChild(*testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLinuxSendfileChild(*testing.T)\n```\n\nTestLinuxSendfileChild isn't a real test. It's used as a helper process for TestLinuxSendfile. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerNotDirError",
              "documentation": {
                "identifier": "TestFileServerNotDirError",
                "newPage": false,
                "searchKey": "http_test.TestFileServerNotDirError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerNotDirError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerNotDirError(t *testing.T)\n```\n\nIssue 18984: tests that requests for paths beyond files return not-found errors \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFileServerCleanPath",
              "documentation": {
                "identifier": "TestFileServerCleanPath",
                "newPage": false,
                "searchKey": "http_test.TestFileServerCleanPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFileServerCleanPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFileServerCleanPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#Test_scanETag",
              "documentation": {
                "identifier": "Test_scanETag",
                "newPage": false,
                "searchKey": "http_test.Test_scanETag",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Test_scanETag(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Test_scanETag(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileRejectsInvalidSuffixLengths_h1",
              "documentation": {
                "identifier": "TestServeFileRejectsInvalidSuffixLengths_h1",
                "newPage": false,
                "searchKey": "http_test.TestServeFileRejectsInvalidSuffixLengths_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileRejectsInvalidSuffixLengths_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileRejectsInvalidSuffixLengths_h1(t *testing.T)\n```\n\nIssue 40940: Ensure that we only accept non-negative suffix-lengths in \"Range\": \"bytes=-N\", and should reject \"bytes=--2\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeFileRejectsInvalidSuffixLengths_h2",
              "documentation": {
                "identifier": "TestServeFileRejectsInvalidSuffixLengths_h2",
                "newPage": false,
                "searchKey": "http_test.TestServeFileRejectsInvalidSuffixLengths_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeFileRejectsInvalidSuffixLengths_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeFileRejectsInvalidSuffixLengths_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServeFileRejectsInvalidSuffixLengths",
              "documentation": {
                "identifier": "testServeFileRejectsInvalidSuffixLengths",
                "newPage": false,
                "searchKey": "http_test.testServeFileRejectsInvalidSuffixLengths",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServeFileRejectsInvalidSuffixLengths(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServeFileRejectsInvalidSuffixLengths(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMain",
              "documentation": {
                "identifier": "TestMain",
                "newPage": false,
                "searchKey": "http_test.TestMain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMain(m *testing.M)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMain(m *testing.M)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#interestingGoroutines",
              "documentation": {
                "identifier": "interestingGoroutines",
                "newPage": false,
                "searchKey": "http_test.interestingGoroutines",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func interestingGoroutines() (gs []string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc interestingGoroutines() (gs []string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#goroutineLeaked",
              "documentation": {
                "identifier": "goroutineLeaked",
                "newPage": false,
                "searchKey": "http_test.goroutineLeaked",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func goroutineLeaked() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc goroutineLeaked() bool\n```\n\nVerify the other tests didn't leave any goroutines running. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#setParallel",
              "documentation": {
                "identifier": "setParallel",
                "newPage": false,
                "searchKey": "http_test.setParallel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func setParallel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc setParallel(t *testing.T)\n```\n\nsetParallel marks t as a parallel test if we're in short mode (all.bash), but as a serial test otherwise. Using t.Parallel isn't compatible with the afterTest func in non-short mode. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#runningBenchmarks",
              "documentation": {
                "identifier": "runningBenchmarks",
                "newPage": false,
                "searchKey": "http_test.runningBenchmarks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runningBenchmarks() bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runningBenchmarks() bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#afterTest",
              "documentation": {
                "identifier": "afterTest",
                "newPage": false,
                "searchKey": "http_test.afterTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func afterTest(t testing.TB)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc afterTest(t testing.TB)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#waitCondition",
              "documentation": {
                "identifier": "waitCondition",
                "newPage": false,
                "searchKey": "http_test.waitCondition",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitCondition(waitFor, checkEvery time.Duration, fn func() bool) bool\n```\n\nwaitCondition reports whether fn eventually returned true, checking immediately and then every checkEvery amount, until waitFor has elapsed, at which point it returns false. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#waitErrCondition",
              "documentation": {
                "identifier": "waitErrCondition",
                "newPage": false,
                "searchKey": "http_test.waitErrCondition",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitErrCondition(waitFor, checkEvery time.Duration, fn func() error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitErrCondition(waitFor, checkEvery time.Duration, fn func() error) error\n```\n\nwaitErrCondition is like waitCondition but with errors instead of bools. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestQuery",
              "documentation": {
                "identifier": "TestQuery",
                "newPage": false,
                "searchKey": "http_test.TestQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseFormSemicolonSeparator",
              "documentation": {
                "identifier": "TestParseFormSemicolonSeparator",
                "newPage": false,
                "searchKey": "http_test.TestParseFormSemicolonSeparator",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFormSemicolonSeparator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFormSemicolonSeparator(t *testing.T)\n```\n\nIssue #25192: Test that ParseForm fails but still parses the form when an URL containing a semicolon is provided. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseFormQuery",
              "documentation": {
                "identifier": "TestParseFormQuery",
                "newPage": false,
                "searchKey": "http_test.TestParseFormQuery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFormQuery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFormQuery(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseFormQueryMethods",
              "documentation": {
                "identifier": "TestParseFormQueryMethods",
                "newPage": false,
                "searchKey": "http_test.TestParseFormQueryMethods",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFormQueryMethods(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFormQueryMethods(t *testing.T)\n```\n\nTests that we only parse the form automatically for certain methods. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseFormUnknownContentType",
              "documentation": {
                "identifier": "TestParseFormUnknownContentType",
                "newPage": false,
                "searchKey": "http_test.TestParseFormUnknownContentType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFormUnknownContentType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFormUnknownContentType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseFormInitializeOnError",
              "documentation": {
                "identifier": "TestParseFormInitializeOnError",
                "newPage": false,
                "searchKey": "http_test.TestParseFormInitializeOnError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseFormInitializeOnError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseFormInitializeOnError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMultipartReader",
              "documentation": {
                "identifier": "TestMultipartReader",
                "newPage": false,
                "searchKey": "http_test.TestMultipartReader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartReader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartReader(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseMultipartFormPopulatesPostForm",
              "documentation": {
                "identifier": "TestParseMultipartFormPopulatesPostForm",
                "newPage": false,
                "searchKey": "http_test.TestParseMultipartFormPopulatesPostForm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseMultipartFormPopulatesPostForm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseMultipartFormPopulatesPostForm(t *testing.T)\n```\n\nIssue 9305: ParseMultipartForm should populate PostForm too \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseMultipartForm",
              "documentation": {
                "identifier": "TestParseMultipartForm",
                "newPage": false,
                "searchKey": "http_test.TestParseMultipartForm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseMultipartForm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseMultipartForm(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseMultipartFormFilename",
              "documentation": {
                "identifier": "TestParseMultipartFormFilename",
                "newPage": false,
                "searchKey": "http_test.TestParseMultipartFormFilename",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseMultipartFormFilename(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseMultipartFormFilename(t *testing.T)\n```\n\nIssue 45789: multipart form should not include directory path in filename \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMaxInt64ForMultipartFormMaxMemoryOverflow",
              "documentation": {
                "identifier": "TestMaxInt64ForMultipartFormMaxMemoryOverflow",
                "newPage": false,
                "searchKey": "http_test.TestMaxInt64ForMultipartFormMaxMemoryOverflow",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxInt64ForMultipartFormMaxMemoryOverflow(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxInt64ForMultipartFormMaxMemoryOverflow(t *testing.T)\n```\n\nIssue #40430: Test that if maxMemory for ParseMultipartForm when combined with the payload size and the internal leeway buffer size of 10MiB overflows, that we correctly return an error. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRedirect_h1",
              "documentation": {
                "identifier": "TestRedirect_h1",
                "newPage": false,
                "searchKey": "http_test.TestRedirect_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirect_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirect_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRedirect_h2",
              "documentation": {
                "identifier": "TestRedirect_h2",
                "newPage": false,
                "searchKey": "http_test.TestRedirect_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirect_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirect_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testRedirect",
              "documentation": {
                "identifier": "testRedirect",
                "newPage": false,
                "searchKey": "http_test.testRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRedirect(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRedirect(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestSetBasicAuth",
              "documentation": {
                "identifier": "TestSetBasicAuth",
                "newPage": false,
                "searchKey": "http_test.TestSetBasicAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetBasicAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetBasicAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMultipartRequest",
              "documentation": {
                "identifier": "TestMultipartRequest",
                "newPage": false,
                "searchKey": "http_test.TestMultipartRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseMultipartFormSemicolonSeparator",
              "documentation": {
                "identifier": "TestParseMultipartFormSemicolonSeparator",
                "newPage": false,
                "searchKey": "http_test.TestParseMultipartFormSemicolonSeparator",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseMultipartFormSemicolonSeparator(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseMultipartFormSemicolonSeparator(t *testing.T)\n```\n\nIssue #25192: Test that ParseMultipartForm fails but still parses the multi-part form when an URL containing a semicolon is provided. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMultipartRequestAuto",
              "documentation": {
                "identifier": "TestMultipartRequestAuto",
                "newPage": false,
                "searchKey": "http_test.TestMultipartRequestAuto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartRequestAuto(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartRequestAuto(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMissingFileMultipartRequest",
              "documentation": {
                "identifier": "TestMissingFileMultipartRequest",
                "newPage": false,
                "searchKey": "http_test.TestMissingFileMultipartRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMissingFileMultipartRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMissingFileMultipartRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFormValueCallsParseMultipartForm",
              "documentation": {
                "identifier": "TestFormValueCallsParseMultipartForm",
                "newPage": false,
                "searchKey": "http_test.TestFormValueCallsParseMultipartForm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFormValueCallsParseMultipartForm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFormValueCallsParseMultipartForm(t *testing.T)\n```\n\nTest that FormValue invokes ParseMultipartForm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFormFileCallsParseMultipartForm",
              "documentation": {
                "identifier": "TestFormFileCallsParseMultipartForm",
                "newPage": false,
                "searchKey": "http_test.TestFormFileCallsParseMultipartForm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFormFileCallsParseMultipartForm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFormFileCallsParseMultipartForm(t *testing.T)\n```\n\nTest that FormFile invokes ParseMultipartForm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseMultipartFormOrder",
              "documentation": {
                "identifier": "TestParseMultipartFormOrder",
                "newPage": false,
                "searchKey": "http_test.TestParseMultipartFormOrder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseMultipartFormOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseMultipartFormOrder(t *testing.T)\n```\n\nTest that ParseMultipartForm errors if called after MultipartReader on the same request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMultipartReaderOrder",
              "documentation": {
                "identifier": "TestMultipartReaderOrder",
                "newPage": false,
                "searchKey": "http_test.TestMultipartReaderOrder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipartReaderOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipartReaderOrder(t *testing.T)\n```\n\nTest that MultipartReader errors if called after ParseMultipartForm on the same request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestFormFileOrder",
              "documentation": {
                "identifier": "TestFormFileOrder",
                "newPage": false,
                "searchKey": "http_test.TestFormFileOrder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFormFileOrder(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFormFileOrder(t *testing.T)\n```\n\nTest that FormFile errors if called after MultipartReader on the same request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestReadRequestErrors",
              "documentation": {
                "identifier": "TestReadRequestErrors",
                "newPage": false,
                "searchKey": "http_test.TestReadRequestErrors",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReadRequestErrors(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReadRequestErrors(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNewRequestHost",
              "documentation": {
                "identifier": "TestNewRequestHost",
                "newPage": false,
                "searchKey": "http_test.TestNewRequestHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewRequestHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewRequestHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestInvalidMethod",
              "documentation": {
                "identifier": "TestRequestInvalidMethod",
                "newPage": false,
                "searchKey": "http_test.TestRequestInvalidMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestInvalidMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestInvalidMethod(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNewRequestContentLength",
              "documentation": {
                "identifier": "TestNewRequestContentLength",
                "newPage": false,
                "searchKey": "http_test.TestNewRequestContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewRequestContentLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewRequestContentLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseHTTPVersion",
              "documentation": {
                "identifier": "TestParseHTTPVersion",
                "newPage": false,
                "searchKey": "http_test.TestParseHTTPVersion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseHTTPVersion(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseHTTPVersion(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestGetBasicAuth",
              "documentation": {
                "identifier": "TestGetBasicAuth",
                "newPage": false,
                "searchKey": "http_test.TestGetBasicAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGetBasicAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGetBasicAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestParseBasicAuth",
              "documentation": {
                "identifier": "TestParseBasicAuth",
                "newPage": false,
                "searchKey": "http_test.TestParseBasicAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseBasicAuth(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseBasicAuth(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestWriteBufferedWriter",
              "documentation": {
                "identifier": "TestRequestWriteBufferedWriter",
                "newPage": false,
                "searchKey": "http_test.TestRequestWriteBufferedWriter",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestWriteBufferedWriter(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestWriteBufferedWriter(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestBadHost",
              "documentation": {
                "identifier": "TestRequestBadHost",
                "newPage": false,
                "searchKey": "http_test.TestRequestBadHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestBadHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestBadHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStarRequest",
              "documentation": {
                "identifier": "TestStarRequest",
                "newPage": false,
                "searchKey": "http_test.TestStarRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStarRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStarRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue10884_MaxBytesEOF",
              "documentation": {
                "identifier": "TestIssue10884_MaxBytesEOF",
                "newPage": false,
                "searchKey": "http_test.TestIssue10884_MaxBytesEOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue10884_MaxBytesEOF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue10884_MaxBytesEOF(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMaxBytesReaderStickyError",
              "documentation": {
                "identifier": "TestMaxBytesReaderStickyError",
                "newPage": false,
                "searchKey": "http_test.TestMaxBytesReaderStickyError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxBytesReaderStickyError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxBytesReaderStickyError(t *testing.T)\n```\n\nIssue 14981: MaxBytesReader's return error wasn't sticky. It doesn't technically need to be, but people expected it to be. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMaxBytesReaderDifferentLimits",
              "documentation": {
                "identifier": "TestMaxBytesReaderDifferentLimits",
                "newPage": false,
                "searchKey": "http_test.TestMaxBytesReaderDifferentLimits",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxBytesReaderDifferentLimits(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxBytesReaderDifferentLimits(t *testing.T)\n```\n\nIssue 45101: maxBytesReader's Read panicked when n < -1. This test also ensures that Read treats negative limits as equivalent to 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWithContextDeepCopiesURL",
              "documentation": {
                "identifier": "TestWithContextDeepCopiesURL",
                "newPage": false,
                "searchKey": "http_test.TestWithContextDeepCopiesURL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWithContextDeepCopiesURL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWithContextDeepCopiesURL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestCloneTransferEncoding",
              "documentation": {
                "identifier": "TestRequestCloneTransferEncoding",
                "newPage": false,
                "searchKey": "http_test.TestRequestCloneTransferEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestCloneTransferEncoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestCloneTransferEncoding(t *testing.T)\n```\n\nEnsure that Request.Clone creates a deep copy of TransferEncoding. See issue 41907. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoPanicOnRoundTripWithBasicAuth_h1",
              "documentation": {
                "identifier": "TestNoPanicOnRoundTripWithBasicAuth_h1",
                "newPage": false,
                "searchKey": "http_test.TestNoPanicOnRoundTripWithBasicAuth_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoPanicOnRoundTripWithBasicAuth_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoPanicOnRoundTripWithBasicAuth_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoPanicOnRoundTripWithBasicAuth_h2",
              "documentation": {
                "identifier": "TestNoPanicOnRoundTripWithBasicAuth_h2",
                "newPage": false,
                "searchKey": "http_test.TestNoPanicOnRoundTripWithBasicAuth_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoPanicOnRoundTripWithBasicAuth_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoPanicOnRoundTripWithBasicAuth_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testNoPanicWithBasicAuth",
              "documentation": {
                "identifier": "testNoPanicWithBasicAuth",
                "newPage": false,
                "searchKey": "http_test.testNoPanicWithBasicAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testNoPanicWithBasicAuth(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testNoPanicWithBasicAuth(t *testing.T, h2 bool)\n```\n\nIssue 34878: verify we don't panic when including basic auth (Go 1.13 regression) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNewRequestGetBody",
              "documentation": {
                "identifier": "TestNewRequestGetBody",
                "newPage": false,
                "searchKey": "http_test.TestNewRequestGetBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNewRequestGetBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNewRequestGetBody(t *testing.T)\n```\n\nverify that NewRequest sets Request.GetBody and that it works \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testMissingFile",
              "documentation": {
                "identifier": "testMissingFile",
                "newPage": false,
                "searchKey": "http_test.testMissingFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMissingFile(t *testing.T, req *Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMissingFile(t *testing.T, req *Request)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#newTestMultipartRequest",
              "documentation": {
                "identifier": "newTestMultipartRequest",
                "newPage": false,
                "searchKey": "http_test.newTestMultipartRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newTestMultipartRequest(t *testing.T) *Request"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newTestMultipartRequest(t *testing.T) *Request\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#validateTestMultipartContents",
              "documentation": {
                "identifier": "validateTestMultipartContents",
                "newPage": false,
                "searchKey": "http_test.validateTestMultipartContents",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validateTestMultipartContents(t *testing.T, req *Request, allMem bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validateTestMultipartContents(t *testing.T, req *Request, allMem bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testMultipartFile",
              "documentation": {
                "identifier": "testMultipartFile",
                "newPage": false,
                "searchKey": "http_test.testMultipartFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testMultipartFile(t *testing.T, req *Request, key, expectFilename, expectContent string) multipart.File"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testMultipartFile(t *testing.T, req *Request, key, expectFilename, expectContent string) multipart.File\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#benchmarkReadRequest",
              "documentation": {
                "identifier": "benchmarkReadRequest",
                "newPage": false,
                "searchKey": "http_test.benchmarkReadRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkReadRequest(b *testing.B, request string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkReadRequest(b *testing.B, request string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkReadRequestChrome",
              "documentation": {
                "identifier": "BenchmarkReadRequestChrome",
                "newPage": false,
                "searchKey": "http_test.BenchmarkReadRequestChrome",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadRequestChrome(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadRequestChrome(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkReadRequestCurl",
              "documentation": {
                "identifier": "BenchmarkReadRequestCurl",
                "newPage": false,
                "searchKey": "http_test.BenchmarkReadRequestCurl",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadRequestCurl(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadRequestCurl(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkReadRequestApachebench",
              "documentation": {
                "identifier": "BenchmarkReadRequestApachebench",
                "newPage": false,
                "searchKey": "http_test.BenchmarkReadRequestApachebench",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadRequestApachebench(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadRequestApachebench(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkReadRequestSiege",
              "documentation": {
                "identifier": "BenchmarkReadRequestSiege",
                "newPage": false,
                "searchKey": "http_test.BenchmarkReadRequestSiege",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadRequestSiege(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadRequestSiege(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkReadRequestWrk",
              "documentation": {
                "identifier": "BenchmarkReadRequestWrk",
                "newPage": false,
                "searchKey": "http_test.BenchmarkReadRequestWrk",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkReadRequestWrk(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkReadRequestWrk(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkFileAndServer_1KB",
              "documentation": {
                "identifier": "BenchmarkFileAndServer_1KB",
                "newPage": false,
                "searchKey": "http_test.BenchmarkFileAndServer_1KB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFileAndServer_1KB(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFileAndServer_1KB(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkFileAndServer_16MB",
              "documentation": {
                "identifier": "BenchmarkFileAndServer_16MB",
                "newPage": false,
                "searchKey": "http_test.BenchmarkFileAndServer_16MB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFileAndServer_16MB(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFileAndServer_16MB(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkFileAndServer_64MB",
              "documentation": {
                "identifier": "BenchmarkFileAndServer_64MB",
                "newPage": false,
                "searchKey": "http_test.BenchmarkFileAndServer_64MB",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkFileAndServer_64MB(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkFileAndServer_64MB(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#benchmarkFileAndServer",
              "documentation": {
                "identifier": "benchmarkFileAndServer",
                "newPage": false,
                "searchKey": "http_test.benchmarkFileAndServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkFileAndServer(b *testing.B, n int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkFileAndServer(b *testing.B, n int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#runFileAndServerBenchmarks",
              "documentation": {
                "identifier": "runFileAndServerBenchmarks",
                "newPage": false,
                "searchKey": "http_test.runFileAndServerBenchmarks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runFileAndServerBenchmarks(b *testing.B, tlsOption bool, f *os.File, n int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runFileAndServerBenchmarks(b *testing.B, tlsOption bool, f *os.File, n int64)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#reqBytes",
              "documentation": {
                "identifier": "reqBytes",
                "newPage": false,
                "searchKey": "http_test.reqBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func reqBytes(req string) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reqBytes(req string) []byte\n```\n\nreqBytes treats req as a request (with \\n delimiters) and returns it with \\r\\n delimiters, ending in \\r\\n\\r\\n \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConsumingBodyOnNextConn",
              "documentation": {
                "identifier": "TestConsumingBodyOnNextConn",
                "newPage": false,
                "searchKey": "http_test.TestConsumingBodyOnNextConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConsumingBodyOnNextConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConsumingBodyOnNextConn(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHostHandlers",
              "documentation": {
                "identifier": "TestHostHandlers",
                "newPage": false,
                "searchKey": "http_test.TestHostHandlers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHostHandlers(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHostHandlers(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#serve",
              "documentation": {
                "identifier": "serve",
                "newPage": false,
                "searchKey": "http_test.serve",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func serve(code int) HandlerFunc"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc serve(code int) HandlerFunc\n```\n\nserve returns a handler that sends a response with the given code. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#checkQueryStringHandler",
              "documentation": {
                "identifier": "checkQueryStringHandler",
                "newPage": false,
                "searchKey": "http_test.checkQueryStringHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkQueryStringHandler(w ResponseWriter, r *Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkQueryStringHandler(w ResponseWriter, r *Request)\n```\n\ncheckQueryStringHandler checks if r.URL.RawQuery has the same value as the URL excluding the scheme and the query string and sends 200 response code if it is, 500 otherwise. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeMuxHandler",
              "documentation": {
                "identifier": "TestServeMuxHandler",
                "newPage": false,
                "searchKey": "http_test.TestServeMuxHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeMuxHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeMuxHandler(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeMuxHandleFuncWithNilHandler",
              "documentation": {
                "identifier": "TestServeMuxHandleFuncWithNilHandler",
                "newPage": false,
                "searchKey": "http_test.TestServeMuxHandleFuncWithNilHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeMuxHandleFuncWithNilHandler(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeMuxHandleFuncWithNilHandler(t *testing.T)\n```\n\nIssue 24297 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeMuxHandlerRedirects",
              "documentation": {
                "identifier": "TestServeMuxHandlerRedirects",
                "newPage": false,
                "searchKey": "http_test.TestServeMuxHandlerRedirects",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeMuxHandlerRedirects(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeMuxHandlerRedirects(t *testing.T)\n```\n\nTestServeMuxHandlerRedirects tests that automatic redirects generated by mux.Handler() shouldn't clear the request's query string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMuxRedirectLeadingSlashes",
              "documentation": {
                "identifier": "TestMuxRedirectLeadingSlashes",
                "newPage": false,
                "searchKey": "http_test.TestMuxRedirectLeadingSlashes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMuxRedirectLeadingSlashes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMuxRedirectLeadingSlashes(t *testing.T)\n```\n\nTests for [https://golang.org/issue/900](https://golang.org/issue/900) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeWithSlashRedirectKeepsQueryString",
              "documentation": {
                "identifier": "TestServeWithSlashRedirectKeepsQueryString",
                "newPage": false,
                "searchKey": "http_test.TestServeWithSlashRedirectKeepsQueryString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeWithSlashRedirectKeepsQueryString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeWithSlashRedirectKeepsQueryString(t *testing.T)\n```\n\nTest that the special cased \"/route\" redirect implicitly created by a registered \"/route/\" properly sets the query string in the redirect URL. See Issue 17841. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeWithSlashRedirectForHostPatterns",
              "documentation": {
                "identifier": "TestServeWithSlashRedirectForHostPatterns",
                "newPage": false,
                "searchKey": "http_test.TestServeWithSlashRedirectForHostPatterns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeWithSlashRedirectForHostPatterns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeWithSlashRedirectForHostPatterns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestShouldRedirectConcurrency",
              "documentation": {
                "identifier": "TestShouldRedirectConcurrency",
                "newPage": false,
                "searchKey": "http_test.TestShouldRedirectConcurrency",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestShouldRedirectConcurrency(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestShouldRedirectConcurrency(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServeMux",
              "documentation": {
                "identifier": "BenchmarkServeMux",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServeMux",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServeMux(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServeMux(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServeMux_SkipServe",
              "documentation": {
                "identifier": "BenchmarkServeMux_SkipServe",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServeMux_SkipServe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServeMux_SkipServe(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServeMux_SkipServe(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#benchmarkServeMux",
              "documentation": {
                "identifier": "benchmarkServeMux",
                "newPage": false,
                "searchKey": "http_test.benchmarkServeMux",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkServeMux(b *testing.B, runHandler bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkServeMux(b *testing.B, runHandler bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerTimeouts",
              "documentation": {
                "identifier": "TestServerTimeouts",
                "newPage": false,
                "searchKey": "http_test.TestServerTimeouts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerTimeouts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerTimeouts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerTimeouts",
              "documentation": {
                "identifier": "testServerTimeouts",
                "newPage": false,
                "searchKey": "http_test.testServerTimeouts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerTimeouts(timeout time.Duration) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerTimeouts(timeout time.Duration) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP2WriteDeadlineExtendedOnNewRequest",
              "documentation": {
                "identifier": "TestHTTP2WriteDeadlineExtendedOnNewRequest",
                "newPage": false,
                "searchKey": "http_test.TestHTTP2WriteDeadlineExtendedOnNewRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP2WriteDeadlineExtendedOnNewRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP2WriteDeadlineExtendedOnNewRequest(t *testing.T)\n```\n\nTest that the HTTP/2 server handles Server.WriteTimeout (Issue 18437) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#tryTimeouts",
              "documentation": {
                "identifier": "tryTimeouts",
                "newPage": false,
                "searchKey": "http_test.tryTimeouts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func tryTimeouts(t *testing.T, testFunc func(timeout time.Duration) error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc tryTimeouts(t *testing.T, testFunc func(timeout time.Duration) error)\n```\n\ntryTimeouts runs testFunc with increasing timeouts. Test passes on first success, and fails if all timeouts fail. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP2WriteDeadlineEnforcedPerStream",
              "documentation": {
                "identifier": "TestHTTP2WriteDeadlineEnforcedPerStream",
                "newPage": false,
                "searchKey": "http_test.TestHTTP2WriteDeadlineEnforcedPerStream",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP2WriteDeadlineEnforcedPerStream(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP2WriteDeadlineEnforcedPerStream(t *testing.T)\n```\n\nTest that the HTTP/2 server RSTs stream on slow write. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHTTP2WriteDeadlineEnforcedPerStream",
              "documentation": {
                "identifier": "testHTTP2WriteDeadlineEnforcedPerStream",
                "newPage": false,
                "searchKey": "http_test.testHTTP2WriteDeadlineEnforcedPerStream",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHTTP2WriteDeadlineEnforcedPerStream(timeout time.Duration) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHTTP2WriteDeadlineEnforcedPerStream(timeout time.Duration) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP2NoWriteDeadline",
              "documentation": {
                "identifier": "TestHTTP2NoWriteDeadline",
                "newPage": false,
                "searchKey": "http_test.TestHTTP2NoWriteDeadline",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP2NoWriteDeadline(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP2NoWriteDeadline(t *testing.T)\n```\n\nTest that the HTTP/2 server does not send RST when WriteDeadline not set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHTTP2NoWriteDeadline",
              "documentation": {
                "identifier": "testHTTP2NoWriteDeadline",
                "newPage": false,
                "searchKey": "http_test.testHTTP2NoWriteDeadline",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHTTP2NoWriteDeadline(timeout time.Duration) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHTTP2NoWriteDeadline(timeout time.Duration) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestOnlyWriteTimeout",
              "documentation": {
                "identifier": "TestOnlyWriteTimeout",
                "newPage": false,
                "searchKey": "http_test.TestOnlyWriteTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOnlyWriteTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOnlyWriteTimeout(t *testing.T)\n```\n\ngolang.org/issue/4741 -- setting only a write timeout that triggers shouldn't cause a handler to block forever on reads (next HTTP request) that will never happen. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIdentityResponse",
              "documentation": {
                "identifier": "TestIdentityResponse",
                "newPage": false,
                "searchKey": "http_test.TestIdentityResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIdentityResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIdentityResponse(t *testing.T)\n```\n\nTestIdentityResponse verifies that a handler can unset \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTCPConnectionCloses",
              "documentation": {
                "identifier": "testTCPConnectionCloses",
                "newPage": false,
                "searchKey": "http_test.testTCPConnectionCloses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTCPConnectionCloses(t *testing.T, req string, h Handler)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTCPConnectionCloses(t *testing.T, req string, h Handler)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTCPConnectionStaysOpen",
              "documentation": {
                "identifier": "testTCPConnectionStaysOpen",
                "newPage": false,
                "searchKey": "http_test.testTCPConnectionStaysOpen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTCPConnectionStaysOpen(t *testing.T, req string, handler Handler)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTCPConnectionStaysOpen(t *testing.T, req string, handler Handler)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeHTTP10Close",
              "documentation": {
                "identifier": "TestServeHTTP10Close",
                "newPage": false,
                "searchKey": "http_test.TestServeHTTP10Close",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeHTTP10Close(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeHTTP10Close(t *testing.T)\n```\n\nTestServeHTTP10Close verifies that HTTP/1.0 requests won't be kept alive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientCanClose",
              "documentation": {
                "identifier": "TestClientCanClose",
                "newPage": false,
                "searchKey": "http_test.TestClientCanClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientCanClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientCanClose(t *testing.T)\n```\n\nTestClientCanClose verifies that clients can also force a connection to close. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlersCanSetConnectionClose11",
              "documentation": {
                "identifier": "TestHandlersCanSetConnectionClose11",
                "newPage": false,
                "searchKey": "http_test.TestHandlersCanSetConnectionClose11",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlersCanSetConnectionClose11(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlersCanSetConnectionClose11(t *testing.T)\n```\n\nTestHandlersCanSetConnectionClose verifies that handlers can force a connection to close, even for HTTP/1.1 requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlersCanSetConnectionClose10",
              "documentation": {
                "identifier": "TestHandlersCanSetConnectionClose10",
                "newPage": false,
                "searchKey": "http_test.TestHandlersCanSetConnectionClose10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlersCanSetConnectionClose10(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlersCanSetConnectionClose10(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP2UpgradeClosesConnection",
              "documentation": {
                "identifier": "TestHTTP2UpgradeClosesConnection",
                "newPage": false,
                "searchKey": "http_test.TestHTTP2UpgradeClosesConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP2UpgradeClosesConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP2UpgradeClosesConnection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#send204",
              "documentation": {
                "identifier": "send204",
                "newPage": false,
                "searchKey": "http_test.send204",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func send204(w ResponseWriter, r *Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc send204(w ResponseWriter, r *Request)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#send304",
              "documentation": {
                "identifier": "send304",
                "newPage": false,
                "searchKey": "http_test.send304",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func send304(w ResponseWriter, r *Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc send304(w ResponseWriter, r *Request)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP10KeepAlive204Response",
              "documentation": {
                "identifier": "TestHTTP10KeepAlive204Response",
                "newPage": false,
                "searchKey": "http_test.TestHTTP10KeepAlive204Response",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP10KeepAlive204Response(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP10KeepAlive204Response(t *testing.T)\n```\n\nIssue 15647: 204 responses can't have bodies, so HTTP/1.0 keep-alive conns should stay open. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP11KeepAlive204Response",
              "documentation": {
                "identifier": "TestHTTP11KeepAlive204Response",
                "newPage": false,
                "searchKey": "http_test.TestHTTP11KeepAlive204Response",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP11KeepAlive204Response(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP11KeepAlive204Response(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP10KeepAlive304Response",
              "documentation": {
                "identifier": "TestHTTP10KeepAlive304Response",
                "newPage": false,
                "searchKey": "http_test.TestHTTP10KeepAlive304Response",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP10KeepAlive304Response(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP10KeepAlive304Response(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestKeepAliveFinalChunkWithEOF",
              "documentation": {
                "identifier": "TestKeepAliveFinalChunkWithEOF",
                "newPage": false,
                "searchKey": "http_test.TestKeepAliveFinalChunkWithEOF",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestKeepAliveFinalChunkWithEOF(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestKeepAliveFinalChunkWithEOF(t *testing.T)\n```\n\nIssue 15703 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestSetsRemoteAddr_h1",
              "documentation": {
                "identifier": "TestSetsRemoteAddr_h1",
                "newPage": false,
                "searchKey": "http_test.TestSetsRemoteAddr_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetsRemoteAddr_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetsRemoteAddr_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestSetsRemoteAddr_h2",
              "documentation": {
                "identifier": "TestSetsRemoteAddr_h2",
                "newPage": false,
                "searchKey": "http_test.TestSetsRemoteAddr_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSetsRemoteAddr_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSetsRemoteAddr_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testSetsRemoteAddr",
              "documentation": {
                "identifier": "testSetsRemoteAddr",
                "newPage": false,
                "searchKey": "http_test.testSetsRemoteAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testSetsRemoteAddr(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testSetsRemoteAddr(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerAllowsBlockingRemoteAddr",
              "documentation": {
                "identifier": "TestServerAllowsBlockingRemoteAddr",
                "newPage": false,
                "searchKey": "http_test.TestServerAllowsBlockingRemoteAddr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerAllowsBlockingRemoteAddr(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerAllowsBlockingRemoteAddr(t *testing.T)\n```\n\nIssue 12943 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHeadResponses_h1",
              "documentation": {
                "identifier": "TestHeadResponses_h1",
                "newPage": false,
                "searchKey": "http_test.TestHeadResponses_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeadResponses_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeadResponses_h1(t *testing.T)\n```\n\nTestHeadResponses verifies that all MIME type sniffing and Content-Length counting of GET requests also happens on HEAD requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHeadResponses_h2",
              "documentation": {
                "identifier": "TestHeadResponses_h2",
                "newPage": false,
                "searchKey": "http_test.TestHeadResponses_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeadResponses_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeadResponses_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHeadResponses",
              "documentation": {
                "identifier": "testHeadResponses",
                "newPage": false,
                "searchKey": "http_test.testHeadResponses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHeadResponses(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHeadResponses(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTLSHandshakeTimeout",
              "documentation": {
                "identifier": "TestTLSHandshakeTimeout",
                "newPage": false,
                "searchKey": "http_test.TestTLSHandshakeTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSHandshakeTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSHandshakeTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTLSServer",
              "documentation": {
                "identifier": "TestTLSServer",
                "newPage": false,
                "searchKey": "http_test.TestTLSServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSServer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSServer(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServeTLS",
              "documentation": {
                "identifier": "TestServeTLS",
                "newPage": false,
                "searchKey": "http_test.TestServeTLS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServeTLS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServeTLS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTLSServerRejectHTTPRequests",
              "documentation": {
                "identifier": "TestTLSServerRejectHTTPRequests",
                "newPage": false,
                "searchKey": "http_test.TestTLSServerRejectHTTPRequests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSServerRejectHTTPRequests(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSServerRejectHTTPRequests(t *testing.T)\n```\n\nTest that the HTTPS server nicely rejects plaintext HTTP/1.x requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAutomaticHTTP2_Serve_NoTLSConfig",
              "documentation": {
                "identifier": "TestAutomaticHTTP2_Serve_NoTLSConfig",
                "newPage": false,
                "searchKey": "http_test.TestAutomaticHTTP2_Serve_NoTLSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutomaticHTTP2_Serve_NoTLSConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutomaticHTTP2_Serve_NoTLSConfig(t *testing.T)\n```\n\nIssue 15908 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAutomaticHTTP2_Serve_NonH2TLSConfig",
              "documentation": {
                "identifier": "TestAutomaticHTTP2_Serve_NonH2TLSConfig",
                "newPage": false,
                "searchKey": "http_test.TestAutomaticHTTP2_Serve_NonH2TLSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutomaticHTTP2_Serve_NonH2TLSConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutomaticHTTP2_Serve_NonH2TLSConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAutomaticHTTP2_Serve_H2TLSConfig",
              "documentation": {
                "identifier": "TestAutomaticHTTP2_Serve_H2TLSConfig",
                "newPage": false,
                "searchKey": "http_test.TestAutomaticHTTP2_Serve_H2TLSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutomaticHTTP2_Serve_H2TLSConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutomaticHTTP2_Serve_H2TLSConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testAutomaticHTTP2_Serve",
              "documentation": {
                "identifier": "testAutomaticHTTP2_Serve",
                "newPage": false,
                "searchKey": "http_test.testAutomaticHTTP2_Serve",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAutomaticHTTP2_Serve(t *testing.T, tlsConf *tls.Config, wantH2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAutomaticHTTP2_Serve(t *testing.T, tlsConf *tls.Config, wantH2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAutomaticHTTP2_Serve_WithTLSConfig",
              "documentation": {
                "identifier": "TestAutomaticHTTP2_Serve_WithTLSConfig",
                "newPage": false,
                "searchKey": "http_test.TestAutomaticHTTP2_Serve_WithTLSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutomaticHTTP2_Serve_WithTLSConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutomaticHTTP2_Serve_WithTLSConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAutomaticHTTP2_ListenAndServe",
              "documentation": {
                "identifier": "TestAutomaticHTTP2_ListenAndServe",
                "newPage": false,
                "searchKey": "http_test.TestAutomaticHTTP2_ListenAndServe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutomaticHTTP2_ListenAndServe(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutomaticHTTP2_ListenAndServe(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAutomaticHTTP2_ListenAndServe_GetCertificate",
              "documentation": {
                "identifier": "TestAutomaticHTTP2_ListenAndServe_GetCertificate",
                "newPage": false,
                "searchKey": "http_test.TestAutomaticHTTP2_ListenAndServe_GetCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAutomaticHTTP2_ListenAndServe_GetCertificate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAutomaticHTTP2_ListenAndServe_GetCertificate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testAutomaticHTTP2_ListenAndServe",
              "documentation": {
                "identifier": "testAutomaticHTTP2_ListenAndServe",
                "newPage": false,
                "searchKey": "http_test.testAutomaticHTTP2_ListenAndServe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testAutomaticHTTP2_ListenAndServe(t *testing.T, tlsConf *tls.Config)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testAutomaticHTTP2_ListenAndServe(t *testing.T, tlsConf *tls.Config)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerExpect",
              "documentation": {
                "identifier": "TestServerExpect",
                "newPage": false,
                "searchKey": "http_test.TestServerExpect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerExpect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerExpect(t *testing.T)\n```\n\nTests that the server responds to the \"Expect\" request header correctly. http2 test: TestServer_Response_Automatic100Continue \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerUnreadRequestBodyLittle",
              "documentation": {
                "identifier": "TestServerUnreadRequestBodyLittle",
                "newPage": false,
                "searchKey": "http_test.TestServerUnreadRequestBodyLittle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerUnreadRequestBodyLittle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerUnreadRequestBodyLittle(t *testing.T)\n```\n\nUnder a ~256KB (maxPostHandlerReadBytes) threshold, the server should consume client request bodies that a handler didn't read. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerUnreadRequestBodyLarge",
              "documentation": {
                "identifier": "TestServerUnreadRequestBodyLarge",
                "newPage": false,
                "searchKey": "http_test.TestServerUnreadRequestBodyLarge",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerUnreadRequestBodyLarge(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerUnreadRequestBodyLarge(t *testing.T)\n```\n\nOver a ~256KB (maxPostHandlerReadBytes) threshold, the server should ignore client request bodies that a handler didn't read and close the connection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerBodyClose",
              "documentation": {
                "identifier": "TestHandlerBodyClose",
                "newPage": false,
                "searchKey": "http_test.TestHandlerBodyClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerBodyClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerBodyClose(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHandlerBodyClose",
              "documentation": {
                "identifier": "testHandlerBodyClose",
                "newPage": false,
                "searchKey": "http_test.testHandlerBodyClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHandlerBodyClose(t *testing.T, i int, tt handlerBodyCloseTest)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHandlerBodyClose(t *testing.T, i int, tt handlerBodyCloseTest)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestBodyReadErrorClosesConnection",
              "documentation": {
                "identifier": "TestRequestBodyReadErrorClosesConnection",
                "newPage": false,
                "searchKey": "http_test.TestRequestBodyReadErrorClosesConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestBodyReadErrorClosesConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestBodyReadErrorClosesConnection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInvalidTrailerClosesConnection",
              "documentation": {
                "identifier": "TestInvalidTrailerClosesConnection",
                "newPage": false,
                "searchKey": "http_test.TestInvalidTrailerClosesConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidTrailerClosesConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidTrailerClosesConnection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestBodyTimeoutClosesConnection",
              "documentation": {
                "identifier": "TestRequestBodyTimeoutClosesConnection",
                "newPage": false,
                "searchKey": "http_test.TestRequestBodyTimeoutClosesConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestBodyTimeoutClosesConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestBodyTimeoutClosesConnection(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandler_h1",
              "documentation": {
                "identifier": "TestTimeoutHandler_h1",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandler_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandler_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandler_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandler_h2",
              "documentation": {
                "identifier": "TestTimeoutHandler_h2",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandler_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandler_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandler_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTimeoutHandler",
              "documentation": {
                "identifier": "testTimeoutHandler",
                "newPage": false,
                "searchKey": "http_test.testTimeoutHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTimeoutHandler(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTimeoutHandler(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerRace",
              "documentation": {
                "identifier": "TestTimeoutHandlerRace",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerRace(t *testing.T)\n```\n\nSee issues 8209 and 8414. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerRaceHeader",
              "documentation": {
                "identifier": "TestTimeoutHandlerRaceHeader",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerRaceHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerRaceHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerRaceHeader(t *testing.T)\n```\n\nSee issues 8209 and 8414. Both issues involved panics in the implementation of TimeoutHandler. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerRaceHeaderTimeout",
              "documentation": {
                "identifier": "TestTimeoutHandlerRaceHeaderTimeout",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerRaceHeaderTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerRaceHeaderTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerRaceHeaderTimeout(t *testing.T)\n```\n\nIssue 9162 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerStartTimerWhenServing",
              "documentation": {
                "identifier": "TestTimeoutHandlerStartTimerWhenServing",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerStartTimerWhenServing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerStartTimerWhenServing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerStartTimerWhenServing(t *testing.T)\n```\n\nIssue 14568. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerEmptyResponse",
              "documentation": {
                "identifier": "TestTimeoutHandlerEmptyResponse",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerEmptyResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerEmptyResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerEmptyResponse(t *testing.T)\n```\n\n[https://golang.org/issue/15948](https://golang.org/issue/15948) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerPanicRecovery",
              "documentation": {
                "identifier": "TestTimeoutHandlerPanicRecovery",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerPanicRecovery",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerPanicRecovery(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerPanicRecovery(t *testing.T)\n```\n\n[https://golang.org/issues/22084](https://golang.org/issues/22084) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRedirectBadPath",
              "documentation": {
                "identifier": "TestRedirectBadPath",
                "newPage": false,
                "searchKey": "http_test.TestRedirectBadPath",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirectBadPath(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirectBadPath(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRedirect",
              "documentation": {
                "identifier": "TestRedirect",
                "newPage": false,
                "searchKey": "http_test.TestRedirect",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirect(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirect(t *testing.T)\n```\n\nTest different URL formats and schemes \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRedirectContentTypeAndBody",
              "documentation": {
                "identifier": "TestRedirectContentTypeAndBody",
                "newPage": false,
                "searchKey": "http_test.TestRedirectContentTypeAndBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRedirectContentTypeAndBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRedirectContentTypeAndBody(t *testing.T)\n```\n\nTest that Redirect sets Content-Type header for GET and HEAD requests and writes a short HTML body, unless the request already has a Content-Type header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestZeroLengthPostAndResponse_h1",
              "documentation": {
                "identifier": "TestZeroLengthPostAndResponse_h1",
                "newPage": false,
                "searchKey": "http_test.TestZeroLengthPostAndResponse_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroLengthPostAndResponse_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroLengthPostAndResponse_h1(t *testing.T)\n```\n\nTestZeroLengthPostAndResponse exercises an optimization done by the Transport: when there is no body (either because the method doesn't permit a body, or an explicit Content-Length of zero is present), then the transport can re-use the connection immediately. But when it re-uses the connection, it typically closes the previous request's body, which is not optimal for zero-lengthed bodies, as the client would then see http.ErrBodyReadAfterClose and not 0, io.EOF. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestZeroLengthPostAndResponse_h2",
              "documentation": {
                "identifier": "TestZeroLengthPostAndResponse_h2",
                "newPage": false,
                "searchKey": "http_test.TestZeroLengthPostAndResponse_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestZeroLengthPostAndResponse_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestZeroLengthPostAndResponse_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testZeroLengthPostAndResponse",
              "documentation": {
                "identifier": "testZeroLengthPostAndResponse",
                "newPage": false,
                "searchKey": "http_test.testZeroLengthPostAndResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testZeroLengthPostAndResponse(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testZeroLengthPostAndResponse(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerPanicNil_h1",
              "documentation": {
                "identifier": "TestHandlerPanicNil_h1",
                "newPage": false,
                "searchKey": "http_test.TestHandlerPanicNil_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerPanicNil_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerPanicNil_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerPanicNil_h2",
              "documentation": {
                "identifier": "TestHandlerPanicNil_h2",
                "newPage": false,
                "searchKey": "http_test.TestHandlerPanicNil_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerPanicNil_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerPanicNil_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerPanic_h1",
              "documentation": {
                "identifier": "TestHandlerPanic_h1",
                "newPage": false,
                "searchKey": "http_test.TestHandlerPanic_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerPanic_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerPanic_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerPanic_h2",
              "documentation": {
                "identifier": "TestHandlerPanic_h2",
                "newPage": false,
                "searchKey": "http_test.TestHandlerPanic_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerPanic_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerPanic_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerPanicWithHijack",
              "documentation": {
                "identifier": "TestHandlerPanicWithHijack",
                "newPage": false,
                "searchKey": "http_test.TestHandlerPanicWithHijack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerPanicWithHijack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerPanicWithHijack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHandlerPanic",
              "documentation": {
                "identifier": "testHandlerPanic",
                "newPage": false,
                "searchKey": "http_test.testHandlerPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHandlerPanic(t *testing.T, withHijack, h2 bool, wrapper func(Handler) Handler, panicValue interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHandlerPanic(t *testing.T, withHijack, h2 bool, wrapper func(Handler) Handler, panicValue interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerWriteHijackZeroBytes",
              "documentation": {
                "identifier": "TestServerWriteHijackZeroBytes",
                "newPage": false,
                "searchKey": "http_test.TestServerWriteHijackZeroBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerWriteHijackZeroBytes(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerWriteHijackZeroBytes(t *testing.T)\n```\n\nIssue 16456: allow writing 0 bytes on hijacked conn to test hijack without any log spam. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerNoDate_h1",
              "documentation": {
                "identifier": "TestServerNoDate_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerNoDate_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerNoDate_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerNoDate_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerNoDate_h2",
              "documentation": {
                "identifier": "TestServerNoDate_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerNoDate_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerNoDate_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerNoDate_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerNoContentType_h1",
              "documentation": {
                "identifier": "TestServerNoContentType_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerNoContentType_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerNoContentType_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerNoContentType_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerNoContentType_h2",
              "documentation": {
                "identifier": "TestServerNoContentType_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerNoContentType_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerNoContentType_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerNoContentType_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerNoHeader",
              "documentation": {
                "identifier": "testServerNoHeader",
                "newPage": false,
                "searchKey": "http_test.testServerNoHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerNoHeader(t *testing.T, h2 bool, header string)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerNoHeader(t *testing.T, h2 bool, header string)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStripPrefix",
              "documentation": {
                "identifier": "TestStripPrefix",
                "newPage": false,
                "searchKey": "http_test.TestStripPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStripPrefix(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStripPrefix(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStripPrefixNotModifyRequest",
              "documentation": {
                "identifier": "TestStripPrefixNotModifyRequest",
                "newPage": false,
                "searchKey": "http_test.TestStripPrefixNotModifyRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStripPrefixNotModifyRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStripPrefixNotModifyRequest(t *testing.T)\n```\n\n[https://golang.org/issue/18952](https://golang.org/issue/18952). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestLimit_h1",
              "documentation": {
                "identifier": "TestRequestLimit_h1",
                "newPage": false,
                "searchKey": "http_test.TestRequestLimit_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestLimit_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestLimit_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestLimit_h2",
              "documentation": {
                "identifier": "TestRequestLimit_h2",
                "newPage": false,
                "searchKey": "http_test.TestRequestLimit_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestLimit_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestLimit_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testRequestLimit",
              "documentation": {
                "identifier": "testRequestLimit",
                "newPage": false,
                "searchKey": "http_test.testRequestLimit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRequestLimit(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRequestLimit(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestBodyLimit_h1",
              "documentation": {
                "identifier": "TestRequestBodyLimit_h1",
                "newPage": false,
                "searchKey": "http_test.TestRequestBodyLimit_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestBodyLimit_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestBodyLimit_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestBodyLimit_h2",
              "documentation": {
                "identifier": "TestRequestBodyLimit_h2",
                "newPage": false,
                "searchKey": "http_test.TestRequestBodyLimit_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestBodyLimit_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestBodyLimit_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testRequestBodyLimit",
              "documentation": {
                "identifier": "testRequestBodyLimit",
                "newPage": false,
                "searchKey": "http_test.testRequestBodyLimit",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testRequestBodyLimit(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testRequestBodyLimit(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientWriteShutdown",
              "documentation": {
                "identifier": "TestClientWriteShutdown",
                "newPage": false,
                "searchKey": "http_test.TestClientWriteShutdown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientWriteShutdown(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientWriteShutdown(t *testing.T)\n```\n\nTestClientWriteShutdown tests that if the client shuts down the write side of their TCP connection, the server doesn't send a 400 Bad Request. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerBufferedChunking",
              "documentation": {
                "identifier": "TestServerBufferedChunking",
                "newPage": false,
                "searchKey": "http_test.TestServerBufferedChunking",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerBufferedChunking(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerBufferedChunking(t *testing.T)\n```\n\nTests that chunked server responses that write 1 byte at a time are buffered before chunk headers are added, not after chunk headers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerGracefulClose",
              "documentation": {
                "identifier": "TestServerGracefulClose",
                "newPage": false,
                "searchKey": "http_test.TestServerGracefulClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerGracefulClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerGracefulClose(t *testing.T)\n```\n\nTests that the server flushes its response headers out when it's ignoring the response body and waits a bit before forcefully closing the TCP connection, causing the client to get a RST. See [https://golang.org/issue/3595](https://golang.org/issue/3595) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCaseSensitiveMethod_h1",
              "documentation": {
                "identifier": "TestCaseSensitiveMethod_h1",
                "newPage": false,
                "searchKey": "http_test.TestCaseSensitiveMethod_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCaseSensitiveMethod_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCaseSensitiveMethod_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCaseSensitiveMethod_h2",
              "documentation": {
                "identifier": "TestCaseSensitiveMethod_h2",
                "newPage": false,
                "searchKey": "http_test.TestCaseSensitiveMethod_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCaseSensitiveMethod_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCaseSensitiveMethod_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testCaseSensitiveMethod",
              "documentation": {
                "identifier": "testCaseSensitiveMethod",
                "newPage": false,
                "searchKey": "http_test.testCaseSensitiveMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCaseSensitiveMethod(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCaseSensitiveMethod(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestContentLengthZero",
              "documentation": {
                "identifier": "TestContentLengthZero",
                "newPage": false,
                "searchKey": "http_test.TestContentLengthZero",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContentLengthZero(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContentLengthZero(t *testing.T)\n```\n\nTestContentLengthZero tests that for both an HTTP/1.0 and HTTP/1.1 request (both keep-alive), when a Handler never writes any response, the net/http package adds a \"Content-Length: 0\" response header. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCloseNotifier",
              "documentation": {
                "identifier": "TestCloseNotifier",
                "newPage": false,
                "searchKey": "http_test.TestCloseNotifier",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseNotifier(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseNotifier(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCloseNotifierPipelined",
              "documentation": {
                "identifier": "TestCloseNotifierPipelined",
                "newPage": false,
                "searchKey": "http_test.TestCloseNotifierPipelined",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseNotifierPipelined(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseNotifierPipelined(t *testing.T)\n```\n\nTests that a pipelined request does not cause the first request's Handler's CloseNotify channel to fire. \n\nIssue 13165 (where it used to deadlock), but behavior changed in Issue 23921. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCloseNotifierChanLeak",
              "documentation": {
                "identifier": "TestCloseNotifierChanLeak",
                "newPage": false,
                "searchKey": "http_test.TestCloseNotifierChanLeak",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseNotifierChanLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseNotifierChanLeak(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHijackAfterCloseNotifier",
              "documentation": {
                "identifier": "TestHijackAfterCloseNotifier",
                "newPage": false,
                "searchKey": "http_test.TestHijackAfterCloseNotifier",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHijackAfterCloseNotifier(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHijackAfterCloseNotifier(t *testing.T)\n```\n\nTests that we can use CloseNotifier in one request, and later call Hijack on a second request on the same connection. \n\nIt also tests that the connReader stitches together its background 1-byte read for CloseNotifier when CloseNotifier doesn't fire with the rest of the second HTTP later. \n\nIssue 9763. HTTP/1-only test. (http2 doesn't have Hijack) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHijackBeforeRequestBodyRead",
              "documentation": {
                "identifier": "TestHijackBeforeRequestBodyRead",
                "newPage": false,
                "searchKey": "http_test.TestHijackBeforeRequestBodyRead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHijackBeforeRequestBodyRead(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHijackBeforeRequestBodyRead(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestOptions",
              "documentation": {
                "identifier": "TestOptions",
                "newPage": false,
                "searchKey": "http_test.TestOptions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestOptions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestOptions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHeaderToWire",
              "documentation": {
                "identifier": "TestHeaderToWire",
                "newPage": false,
                "searchKey": "http_test.TestHeaderToWire",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHeaderToWire(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHeaderToWire(t *testing.T)\n```\n\nTests regarding the ordering of Write, WriteHeader, Header, and Flush calls. In Go 1.0, rw.WriteHeader immediately flushed the (*response).header to the wire. In Go 1.1, the actual wire flush is delayed, so we could maybe tack on a Content-Length and better Content-Type after we see more (or all) of the output. To preserve compatibility with Go 1, we need to be careful to track which headers were live at the time of WriteHeader, so we write the same ones, even if the handler modifies them (~erroneously) after the first Write. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAcceptMaxFds",
              "documentation": {
                "identifier": "TestAcceptMaxFds",
                "newPage": false,
                "searchKey": "http_test.TestAcceptMaxFds",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAcceptMaxFds(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAcceptMaxFds(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestWriteAfterHijack",
              "documentation": {
                "identifier": "TestWriteAfterHijack",
                "newPage": false,
                "searchKey": "http_test.TestWriteAfterHijack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWriteAfterHijack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWriteAfterHijack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDoubleHijack",
              "documentation": {
                "identifier": "TestDoubleHijack",
                "newPage": false,
                "searchKey": "http_test.TestDoubleHijack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDoubleHijack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDoubleHijack(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHTTP10ConnectionHeader",
              "documentation": {
                "identifier": "TestHTTP10ConnectionHeader",
                "newPage": false,
                "searchKey": "http_test.TestHTTP10ConnectionHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHTTP10ConnectionHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHTTP10ConnectionHeader(t *testing.T)\n```\n\n[https://golang.org/issue/5955](https://golang.org/issue/5955) Note that this does not test the \"request too large\" exit path from the http server. This is intentional; not sending Connection: close is just a minor wire optimization and is pointless if dealing with a badly behaved client. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerReaderFromOrder_h1",
              "documentation": {
                "identifier": "TestServerReaderFromOrder_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerReaderFromOrder_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerReaderFromOrder_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerReaderFromOrder_h1(t *testing.T)\n```\n\nSee golang.org/issue/5660 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerReaderFromOrder_h2",
              "documentation": {
                "identifier": "TestServerReaderFromOrder_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerReaderFromOrder_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerReaderFromOrder_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerReaderFromOrder_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerReaderFromOrder",
              "documentation": {
                "identifier": "testServerReaderFromOrder",
                "newPage": false,
                "searchKey": "http_test.testServerReaderFromOrder",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerReaderFromOrder(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerReaderFromOrder(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCodesPreventingContentTypeAndBody",
              "documentation": {
                "identifier": "TestCodesPreventingContentTypeAndBody",
                "newPage": false,
                "searchKey": "http_test.TestCodesPreventingContentTypeAndBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCodesPreventingContentTypeAndBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCodesPreventingContentTypeAndBody(t *testing.T)\n```\n\nIssue 6157, Issue 6685 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestContentTypeOkayOn204",
              "documentation": {
                "identifier": "TestContentTypeOkayOn204",
                "newPage": false,
                "searchKey": "http_test.TestContentTypeOkayOn204",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContentTypeOkayOn204(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContentTypeOkayOn204(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAndServerSharedBodyRace_h1",
              "documentation": {
                "identifier": "TestTransportAndServerSharedBodyRace_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportAndServerSharedBodyRace_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAndServerSharedBodyRace_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAndServerSharedBodyRace_h1(t *testing.T)\n```\n\nIssue 6995 A server Handler can receive a Request, and then turn around and give a copy of that Request.Body out to the Transport (e.g. any proxy).  So then two people own that Request.Body (both the server and the http client), and both think they can close it on failure. Therefore, all incoming server requests Bodies need to be thread-safe. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAndServerSharedBodyRace_h2",
              "documentation": {
                "identifier": "TestTransportAndServerSharedBodyRace_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportAndServerSharedBodyRace_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAndServerSharedBodyRace_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAndServerSharedBodyRace_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportAndServerSharedBodyRace",
              "documentation": {
                "identifier": "testTransportAndServerSharedBodyRace",
                "newPage": false,
                "searchKey": "http_test.testTransportAndServerSharedBodyRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportAndServerSharedBodyRace(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportAndServerSharedBodyRace(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRequestBodyCloseDoesntBlock",
              "documentation": {
                "identifier": "TestRequestBodyCloseDoesntBlock",
                "newPage": false,
                "searchKey": "http_test.TestRequestBodyCloseDoesntBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRequestBodyCloseDoesntBlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRequestBodyCloseDoesntBlock(t *testing.T)\n```\n\nTest that a hanging Request.Body.Read from another goroutine can't cause the Handler goroutine's Request.Body.Close to block. See issue 7121. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestResponseWriterWriteString",
              "documentation": {
                "identifier": "TestResponseWriterWriteString",
                "newPage": false,
                "searchKey": "http_test.TestResponseWriterWriteString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestResponseWriterWriteString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestResponseWriterWriteString(t *testing.T)\n```\n\ntest that ResponseWriter implements io.StringWriter. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAppendTime",
              "documentation": {
                "identifier": "TestAppendTime",
                "newPage": false,
                "searchKey": "http_test.TestAppendTime",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAppendTime(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAppendTime(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerConnState",
              "documentation": {
                "identifier": "TestServerConnState",
                "newPage": false,
                "searchKey": "http_test.TestServerConnState",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerConnState(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerConnState(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerKeepAlivesEnabled",
              "documentation": {
                "identifier": "TestServerKeepAlivesEnabled",
                "newPage": false,
                "searchKey": "http_test.TestServerKeepAlivesEnabled",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerKeepAlivesEnabled(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerKeepAlivesEnabled(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerEmptyBodyRace_h1",
              "documentation": {
                "identifier": "TestServerEmptyBodyRace_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerEmptyBodyRace_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerEmptyBodyRace_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerEmptyBodyRace_h1(t *testing.T)\n```\n\ngolang.org/issue/7856 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerEmptyBodyRace_h2",
              "documentation": {
                "identifier": "TestServerEmptyBodyRace_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerEmptyBodyRace_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerEmptyBodyRace_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerEmptyBodyRace_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerEmptyBodyRace",
              "documentation": {
                "identifier": "testServerEmptyBodyRace",
                "newPage": false,
                "searchKey": "http_test.testServerEmptyBodyRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerEmptyBodyRace(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerEmptyBodyRace(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerConnStateNew",
              "documentation": {
                "identifier": "TestServerConnStateNew",
                "newPage": false,
                "searchKey": "http_test.TestServerConnStateNew",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerConnStateNew(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerConnStateNew(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCloseWrite",
              "documentation": {
                "identifier": "TestCloseWrite",
                "newPage": false,
                "searchKey": "http_test.TestCloseWrite",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCloseWrite(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCloseWrite(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerFlushAndHijack",
              "documentation": {
                "identifier": "TestServerFlushAndHijack",
                "newPage": false,
                "searchKey": "http_test.TestServerFlushAndHijack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerFlushAndHijack(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerFlushAndHijack(t *testing.T)\n```\n\nThis verifies that a handler can Flush and then Hijack. \n\nA similar test crashed once during development, but it was only testing this tangentially and temporarily until another TODO was fixed. \n\nSo add an explicit test for this. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerKeepAliveAfterWriteError",
              "documentation": {
                "identifier": "TestServerKeepAliveAfterWriteError",
                "newPage": false,
                "searchKey": "http_test.TestServerKeepAliveAfterWriteError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerKeepAliveAfterWriteError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerKeepAliveAfterWriteError(t *testing.T)\n```\n\ngolang.org/issue/8534 -- the Server shouldn't reuse a connection for keep-alive after it's seen any Write error (e.g. a timeout) on that net.Conn. \n\nTo test, verify we don't timeout or see fewer unique client addresses (== unique connections) than requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoContentLengthIfTransferEncoding",
              "documentation": {
                "identifier": "TestNoContentLengthIfTransferEncoding",
                "newPage": false,
                "searchKey": "http_test.TestNoContentLengthIfTransferEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoContentLengthIfTransferEncoding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoContentLengthIfTransferEncoding(t *testing.T)\n```\n\nIssue 9987: shouldn't add automatic Content-Length (or Content-Type) if a Transfer-Encoding was set by the handler. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTolerateCRLFBeforeRequestLine",
              "documentation": {
                "identifier": "TestTolerateCRLFBeforeRequestLine",
                "newPage": false,
                "searchKey": "http_test.TestTolerateCRLFBeforeRequestLine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTolerateCRLFBeforeRequestLine(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTolerateCRLFBeforeRequestLine(t *testing.T)\n```\n\ntolerate extra CRLF(s) before Request-Line on subsequent requests on a conn Issue 10876. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue13893_Expect100",
              "documentation": {
                "identifier": "TestIssue13893_Expect100",
                "newPage": false,
                "searchKey": "http_test.TestIssue13893_Expect100",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue13893_Expect100(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue13893_Expect100(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue11549_Expect100",
              "documentation": {
                "identifier": "TestIssue11549_Expect100",
                "newPage": false,
                "searchKey": "http_test.TestIssue11549_Expect100",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue11549_Expect100(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue11549_Expect100(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerFinishSkipBigContentLengthRead",
              "documentation": {
                "identifier": "TestHandlerFinishSkipBigContentLengthRead",
                "newPage": false,
                "searchKey": "http_test.TestHandlerFinishSkipBigContentLengthRead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerFinishSkipBigContentLengthRead(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerFinishSkipBigContentLengthRead(t *testing.T)\n```\n\nIf a Handler finishes and there's an unread request body, verify the server try to do implicit read on it before replying. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerSetsBodyNil_h1",
              "documentation": {
                "identifier": "TestHandlerSetsBodyNil_h1",
                "newPage": false,
                "searchKey": "http_test.TestHandlerSetsBodyNil_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerSetsBodyNil_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerSetsBodyNil_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerSetsBodyNil_h2",
              "documentation": {
                "identifier": "TestHandlerSetsBodyNil_h2",
                "newPage": false,
                "searchKey": "http_test.TestHandlerSetsBodyNil_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerSetsBodyNil_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerSetsBodyNil_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testHandlerSetsBodyNil",
              "documentation": {
                "identifier": "testHandlerSetsBodyNil",
                "newPage": false,
                "searchKey": "http_test.testHandlerSetsBodyNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testHandlerSetsBodyNil(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testHandlerSetsBodyNil(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerValidatesHostHeader",
              "documentation": {
                "identifier": "TestServerValidatesHostHeader",
                "newPage": false,
                "searchKey": "http_test.TestServerValidatesHostHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerValidatesHostHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerValidatesHostHeader(t *testing.T)\n```\n\nTest that we validate the Host header. Issue 11206 (invalid bytes in Host) and 13624 (Host present in HTTP/1.1) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerHandlersCanHandleH2PRI",
              "documentation": {
                "identifier": "TestServerHandlersCanHandleH2PRI",
                "newPage": false,
                "searchKey": "http_test.TestServerHandlersCanHandleH2PRI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerHandlersCanHandleH2PRI(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerHandlersCanHandleH2PRI(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerValidatesHeaders",
              "documentation": {
                "identifier": "TestServerValidatesHeaders",
                "newPage": false,
                "searchKey": "http_test.TestServerValidatesHeaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerValidatesHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerValidatesHeaders(t *testing.T)\n```\n\nTest that we validate the valid bytes in HTTP/1 headers. Issue 11207. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerRequestContextCancel_ServeHTTPDone_h1",
              "documentation": {
                "identifier": "TestServerRequestContextCancel_ServeHTTPDone_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerRequestContextCancel_ServeHTTPDone_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerRequestContextCancel_ServeHTTPDone_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerRequestContextCancel_ServeHTTPDone_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerRequestContextCancel_ServeHTTPDone_h2",
              "documentation": {
                "identifier": "TestServerRequestContextCancel_ServeHTTPDone_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerRequestContextCancel_ServeHTTPDone_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerRequestContextCancel_ServeHTTPDone_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerRequestContextCancel_ServeHTTPDone_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerRequestContextCancel_ServeHTTPDone",
              "documentation": {
                "identifier": "testServerRequestContextCancel_ServeHTTPDone",
                "newPage": false,
                "searchKey": "http_test.testServerRequestContextCancel_ServeHTTPDone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerRequestContextCancel_ServeHTTPDone(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerRequestContextCancel_ServeHTTPDone(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerRequestContextCancel_ConnClose",
              "documentation": {
                "identifier": "TestServerRequestContextCancel_ConnClose",
                "newPage": false,
                "searchKey": "http_test.TestServerRequestContextCancel_ConnClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerRequestContextCancel_ConnClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerRequestContextCancel_ConnClose(t *testing.T)\n```\n\nTests that the Request.Context available to the Handler is canceled if the peer closes their TCP connection. This requires that the server is always blocked in a Read call so it notices the EOF from the client. See issues 15927 and 15224. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContext_ServerContextKey_h1",
              "documentation": {
                "identifier": "TestServerContext_ServerContextKey_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerContext_ServerContextKey_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContext_ServerContextKey_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContext_ServerContextKey_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContext_ServerContextKey_h2",
              "documentation": {
                "identifier": "TestServerContext_ServerContextKey_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerContext_ServerContextKey_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContext_ServerContextKey_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContext_ServerContextKey_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerContext_ServerContextKey",
              "documentation": {
                "identifier": "testServerContext_ServerContextKey",
                "newPage": false,
                "searchKey": "http_test.testServerContext_ServerContextKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerContext_ServerContextKey(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerContext_ServerContextKey(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContext_LocalAddrContextKey_h1",
              "documentation": {
                "identifier": "TestServerContext_LocalAddrContextKey_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerContext_LocalAddrContextKey_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContext_LocalAddrContextKey_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContext_LocalAddrContextKey_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContext_LocalAddrContextKey_h2",
              "documentation": {
                "identifier": "TestServerContext_LocalAddrContextKey_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerContext_LocalAddrContextKey_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContext_LocalAddrContextKey_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContext_LocalAddrContextKey_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerContext_LocalAddrContextKey",
              "documentation": {
                "identifier": "testServerContext_LocalAddrContextKey",
                "newPage": false,
                "searchKey": "http_test.testServerContext_LocalAddrContextKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerContext_LocalAddrContextKey(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerContext_LocalAddrContextKey(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerSetTransferEncodingChunked",
              "documentation": {
                "identifier": "TestHandlerSetTransferEncodingChunked",
                "newPage": false,
                "searchKey": "http_test.TestHandlerSetTransferEncodingChunked",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerSetTransferEncodingChunked(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerSetTransferEncodingChunked(t *testing.T)\n```\n\n[https://golang.org/issue/15960](https://golang.org/issue/15960) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestHandlerSetTransferEncodingGzip",
              "documentation": {
                "identifier": "TestHandlerSetTransferEncodingGzip",
                "newPage": false,
                "searchKey": "http_test.TestHandlerSetTransferEncodingGzip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestHandlerSetTransferEncodingGzip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestHandlerSetTransferEncodingGzip(t *testing.T)\n```\n\n[https://golang.org/issue/16063](https://golang.org/issue/16063) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkClientServer",
              "documentation": {
                "identifier": "BenchmarkClientServer",
                "newPage": false,
                "searchKey": "http_test.BenchmarkClientServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClientServer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClientServer(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkClientServerParallel4",
              "documentation": {
                "identifier": "BenchmarkClientServerParallel4",
                "newPage": false,
                "searchKey": "http_test.BenchmarkClientServerParallel4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClientServerParallel4(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClientServerParallel4(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkClientServerParallel64",
              "documentation": {
                "identifier": "BenchmarkClientServerParallel64",
                "newPage": false,
                "searchKey": "http_test.BenchmarkClientServerParallel64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClientServerParallel64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClientServerParallel64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkClientServerParallelTLS4",
              "documentation": {
                "identifier": "BenchmarkClientServerParallelTLS4",
                "newPage": false,
                "searchKey": "http_test.BenchmarkClientServerParallelTLS4",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClientServerParallelTLS4(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClientServerParallelTLS4(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkClientServerParallelTLS64",
              "documentation": {
                "identifier": "BenchmarkClientServerParallelTLS64",
                "newPage": false,
                "searchKey": "http_test.BenchmarkClientServerParallelTLS64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClientServerParallelTLS64(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClientServerParallelTLS64(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#benchmarkClientServerParallel",
              "documentation": {
                "identifier": "benchmarkClientServerParallel",
                "newPage": false,
                "searchKey": "http_test.benchmarkClientServerParallel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkClientServerParallel(b *testing.B, parallelism int, useTLS bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkClientServerParallel(b *testing.B, parallelism int, useTLS bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServer",
              "documentation": {
                "identifier": "BenchmarkServer",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServer(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServer(b *testing.B)\n```\n\nA benchmark for profiling the server without the HTTP client code. The client code runs in a subprocess. \n\nFor use like: \n\n```\n$ go test -c\n$ ./http.test -test.run=XX -test.bench=BenchmarkServer -test.benchtime=15s -test.cpuprofile=http.prof\n$ go tool pprof http.test http.prof\n(pprof) web\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#getNoBody",
              "documentation": {
                "identifier": "getNoBody",
                "newPage": false,
                "searchKey": "http_test.getNoBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func getNoBody(urlStr string) (*Response, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc getNoBody(urlStr string) (*Response, error)\n```\n\ngetNoBody wraps Get but closes any Response.Body before returning the response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkClient",
              "documentation": {
                "identifier": "BenchmarkClient",
                "newPage": false,
                "searchKey": "http_test.BenchmarkClient",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkClient(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkClient(b *testing.B)\n```\n\nA benchmark for profiling the client without the HTTP server code. The server code runs in a subprocess. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerFakeConnNoKeepAlive",
              "documentation": {
                "identifier": "BenchmarkServerFakeConnNoKeepAlive",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerFakeConnNoKeepAlive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerFakeConnNoKeepAlive(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerFakeConnNoKeepAlive(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerFakeConnWithKeepAlive",
              "documentation": {
                "identifier": "BenchmarkServerFakeConnWithKeepAlive",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerFakeConnWithKeepAlive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerFakeConnWithKeepAlive(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerFakeConnWithKeepAlive(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerFakeConnWithKeepAliveLite",
              "documentation": {
                "identifier": "BenchmarkServerFakeConnWithKeepAliveLite",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerFakeConnWithKeepAliveLite",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerFakeConnWithKeepAliveLite(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerFakeConnWithKeepAliveLite(b *testing.B)\n```\n\nsame as above, but representing the most simple possible request and handler. Notably: the handler does not call rw.Header(). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerHandlerTypeLen",
              "documentation": {
                "identifier": "BenchmarkServerHandlerTypeLen",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerHandlerTypeLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerHandlerTypeLen(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerHandlerTypeLen(b *testing.B)\n```\n\nBoth Content-Type and Content-Length set. Should be no buffering. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerHandlerNoLen",
              "documentation": {
                "identifier": "BenchmarkServerHandlerNoLen",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerHandlerNoLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerHandlerNoLen(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerHandlerNoLen(b *testing.B)\n```\n\nA Content-Type is set, but no length. No sniffing, but will count the Content-Length. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerHandlerNoType",
              "documentation": {
                "identifier": "BenchmarkServerHandlerNoType",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerHandlerNoType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerHandlerNoType(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerHandlerNoType(b *testing.B)\n```\n\nA Content-Length is set, but the Content-Type will be sniffed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerHandlerNoHeader",
              "documentation": {
                "identifier": "BenchmarkServerHandlerNoHeader",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerHandlerNoHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerHandlerNoHeader(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerHandlerNoHeader(b *testing.B)\n```\n\nNeither a Content-Type or Content-Length, so sniffed and counted. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#benchmarkHandler",
              "documentation": {
                "identifier": "benchmarkHandler",
                "newPage": false,
                "searchKey": "http_test.benchmarkHandler",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func benchmarkHandler(b *testing.B, h Handler)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc benchmarkHandler(b *testing.B, h Handler)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkServerHijack",
              "documentation": {
                "identifier": "BenchmarkServerHijack",
                "newPage": false,
                "searchKey": "http_test.BenchmarkServerHijack",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkServerHijack(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkServerHijack(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkCloseNotifier",
              "documentation": {
                "identifier": "BenchmarkCloseNotifier",
                "newPage": false,
                "searchKey": "http_test.BenchmarkCloseNotifier",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCloseNotifier(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCloseNotifier(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConcurrentServerServe",
              "documentation": {
                "identifier": "TestConcurrentServerServe",
                "newPage": false,
                "searchKey": "http_test.TestConcurrentServerServe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConcurrentServerServe(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConcurrentServerServe(t *testing.T)\n```\n\nVerify this doesn't race (Issue 16505) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerIdleTimeout",
              "documentation": {
                "identifier": "TestServerIdleTimeout",
                "newPage": false,
                "searchKey": "http_test.TestServerIdleTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerIdleTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerIdleTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#get",
              "documentation": {
                "identifier": "get",
                "newPage": false,
                "searchKey": "http_test.get",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func get(t *testing.T, c *Client, url string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc get(t *testing.T, c *Client, url string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerSetKeepAlivesEnabledClosesConns",
              "documentation": {
                "identifier": "TestServerSetKeepAlivesEnabledClosesConns",
                "newPage": false,
                "searchKey": "http_test.TestServerSetKeepAlivesEnabledClosesConns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerSetKeepAlivesEnabledClosesConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerSetKeepAlivesEnabledClosesConns(t *testing.T)\n```\n\nTests that calls to Server.SetKeepAlivesEnabled(false) closes any currently-open connections. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerShutdown_h1",
              "documentation": {
                "identifier": "TestServerShutdown_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerShutdown_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerShutdown_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerShutdown_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerShutdown_h2",
              "documentation": {
                "identifier": "TestServerShutdown_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerShutdown_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerShutdown_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerShutdown_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerShutdown",
              "documentation": {
                "identifier": "testServerShutdown",
                "newPage": false,
                "searchKey": "http_test.testServerShutdown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerShutdown(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerShutdown(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerShutdownStateNew",
              "documentation": {
                "identifier": "TestServerShutdownStateNew",
                "newPage": false,
                "searchKey": "http_test.TestServerShutdownStateNew",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerShutdownStateNew(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerShutdownStateNew(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerCloseDeadlock",
              "documentation": {
                "identifier": "TestServerCloseDeadlock",
                "newPage": false,
                "searchKey": "http_test.TestServerCloseDeadlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerCloseDeadlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerCloseDeadlock(t *testing.T)\n```\n\nIssue 17878: tests that we can call Close twice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerKeepAlivesEnabled_h1",
              "documentation": {
                "identifier": "TestServerKeepAlivesEnabled_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerKeepAlivesEnabled_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerKeepAlivesEnabled_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerKeepAlivesEnabled_h1(t *testing.T)\n```\n\nIssue 17717: tests that Server.SetKeepAlivesEnabled is respected by both HTTP/1 and HTTP/2. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerKeepAlivesEnabled_h2",
              "documentation": {
                "identifier": "TestServerKeepAlivesEnabled_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerKeepAlivesEnabled_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerKeepAlivesEnabled_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerKeepAlivesEnabled_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerKeepAlivesEnabled",
              "documentation": {
                "identifier": "testServerKeepAlivesEnabled",
                "newPage": false,
                "searchKey": "http_test.testServerKeepAlivesEnabled",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerKeepAlivesEnabled(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerKeepAlivesEnabled(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerCancelsReadTimeoutWhenIdle",
              "documentation": {
                "identifier": "TestServerCancelsReadTimeoutWhenIdle",
                "newPage": false,
                "searchKey": "http_test.TestServerCancelsReadTimeoutWhenIdle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerCancelsReadTimeoutWhenIdle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerCancelsReadTimeoutWhenIdle(t *testing.T)\n```\n\nIssue 18447: test that the Server's ReadTimeout is stopped while the server's doing its 1-byte background read between requests, waiting for the connection to maybe close. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#runTimeSensitiveTest",
              "documentation": {
                "identifier": "runTimeSensitiveTest",
                "newPage": false,
                "searchKey": "http_test.runTimeSensitiveTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func runTimeSensitiveTest(t *testing.T, durations []time.Duration, test func(t *testing.T, d time.Duration) error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc runTimeSensitiveTest(t *testing.T, durations []time.Duration, test func(t *testing.T, d time.Duration) error)\n```\n\nrunTimeSensitiveTest runs test with the provided durations until one passes. If they all fail, t.Fatal is called with the last one's duration and error value. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerDuplicateBackgroundRead",
              "documentation": {
                "identifier": "TestServerDuplicateBackgroundRead",
                "newPage": false,
                "searchKey": "http_test.TestServerDuplicateBackgroundRead",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerDuplicateBackgroundRead(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerDuplicateBackgroundRead(t *testing.T)\n```\n\nIssue 18535: test that the Server doesn't try to do a background read if it's already done one. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerHijackGetsBackgroundByte",
              "documentation": {
                "identifier": "TestServerHijackGetsBackgroundByte",
                "newPage": false,
                "searchKey": "http_test.TestServerHijackGetsBackgroundByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerHijackGetsBackgroundByte(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerHijackGetsBackgroundByte(t *testing.T)\n```\n\nTest that the bufio.Reader returned by Hijack includes any buffered byte (from the Server's backgroundRead) in its buffer. We want the Handler code to be able to tell that a byte is available via bufio.Reader.Buffered(), without resorting to Reading it (potentially blocking) to get at it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerHijackGetsBackgroundByte_big",
              "documentation": {
                "identifier": "TestServerHijackGetsBackgroundByte_big",
                "newPage": false,
                "searchKey": "http_test.TestServerHijackGetsBackgroundByte_big",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerHijackGetsBackgroundByte_big(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerHijackGetsBackgroundByte_big(t *testing.T)\n```\n\nLike TestServerHijackGetsBackgroundByte above but sending a immediate 1MB of data to the server to fill up the server's 4KB buffer. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerValidatesMethod",
              "documentation": {
                "identifier": "TestServerValidatesMethod",
                "newPage": false,
                "searchKey": "http_test.TestServerValidatesMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerValidatesMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerValidatesMethod(t *testing.T)\n```\n\nIssue 18319: test that the Server validates the request method. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerListenNotComparableListener",
              "documentation": {
                "identifier": "TestServerListenNotComparableListener",
                "newPage": false,
                "searchKey": "http_test.TestServerListenNotComparableListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerListenNotComparableListener(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerListenNotComparableListener(t *testing.T)\n```\n\nIssue 24812: don't crash on non-comparable Listener \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerCloseListenerOnce",
              "documentation": {
                "identifier": "TestServerCloseListenerOnce",
                "newPage": false,
                "searchKey": "http_test.TestServerCloseListenerOnce",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerCloseListenerOnce(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerCloseListenerOnce(t *testing.T)\n```\n\nIssue 24803: don't call Listener.Close on Server.Shutdown. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerShutdownThenServe",
              "documentation": {
                "identifier": "TestServerShutdownThenServe",
                "newPage": false,
                "searchKey": "http_test.TestServerShutdownThenServe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerShutdownThenServe(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerShutdownThenServe(t *testing.T)\n```\n\nIssue 20239: don't block in Serve if Shutdown is called first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStripPortFromHost",
              "documentation": {
                "identifier": "TestStripPortFromHost",
                "newPage": false,
                "searchKey": "http_test.TestStripPortFromHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStripPortFromHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStripPortFromHost(t *testing.T)\n```\n\nIssue 23351: document and test behavior of ServeMux with ports \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContexts",
              "documentation": {
                "identifier": "TestServerContexts",
                "newPage": false,
                "searchKey": "http_test.TestServerContexts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContexts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContexts(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContextsHTTP2",
              "documentation": {
                "identifier": "TestServerContextsHTTP2",
                "newPage": false,
                "searchKey": "http_test.TestServerContextsHTTP2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContextsHTTP2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContextsHTTP2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestConnContextNotModifyingAllContexts",
              "documentation": {
                "identifier": "TestConnContextNotModifyingAllContexts",
                "newPage": false,
                "searchKey": "http_test.TestConnContextNotModifyingAllContexts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConnContextNotModifyingAllContexts(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConnContextNotModifyingAllContexts(t *testing.T)\n```\n\nIssue 35750: check ConnContext not modifying context for other connections \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestUnsupportedTransferEncodingsReturn501",
              "documentation": {
                "identifier": "TestUnsupportedTransferEncodingsReturn501",
                "newPage": false,
                "searchKey": "http_test.TestUnsupportedTransferEncodingsReturn501",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnsupportedTransferEncodingsReturn501(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnsupportedTransferEncodingsReturn501(t *testing.T)\n```\n\nIssue 30710: ensure that as per the spec, a server responds with 501 Not Implemented for unsupported transfer-encodings. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestContentEncodingNoSniffing_h1",
              "documentation": {
                "identifier": "TestContentEncodingNoSniffing_h1",
                "newPage": false,
                "searchKey": "http_test.TestContentEncodingNoSniffing_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContentEncodingNoSniffing_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContentEncodingNoSniffing_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestContentEncodingNoSniffing_h2",
              "documentation": {
                "identifier": "TestContentEncodingNoSniffing_h2",
                "newPage": false,
                "searchKey": "http_test.TestContentEncodingNoSniffing_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContentEncodingNoSniffing_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContentEncodingNoSniffing_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testContentEncodingNoSniffing",
              "documentation": {
                "identifier": "testContentEncodingNoSniffing",
                "newPage": false,
                "searchKey": "http_test.testContentEncodingNoSniffing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testContentEncodingNoSniffing(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testContentEncodingNoSniffing(t *testing.T, h2 bool)\n```\n\nIssue 31753: don't sniff when Content-Encoding is set \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTimeoutHandlerSuperfluousLogs",
              "documentation": {
                "identifier": "TestTimeoutHandlerSuperfluousLogs",
                "newPage": false,
                "searchKey": "http_test.TestTimeoutHandlerSuperfluousLogs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTimeoutHandlerSuperfluousLogs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTimeoutHandlerSuperfluousLogs(t *testing.T)\n```\n\nIssue 30803: ensure that TimeoutHandler logs spurious WriteHeader calls, for consistency with other Handlers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#fetchWireResponse",
              "documentation": {
                "identifier": "fetchWireResponse",
                "newPage": false,
                "searchKey": "http_test.fetchWireResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fetchWireResponse(host string, http1ReqBody []byte) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fetchWireResponse(host string, http1ReqBody []byte) ([]byte, error)\n```\n\nfetchWireResponse is a helper for dialing to host, sending http1ReqBody as the payload and retrieving the response as it was sent on the wire. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#BenchmarkResponseStatusLine",
              "documentation": {
                "identifier": "BenchmarkResponseStatusLine",
                "newPage": false,
                "searchKey": "http_test.BenchmarkResponseStatusLine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkResponseStatusLine(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkResponseStatusLine(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDisableKeepAliveUpgrade",
              "documentation": {
                "identifier": "TestDisableKeepAliveUpgrade",
                "newPage": false,
                "searchKey": "http_test.TestDisableKeepAliveUpgrade",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDisableKeepAliveUpgrade(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDisableKeepAliveUpgrade(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMuxRedirectRelative",
              "documentation": {
                "identifier": "TestMuxRedirectRelative",
                "newPage": false,
                "searchKey": "http_test.TestMuxRedirectRelative",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMuxRedirectRelative(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMuxRedirectRelative(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestQuerySemicolon",
              "documentation": {
                "identifier": "TestQuerySemicolon",
                "newPage": false,
                "searchKey": "http_test.TestQuerySemicolon",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestQuerySemicolon(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestQuerySemicolon(t *testing.T)\n```\n\nTestQuerySemicolon tests the behavior of semicolons in queries. See Issue 25192. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testQuerySemicolon",
              "documentation": {
                "identifier": "testQuerySemicolon",
                "newPage": false,
                "searchKey": "http_test.testQuerySemicolon",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testQuerySemicolon(t *testing.T, query string, wantX string, allowSemicolons, expectWarning bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testQuerySemicolon(t *testing.T, query string, wantX string, allowSemicolons, expectWarning bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDetectContentType",
              "documentation": {
                "identifier": "TestDetectContentType",
                "newPage": false,
                "searchKey": "http_test.TestDetectContentType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDetectContentType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDetectContentType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContentType_h1",
              "documentation": {
                "identifier": "TestServerContentType_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerContentType_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContentType_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContentType_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerContentType_h2",
              "documentation": {
                "identifier": "TestServerContentType_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerContentType_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerContentType_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerContentType_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerContentType",
              "documentation": {
                "identifier": "testServerContentType",
                "newPage": false,
                "searchKey": "http_test.testServerContentType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerContentType(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerContentType(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerIssue5953_h1",
              "documentation": {
                "identifier": "TestServerIssue5953_h1",
                "newPage": false,
                "searchKey": "http_test.TestServerIssue5953_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerIssue5953_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerIssue5953_h1(t *testing.T)\n```\n\nIssue 5953: shouldn't sniff if the handler set a Content-Type header, even if it's the empty string. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestServerIssue5953_h2",
              "documentation": {
                "identifier": "TestServerIssue5953_h2",
                "newPage": false,
                "searchKey": "http_test.TestServerIssue5953_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestServerIssue5953_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestServerIssue5953_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testServerIssue5953",
              "documentation": {
                "identifier": "testServerIssue5953",
                "newPage": false,
                "searchKey": "http_test.testServerIssue5953",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testServerIssue5953(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testServerIssue5953(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestContentTypeWithVariousSources_h1",
              "documentation": {
                "identifier": "TestContentTypeWithVariousSources_h1",
                "newPage": false,
                "searchKey": "http_test.TestContentTypeWithVariousSources_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContentTypeWithVariousSources_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContentTypeWithVariousSources_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestContentTypeWithVariousSources_h2",
              "documentation": {
                "identifier": "TestContentTypeWithVariousSources_h2",
                "newPage": false,
                "searchKey": "http_test.TestContentTypeWithVariousSources_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestContentTypeWithVariousSources_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestContentTypeWithVariousSources_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testContentTypeWithVariousSources",
              "documentation": {
                "identifier": "testContentTypeWithVariousSources",
                "newPage": false,
                "searchKey": "http_test.testContentTypeWithVariousSources",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testContentTypeWithVariousSources(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testContentTypeWithVariousSources(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestSniffWriteSize_h1",
              "documentation": {
                "identifier": "TestSniffWriteSize_h1",
                "newPage": false,
                "searchKey": "http_test.TestSniffWriteSize_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSniffWriteSize_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSniffWriteSize_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestSniffWriteSize_h2",
              "documentation": {
                "identifier": "TestSniffWriteSize_h2",
                "newPage": false,
                "searchKey": "http_test.TestSniffWriteSize_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSniffWriteSize_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSniffWriteSize_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testSniffWriteSize",
              "documentation": {
                "identifier": "testSniffWriteSize",
                "newPage": false,
                "searchKey": "http_test.testSniffWriteSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testSniffWriteSize(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testSniffWriteSize(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestReuseRequest",
              "documentation": {
                "identifier": "TestReuseRequest",
                "newPage": false,
                "searchKey": "http_test.TestReuseRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestReuseRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestReuseRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportKeepAlives",
              "documentation": {
                "identifier": "TestTransportKeepAlives",
                "newPage": false,
                "searchKey": "http_test.TestTransportKeepAlives",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportKeepAlives(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportKeepAlives(t *testing.T)\n```\n\nTwo subsequent requests and verify their response is the same. The response from the server is our own IP:port \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportConnectionCloseOnResponse",
              "documentation": {
                "identifier": "TestTransportConnectionCloseOnResponse",
                "newPage": false,
                "searchKey": "http_test.TestTransportConnectionCloseOnResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportConnectionCloseOnResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportConnectionCloseOnResponse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportConnectionCloseOnRequest",
              "documentation": {
                "identifier": "TestTransportConnectionCloseOnRequest",
                "newPage": false,
                "searchKey": "http_test.TestTransportConnectionCloseOnRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportConnectionCloseOnRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportConnectionCloseOnRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportConnectionCloseOnRequestDisableKeepAlive",
              "documentation": {
                "identifier": "TestTransportConnectionCloseOnRequestDisableKeepAlive",
                "newPage": false,
                "searchKey": "http_test.TestTransportConnectionCloseOnRequestDisableKeepAlive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportConnectionCloseOnRequestDisableKeepAlive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportConnectionCloseOnRequestDisableKeepAlive(t *testing.T)\n```\n\nif the Transport's DisableKeepAlives is set, all requests should send Connection: close. HTTP/1-only (Connection: close doesn't exist in h2) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRespectRequestWantsClose",
              "documentation": {
                "identifier": "TestTransportRespectRequestWantsClose",
                "newPage": false,
                "searchKey": "http_test.TestTransportRespectRequestWantsClose",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRespectRequestWantsClose(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRespectRequestWantsClose(t *testing.T)\n```\n\nTest that Transport only sends one \"Connection: close\", regardless of how \"close\" was indicated. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIdleCacheKeys",
              "documentation": {
                "identifier": "TestTransportIdleCacheKeys",
                "newPage": false,
                "searchKey": "http_test.TestTransportIdleCacheKeys",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIdleCacheKeys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIdleCacheKeys(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportReadToEndReusesConn",
              "documentation": {
                "identifier": "TestTransportReadToEndReusesConn",
                "newPage": false,
                "searchKey": "http_test.TestTransportReadToEndReusesConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportReadToEndReusesConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportReadToEndReusesConn(t *testing.T)\n```\n\nTests that the HTTP transport re-uses connections when a client reads to the end of a response Body without closing it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportMaxPerHostIdleConns",
              "documentation": {
                "identifier": "TestTransportMaxPerHostIdleConns",
                "newPage": false,
                "searchKey": "http_test.TestTransportMaxPerHostIdleConns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportMaxPerHostIdleConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportMaxPerHostIdleConns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportMaxConnsPerHostIncludeDialInProgress",
              "documentation": {
                "identifier": "TestTransportMaxConnsPerHostIncludeDialInProgress",
                "newPage": false,
                "searchKey": "http_test.TestTransportMaxConnsPerHostIncludeDialInProgress",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportMaxConnsPerHostIncludeDialInProgress(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportMaxConnsPerHostIncludeDialInProgress(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportMaxConnsPerHost",
              "documentation": {
                "identifier": "TestTransportMaxConnsPerHost",
                "newPage": false,
                "searchKey": "http_test.TestTransportMaxConnsPerHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportMaxConnsPerHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportMaxConnsPerHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRemovesDeadIdleConnections",
              "documentation": {
                "identifier": "TestTransportRemovesDeadIdleConnections",
                "newPage": false,
                "searchKey": "http_test.TestTransportRemovesDeadIdleConnections",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRemovesDeadIdleConnections(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRemovesDeadIdleConnections(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportServerClosingUnexpectedly",
              "documentation": {
                "identifier": "TestTransportServerClosingUnexpectedly",
                "newPage": false,
                "searchKey": "http_test.TestTransportServerClosingUnexpectedly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportServerClosingUnexpectedly(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportServerClosingUnexpectedly(t *testing.T)\n```\n\nTest that the Transport notices when a server hangs up on its unexpectedly (a keep-alive connection is closed). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestStressSurpriseServerCloses",
              "documentation": {
                "identifier": "TestStressSurpriseServerCloses",
                "newPage": false,
                "searchKey": "http_test.TestStressSurpriseServerCloses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestStressSurpriseServerCloses(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestStressSurpriseServerCloses(t *testing.T)\n```\n\nTest for [https://golang.org/issue/2616](https://golang.org/issue/2616) (appropriate issue number) This fails pretty reliably with GOMAXPROCS=100 or something high. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportHeadResponses",
              "documentation": {
                "identifier": "TestTransportHeadResponses",
                "newPage": false,
                "searchKey": "http_test.TestTransportHeadResponses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportHeadResponses(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportHeadResponses(t *testing.T)\n```\n\nTestTransportHeadResponses verifies that we deal with Content-Lengths with no bodies properly \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportHeadChunkedResponse",
              "documentation": {
                "identifier": "TestTransportHeadChunkedResponse",
                "newPage": false,
                "searchKey": "http_test.TestTransportHeadChunkedResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportHeadChunkedResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportHeadChunkedResponse(t *testing.T)\n```\n\nTestTransportHeadChunkedResponse verifies that we ignore chunked transfer-encoding on responses to HEAD requests. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRoundTripGzip",
              "documentation": {
                "identifier": "TestRoundTripGzip",
                "newPage": false,
                "searchKey": "http_test.TestRoundTripGzip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRoundTripGzip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRoundTripGzip(t *testing.T)\n```\n\nTest that the modification made to the Request by the RoundTripper is cleaned up \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGzip",
              "documentation": {
                "identifier": "TestTransportGzip",
                "newPage": false,
                "searchKey": "http_test.TestTransportGzip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGzip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGzip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportExpect100Continue",
              "documentation": {
                "identifier": "TestTransportExpect100Continue",
                "newPage": false,
                "searchKey": "http_test.TestTransportExpect100Continue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportExpect100Continue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportExpect100Continue(t *testing.T)\n```\n\nIf a request has Expect:100-continue header, the request blocks sending body until the first response. Premature consumption of the request body should not be occurred. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestSOCKS5Proxy",
              "documentation": {
                "identifier": "TestSOCKS5Proxy",
                "newPage": false,
                "searchKey": "http_test.TestSOCKS5Proxy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSOCKS5Proxy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSOCKS5Proxy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportProxy",
              "documentation": {
                "identifier": "TestTransportProxy",
                "newPage": false,
                "searchKey": "http_test.TestTransportProxy",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportProxy(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportProxy(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportProxyHTTPSConnectLeak",
              "documentation": {
                "identifier": "TestTransportProxyHTTPSConnectLeak",
                "newPage": false,
                "searchKey": "http_test.TestTransportProxyHTTPSConnectLeak",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportProxyHTTPSConnectLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportProxyHTTPSConnectLeak(t *testing.T)\n```\n\nIssue 28012: verify that the Transport closes its TCP connection to http proxies when they're slow to reply to HTTPS CONNECT responses. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDialPreservesNetOpProxyError",
              "documentation": {
                "identifier": "TestTransportDialPreservesNetOpProxyError",
                "newPage": false,
                "searchKey": "http_test.TestTransportDialPreservesNetOpProxyError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDialPreservesNetOpProxyError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDialPreservesNetOpProxyError(t *testing.T)\n```\n\nIssue 16997: test transport dial preserves typed errors \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportProxyDialDoesNotMutateProxyConnectHeader",
              "documentation": {
                "identifier": "TestTransportProxyDialDoesNotMutateProxyConnectHeader",
                "newPage": false,
                "searchKey": "http_test.TestTransportProxyDialDoesNotMutateProxyConnectHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportProxyDialDoesNotMutateProxyConnectHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportProxyDialDoesNotMutateProxyConnectHeader(t *testing.T)\n```\n\nIssue 36431: calls to RoundTrip should not mutate t.ProxyConnectHeader. \n\n(A bug caused dialConn to instead write the per-request Proxy-Authorization header through to the shared Header instance, introducing a data race.) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGzipRecursive",
              "documentation": {
                "identifier": "TestTransportGzipRecursive",
                "newPage": false,
                "searchKey": "http_test.TestTransportGzipRecursive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGzipRecursive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGzipRecursive(t *testing.T)\n```\n\nTestTransportGzipRecursive sends a gzip quine and checks that the client gets the same value back. This is more cute than anything, but checks that we don't recurse forever, and checks that Content-Encoding is removed. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportGzipShort",
              "documentation": {
                "identifier": "TestTransportGzipShort",
                "newPage": false,
                "searchKey": "http_test.TestTransportGzipShort",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportGzipShort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportGzipShort(t *testing.T)\n```\n\ngolang.org/issue/7750: request fails when server replies with a short gzip body \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#waitNumGoroutine",
              "documentation": {
                "identifier": "waitNumGoroutine",
                "newPage": false,
                "searchKey": "http_test.waitNumGoroutine",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func waitNumGoroutine(nmax int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc waitNumGoroutine(nmax int) int\n```\n\nWait until number of goroutines is no greater than nmax, or time out. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportPersistConnLeak",
              "documentation": {
                "identifier": "TestTransportPersistConnLeak",
                "newPage": false,
                "searchKey": "http_test.TestTransportPersistConnLeak",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportPersistConnLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportPersistConnLeak(t *testing.T)\n```\n\ntests that persistent goroutine connections shut down when no longer desired. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportPersistConnLeakShortBody",
              "documentation": {
                "identifier": "TestTransportPersistConnLeakShortBody",
                "newPage": false,
                "searchKey": "http_test.TestTransportPersistConnLeakShortBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportPersistConnLeakShortBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportPersistConnLeakShortBody(t *testing.T)\n```\n\ngolang.org/issue/4531: Transport leaks goroutines when request.ContentLength is explicitly short \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportPersistConnLeakNeverIdle",
              "documentation": {
                "identifier": "TestTransportPersistConnLeakNeverIdle",
                "newPage": false,
                "searchKey": "http_test.TestTransportPersistConnLeakNeverIdle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportPersistConnLeakNeverIdle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportPersistConnLeakNeverIdle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportPersistConnContextLeakMaxConnsPerHost",
              "documentation": {
                "identifier": "TestTransportPersistConnContextLeakMaxConnsPerHost",
                "newPage": false,
                "searchKey": "http_test.TestTransportPersistConnContextLeakMaxConnsPerHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportPersistConnContextLeakMaxConnsPerHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportPersistConnContextLeakMaxConnsPerHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIdleConnCrash",
              "documentation": {
                "identifier": "TestTransportIdleConnCrash",
                "newPage": false,
                "searchKey": "http_test.TestTransportIdleConnCrash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIdleConnCrash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIdleConnCrash(t *testing.T)\n```\n\nThis used to crash; [https://golang.org/issue/3266](https://golang.org/issue/3266) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue3644",
              "documentation": {
                "identifier": "TestIssue3644",
                "newPage": false,
                "searchKey": "http_test.TestIssue3644",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue3644(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue3644(t *testing.T)\n```\n\nTest that the transport doesn't close the TCP connection early, before the response body has been read. This was a regression which sadly lacked a triggering test. The large response body made the old race easier to trigger. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue3595",
              "documentation": {
                "identifier": "TestIssue3595",
                "newPage": false,
                "searchKey": "http_test.TestIssue3595",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue3595(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue3595(t *testing.T)\n```\n\nTest that a client receives a server's reply, even if the server doesn't read the entire request body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestChunkedNoContent",
              "documentation": {
                "identifier": "TestChunkedNoContent",
                "newPage": false,
                "searchKey": "http_test.TestChunkedNoContent",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestChunkedNoContent(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestChunkedNoContent(t *testing.T)\n```\n\nFrom [https://golang.org/issue/4454](https://golang.org/issue/4454) , \"client fails to handle requests with no body and chunked encoding\" \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportConcurrency",
              "documentation": {
                "identifier": "TestTransportConcurrency",
                "newPage": false,
                "searchKey": "http_test.TestTransportConcurrency",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportConcurrency(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportConcurrency(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue4191_InfiniteGetTimeout",
              "documentation": {
                "identifier": "TestIssue4191_InfiniteGetTimeout",
                "newPage": false,
                "searchKey": "http_test.TestIssue4191_InfiniteGetTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue4191_InfiniteGetTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue4191_InfiniteGetTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue4191_InfiniteGetToPutTimeout",
              "documentation": {
                "identifier": "TestIssue4191_InfiniteGetToPutTimeout",
                "newPage": false,
                "searchKey": "http_test.TestIssue4191_InfiniteGetToPutTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue4191_InfiniteGetToPutTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue4191_InfiniteGetToPutTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportResponseHeaderTimeout",
              "documentation": {
                "identifier": "TestTransportResponseHeaderTimeout",
                "newPage": false,
                "searchKey": "http_test.TestTransportResponseHeaderTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportResponseHeaderTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportResponseHeaderTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCancelRequest",
              "documentation": {
                "identifier": "TestTransportCancelRequest",
                "newPage": false,
                "searchKey": "http_test.TestTransportCancelRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCancelRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCancelRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportCancelRequestInDo",
              "documentation": {
                "identifier": "testTransportCancelRequestInDo",
                "newPage": false,
                "searchKey": "http_test.testTransportCancelRequestInDo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportCancelRequestInDo(t *testing.T, body io.Reader)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportCancelRequestInDo(t *testing.T, body io.Reader)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCancelRequestInDo",
              "documentation": {
                "identifier": "TestTransportCancelRequestInDo",
                "newPage": false,
                "searchKey": "http_test.TestTransportCancelRequestInDo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCancelRequestInDo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCancelRequestInDo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCancelRequestWithBodyInDo",
              "documentation": {
                "identifier": "TestTransportCancelRequestWithBodyInDo",
                "newPage": false,
                "searchKey": "http_test.TestTransportCancelRequestWithBodyInDo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCancelRequestWithBodyInDo(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCancelRequestWithBodyInDo(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCancelRequestInDial",
              "documentation": {
                "identifier": "TestTransportCancelRequestInDial",
                "newPage": false,
                "searchKey": "http_test.TestTransportCancelRequestInDial",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCancelRequestInDial(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCancelRequestInDial(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCancelRequestWithChannel",
              "documentation": {
                "identifier": "TestCancelRequestWithChannel",
                "newPage": false,
                "searchKey": "http_test.TestCancelRequestWithChannel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCancelRequestWithChannel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCancelRequestWithChannel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCancelRequestWithChannelBeforeDo_Cancel",
              "documentation": {
                "identifier": "TestCancelRequestWithChannelBeforeDo_Cancel",
                "newPage": false,
                "searchKey": "http_test.TestCancelRequestWithChannelBeforeDo_Cancel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCancelRequestWithChannelBeforeDo_Cancel(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCancelRequestWithChannelBeforeDo_Cancel(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCancelRequestWithChannelBeforeDo_Context",
              "documentation": {
                "identifier": "TestCancelRequestWithChannelBeforeDo_Context",
                "newPage": false,
                "searchKey": "http_test.TestCancelRequestWithChannelBeforeDo_Context",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCancelRequestWithChannelBeforeDo_Context(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCancelRequestWithChannelBeforeDo_Context(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testCancelRequestWithChannelBeforeDo",
              "documentation": {
                "identifier": "testCancelRequestWithChannelBeforeDo",
                "newPage": false,
                "searchKey": "http_test.testCancelRequestWithChannelBeforeDo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testCancelRequestWithChannelBeforeDo(t *testing.T, withCtx bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testCancelRequestWithChannelBeforeDo(t *testing.T, withCtx bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCancelBeforeResponseHeaders",
              "documentation": {
                "identifier": "TestTransportCancelBeforeResponseHeaders",
                "newPage": false,
                "searchKey": "http_test.TestTransportCancelBeforeResponseHeaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCancelBeforeResponseHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCancelBeforeResponseHeaders(t *testing.T)\n```\n\nIssue 11020. The returned error message should be errRequestCanceled \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCloseResponseBody",
              "documentation": {
                "identifier": "TestTransportCloseResponseBody",
                "newPage": false,
                "searchKey": "http_test.TestTransportCloseResponseBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCloseResponseBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCloseResponseBody(t *testing.T)\n```\n\ngolang.org/issue/3672 -- Client can't close HTTP stream Calling Close on a Response.Body used to just read until EOF. Now it actually closes the TCP connection. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAltProto",
              "documentation": {
                "identifier": "TestTransportAltProto",
                "newPage": false,
                "searchKey": "http_test.TestTransportAltProto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAltProto(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAltProto(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportNoHost",
              "documentation": {
                "identifier": "TestTransportNoHost",
                "newPage": false,
                "searchKey": "http_test.TestTransportNoHost",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportNoHost(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportNoHost(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEmptyMethod",
              "documentation": {
                "identifier": "TestTransportEmptyMethod",
                "newPage": false,
                "searchKey": "http_test.TestTransportEmptyMethod",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEmptyMethod(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEmptyMethod(t *testing.T)\n```\n\nIssue 13311 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportSocketLateBinding",
              "documentation": {
                "identifier": "TestTransportSocketLateBinding",
                "newPage": false,
                "searchKey": "http_test.TestTransportSocketLateBinding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportSocketLateBinding(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportSocketLateBinding(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportReading100Continue",
              "documentation": {
                "identifier": "TestTransportReading100Continue",
                "newPage": false,
                "searchKey": "http_test.TestTransportReading100Continue",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportReading100Continue(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportReading100Continue(t *testing.T)\n```\n\nIssue 2184 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIgnore1xxResponses",
              "documentation": {
                "identifier": "TestTransportIgnore1xxResponses",
                "newPage": false,
                "searchKey": "http_test.TestTransportIgnore1xxResponses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIgnore1xxResponses(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIgnore1xxResponses(t *testing.T)\n```\n\nIssue 17739: the HTTP client must ignore any unknown 1xx informational responses before the actual response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportLimits1xxResponses",
              "documentation": {
                "identifier": "TestTransportLimits1xxResponses",
                "newPage": false,
                "searchKey": "http_test.TestTransportLimits1xxResponses",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportLimits1xxResponses(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportLimits1xxResponses(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportTreat101Terminal",
              "documentation": {
                "identifier": "TestTransportTreat101Terminal",
                "newPage": false,
                "searchKey": "http_test.TestTransportTreat101Terminal",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportTreat101Terminal(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportTreat101Terminal(t *testing.T)\n```\n\nIssue 26161: the HTTP client must treat 101 responses as the final response. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testProxyForRequest",
              "documentation": {
                "identifier": "testProxyForRequest",
                "newPage": false,
                "searchKey": "http_test.testProxyForRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testProxyForRequest(t *testing.T, tt proxyFromEnvTest, proxyForRequest func(req *Request) (*url.URL, error))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testProxyForRequest(t *testing.T, tt proxyFromEnvTest, proxyForRequest func(req *Request) (*url.URL, error))\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestProxyFromEnvironment",
              "documentation": {
                "identifier": "TestProxyFromEnvironment",
                "newPage": false,
                "searchKey": "http_test.TestProxyFromEnvironment",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProxyFromEnvironment(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProxyFromEnvironment(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestProxyFromEnvironmentLowerCase",
              "documentation": {
                "identifier": "TestProxyFromEnvironmentLowerCase",
                "newPage": false,
                "searchKey": "http_test.TestProxyFromEnvironmentLowerCase",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestProxyFromEnvironmentLowerCase(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestProxyFromEnvironmentLowerCase(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIdleConnChannelLeak",
              "documentation": {
                "identifier": "TestIdleConnChannelLeak",
                "newPage": false,
                "searchKey": "http_test.TestIdleConnChannelLeak",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIdleConnChannelLeak(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIdleConnChannelLeak(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportClosesRequestBody",
              "documentation": {
                "identifier": "TestTransportClosesRequestBody",
                "newPage": false,
                "searchKey": "http_test.TestTransportClosesRequestBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportClosesRequestBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportClosesRequestBody(t *testing.T)\n```\n\nVerify the status quo: that the Client.Post function coerces its body into a ReadCloser if it's a Closer, and that the Transport then closes it. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportTLSHandshakeTimeout",
              "documentation": {
                "identifier": "TestTransportTLSHandshakeTimeout",
                "newPage": false,
                "searchKey": "http_test.TestTransportTLSHandshakeTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportTLSHandshakeTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportTLSHandshakeTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTLSServerClosesConnection",
              "documentation": {
                "identifier": "TestTLSServerClosesConnection",
                "newPage": false,
                "searchKey": "http_test.TestTLSServerClosesConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSServerClosesConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSServerClosesConnection(t *testing.T)\n```\n\nTrying to repro golang.org/issue/3514 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportNoReuseAfterEarlyResponse",
              "documentation": {
                "identifier": "TestTransportNoReuseAfterEarlyResponse",
                "newPage": false,
                "searchKey": "http_test.TestTransportNoReuseAfterEarlyResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportNoReuseAfterEarlyResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportNoReuseAfterEarlyResponse(t *testing.T)\n```\n\nVerifies that the Transport doesn't reuse a connection in the case where the server replies before the request has been fully written. We still honor that reply (see TestIssue3595), but don't send future requests on the connection because it's then in a questionable state. golang.org/issue/7569 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIssue10457",
              "documentation": {
                "identifier": "TestTransportIssue10457",
                "newPage": false,
                "searchKey": "http_test.TestTransportIssue10457",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIssue10457(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIssue10457(t *testing.T)\n```\n\nTests that we don't leak Transport persistConn.readLoop goroutines when a server hangs up immediately after saying it would keep-alive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRetryRequestsOnError",
              "documentation": {
                "identifier": "TestRetryRequestsOnError",
                "newPage": false,
                "searchKey": "http_test.TestRetryRequestsOnError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRetryRequestsOnError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRetryRequestsOnError(t *testing.T)\n```\n\nIssues 4677, 18241, and 17844. If we try to reuse a connection that the server is in the process of closing, we may end up successfully writing out our request (or a portion of our request) only to find a connection error when we try to read from (or finish writing to) the socket. \n\nNOTE: we resend a request only if: \n\n```\n- we reused a keep-alive connection\n- we haven't yet received any header data\n- either we wrote no bytes to the server, or the request is idempotent\n\n```\nThis automatically prevents an infinite resend loop because we'll run out of the cached keep-alive connections eventually. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportClosesBodyOnError",
              "documentation": {
                "identifier": "TestTransportClosesBodyOnError",
                "newPage": false,
                "searchKey": "http_test.TestTransportClosesBodyOnError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportClosesBodyOnError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportClosesBodyOnError(t *testing.T)\n```\n\nIssue 6981 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDialTLS",
              "documentation": {
                "identifier": "TestTransportDialTLS",
                "newPage": false,
                "searchKey": "http_test.TestTransportDialTLS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDialTLS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDialTLS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDialContext",
              "documentation": {
                "identifier": "TestTransportDialContext",
                "newPage": false,
                "searchKey": "http_test.TestTransportDialContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDialContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDialContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDialTLSContext",
              "documentation": {
                "identifier": "TestTransportDialTLSContext",
                "newPage": false,
                "searchKey": "http_test.TestTransportDialTLSContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDialTLSContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDialTLSContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestRoundTripReturnsProxyError",
              "documentation": {
                "identifier": "TestRoundTripReturnsProxyError",
                "newPage": false,
                "searchKey": "http_test.TestRoundTripReturnsProxyError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRoundTripReturnsProxyError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRoundTripReturnsProxyError(t *testing.T)\n```\n\nTest for issue 8755 Ensure that if a proxy returns an error, it is exposed by RoundTrip \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCloseIdleConnsThenReturn",
              "documentation": {
                "identifier": "TestTransportCloseIdleConnsThenReturn",
                "newPage": false,
                "searchKey": "http_test.TestTransportCloseIdleConnsThenReturn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCloseIdleConnsThenReturn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCloseIdleConnsThenReturn(t *testing.T)\n```\n\ntests that putting an idle conn after a call to CloseIdleConns does return it \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportTraceGotConnH2IdleConns",
              "documentation": {
                "identifier": "TestTransportTraceGotConnH2IdleConns",
                "newPage": false,
                "searchKey": "http_test.TestTransportTraceGotConnH2IdleConns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportTraceGotConnH2IdleConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportTraceGotConnH2IdleConns(t *testing.T)\n```\n\nTest for issue 34282 Ensure that getConn doesn't call the GotConn trace hook on a HTTP/2 idle conn \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRemovesH2ConnsAfterIdle",
              "documentation": {
                "identifier": "TestTransportRemovesH2ConnsAfterIdle",
                "newPage": false,
                "searchKey": "http_test.TestTransportRemovesH2ConnsAfterIdle",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRemovesH2ConnsAfterIdle(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRemovesH2ConnsAfterIdle(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRangeAndGzip",
              "documentation": {
                "identifier": "TestTransportRangeAndGzip",
                "newPage": false,
                "searchKey": "http_test.TestTransportRangeAndGzip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRangeAndGzip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRangeAndGzip(t *testing.T)\n```\n\nThis tests that a client requesting a content range won't also implicitly ask for gzip support. If they want that, they need to do it on their own. golang.org/issue/8923 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportResponseCancelRace",
              "documentation": {
                "identifier": "TestTransportResponseCancelRace",
                "newPage": false,
                "searchKey": "http_test.TestTransportResponseCancelRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportResponseCancelRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportResponseCancelRace(t *testing.T)\n```\n\nTest for issue 10474 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportContentEncodingCaseInsensitive",
              "documentation": {
                "identifier": "TestTransportContentEncodingCaseInsensitive",
                "newPage": false,
                "searchKey": "http_test.TestTransportContentEncodingCaseInsensitive",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportContentEncodingCaseInsensitive(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportContentEncodingCaseInsensitive(t *testing.T)\n```\n\nTest for issue 19248: Content-Encoding's value is case insensitive. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDialCancelRace",
              "documentation": {
                "identifier": "TestTransportDialCancelRace",
                "newPage": false,
                "searchKey": "http_test.TestTransportDialCancelRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDialCancelRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDialCancelRace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportFlushesBodyChunks",
              "documentation": {
                "identifier": "TestTransportFlushesBodyChunks",
                "newPage": false,
                "searchKey": "http_test.TestTransportFlushesBodyChunks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportFlushesBodyChunks(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportFlushesBodyChunks(t *testing.T)\n```\n\nIssue 6574 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportFlushesRequestHeader",
              "documentation": {
                "identifier": "TestTransportFlushesRequestHeader",
                "newPage": false,
                "searchKey": "http_test.TestTransportFlushesRequestHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportFlushesRequestHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportFlushesRequestHeader(t *testing.T)\n```\n\nIssue 22088: flush Transport request headers if we're not sure the body won't block on read. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportPrefersResponseOverWriteError",
              "documentation": {
                "identifier": "TestTransportPrefersResponseOverWriteError",
                "newPage": false,
                "searchKey": "http_test.TestTransportPrefersResponseOverWriteError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportPrefersResponseOverWriteError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportPrefersResponseOverWriteError(t *testing.T)\n```\n\nIssue 11745. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_DefaultTransport",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_DefaultTransport",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_DefaultTransport",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_DefaultTransport(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_DefaultTransport(t *testing.T)\n```\n\ngolang.org/issue/14391: also check DefaultTransport \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_TLSNextProto",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_TLSNextProto",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_TLSNextProto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_TLSNextProto(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_TLSNextProto(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_TLSConfig",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_TLSConfig",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_TLSConfig",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_TLSConfig(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_TLSConfig(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_ExpectContinueTimeout",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_ExpectContinueTimeout",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_ExpectContinueTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_ExpectContinueTimeout(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_ExpectContinueTimeout(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_Dial",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_Dial",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_Dial",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_Dial(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_Dial(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_DialContext",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_DialContext",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_DialContext",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_DialContext(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_DialContext(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportAutomaticHTTP2_DialTLS",
              "documentation": {
                "identifier": "TestTransportAutomaticHTTP2_DialTLS",
                "newPage": false,
                "searchKey": "http_test.TestTransportAutomaticHTTP2_DialTLS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportAutomaticHTTP2_DialTLS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportAutomaticHTTP2_DialTLS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportAutoHTTP",
              "documentation": {
                "identifier": "testTransportAutoHTTP",
                "newPage": false,
                "searchKey": "http_test.testTransportAutoHTTP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportAutoHTTP(t *testing.T, tr *Transport, wantH2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportAutoHTTP(t *testing.T, tr *Transport, wantH2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportReuseConnEmptyResponseBody",
              "documentation": {
                "identifier": "TestTransportReuseConnEmptyResponseBody",
                "newPage": false,
                "searchKey": "http_test.TestTransportReuseConnEmptyResponseBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportReuseConnEmptyResponseBody(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportReuseConnEmptyResponseBody(t *testing.T)\n```\n\nIssue 13633: there was a race where we returned bodyless responses to callers before recycling the persistent connection, which meant a client doing two subsequent requests could end up on different connections. It's somewhat harmless but enough tests assume it's not true in order to test other things that it's worth fixing. Plus it's nice to be consistent and not have timing-dependent behavior. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoCrashReturningTransportAltConn",
              "documentation": {
                "identifier": "TestNoCrashReturningTransportAltConn",
                "newPage": false,
                "searchKey": "http_test.TestNoCrashReturningTransportAltConn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoCrashReturningTransportAltConn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoCrashReturningTransportAltConn(t *testing.T)\n```\n\nIssue 13839 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportReuseConnection_Gzip_Chunked",
              "documentation": {
                "identifier": "TestTransportReuseConnection_Gzip_Chunked",
                "newPage": false,
                "searchKey": "http_test.TestTransportReuseConnection_Gzip_Chunked",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportReuseConnection_Gzip_Chunked(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportReuseConnection_Gzip_Chunked(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportReuseConnection_Gzip_ContentLength",
              "documentation": {
                "identifier": "TestTransportReuseConnection_Gzip_ContentLength",
                "newPage": false,
                "searchKey": "http_test.TestTransportReuseConnection_Gzip_ContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportReuseConnection_Gzip_ContentLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportReuseConnection_Gzip_ContentLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportReuseConnection_Gzip",
              "documentation": {
                "identifier": "testTransportReuseConnection_Gzip",
                "newPage": false,
                "searchKey": "http_test.testTransportReuseConnection_Gzip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportReuseConnection_Gzip(t *testing.T, chunked bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportReuseConnection_Gzip(t *testing.T, chunked bool)\n```\n\nMake sure we re-use underlying TCP connection for gzipped responses too. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportResponseHeaderLength",
              "documentation": {
                "identifier": "TestTransportResponseHeaderLength",
                "newPage": false,
                "searchKey": "http_test.TestTransportResponseHeaderLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportResponseHeaderLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportResponseHeaderLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEventTrace",
              "documentation": {
                "identifier": "TestTransportEventTrace",
                "newPage": false,
                "searchKey": "http_test.TestTransportEventTrace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEventTrace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEventTrace(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEventTrace_h2",
              "documentation": {
                "identifier": "TestTransportEventTrace_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportEventTrace_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEventTrace_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEventTrace_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEventTrace_NoHooks",
              "documentation": {
                "identifier": "TestTransportEventTrace_NoHooks",
                "newPage": false,
                "searchKey": "http_test.TestTransportEventTrace_NoHooks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEventTrace_NoHooks(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEventTrace_NoHooks(t *testing.T)\n```\n\ntest a non-nil httptrace.ClientTrace but with all hooks set to zero. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEventTrace_NoHooks_h2",
              "documentation": {
                "identifier": "TestTransportEventTrace_NoHooks_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportEventTrace_NoHooks_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEventTrace_NoHooks_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEventTrace_NoHooks_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportEventTrace",
              "documentation": {
                "identifier": "testTransportEventTrace",
                "newPage": false,
                "searchKey": "http_test.testTransportEventTrace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportEventTrace(t *testing.T, h2 bool, noHooks bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportEventTrace(t *testing.T, h2 bool, noHooks bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEventTraceTLSVerify",
              "documentation": {
                "identifier": "TestTransportEventTraceTLSVerify",
                "newPage": false,
                "searchKey": "http_test.TestTransportEventTraceTLSVerify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEventTraceTLSVerify(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEventTraceTLSVerify(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#skipIfDNSHijacked",
              "documentation": {
                "identifier": "skipIfDNSHijacked",
                "newPage": false,
                "searchKey": "http_test.skipIfDNSHijacked",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func skipIfDNSHijacked(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc skipIfDNSHijacked(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportEventTraceRealDNS",
              "documentation": {
                "identifier": "TestTransportEventTraceRealDNS",
                "newPage": false,
                "searchKey": "http_test.TestTransportEventTraceRealDNS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportEventTraceRealDNS(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportEventTraceRealDNS(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRejectsAlphaPort",
              "documentation": {
                "identifier": "TestTransportRejectsAlphaPort",
                "newPage": false,
                "searchKey": "http_test.TestTransportRejectsAlphaPort",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRejectsAlphaPort(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRejectsAlphaPort(t *testing.T)\n```\n\nIssue 14353: port can only contain digits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTLSHandshakeTrace",
              "documentation": {
                "identifier": "TestTLSHandshakeTrace",
                "newPage": false,
                "searchKey": "http_test.TestTLSHandshakeTrace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTLSHandshakeTrace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTLSHandshakeTrace(t *testing.T)\n```\n\nTest the httptrace.TLSHandshake{Start,Done} hooks with a https http1 connections. The http2 test is done in TestTransportEventTrace_h2 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportMaxIdleConns",
              "documentation": {
                "identifier": "TestTransportMaxIdleConns",
                "newPage": false,
                "searchKey": "http_test.TestTransportMaxIdleConns",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportMaxIdleConns(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportMaxIdleConns(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIdleConnTimeout_h1",
              "documentation": {
                "identifier": "TestTransportIdleConnTimeout_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportIdleConnTimeout_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIdleConnTimeout_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIdleConnTimeout_h1(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIdleConnTimeout_h2",
              "documentation": {
                "identifier": "TestTransportIdleConnTimeout_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportIdleConnTimeout_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIdleConnTimeout_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIdleConnTimeout_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportIdleConnTimeout",
              "documentation": {
                "identifier": "testTransportIdleConnTimeout",
                "newPage": false,
                "searchKey": "http_test.testTransportIdleConnTimeout",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportIdleConnTimeout(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportIdleConnTimeout(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIdleConnH2Crash",
              "documentation": {
                "identifier": "TestIdleConnH2Crash",
                "newPage": false,
                "searchKey": "http_test.TestIdleConnH2Crash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIdleConnH2Crash(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIdleConnH2Crash(t *testing.T)\n```\n\nIssue 16208: Go 1.7 crashed after Transport.IdleConnTimeout if an HTTP/2 connection was established but its caller no longer wanted it. (Assuming the connection cache was enabled, which it is by default) \n\nThis test reproduced the crash by setting the IdleConnTimeout low (to make the test reasonable) and then making a request which is canceled by the DialTLS hook, which then also waits to return the real connection until after the RoundTrip saw the error.  Then we know the successful tls.Dial from DialTLS will need to go into the idle pool. Then we give it a of time to explode. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportReturnsPeekError",
              "documentation": {
                "identifier": "TestTransportReturnsPeekError",
                "newPage": false,
                "searchKey": "http_test.TestTransportReturnsPeekError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportReturnsPeekError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportReturnsPeekError(t *testing.T)\n```\n\nIssue 16465: Transport.RoundTrip should return the raw net.Conn.Read error from Peek back to the caller. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIDNA_h1",
              "documentation": {
                "identifier": "TestTransportIDNA_h1",
                "newPage": false,
                "searchKey": "http_test.TestTransportIDNA_h1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIDNA_h1(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIDNA_h1(t *testing.T)\n```\n\nIssue 13835: international domain names should work \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIDNA_h2",
              "documentation": {
                "identifier": "TestTransportIDNA_h2",
                "newPage": false,
                "searchKey": "http_test.TestTransportIDNA_h2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIDNA_h2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIDNA_h2(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportIDNA",
              "documentation": {
                "identifier": "testTransportIDNA",
                "newPage": false,
                "searchKey": "http_test.testTransportIDNA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportIDNA(t *testing.T, h2 bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportIDNA(t *testing.T, h2 bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportProxyConnectHeader",
              "documentation": {
                "identifier": "TestTransportProxyConnectHeader",
                "newPage": false,
                "searchKey": "http_test.TestTransportProxyConnectHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportProxyConnectHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportProxyConnectHeader(t *testing.T)\n```\n\nIssue 13290: send User-Agent in proxy CONNECT \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportProxyGetConnectHeader",
              "documentation": {
                "identifier": "TestTransportProxyGetConnectHeader",
                "newPage": false,
                "searchKey": "http_test.TestTransportProxyGetConnectHeader",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportProxyGetConnectHeader(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportProxyGetConnectHeader(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#wantBody",
              "documentation": {
                "identifier": "wantBody",
                "newPage": false,
                "searchKey": "http_test.wantBody",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func wantBody(res *Response, err error, want string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc wantBody(res *Response, err error, want string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#newLocalListener",
              "documentation": {
                "identifier": "newLocalListener",
                "newPage": false,
                "searchKey": "http_test.newLocalListener",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newLocalListener(t *testing.T) net.Listener"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newLocalListener(t *testing.T) net.Listener\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestMissingStatusNoPanic",
              "documentation": {
                "identifier": "TestMissingStatusNoPanic",
                "newPage": false,
                "searchKey": "http_test.TestMissingStatusNoPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMissingStatusNoPanic(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMissingStatusNoPanic(t *testing.T)\n```\n\nEnsure that a missing status doesn't make the server panic See Issue [https://golang.org/issues/21701](https://golang.org/issues/21701) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#doFetchCheckPanic",
              "documentation": {
                "identifier": "doFetchCheckPanic",
                "newPage": false,
                "searchKey": "http_test.doFetchCheckPanic",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func doFetchCheckPanic(tr *Transport, req *Request) (res *Response, err error, panicked bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc doFetchCheckPanic(tr *Transport, req *Request) (res *Response, err error, panicked bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestNoBodyOnChunked304Response",
              "documentation": {
                "identifier": "TestNoBodyOnChunked304Response",
                "newPage": false,
                "searchKey": "http_test.TestNoBodyOnChunked304Response",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoBodyOnChunked304Response(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoBodyOnChunked304Response(t *testing.T)\n```\n\nIssue 22330: do not allow the response body to be read when the status code forbids a response body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCheckContextDoneEarly",
              "documentation": {
                "identifier": "TestTransportCheckContextDoneEarly",
                "newPage": false,
                "searchKey": "http_test.TestTransportCheckContextDoneEarly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCheckContextDoneEarly(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCheckContextDoneEarly(t *testing.T)\n```\n\nIssue 25852: Transport should check whether Context is done early. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeoutKillsConn_BeforeHeaders",
              "documentation": {
                "identifier": "TestClientTimeoutKillsConn_BeforeHeaders",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeoutKillsConn_BeforeHeaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeoutKillsConn_BeforeHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeoutKillsConn_BeforeHeaders(t *testing.T)\n```\n\nIssue 23399: verify that if a client request times out, the Transport's conn is closed so that it's not reused. \n\nThis is the test variant that times out before the server replies with any response headers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestClientTimeoutKillsConn_AfterHeaders",
              "documentation": {
                "identifier": "TestClientTimeoutKillsConn_AfterHeaders",
                "newPage": false,
                "searchKey": "http_test.TestClientTimeoutKillsConn_AfterHeaders",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestClientTimeoutKillsConn_AfterHeaders(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestClientTimeoutKillsConn_AfterHeaders(t *testing.T)\n```\n\nIssue 23399: verify that if a client request times out, the Transport's conn is closed so that it's not reused. \n\nThis is the test variant that has the server send response headers first, and time out during the write of the response body. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportResponseBodyWritableOnProtocolSwitch",
              "documentation": {
                "identifier": "TestTransportResponseBodyWritableOnProtocolSwitch",
                "newPage": false,
                "searchKey": "http_test.TestTransportResponseBodyWritableOnProtocolSwitch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportResponseBodyWritableOnProtocolSwitch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportResponseBodyWritableOnProtocolSwitch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportCONNECTBidi",
              "documentation": {
                "identifier": "TestTransportCONNECTBidi",
                "newPage": false,
                "searchKey": "http_test.TestTransportCONNECTBidi",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportCONNECTBidi(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportCONNECTBidi(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRequestReplayable",
              "documentation": {
                "identifier": "TestTransportRequestReplayable",
                "newPage": false,
                "searchKey": "http_test.TestTransportRequestReplayable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRequestReplayable(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRequestReplayable(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRequestWriteRoundTrip",
              "documentation": {
                "identifier": "TestTransportRequestWriteRoundTrip",
                "newPage": false,
                "searchKey": "http_test.TestTransportRequestWriteRoundTrip",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRequestWriteRoundTrip(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRequestWriteRoundTrip(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportClone",
              "documentation": {
                "identifier": "TestTransportClone",
                "newPage": false,
                "searchKey": "http_test.TestTransportClone",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportClone(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportClone(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIs408",
              "documentation": {
                "identifier": "TestIs408",
                "newPage": false,
                "searchKey": "http_test.TestIs408",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIs408(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIs408(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportIgnores408",
              "documentation": {
                "identifier": "TestTransportIgnores408",
                "newPage": false,
                "searchKey": "http_test.TestTransportIgnores408",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportIgnores408(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportIgnores408(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestInvalidHeaderResponse",
              "documentation": {
                "identifier": "TestInvalidHeaderResponse",
                "newPage": false,
                "searchKey": "http_test.TestInvalidHeaderResponse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInvalidHeaderResponse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInvalidHeaderResponse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportClosesBodyOnInvalidRequests",
              "documentation": {
                "identifier": "TestTransportClosesBodyOnInvalidRequests",
                "newPage": false,
                "searchKey": "http_test.TestTransportClosesBodyOnInvalidRequests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportClosesBodyOnInvalidRequests(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportClosesBodyOnInvalidRequests(t *testing.T)\n```\n\nIssue 35015: ensure that Transport closes the body on any error with an invalid request, as promised by Client.Do docs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestDontCacheBrokenHTTP2Conn",
              "documentation": {
                "identifier": "TestDontCacheBrokenHTTP2Conn",
                "newPage": false,
                "searchKey": "http_test.TestDontCacheBrokenHTTP2Conn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDontCacheBrokenHTTP2Conn(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDontCacheBrokenHTTP2Conn(t *testing.T)\n```\n\nIssue 34978: don't cache a broken HTTP/2 connection \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportDecrementConnWhenIdleConnRemoved",
              "documentation": {
                "identifier": "TestTransportDecrementConnWhenIdleConnRemoved",
                "newPage": false,
                "searchKey": "http_test.TestTransportDecrementConnWhenIdleConnRemoved",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportDecrementConnWhenIdleConnRemoved(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportDecrementConnWhenIdleConnRemoved(t *testing.T)\n```\n\nIssue 34941 When the client has too many concurrent requests on a single connection, http.http2noCachedConnError is reported on multiple requests. There should only be one decrement regardless of the number of failures. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestAltProtoCancellation",
              "documentation": {
                "identifier": "TestAltProtoCancellation",
                "newPage": false,
                "searchKey": "http_test.TestAltProtoCancellation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAltProtoCancellation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAltProtoCancellation(t *testing.T)\n```\n\nIssue 36820 Test that we use the older backward compatible cancellation protocol when a RoundTripper is registered via RegisterProtocol. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestIssue32441",
              "documentation": {
                "identifier": "TestIssue32441",
                "newPage": false,
                "searchKey": "http_test.TestIssue32441",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIssue32441(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIssue32441(t *testing.T)\n```\n\nIssue 32441: body is not reset after ErrSkipAltProtocol \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestTransportRejectsSignInContentLength",
              "documentation": {
                "identifier": "TestTransportRejectsSignInContentLength",
                "newPage": false,
                "searchKey": "http_test.TestTransportRejectsSignInContentLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestTransportRejectsSignInContentLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestTransportRejectsSignInContentLength(t *testing.T)\n```\n\nIssue 39017. Ensure that HTTP/1 transports reject Content-Length headers that contain a sign (eg. \"+3\"), per RFC 2616, Section 14.13. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#testTransportRace",
              "documentation": {
                "identifier": "testTransportRace",
                "newPage": false,
                "searchKey": "http_test.testTransportRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testTransportRace(req *Request)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testTransportRace(req *Request)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestErrorWriteLoopRace",
              "documentation": {
                "identifier": "TestErrorWriteLoopRace",
                "newPage": false,
                "searchKey": "http_test.TestErrorWriteLoopRace",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestErrorWriteLoopRace(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestErrorWriteLoopRace(t *testing.T)\n```\n\nIssue 37669 Test that a cancellation doesn't result in a data race due to the writeLoop goroutine being left running, if the caller mutates the processed Request upon completion. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/net/http_test#TestCancelRequestWhenSharingConnection",
              "documentation": {
                "identifier": "TestCancelRequestWhenSharingConnection",
                "newPage": false,
                "searchKey": "http_test.TestCancelRequestWhenSharingConnection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCancelRequestWhenSharingConnection(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCancelRequestWhenSharingConnection(t *testing.T)\n```\n\nIssue 41600 Test that a new request which uses the connection of an active request cannot cause it to be canceled as well. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
