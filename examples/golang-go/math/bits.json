{
  "pathID": "/math/bits",
  "documentation": {
    "identifier": "bits",
    "newPage": true,
    "searchKey": "math/bits",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package bits"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package bits implements bit counting and manipulation functions for the predeclared unsigned integer types. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/math/bits#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/bits#DeBruijn64",
              "documentation": {
                "identifier": "DeBruijn64",
                "newPage": false,
                "searchKey": "bits.DeBruijn64",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DeBruijn64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DeBruijn64 = deBruijn64\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#UintSize",
              "documentation": {
                "identifier": "UintSize",
                "newPage": false,
                "searchKey": "bits.UintSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UintSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UintSize = uintSize\n```\n\nUintSize is the size of a uint in bits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#deBruijn32",
              "documentation": {
                "identifier": "deBruijn32",
                "newPage": false,
                "searchKey": "bits.deBruijn32",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deBruijn32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deBruijn32 = 0x077CB531\n```\n\nSee [http://supertech.csail.mit.edu/papers/debruijn.pdf](http://supertech.csail.mit.edu/papers/debruijn.pdf) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#deBruijn64",
              "documentation": {
                "identifier": "deBruijn64",
                "newPage": false,
                "searchKey": "bits.deBruijn64",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const deBruijn64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst deBruijn64 = 0x03f79d71b4ca8b09\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#len8tab",
              "documentation": {
                "identifier": "len8tab",
                "newPage": false,
                "searchKey": "bits.len8tab",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const len8tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst len8tab = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#m0",
              "documentation": {
                "identifier": "m0",
                "newPage": false,
                "searchKey": "bits.m0",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const m0"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst m0 = 0x5555555555555555 // 01010101 ...\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#m1",
              "documentation": {
                "identifier": "m1",
                "newPage": false,
                "searchKey": "bits.m1",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const m1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst m1 = 0x3333333333333333 // 00110011 ...\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#m2",
              "documentation": {
                "identifier": "m2",
                "newPage": false,
                "searchKey": "bits.m2",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const m2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst m2 = 0x0f0f0f0f0f0f0f0f // 00001111 ...\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#m3",
              "documentation": {
                "identifier": "m3",
                "newPage": false,
                "searchKey": "bits.m3",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const m3"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst m3 = 0x00ff00ff00ff00ff // etc.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#m4",
              "documentation": {
                "identifier": "m4",
                "newPage": false,
                "searchKey": "bits.m4",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const m4"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst m4 = 0x0000ffff0000ffff\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#ntz8tab",
              "documentation": {
                "identifier": "ntz8tab",
                "newPage": false,
                "searchKey": "bits.ntz8tab",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ntz8tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ntz8tab = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#pop8tab",
              "documentation": {
                "identifier": "pop8tab",
                "newPage": false,
                "searchKey": "bits.pop8tab",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const pop8tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pop8tab = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#rev8tab",
              "documentation": {
                "identifier": "rev8tab",
                "newPage": false,
                "searchKey": "bits.rev8tab",
                "tags": [
                  "constant",
                  "string",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const rev8tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rev8tab = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#uintSize",
              "documentation": {
                "identifier": "uintSize",
                "newPage": false,
                "searchKey": "bits.uintSize",
                "tags": [
                  "constant",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const uintSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst uintSize = 32 << (^uint(0) >> 63) // 32 or 64\n\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/math/bits#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/bits#deBruijn32tab",
              "documentation": {
                "identifier": "deBruijn32tab",
                "newPage": false,
                "searchKey": "bits.deBruijn32tab",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var deBruijn32tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deBruijn32tab = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#deBruijn64tab",
              "documentation": {
                "identifier": "deBruijn64tab",
                "newPage": false,
                "searchKey": "bits.deBruijn64tab",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var deBruijn64tab"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar deBruijn64tab = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#divideError",
              "documentation": {
                "identifier": "divideError",
                "newPage": false,
                "searchKey": "bits.divideError",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var divideError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar divideError error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#overflowError",
              "documentation": {
                "identifier": "overflowError",
                "newPage": false,
                "searchKey": "bits.overflowError",
                "tags": [
                  "variable",
                  "interface",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var overflowError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar overflowError error\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/math/bits#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/bits#Add",
              "documentation": {
                "identifier": "Add",
                "newPage": false,
                "searchKey": "bits.Add",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Add(x, y, carry uint) (sum, carryOut uint)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Add(x, y, carry uint) (sum, carryOut uint)\n```\n\nAdd returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Add32",
              "documentation": {
                "identifier": "Add32",
                "newPage": false,
                "searchKey": "bits.Add32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Add32(x, y, carry uint32) (sum, carryOut uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Add32(x, y, carry uint32) (sum, carryOut uint32)\n```\n\nAdd32 returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Add64",
              "documentation": {
                "identifier": "Add64",
                "newPage": false,
                "searchKey": "bits.Add64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Add64(x, y, carry uint64) (sum, carryOut uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Add64(x, y, carry uint64) (sum, carryOut uint64)\n```\n\nAdd64 returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Div",
              "documentation": {
                "identifier": "Div",
                "newPage": false,
                "searchKey": "bits.Div",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Div(hi, lo, y uint) (quo, rem uint)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Div(hi, lo, y uint) (quo, rem uint)\n```\n\nDiv returns the quotient and remainder of (hi, lo) divided by y: quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper half in parameter hi and the lower half in parameter lo. Div panics for y == 0 (division by zero) or y <= hi (quotient overflow). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Div32",
              "documentation": {
                "identifier": "Div32",
                "newPage": false,
                "searchKey": "bits.Div32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Div32(hi, lo, y uint32) (quo, rem uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Div32(hi, lo, y uint32) (quo, rem uint32)\n```\n\nDiv32 returns the quotient and remainder of (hi, lo) divided by y: quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper half in parameter hi and the lower half in parameter lo. Div32 panics for y == 0 (division by zero) or y <= hi (quotient overflow). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Div64",
              "documentation": {
                "identifier": "Div64",
                "newPage": false,
                "searchKey": "bits.Div64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Div64(hi, lo, y uint64) (quo, rem uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Div64(hi, lo, y uint64) (quo, rem uint64)\n```\n\nDiv64 returns the quotient and remainder of (hi, lo) divided by y: quo = (hi, lo)/y, rem = (hi, lo)%y with the dividend bits' upper half in parameter hi and the lower half in parameter lo. Div64 panics for y == 0 (division by zero) or y <= hi (quotient overflow). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#LeadingZeros",
              "documentation": {
                "identifier": "LeadingZeros",
                "newPage": false,
                "searchKey": "bits.LeadingZeros",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LeadingZeros(x uint) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LeadingZeros(x uint) int\n```\n\nLeadingZeros returns the number of leading zero bits in x; the result is UintSize for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#LeadingZeros16",
              "documentation": {
                "identifier": "LeadingZeros16",
                "newPage": false,
                "searchKey": "bits.LeadingZeros16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LeadingZeros16(x uint16) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LeadingZeros16(x uint16) int\n```\n\nLeadingZeros16 returns the number of leading zero bits in x; the result is 16 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#LeadingZeros32",
              "documentation": {
                "identifier": "LeadingZeros32",
                "newPage": false,
                "searchKey": "bits.LeadingZeros32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LeadingZeros32(x uint32) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LeadingZeros32(x uint32) int\n```\n\nLeadingZeros32 returns the number of leading zero bits in x; the result is 32 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#LeadingZeros64",
              "documentation": {
                "identifier": "LeadingZeros64",
                "newPage": false,
                "searchKey": "bits.LeadingZeros64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LeadingZeros64(x uint64) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LeadingZeros64(x uint64) int\n```\n\nLeadingZeros64 returns the number of leading zero bits in x; the result is 64 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#LeadingZeros8",
              "documentation": {
                "identifier": "LeadingZeros8",
                "newPage": false,
                "searchKey": "bits.LeadingZeros8",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func LeadingZeros8(x uint8) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc LeadingZeros8(x uint8) int\n```\n\nLeadingZeros8 returns the number of leading zero bits in x; the result is 8 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Len",
              "documentation": {
                "identifier": "Len",
                "newPage": false,
                "searchKey": "bits.Len",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Len(x uint) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Len(x uint) int\n```\n\nLen returns the minimum number of bits required to represent x; the result is 0 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Len16",
              "documentation": {
                "identifier": "Len16",
                "newPage": false,
                "searchKey": "bits.Len16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Len16(x uint16) (n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Len16(x uint16) (n int)\n```\n\nLen16 returns the minimum number of bits required to represent x; the result is 0 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Len32",
              "documentation": {
                "identifier": "Len32",
                "newPage": false,
                "searchKey": "bits.Len32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Len32(x uint32) (n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Len32(x uint32) (n int)\n```\n\nLen32 returns the minimum number of bits required to represent x; the result is 0 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Len64",
              "documentation": {
                "identifier": "Len64",
                "newPage": false,
                "searchKey": "bits.Len64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Len64(x uint64) (n int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Len64(x uint64) (n int)\n```\n\nLen64 returns the minimum number of bits required to represent x; the result is 0 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Len8",
              "documentation": {
                "identifier": "Len8",
                "newPage": false,
                "searchKey": "bits.Len8",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Len8(x uint8) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Len8(x uint8) int\n```\n\nLen8 returns the minimum number of bits required to represent x; the result is 0 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Mul",
              "documentation": {
                "identifier": "Mul",
                "newPage": false,
                "searchKey": "bits.Mul",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Mul(x, y uint) (hi, lo uint)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Mul(x, y uint) (hi, lo uint)\n```\n\nMul returns the full-width product of x and y: (hi, lo) = x * y with the product bits' upper half returned in hi and the lower half returned in lo. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Mul32",
              "documentation": {
                "identifier": "Mul32",
                "newPage": false,
                "searchKey": "bits.Mul32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Mul32(x, y uint32) (hi, lo uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Mul32(x, y uint32) (hi, lo uint32)\n```\n\nMul32 returns the 64-bit product of x and y: (hi, lo) = x * y with the product bits' upper half returned in hi and the lower half returned in lo. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Mul64",
              "documentation": {
                "identifier": "Mul64",
                "newPage": false,
                "searchKey": "bits.Mul64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Mul64(x, y uint64) (hi, lo uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Mul64(x, y uint64) (hi, lo uint64)\n```\n\nMul64 returns the 128-bit product of x and y: (hi, lo) = x * y with the product bits' upper half returned in hi and the lower half returned in lo. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#OnesCount",
              "documentation": {
                "identifier": "OnesCount",
                "newPage": false,
                "searchKey": "bits.OnesCount",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func OnesCount(x uint) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc OnesCount(x uint) int\n```\n\nOnesCount returns the number of one bits (\"population count\") in x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#OnesCount16",
              "documentation": {
                "identifier": "OnesCount16",
                "newPage": false,
                "searchKey": "bits.OnesCount16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func OnesCount16(x uint16) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc OnesCount16(x uint16) int\n```\n\nOnesCount16 returns the number of one bits (\"population count\") in x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#OnesCount32",
              "documentation": {
                "identifier": "OnesCount32",
                "newPage": false,
                "searchKey": "bits.OnesCount32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func OnesCount32(x uint32) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc OnesCount32(x uint32) int\n```\n\nOnesCount32 returns the number of one bits (\"population count\") in x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#OnesCount64",
              "documentation": {
                "identifier": "OnesCount64",
                "newPage": false,
                "searchKey": "bits.OnesCount64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func OnesCount64(x uint64) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc OnesCount64(x uint64) int\n```\n\nOnesCount64 returns the number of one bits (\"population count\") in x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#OnesCount8",
              "documentation": {
                "identifier": "OnesCount8",
                "newPage": false,
                "searchKey": "bits.OnesCount8",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func OnesCount8(x uint8) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc OnesCount8(x uint8) int\n```\n\nOnesCount8 returns the number of one bits (\"population count\") in x. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Rem",
              "documentation": {
                "identifier": "Rem",
                "newPage": false,
                "searchKey": "bits.Rem",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Rem(hi, lo, y uint) uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Rem(hi, lo, y uint) uint\n```\n\nRem returns the remainder of (hi, lo) divided by y. Rem panics for y == 0 (division by zero) but, unlike Div, it doesn't panic on a quotient overflow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Rem32",
              "documentation": {
                "identifier": "Rem32",
                "newPage": false,
                "searchKey": "bits.Rem32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Rem32(hi, lo, y uint32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Rem32(hi, lo, y uint32) uint32\n```\n\nRem32 returns the remainder of (hi, lo) divided by y. Rem32 panics for y == 0 (division by zero) but, unlike Div32, it doesn't panic on a quotient overflow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Rem64",
              "documentation": {
                "identifier": "Rem64",
                "newPage": false,
                "searchKey": "bits.Rem64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Rem64(hi, lo, y uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Rem64(hi, lo, y uint64) uint64\n```\n\nRem64 returns the remainder of (hi, lo) divided by y. Rem64 panics for y == 0 (division by zero) but, unlike Div64, it doesn't panic on a quotient overflow. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Reverse",
              "documentation": {
                "identifier": "Reverse",
                "newPage": false,
                "searchKey": "bits.Reverse",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Reverse(x uint) uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Reverse(x uint) uint\n```\n\nReverse returns the value of x with its bits in reversed order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Reverse16",
              "documentation": {
                "identifier": "Reverse16",
                "newPage": false,
                "searchKey": "bits.Reverse16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Reverse16(x uint16) uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Reverse16(x uint16) uint16\n```\n\nReverse16 returns the value of x with its bits in reversed order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Reverse32",
              "documentation": {
                "identifier": "Reverse32",
                "newPage": false,
                "searchKey": "bits.Reverse32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Reverse32(x uint32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Reverse32(x uint32) uint32\n```\n\nReverse32 returns the value of x with its bits in reversed order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Reverse64",
              "documentation": {
                "identifier": "Reverse64",
                "newPage": false,
                "searchKey": "bits.Reverse64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Reverse64(x uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Reverse64(x uint64) uint64\n```\n\nReverse64 returns the value of x with its bits in reversed order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Reverse8",
              "documentation": {
                "identifier": "Reverse8",
                "newPage": false,
                "searchKey": "bits.Reverse8",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Reverse8(x uint8) uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Reverse8(x uint8) uint8\n```\n\nReverse8 returns the value of x with its bits in reversed order. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#ReverseBytes",
              "documentation": {
                "identifier": "ReverseBytes",
                "newPage": false,
                "searchKey": "bits.ReverseBytes",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReverseBytes(x uint) uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReverseBytes(x uint) uint\n```\n\nReverseBytes returns the value of x with its bytes in reversed order. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#ReverseBytes16",
              "documentation": {
                "identifier": "ReverseBytes16",
                "newPage": false,
                "searchKey": "bits.ReverseBytes16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReverseBytes16(x uint16) uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReverseBytes16(x uint16) uint16\n```\n\nReverseBytes16 returns the value of x with its bytes in reversed order. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#ReverseBytes32",
              "documentation": {
                "identifier": "ReverseBytes32",
                "newPage": false,
                "searchKey": "bits.ReverseBytes32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReverseBytes32(x uint32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReverseBytes32(x uint32) uint32\n```\n\nReverseBytes32 returns the value of x with its bytes in reversed order. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#ReverseBytes64",
              "documentation": {
                "identifier": "ReverseBytes64",
                "newPage": false,
                "searchKey": "bits.ReverseBytes64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ReverseBytes64(x uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ReverseBytes64(x uint64) uint64\n```\n\nReverseBytes64 returns the value of x with its bytes in reversed order. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#RotateLeft",
              "documentation": {
                "identifier": "RotateLeft",
                "newPage": false,
                "searchKey": "bits.RotateLeft",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RotateLeft(x uint, k int) uint"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RotateLeft(x uint, k int) uint\n```\n\nRotateLeft returns the value of x rotated left by (k mod UintSize) bits. To rotate x right by k bits, call RotateLeft(x, -k). \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#RotateLeft16",
              "documentation": {
                "identifier": "RotateLeft16",
                "newPage": false,
                "searchKey": "bits.RotateLeft16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RotateLeft16(x uint16, k int) uint16"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RotateLeft16(x uint16, k int) uint16\n```\n\nRotateLeft16 returns the value of x rotated left by (k mod 16) bits. To rotate x right by k bits, call RotateLeft16(x, -k). \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#RotateLeft32",
              "documentation": {
                "identifier": "RotateLeft32",
                "newPage": false,
                "searchKey": "bits.RotateLeft32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RotateLeft32(x uint32, k int) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RotateLeft32(x uint32, k int) uint32\n```\n\nRotateLeft32 returns the value of x rotated left by (k mod 32) bits. To rotate x right by k bits, call RotateLeft32(x, -k). \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#RotateLeft64",
              "documentation": {
                "identifier": "RotateLeft64",
                "newPage": false,
                "searchKey": "bits.RotateLeft64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RotateLeft64(x uint64, k int) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RotateLeft64(x uint64, k int) uint64\n```\n\nRotateLeft64 returns the value of x rotated left by (k mod 64) bits. To rotate x right by k bits, call RotateLeft64(x, -k). \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#RotateLeft8",
              "documentation": {
                "identifier": "RotateLeft8",
                "newPage": false,
                "searchKey": "bits.RotateLeft8",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func RotateLeft8(x uint8, k int) uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc RotateLeft8(x uint8, k int) uint8\n```\n\nRotateLeft8 returns the value of x rotated left by (k mod 8) bits. To rotate x right by k bits, call RotateLeft8(x, -k). \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Sub",
              "documentation": {
                "identifier": "Sub",
                "newPage": false,
                "searchKey": "bits.Sub",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sub(x, y, borrow uint) (diff, borrowOut uint)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sub(x, y, borrow uint) (diff, borrowOut uint)\n```\n\nSub returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Sub32",
              "documentation": {
                "identifier": "Sub32",
                "newPage": false,
                "searchKey": "bits.Sub32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sub32(x, y, borrow uint32) (diff, borrowOut uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sub32(x, y, borrow uint32) (diff, borrowOut uint32)\n```\n\nSub32 returns the difference of x, y and borrow, diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#Sub64",
              "documentation": {
                "identifier": "Sub64",
                "newPage": false,
                "searchKey": "bits.Sub64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sub64(x, y, borrow uint64) (diff, borrowOut uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sub64(x, y, borrow uint64) (diff, borrowOut uint64)\n```\n\nSub64 returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1. \n\nThis function's execution time does not depend on the inputs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#TrailingZeros",
              "documentation": {
                "identifier": "TrailingZeros",
                "newPage": false,
                "searchKey": "bits.TrailingZeros",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TrailingZeros(x uint) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TrailingZeros(x uint) int\n```\n\nTrailingZeros returns the number of trailing zero bits in x; the result is UintSize for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#TrailingZeros16",
              "documentation": {
                "identifier": "TrailingZeros16",
                "newPage": false,
                "searchKey": "bits.TrailingZeros16",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TrailingZeros16(x uint16) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TrailingZeros16(x uint16) int\n```\n\nTrailingZeros16 returns the number of trailing zero bits in x; the result is 16 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#TrailingZeros32",
              "documentation": {
                "identifier": "TrailingZeros32",
                "newPage": false,
                "searchKey": "bits.TrailingZeros32",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TrailingZeros32(x uint32) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TrailingZeros32(x uint32) int\n```\n\nTrailingZeros32 returns the number of trailing zero bits in x; the result is 32 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#TrailingZeros64",
              "documentation": {
                "identifier": "TrailingZeros64",
                "newPage": false,
                "searchKey": "bits.TrailingZeros64",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TrailingZeros64(x uint64) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TrailingZeros64(x uint64) int\n```\n\nTrailingZeros64 returns the number of trailing zero bits in x; the result is 64 for x == 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/bits#TrailingZeros8",
              "documentation": {
                "identifier": "TrailingZeros8",
                "newPage": false,
                "searchKey": "bits.TrailingZeros8",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TrailingZeros8(x uint8) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TrailingZeros8(x uint8) int\n```\n\nTrailingZeros8 returns the number of trailing zero bits in x; the result is 8 for x == 0. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
