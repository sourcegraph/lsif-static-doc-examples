{
  "pathID": "/math/rand",
  "documentation": {
    "identifier": "rand",
    "newPage": true,
    "searchKey": "math/rand",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package rand"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package rand implements pseudo-random number generators unsuitable for security-sensitive work. \n\nRandom numbers are generated by a Source. Top-level functions, such as Float64 and Int, use a default shared Source that produces a deterministic sequence of values each time a program is run. Use the Seed function to initialize the default Source if different behavior is required for each run. The default Source is safe for concurrent use by multiple goroutines, but Sources created by NewSource are not. \n\nThis package's outputs might be easily predictable regardless of how it's seeded. For random numbers suitable for security-sensitive work, see the crypto/rand package. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/math/rand#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/rand#re",
              "documentation": {
                "identifier": "re",
                "newPage": false,
                "searchKey": "rand.re",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const re"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst re = 7.69711747013104972\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rn",
              "documentation": {
                "identifier": "rn",
                "newPage": false,
                "searchKey": "rand.rn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rn = 3.442619855899\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rngLen",
              "documentation": {
                "identifier": "rngLen",
                "newPage": false,
                "searchKey": "rand.rngLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rngLen"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rngLen = 607\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rngTap",
              "documentation": {
                "identifier": "rngTap",
                "newPage": false,
                "searchKey": "rand.rngTap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rngTap"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rngTap = 273\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rngMax",
              "documentation": {
                "identifier": "rngMax",
                "newPage": false,
                "searchKey": "rand.rngMax",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rngMax"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rngMax = 1 << 63\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rngMask",
              "documentation": {
                "identifier": "rngMask",
                "newPage": false,
                "searchKey": "rand.rngMask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rngMask"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rngMask = rngMax - 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#int32max",
              "documentation": {
                "identifier": "int32max",
                "newPage": false,
                "searchKey": "rand.int32max",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const int32max"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst int32max = (1 << 31) - 1\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/math/rand#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/rand#ke",
              "documentation": {
                "identifier": "ke",
                "newPage": false,
                "searchKey": "rand.ke",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ke"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ke = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#we",
              "documentation": {
                "identifier": "we",
                "newPage": false,
                "searchKey": "rand.we",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var we"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar we = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#fe",
              "documentation": {
                "identifier": "fe",
                "newPage": false,
                "searchKey": "rand.fe",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fe"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fe = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#kn",
              "documentation": {
                "identifier": "kn",
                "newPage": false,
                "searchKey": "rand.kn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var kn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar kn = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#wn",
              "documentation": {
                "identifier": "wn",
                "newPage": false,
                "searchKey": "rand.wn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var wn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar wn = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#fn",
              "documentation": {
                "identifier": "fn",
                "newPage": false,
                "searchKey": "rand.fn",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var fn"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar fn = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#globalRand",
              "documentation": {
                "identifier": "globalRand",
                "newPage": false,
                "searchKey": "rand.globalRand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var globalRand"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globalRand = New(&lockedSource{src: NewSource(1).(*rngSource)})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rngCooked",
              "documentation": {
                "identifier": "rngCooked",
                "newPage": false,
                "searchKey": "rand.rngCooked",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rngCooked"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rngCooked [rngLen]int64 = ...\n```\n\nrngCooked used for seeding. See gen_cooked.go for details. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/math/rand#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/rand#Source",
              "documentation": {
                "identifier": "Source",
                "newPage": false,
                "searchKey": "rand.Source",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Source interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Source interface {\n\tInt63() int64\n\tSeed(seed int64)\n}\n```\n\nA Source represents a source of uniformly-distributed pseudo-random int64 values in the range [0, 1<<63). \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/math/rand#NewSource",
                    "documentation": {
                      "identifier": "NewSource",
                      "newPage": false,
                      "searchKey": "rand.NewSource",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewSource(seed int64) Source"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewSource(seed int64) Source\n```\n\nNewSource returns a new pseudo-random Source seeded with the given value. Unlike the default Source used by top-level functions, this source is not safe for concurrent use by multiple goroutines. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Source64",
              "documentation": {
                "identifier": "Source64",
                "newPage": false,
                "searchKey": "rand.Source64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Source64 interface"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Source64 interface {\n\tSource\n\tUint64() uint64\n}\n```\n\nA Source64 is a Source that can also generate uniformly-distributed pseudo-random uint64 values in the range [0, 1<<64) directly. If a Rand r's underlying Source s implements Source64, then r.Uint64 returns the result of one call to s.Uint64 instead of making two calls to s.Int63. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Rand",
              "documentation": {
                "identifier": "Rand",
                "newPage": false,
                "searchKey": "rand.Rand",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Rand struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Rand struct {\n\tsrc Source\n\ts64 Source64 // non-nil if src is source64\n\n\t// readVal contains remainder of 63-bit integer used for bytes\n\t// generation during most recent Read call.\n\t// It is saved so next Read call can start where the previous\n\t// one finished.\n\treadVal int64\n\t// readPos indicates the number of low-order bytes of readVal\n\t// that are still valid.\n\treadPos int8\n}\n```\n\nA Rand is a source of random numbers. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/math/rand#New",
                    "documentation": {
                      "identifier": "New",
                      "newPage": false,
                      "searchKey": "rand.New",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func New(src Source) *Rand"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc New(src Source) *Rand\n```\n\nNew returns a new Rand that uses random values from src to generate other random values. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.ExpFloat64",
                    "documentation": {
                      "identifier": "Rand.ExpFloat64",
                      "newPage": false,
                      "searchKey": "rand.Rand.ExpFloat64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) ExpFloat64() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) ExpFloat64() float64\n```\n\nExpFloat64 returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1). To produce a distribution with a different rate parameter, callers can adjust the output using: \n\n```\nsample = ExpFloat64() / desiredRateParameter\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.NormFloat64",
                    "documentation": {
                      "identifier": "Rand.NormFloat64",
                      "newPage": false,
                      "searchKey": "rand.Rand.NormFloat64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) NormFloat64() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) NormFloat64() float64\n```\n\nNormFloat64 returns a normally distributed float64 in the range -math.MaxFloat64 through +math.MaxFloat64 inclusive, with standard normal distribution (mean = 0, stddev = 1). To produce a different normal distribution, callers can adjust the output using: \n\n```\nsample = NormFloat64() * desiredStdDev + desiredMean\n\n```\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Seed",
                    "documentation": {
                      "identifier": "Rand.Seed",
                      "newPage": false,
                      "searchKey": "rand.Rand.Seed",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Seed(seed int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Seed(seed int64)\n```\n\nSeed uses the provided seed value to initialize the generator to a deterministic state. Seed should not be called concurrently with any other Rand method. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Int63",
                    "documentation": {
                      "identifier": "Rand.Int63",
                      "newPage": false,
                      "searchKey": "rand.Rand.Int63",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Int63() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Int63() int64\n```\n\nInt63 returns a non-negative pseudo-random 63-bit integer as an int64. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Uint32",
                    "documentation": {
                      "identifier": "Rand.Uint32",
                      "newPage": false,
                      "searchKey": "rand.Rand.Uint32",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Uint32() uint32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Uint32() uint32\n```\n\nUint32 returns a pseudo-random 32-bit value as a uint32. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Uint64",
                    "documentation": {
                      "identifier": "Rand.Uint64",
                      "newPage": false,
                      "searchKey": "rand.Rand.Uint64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Uint64() uint64\n```\n\nUint64 returns a pseudo-random 64-bit value as a uint64. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Int31",
                    "documentation": {
                      "identifier": "Rand.Int31",
                      "newPage": false,
                      "searchKey": "rand.Rand.Int31",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Int31() int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Int31() int32\n```\n\nInt31 returns a non-negative pseudo-random 31-bit integer as an int32. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Int",
                    "documentation": {
                      "identifier": "Rand.Int",
                      "newPage": false,
                      "searchKey": "rand.Rand.Int",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Int() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Int() int\n```\n\nInt returns a non-negative pseudo-random int. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Int63n",
                    "documentation": {
                      "identifier": "Rand.Int63n",
                      "newPage": false,
                      "searchKey": "rand.Rand.Int63n",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Int63n(n int64) int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Int63n(n int64) int64\n```\n\nInt63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n). It panics if n <= 0. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Int31n",
                    "documentation": {
                      "identifier": "Rand.Int31n",
                      "newPage": false,
                      "searchKey": "rand.Rand.Int31n",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Int31n(n int32) int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Int31n(n int32) int32\n```\n\nInt31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n). It panics if n <= 0. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.int31n",
                    "documentation": {
                      "identifier": "Rand.int31n",
                      "newPage": false,
                      "searchKey": "rand.Rand.int31n",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) int31n(n int32) int32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) int31n(n int32) int32\n```\n\nint31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n). n must be > 0, but int31n does not check this; the caller must ensure it. int31n exists because Int31n is inefficient, but Go 1 compatibility requires that the stream of values produced by math/rand remain unchanged. int31n can thus only be used internally, by newly introduced APIs. \n\nFor implementation details, see: [https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction](https://lemire.me/blog/2016/06/27/a-fast-alternative-to-the-modulo-reduction) [https://lemire.me/blog/2016/06/30/fast-random-shuffling](https://lemire.me/blog/2016/06/30/fast-random-shuffling) \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Intn",
                    "documentation": {
                      "identifier": "Rand.Intn",
                      "newPage": false,
                      "searchKey": "rand.Rand.Intn",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Intn(n int) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Intn(n int) int\n```\n\nIntn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n). It panics if n <= 0. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Float64",
                    "documentation": {
                      "identifier": "Rand.Float64",
                      "newPage": false,
                      "searchKey": "rand.Rand.Float64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Float64() float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Float64() float64\n```\n\nFloat64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Float32",
                    "documentation": {
                      "identifier": "Rand.Float32",
                      "newPage": false,
                      "searchKey": "rand.Rand.Float32",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Float32() float32"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Float32() float32\n```\n\nFloat32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Perm",
                    "documentation": {
                      "identifier": "Rand.Perm",
                      "newPage": false,
                      "searchKey": "rand.Rand.Perm",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Perm(n int) []int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Perm(n int) []int\n```\n\nPerm returns, as a slice of n ints, a pseudo-random permutation of the integers in the half-open interval [0,n). \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Shuffle",
                    "documentation": {
                      "identifier": "Rand.Shuffle",
                      "newPage": false,
                      "searchKey": "rand.Rand.Shuffle",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Shuffle(n int, swap func(i, j int))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Shuffle(n int, swap func(i, j int))\n```\n\nShuffle pseudo-randomizes the order of elements. n is the number of elements. Shuffle panics if n < 0. swap swaps the elements with indexes i and j. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Rand.Read",
                    "documentation": {
                      "identifier": "Rand.Read",
                      "newPage": false,
                      "searchKey": "rand.Rand.Read",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *Rand) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *Rand) Read(p []byte) (n int, err error)\n```\n\nRead generates len(p) random bytes and writes them into p. It always returns len(p) and a nil error. Read should not be called concurrently with any other Rand method. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/math/rand#lockedSource",
              "documentation": {
                "identifier": "lockedSource",
                "newPage": false,
                "searchKey": "rand.lockedSource",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type lockedSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lockedSource struct {\n\tlk  sync.Mutex\n\tsrc *rngSource\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/math/rand#lockedSource.Int63",
                    "documentation": {
                      "identifier": "lockedSource.Int63",
                      "newPage": false,
                      "searchKey": "rand.lockedSource.Int63",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *lockedSource) Int63() (n int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *lockedSource) Int63() (n int64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#lockedSource.Uint64",
                    "documentation": {
                      "identifier": "lockedSource.Uint64",
                      "newPage": false,
                      "searchKey": "rand.lockedSource.Uint64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *lockedSource) Uint64() (n uint64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *lockedSource) Uint64() (n uint64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#lockedSource.Seed",
                    "documentation": {
                      "identifier": "lockedSource.Seed",
                      "newPage": false,
                      "searchKey": "rand.lockedSource.Seed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *lockedSource) Seed(seed int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *lockedSource) Seed(seed int64)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#lockedSource.seedPos",
                    "documentation": {
                      "identifier": "lockedSource.seedPos",
                      "newPage": false,
                      "searchKey": "rand.lockedSource.seedPos",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *lockedSource) seedPos(seed int64, readPos *int8)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *lockedSource) seedPos(seed int64, readPos *int8)\n```\n\nseedPos implements Seed for a lockedSource without a race condition. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#lockedSource.read",
                    "documentation": {
                      "identifier": "lockedSource.read",
                      "newPage": false,
                      "searchKey": "rand.lockedSource.read",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *lockedSource) read(p []byte, readVal *int64, readPos *int8) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *lockedSource) read(p []byte, readVal *int64, readPos *int8) (n int, err error)\n```\n\nread implements Read for a lockedSource without a race condition. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/math/rand#rngSource",
              "documentation": {
                "identifier": "rngSource",
                "newPage": false,
                "searchKey": "rand.rngSource",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type rngSource struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rngSource struct {\n\ttap  int           // index into vec\n\tfeed int           // index into vec\n\tvec  [rngLen]int64 // current feedback register\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/math/rand#rngSource.Seed",
                    "documentation": {
                      "identifier": "rngSource.Seed",
                      "newPage": false,
                      "searchKey": "rand.rngSource.Seed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rng *rngSource) Seed(seed int64)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rng *rngSource) Seed(seed int64)\n```\n\nSeed uses the provided seed value to initialize the generator to a deterministic state. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#rngSource.Int63",
                    "documentation": {
                      "identifier": "rngSource.Int63",
                      "newPage": false,
                      "searchKey": "rand.rngSource.Int63",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rng *rngSource) Int63() int64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rng *rngSource) Int63() int64\n```\n\nInt63 returns a non-negative pseudo-random 63-bit integer as an int64. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#rngSource.Uint64",
                    "documentation": {
                      "identifier": "rngSource.Uint64",
                      "newPage": false,
                      "searchKey": "rand.rngSource.Uint64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (rng *rngSource) Uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (rng *rngSource) Uint64() uint64\n```\n\nUint64 returns a non-negative pseudo-random 64-bit integer as an uint64. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Zipf",
              "documentation": {
                "identifier": "Zipf",
                "newPage": false,
                "searchKey": "rand.Zipf",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Zipf struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Zipf struct {\n\tr            *Rand\n\timax         float64\n\tv            float64\n\tq            float64\n\ts            float64\n\toneminusQ    float64\n\toneminusQinv float64\n\thxm          float64\n\thx0minusHxm  float64\n}\n```\n\nA Zipf generates Zipf distributed variates. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/math/rand#NewZipf",
                    "documentation": {
                      "identifier": "NewZipf",
                      "newPage": false,
                      "searchKey": "rand.NewZipf",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewZipf(r *Rand, s float64, v float64, imax uint64) *Zipf\n```\n\nNewZipf returns a Zipf variate generator. The generator generates values k ∈ [0, imax] such that P(k) is proportional to (v + k) ** (-s). Requirements: s > 1 and v >= 1. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Zipf.h",
                    "documentation": {
                      "identifier": "Zipf.h",
                      "newPage": false,
                      "searchKey": "rand.Zipf.h",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (z *Zipf) h(x float64) float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (z *Zipf) h(x float64) float64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Zipf.hinv",
                    "documentation": {
                      "identifier": "Zipf.hinv",
                      "newPage": false,
                      "searchKey": "rand.Zipf.hinv",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (z *Zipf) hinv(x float64) float64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (z *Zipf) hinv(x float64) float64\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/math/rand#Zipf.Uint64",
                    "documentation": {
                      "identifier": "Zipf.Uint64",
                      "newPage": false,
                      "searchKey": "rand.Zipf.Uint64",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (z *Zipf) Uint64() uint64"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (z *Zipf) Uint64() uint64\n```\n\nUint64 returns a value drawn from the Zipf distribution described by the Zipf object. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/math/rand#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/math/rand#absInt32",
              "documentation": {
                "identifier": "absInt32",
                "newPage": false,
                "searchKey": "rand.absInt32",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func absInt32(i int32) uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc absInt32(i int32) uint32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#read",
              "documentation": {
                "identifier": "read",
                "newPage": false,
                "searchKey": "rand.read",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func read(p []byte, src Source, readVal *int64, readPos *int8) (n int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc read(p []byte, src Source, readVal *int64, readPos *int8) (n int, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Seed",
              "documentation": {
                "identifier": "Seed",
                "newPage": false,
                "searchKey": "rand.Seed",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Seed(seed int64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Seed(seed int64)\n```\n\nSeed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2³¹-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Int63",
              "documentation": {
                "identifier": "Int63",
                "newPage": false,
                "searchKey": "rand.Int63",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int63() int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int63() int64\n```\n\nInt63 returns a non-negative pseudo-random 63-bit integer as an int64 from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Uint32",
              "documentation": {
                "identifier": "Uint32",
                "newPage": false,
                "searchKey": "rand.Uint32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Uint32() uint32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Uint32() uint32\n```\n\nUint32 returns a pseudo-random 32-bit value as a uint32 from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Uint64",
              "documentation": {
                "identifier": "Uint64",
                "newPage": false,
                "searchKey": "rand.Uint64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Uint64() uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Uint64() uint64\n```\n\nUint64 returns a pseudo-random 64-bit value as a uint64 from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Int31",
              "documentation": {
                "identifier": "Int31",
                "newPage": false,
                "searchKey": "rand.Int31",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int31() int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int31() int32\n```\n\nInt31 returns a non-negative pseudo-random 31-bit integer as an int32 from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Int",
              "documentation": {
                "identifier": "Int",
                "newPage": false,
                "searchKey": "rand.Int",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int() int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int() int\n```\n\nInt returns a non-negative pseudo-random int from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Int63n",
              "documentation": {
                "identifier": "Int63n",
                "newPage": false,
                "searchKey": "rand.Int63n",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int63n(n int64) int64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int63n(n int64) int64\n```\n\nInt63n returns, as an int64, a non-negative pseudo-random number in the half-open interval [0,n) from the default Source. It panics if n <= 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Int31n",
              "documentation": {
                "identifier": "Int31n",
                "newPage": false,
                "searchKey": "rand.Int31n",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int31n(n int32) int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int31n(n int32) int32\n```\n\nInt31n returns, as an int32, a non-negative pseudo-random number in the half-open interval [0,n) from the default Source. It panics if n <= 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Intn",
              "documentation": {
                "identifier": "Intn",
                "newPage": false,
                "searchKey": "rand.Intn",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Intn(n int) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Intn(n int) int\n```\n\nIntn returns, as an int, a non-negative pseudo-random number in the half-open interval [0,n) from the default Source. It panics if n <= 0. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Float64",
              "documentation": {
                "identifier": "Float64",
                "newPage": false,
                "searchKey": "rand.Float64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float64() float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float64() float64\n```\n\nFloat64 returns, as a float64, a pseudo-random number in the half-open interval [0.0,1.0) from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Float32",
              "documentation": {
                "identifier": "Float32",
                "newPage": false,
                "searchKey": "rand.Float32",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Float32() float32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Float32() float32\n```\n\nFloat32 returns, as a float32, a pseudo-random number in the half-open interval [0.0,1.0) from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Perm",
              "documentation": {
                "identifier": "Perm",
                "newPage": false,
                "searchKey": "rand.Perm",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Perm(n int) []int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Perm(n int) []int\n```\n\nPerm returns, as a slice of n ints, a pseudo-random permutation of the integers in the half-open interval [0,n) from the default Source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Shuffle",
              "documentation": {
                "identifier": "Shuffle",
                "newPage": false,
                "searchKey": "rand.Shuffle",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Shuffle(n int, swap func(i, j int))"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Shuffle(n int, swap func(i, j int))\n```\n\nShuffle pseudo-randomizes the order of elements using the default Source. n is the number of elements. Shuffle panics if n < 0. swap swaps the elements with indexes i and j. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Read",
              "documentation": {
                "identifier": "Read",
                "newPage": false,
                "searchKey": "rand.Read",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func Read(p []byte) (n int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Read(p []byte) (n int, err error)\n```\n\nRead generates len(p) random bytes from the default Source and writes them into p. It always returns len(p) and a nil error. Read, unlike the Rand.Read method, is safe for concurrent use. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#NormFloat64",
              "documentation": {
                "identifier": "NormFloat64",
                "newPage": false,
                "searchKey": "rand.NormFloat64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NormFloat64() float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NormFloat64() float64\n```\n\nNormFloat64 returns a normally distributed float64 in the range [-math.MaxFloat64, +math.MaxFloat64] with standard normal distribution (mean = 0, stddev = 1) from the default Source. To produce a different normal distribution, callers can adjust the output using: \n\n```\nsample = NormFloat64() * desiredStdDev + desiredMean\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#ExpFloat64",
              "documentation": {
                "identifier": "ExpFloat64",
                "newPage": false,
                "searchKey": "rand.ExpFloat64",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExpFloat64() float64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExpFloat64() float64\n```\n\nExpFloat64 returns an exponentially distributed float64 in the range (0, +math.MaxFloat64] with an exponential distribution whose rate parameter (lambda) is 1 and whose mean is 1/lambda (1) from the default Source. To produce a distribution with a different rate parameter, callers can adjust the output using: \n\n```\nsample = ExpFloat64() / desiredRateParameter\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#seedrand",
              "documentation": {
                "identifier": "seedrand",
                "newPage": false,
                "searchKey": "rand.seedrand",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func seedrand(x int32) int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc seedrand(x int32) int32\n```\n\nseed rng x[n+1] = 48271 * x[n] mod (2**31 - 1) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#Int31nForTest",
              "documentation": {
                "identifier": "Int31nForTest",
                "newPage": false,
                "searchKey": "rand.Int31nForTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Int31nForTest(r *Rand, n int32) int32"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Int31nForTest(r *Rand, n int32) int32\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#GetNormalDistributionParameters",
              "documentation": {
                "identifier": "GetNormalDistributionParameters",
                "newPage": false,
                "searchKey": "rand.GetNormalDistributionParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GetNormalDistributionParameters() (float64, [128]uint32, [128]float32, [128]float32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GetNormalDistributionParameters() (float64, [128]uint32, [128]float32, [128]float32)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/math/rand#GetExponentialDistributionParameters",
              "documentation": {
                "identifier": "GetExponentialDistributionParameters",
                "newPage": false,
                "searchKey": "rand.GetExponentialDistributionParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GetExponentialDistributionParameters() (float64, [256]uint32, [256]float32, [256]float32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GetExponentialDistributionParameters() (float64, [256]uint32, [256]float32, [256]float32)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
