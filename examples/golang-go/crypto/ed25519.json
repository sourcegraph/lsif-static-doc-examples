{
  "pathID": "/crypto/ed25519",
  "documentation": {
    "identifier": "ed25519",
    "newPage": true,
    "searchKey": "crypto/ed25519",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package ed25519"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package ed25519 implements the Ed25519 signature algorithm. See [https://ed25519.cr.yp.to/](https://ed25519.cr.yp.to/). \n\nThese functions are also compatible with the “Ed25519” function defined in RFC 8032. However, unlike RFC 8032's formulation, this package's private key representation includes a public key suffix to make multiple signing operations with the same key more efficient. This package refers to the RFC 8032 private key as the “seed”. \n\n"
  },
  "children": [
    {
      "pathID": "/crypto/ed25519/internal"
    },
    {
      "node": {
        "pathID": "/crypto/ed25519#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/ed25519#PublicKeySize",
              "documentation": {
                "identifier": "PublicKeySize",
                "newPage": false,
                "searchKey": "ed25519.PublicKeySize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const PublicKeySize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PublicKeySize = 32\n```\n\nPublicKeySize is the size, in bytes, of public keys as used in this package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#PrivateKeySize",
              "documentation": {
                "identifier": "PrivateKeySize",
                "newPage": false,
                "searchKey": "ed25519.PrivateKeySize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const PrivateKeySize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PrivateKeySize = 64\n```\n\nPrivateKeySize is the size, in bytes, of private keys as used in this package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#SignatureSize",
              "documentation": {
                "identifier": "SignatureSize",
                "newPage": false,
                "searchKey": "ed25519.SignatureSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SignatureSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SignatureSize = 64\n```\n\nSignatureSize is the size, in bytes, of signatures generated and verified by this package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#SeedSize",
              "documentation": {
                "identifier": "SeedSize",
                "newPage": false,
                "searchKey": "ed25519.SeedSize",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const SeedSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SeedSize = 32\n```\n\nSeedSize is the size, in bytes, of private key seeds. These are the private key representations used by RFC 8032. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/ed25519#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/ed25519#PublicKey",
              "documentation": {
                "identifier": "PublicKey",
                "newPage": false,
                "searchKey": "ed25519.PublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PublicKey []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PublicKey []byte\n```\n\nPublicKey is the type of Ed25519 public keys. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/ed25519#GenerateKey",
                    "documentation": {
                      "identifier": "GenerateKey",
                      "newPage": false,
                      "searchKey": "ed25519.GenerateKey",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func GenerateKey(rand io.Reader) (PublicKey, PrivateKey, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc GenerateKey(rand io.Reader) (PublicKey, PrivateKey, error)\n```\n\nGenerateKey generates a public/private key pair using entropy from rand. If rand is nil, crypto/rand.Reader will be used. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/ed25519#PublicKey.Equal",
                    "documentation": {
                      "identifier": "PublicKey.Equal",
                      "newPage": false,
                      "searchKey": "ed25519.PublicKey.Equal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (pub PublicKey) Equal(x crypto.PublicKey) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (pub PublicKey) Equal(x crypto.PublicKey) bool\n```\n\nEqual reports whether pub and x have the same value. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#PrivateKey",
              "documentation": {
                "identifier": "PrivateKey",
                "newPage": false,
                "searchKey": "ed25519.PrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PrivateKey []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PrivateKey []byte\n```\n\nPrivateKey is the type of Ed25519 private keys. It implements crypto.Signer. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/ed25519#NewKeyFromSeed",
                    "documentation": {
                      "identifier": "NewKeyFromSeed",
                      "newPage": false,
                      "searchKey": "ed25519.NewKeyFromSeed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewKeyFromSeed(seed []byte) PrivateKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewKeyFromSeed(seed []byte) PrivateKey\n```\n\nNewKeyFromSeed calculates a private key from a seed. It will panic if len(seed) is not SeedSize. This function is provided for interoperability with RFC 8032. RFC 8032's private keys correspond to seeds in this package. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/ed25519#PrivateKey.Public",
                    "documentation": {
                      "identifier": "PrivateKey.Public",
                      "newPage": false,
                      "searchKey": "ed25519.PrivateKey.Public",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (priv PrivateKey) Public() crypto.PublicKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (priv PrivateKey) Public() crypto.PublicKey\n```\n\nPublic returns the PublicKey corresponding to priv. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/ed25519#PrivateKey.Equal",
                    "documentation": {
                      "identifier": "PrivateKey.Equal",
                      "newPage": false,
                      "searchKey": "ed25519.PrivateKey.Equal",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (priv PrivateKey) Equal(x crypto.PrivateKey) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (priv PrivateKey) Equal(x crypto.PrivateKey) bool\n```\n\nEqual reports whether priv and x have the same value. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/ed25519#PrivateKey.Seed",
                    "documentation": {
                      "identifier": "PrivateKey.Seed",
                      "newPage": false,
                      "searchKey": "ed25519.PrivateKey.Seed",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (priv PrivateKey) Seed() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (priv PrivateKey) Seed() []byte\n```\n\nSeed returns the private key seed corresponding to priv. It is provided for interoperability with RFC 8032. RFC 8032's private keys correspond to seeds in this package. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/ed25519#PrivateKey.Sign",
                    "documentation": {
                      "identifier": "PrivateKey.Sign",
                      "newPage": false,
                      "searchKey": "ed25519.PrivateKey.Sign",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (priv PrivateKey) Sign(rand io.Reader, message []byte, opts crypto.SignerOpts) (signature []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (priv PrivateKey) Sign(rand io.Reader, message []byte, opts crypto.SignerOpts) (signature []byte, err error)\n```\n\nSign signs the given message with priv. Ed25519 performs two passes over messages to be signed and therefore cannot handle pre-hashed messages. Thus opts.HashFunc() must return zero to indicate the message hasn't been hashed. This can be achieved by passing crypto.Hash(0) as the value for opts. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#zeroReader",
              "documentation": {
                "identifier": "zeroReader",
                "newPage": false,
                "searchKey": "ed25519.zeroReader",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type zeroReader struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype zeroReader struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/ed25519#zeroReader.Read",
                    "documentation": {
                      "identifier": "zeroReader.Read",
                      "newPage": false,
                      "searchKey": "ed25519.zeroReader.Read",
                      "tags": [
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (zeroReader) Read(buf []byte) (int, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (zeroReader) Read(buf []byte) (int, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/ed25519#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/ed25519#newKeyFromSeed",
              "documentation": {
                "identifier": "newKeyFromSeed",
                "newPage": false,
                "searchKey": "ed25519.newKeyFromSeed",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func newKeyFromSeed(privateKey, seed []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newKeyFromSeed(privateKey, seed []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#Sign",
              "documentation": {
                "identifier": "Sign",
                "newPage": false,
                "searchKey": "ed25519.Sign",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sign(privateKey PrivateKey, message []byte) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sign(privateKey PrivateKey, message []byte) []byte\n```\n\nSign signs the message with privateKey and returns a signature. It will panic if len(privateKey) is not PrivateKeySize. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#sign",
              "documentation": {
                "identifier": "sign",
                "newPage": false,
                "searchKey": "ed25519.sign",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func sign(signature, privateKey, message []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sign(signature, privateKey, message []byte)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#Verify",
              "documentation": {
                "identifier": "Verify",
                "newPage": false,
                "searchKey": "ed25519.Verify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Verify(publicKey PublicKey, message, sig []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Verify(publicKey PublicKey, message, sig []byte) bool\n```\n\nVerify reports whether sig is a valid signature of message by publicKey. It will panic if len(publicKey) is not PublicKeySize. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#TestSignVerify",
              "documentation": {
                "identifier": "TestSignVerify",
                "newPage": false,
                "searchKey": "ed25519.TestSignVerify",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignVerify(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignVerify(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#TestCryptoSigner",
              "documentation": {
                "identifier": "TestCryptoSigner",
                "newPage": false,
                "searchKey": "ed25519.TestCryptoSigner",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCryptoSigner(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCryptoSigner(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#TestEqual",
              "documentation": {
                "identifier": "TestEqual",
                "newPage": false,
                "searchKey": "ed25519.TestEqual",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEqual(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEqual(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#TestGolden",
              "documentation": {
                "identifier": "TestGolden",
                "newPage": false,
                "searchKey": "ed25519.TestGolden",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGolden(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGolden(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#TestMalleability",
              "documentation": {
                "identifier": "TestMalleability",
                "newPage": false,
                "searchKey": "ed25519.TestMalleability",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMalleability(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMalleability(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#TestAllocations",
              "documentation": {
                "identifier": "TestAllocations",
                "newPage": false,
                "searchKey": "ed25519.TestAllocations",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAllocations(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAllocations(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#BenchmarkKeyGeneration",
              "documentation": {
                "identifier": "BenchmarkKeyGeneration",
                "newPage": false,
                "searchKey": "ed25519.BenchmarkKeyGeneration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkKeyGeneration(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkKeyGeneration(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#BenchmarkNewKeyFromSeed",
              "documentation": {
                "identifier": "BenchmarkNewKeyFromSeed",
                "newPage": false,
                "searchKey": "ed25519.BenchmarkNewKeyFromSeed",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkNewKeyFromSeed(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkNewKeyFromSeed(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#BenchmarkSigning",
              "documentation": {
                "identifier": "BenchmarkSigning",
                "newPage": false,
                "searchKey": "ed25519.BenchmarkSigning",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkSigning(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkSigning(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/ed25519#BenchmarkVerification",
              "documentation": {
                "identifier": "BenchmarkVerification",
                "newPage": false,
                "searchKey": "ed25519.BenchmarkVerification",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkVerification(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkVerification(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
