{
  "pathID": "/crypto/x509",
  "documentation": {
    "identifier": "x509",
    "newPage": true,
    "searchKey": "crypto/x509",
    "tags": [
      "exported"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package x509"
  },
  "detail": {
    "kind": "markdown",
    "value": "Copyright 2021 The Go Authors. All rights reserved. Use of this source code is governed by a BSD-style license that can be found in the LICENSE file. \n\nPackage x509 parses X.509-encoded keys and certificates. \n\n"
  },
  "children": [
    {
      "pathID": "/crypto/x509/internal"
    },
    {
      "node": {
        "pathID": "/crypto/x509#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/x509#PEMCipherDES",
              "documentation": {
                "identifier": "PEMCipherDES",
                "newPage": false,
                "searchKey": "x509.PEMCipherDES",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PEMCipherDES"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PEMCipherDES\n```\n\nPossible values for the EncryptPEMBlock encryption algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PEMCipher3DES",
              "documentation": {
                "identifier": "PEMCipher3DES",
                "newPage": false,
                "searchKey": "x509.PEMCipher3DES",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PEMCipher3DES"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PEMCipher3DES\n```\n\nPossible values for the EncryptPEMBlock encryption algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PEMCipherAES128",
              "documentation": {
                "identifier": "PEMCipherAES128",
                "newPage": false,
                "searchKey": "x509.PEMCipherAES128",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PEMCipherAES128"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PEMCipherAES128\n```\n\nPossible values for the EncryptPEMBlock encryption algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PEMCipherAES192",
              "documentation": {
                "identifier": "PEMCipherAES192",
                "newPage": false,
                "searchKey": "x509.PEMCipherAES192",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PEMCipherAES192"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PEMCipherAES192\n```\n\nPossible values for the EncryptPEMBlock encryption algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PEMCipherAES256",
              "documentation": {
                "identifier": "PEMCipherAES256",
                "newPage": false,
                "searchKey": "x509.PEMCipherAES256",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PEMCipherAES256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PEMCipherAES256\n```\n\nPossible values for the EncryptPEMBlock encryption algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecPrivKeyVersion",
              "documentation": {
                "identifier": "ecPrivKeyVersion",
                "newPage": false,
                "searchKey": "x509.ecPrivKeyVersion",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ecPrivKeyVersion"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ecPrivKeyVersion = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#NotAuthorizedToSign",
              "documentation": {
                "identifier": "NotAuthorizedToSign",
                "newPage": false,
                "searchKey": "x509.NotAuthorizedToSign",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NotAuthorizedToSign"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NotAuthorizedToSign InvalidReason = iota\n```\n\nNotAuthorizedToSign results when a certificate is signed by another which isn't marked as a CA certificate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#Expired",
              "documentation": {
                "identifier": "Expired",
                "newPage": false,
                "searchKey": "x509.Expired",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Expired"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Expired\n```\n\nExpired results when a certificate has expired, based on the time given in the VerifyOptions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CANotAuthorizedForThisName",
              "documentation": {
                "identifier": "CANotAuthorizedForThisName",
                "newPage": false,
                "searchKey": "x509.CANotAuthorizedForThisName",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CANotAuthorizedForThisName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CANotAuthorizedForThisName\n```\n\nCANotAuthorizedForThisName results when an intermediate or root certificate has a name constraint which doesn't permit a DNS or other name (including IP address) in the leaf certificate. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TooManyIntermediates",
              "documentation": {
                "identifier": "TooManyIntermediates",
                "newPage": false,
                "searchKey": "x509.TooManyIntermediates",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TooManyIntermediates"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TooManyIntermediates\n```\n\nTooManyIntermediates results when a path length constraint is violated. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#IncompatibleUsage",
              "documentation": {
                "identifier": "IncompatibleUsage",
                "newPage": false,
                "searchKey": "x509.IncompatibleUsage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const IncompatibleUsage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst IncompatibleUsage\n```\n\nIncompatibleUsage results when the certificate's key usage indicates that it may only be used for a different purpose. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#NameMismatch",
              "documentation": {
                "identifier": "NameMismatch",
                "newPage": false,
                "searchKey": "x509.NameMismatch",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NameMismatch"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NameMismatch\n```\n\nNameMismatch results when the subject name of a parent certificate does not match the issuer name in the child. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#NameConstraintsWithoutSANs",
              "documentation": {
                "identifier": "NameConstraintsWithoutSANs",
                "newPage": false,
                "searchKey": "x509.NameConstraintsWithoutSANs",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const NameConstraintsWithoutSANs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst NameConstraintsWithoutSANs\n```\n\nNameConstraintsWithoutSANs is a legacy error and is no longer returned. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#UnconstrainedName",
              "documentation": {
                "identifier": "UnconstrainedName",
                "newPage": false,
                "searchKey": "x509.UnconstrainedName",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnconstrainedName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnconstrainedName\n```\n\nUnconstrainedName results when a CA certificate contains permitted name constraints, but leaf certificate contains a name of an unsupported or unconstrained type. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TooManyConstraints",
              "documentation": {
                "identifier": "TooManyConstraints",
                "newPage": false,
                "searchKey": "x509.TooManyConstraints",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const TooManyConstraints"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst TooManyConstraints\n```\n\nTooManyConstraints results when the number of comparison operations needed to check a certificate exceeds the limit set by VerifyOptions.MaxConstraintComparisions. This limit exists to prevent pathological certificates can consuming excessive amounts of CPU time to verify. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CANotAuthorizedForExtKeyUsage",
              "documentation": {
                "identifier": "CANotAuthorizedForExtKeyUsage",
                "newPage": false,
                "searchKey": "x509.CANotAuthorizedForExtKeyUsage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const CANotAuthorizedForExtKeyUsage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst CANotAuthorizedForExtKeyUsage\n```\n\nCANotAuthorizedForExtKeyUsage results when an intermediate or root certificate does not permit a requested extended key usage. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#leafCertificate",
              "documentation": {
                "identifier": "leafCertificate",
                "newPage": false,
                "searchKey": "x509.leafCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const leafCertificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst leafCertificate = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#intermediateCertificate",
              "documentation": {
                "identifier": "intermediateCertificate",
                "newPage": false,
                "searchKey": "x509.intermediateCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const intermediateCertificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst intermediateCertificate\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rootCertificate",
              "documentation": {
                "identifier": "rootCertificate",
                "newPage": false,
                "searchKey": "x509.rootCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rootCertificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rootCertificate\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#maxChainSignatureChecks",
              "documentation": {
                "identifier": "maxChainSignatureChecks",
                "newPage": false,
                "searchKey": "x509.maxChainSignatureChecks",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const maxChainSignatureChecks"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst maxChainSignatureChecks = 100\n```\n\nmaxChainSignatureChecks is the maximum number of CheckSignatureFrom calls that an invocation of buildChains will (transitively) make. Most chains are less than 15 certificates long, so this leaves space for multiple chains and for failed checks due to different intermediates having the same Subject. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#UnknownSignatureAlgorithm",
              "documentation": {
                "identifier": "UnknownSignatureAlgorithm",
                "newPage": false,
                "searchKey": "x509.UnknownSignatureAlgorithm",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnknownSignatureAlgorithm"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnknownSignatureAlgorithm SignatureAlgorithm = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MD2WithRSA",
              "documentation": {
                "identifier": "MD2WithRSA",
                "newPage": false,
                "searchKey": "x509.MD2WithRSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MD2WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MD2WithRSA // Unsupported.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MD5WithRSA",
              "documentation": {
                "identifier": "MD5WithRSA",
                "newPage": false,
                "searchKey": "x509.MD5WithRSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const MD5WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst MD5WithRSA // Only supported for signing, not verification.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA1WithRSA",
              "documentation": {
                "identifier": "SHA1WithRSA",
                "newPage": false,
                "searchKey": "x509.SHA1WithRSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA1WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA1WithRSA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA256WithRSA",
              "documentation": {
                "identifier": "SHA256WithRSA",
                "newPage": false,
                "searchKey": "x509.SHA256WithRSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA256WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA256WithRSA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA384WithRSA",
              "documentation": {
                "identifier": "SHA384WithRSA",
                "newPage": false,
                "searchKey": "x509.SHA384WithRSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA384WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA384WithRSA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA512WithRSA",
              "documentation": {
                "identifier": "SHA512WithRSA",
                "newPage": false,
                "searchKey": "x509.SHA512WithRSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA512WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA512WithRSA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#DSAWithSHA1",
              "documentation": {
                "identifier": "DSAWithSHA1",
                "newPage": false,
                "searchKey": "x509.DSAWithSHA1",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DSAWithSHA1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DSAWithSHA1 // Unsupported.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#DSAWithSHA256",
              "documentation": {
                "identifier": "DSAWithSHA256",
                "newPage": false,
                "searchKey": "x509.DSAWithSHA256",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DSAWithSHA256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DSAWithSHA256 // Unsupported.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ECDSAWithSHA1",
              "documentation": {
                "identifier": "ECDSAWithSHA1",
                "newPage": false,
                "searchKey": "x509.ECDSAWithSHA1",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ECDSAWithSHA1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ECDSAWithSHA1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ECDSAWithSHA256",
              "documentation": {
                "identifier": "ECDSAWithSHA256",
                "newPage": false,
                "searchKey": "x509.ECDSAWithSHA256",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ECDSAWithSHA256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ECDSAWithSHA256\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ECDSAWithSHA384",
              "documentation": {
                "identifier": "ECDSAWithSHA384",
                "newPage": false,
                "searchKey": "x509.ECDSAWithSHA384",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ECDSAWithSHA384"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ECDSAWithSHA384\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ECDSAWithSHA512",
              "documentation": {
                "identifier": "ECDSAWithSHA512",
                "newPage": false,
                "searchKey": "x509.ECDSAWithSHA512",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ECDSAWithSHA512"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ECDSAWithSHA512\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA256WithRSAPSS",
              "documentation": {
                "identifier": "SHA256WithRSAPSS",
                "newPage": false,
                "searchKey": "x509.SHA256WithRSAPSS",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA256WithRSAPSS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA256WithRSAPSS\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA384WithRSAPSS",
              "documentation": {
                "identifier": "SHA384WithRSAPSS",
                "newPage": false,
                "searchKey": "x509.SHA384WithRSAPSS",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA384WithRSAPSS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA384WithRSAPSS\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SHA512WithRSAPSS",
              "documentation": {
                "identifier": "SHA512WithRSAPSS",
                "newPage": false,
                "searchKey": "x509.SHA512WithRSAPSS",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const SHA512WithRSAPSS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst SHA512WithRSAPSS\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PureEd25519",
              "documentation": {
                "identifier": "PureEd25519",
                "newPage": false,
                "searchKey": "x509.PureEd25519",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const PureEd25519"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst PureEd25519\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#UnknownPublicKeyAlgorithm",
              "documentation": {
                "identifier": "UnknownPublicKeyAlgorithm",
                "newPage": false,
                "searchKey": "x509.UnknownPublicKeyAlgorithm",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const UnknownPublicKeyAlgorithm"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst UnknownPublicKeyAlgorithm PublicKeyAlgorithm = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#RSA",
              "documentation": {
                "identifier": "RSA",
                "newPage": false,
                "searchKey": "x509.RSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const RSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst RSA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#DSA",
              "documentation": {
                "identifier": "DSA",
                "newPage": false,
                "searchKey": "x509.DSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const DSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst DSA // Unsupported.\n\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ECDSA",
              "documentation": {
                "identifier": "ECDSA",
                "newPage": false,
                "searchKey": "x509.ECDSA",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ECDSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ECDSA\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#Ed25519",
              "documentation": {
                "identifier": "Ed25519",
                "newPage": false,
                "searchKey": "x509.Ed25519",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const Ed25519"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst Ed25519\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageDigitalSignature",
              "documentation": {
                "identifier": "KeyUsageDigitalSignature",
                "newPage": false,
                "searchKey": "x509.KeyUsageDigitalSignature",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageDigitalSignature"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageDigitalSignature KeyUsage = 1 << iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageContentCommitment",
              "documentation": {
                "identifier": "KeyUsageContentCommitment",
                "newPage": false,
                "searchKey": "x509.KeyUsageContentCommitment",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageContentCommitment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageContentCommitment\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageKeyEncipherment",
              "documentation": {
                "identifier": "KeyUsageKeyEncipherment",
                "newPage": false,
                "searchKey": "x509.KeyUsageKeyEncipherment",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageKeyEncipherment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageKeyEncipherment\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageDataEncipherment",
              "documentation": {
                "identifier": "KeyUsageDataEncipherment",
                "newPage": false,
                "searchKey": "x509.KeyUsageDataEncipherment",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageDataEncipherment"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageDataEncipherment\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageKeyAgreement",
              "documentation": {
                "identifier": "KeyUsageKeyAgreement",
                "newPage": false,
                "searchKey": "x509.KeyUsageKeyAgreement",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageKeyAgreement"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageKeyAgreement\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageCertSign",
              "documentation": {
                "identifier": "KeyUsageCertSign",
                "newPage": false,
                "searchKey": "x509.KeyUsageCertSign",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageCertSign"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageCertSign\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageCRLSign",
              "documentation": {
                "identifier": "KeyUsageCRLSign",
                "newPage": false,
                "searchKey": "x509.KeyUsageCRLSign",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageCRLSign"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageCRLSign\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageEncipherOnly",
              "documentation": {
                "identifier": "KeyUsageEncipherOnly",
                "newPage": false,
                "searchKey": "x509.KeyUsageEncipherOnly",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageEncipherOnly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageEncipherOnly\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsageDecipherOnly",
              "documentation": {
                "identifier": "KeyUsageDecipherOnly",
                "newPage": false,
                "searchKey": "x509.KeyUsageDecipherOnly",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const KeyUsageDecipherOnly"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst KeyUsageDecipherOnly\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageAny",
              "documentation": {
                "identifier": "ExtKeyUsageAny",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageAny",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageAny"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageAny ExtKeyUsage = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageServerAuth",
              "documentation": {
                "identifier": "ExtKeyUsageServerAuth",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageServerAuth",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageServerAuth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageServerAuth\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageClientAuth",
              "documentation": {
                "identifier": "ExtKeyUsageClientAuth",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageClientAuth",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageClientAuth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageClientAuth\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageCodeSigning",
              "documentation": {
                "identifier": "ExtKeyUsageCodeSigning",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageCodeSigning",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageCodeSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageCodeSigning\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageEmailProtection",
              "documentation": {
                "identifier": "ExtKeyUsageEmailProtection",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageEmailProtection",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageEmailProtection"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageEmailProtection\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageIPSECEndSystem",
              "documentation": {
                "identifier": "ExtKeyUsageIPSECEndSystem",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageIPSECEndSystem",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageIPSECEndSystem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageIPSECEndSystem\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageIPSECTunnel",
              "documentation": {
                "identifier": "ExtKeyUsageIPSECTunnel",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageIPSECTunnel",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageIPSECTunnel"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageIPSECTunnel\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageIPSECUser",
              "documentation": {
                "identifier": "ExtKeyUsageIPSECUser",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageIPSECUser",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageIPSECUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageIPSECUser\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageTimeStamping",
              "documentation": {
                "identifier": "ExtKeyUsageTimeStamping",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageTimeStamping",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageTimeStamping"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageTimeStamping\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageOCSPSigning",
              "documentation": {
                "identifier": "ExtKeyUsageOCSPSigning",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageOCSPSigning",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageOCSPSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageOCSPSigning\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageMicrosoftServerGatedCrypto",
              "documentation": {
                "identifier": "ExtKeyUsageMicrosoftServerGatedCrypto",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageMicrosoftServerGatedCrypto",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageMicrosoftServerGatedCrypto"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageMicrosoftServerGatedCrypto\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageNetscapeServerGatedCrypto",
              "documentation": {
                "identifier": "ExtKeyUsageNetscapeServerGatedCrypto",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageNetscapeServerGatedCrypto",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageNetscapeServerGatedCrypto"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageNetscapeServerGatedCrypto\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageMicrosoftCommercialCodeSigning",
              "documentation": {
                "identifier": "ExtKeyUsageMicrosoftCommercialCodeSigning",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageMicrosoftCommercialCodeSigning",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageMicrosoftCommercialCodeSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageMicrosoftCommercialCodeSigning\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsageMicrosoftKernelCodeSigning",
              "documentation": {
                "identifier": "ExtKeyUsageMicrosoftKernelCodeSigning",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsageMicrosoftKernelCodeSigning",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const ExtKeyUsageMicrosoftKernelCodeSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ExtKeyUsageMicrosoftKernelCodeSigning\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameTypeEmail",
              "documentation": {
                "identifier": "nameTypeEmail",
                "newPage": false,
                "searchKey": "x509.nameTypeEmail",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nameTypeEmail"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nameTypeEmail = 1\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameTypeDNS",
              "documentation": {
                "identifier": "nameTypeDNS",
                "newPage": false,
                "searchKey": "x509.nameTypeDNS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nameTypeDNS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nameTypeDNS = 2\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameTypeURI",
              "documentation": {
                "identifier": "nameTypeURI",
                "newPage": false,
                "searchKey": "x509.nameTypeURI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nameTypeURI"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nameTypeURI = 6\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameTypeIP",
              "documentation": {
                "identifier": "nameTypeIP",
                "newPage": false,
                "searchKey": "x509.nameTypeIP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const nameTypeIP"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst nameTypeIP = 7\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testNameConstraintsAgainstOpenSSL",
              "documentation": {
                "identifier": "testNameConstraintsAgainstOpenSSL",
                "newPage": false,
                "searchKey": "x509.testNameConstraintsAgainstOpenSSL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const testNameConstraintsAgainstOpenSSL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst testNameConstraintsAgainstOpenSSL = false\n```\n\ntestNameConstraintsAgainstOpenSSL can be set to true to run tests against the system OpenSSL. This is disabled by default because Go cannot depend on having OpenSSL installed at testing time. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#debugOpenSSLFailure",
              "documentation": {
                "identifier": "debugOpenSSLFailure",
                "newPage": false,
                "searchKey": "x509.debugOpenSSLFailure",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const debugOpenSSLFailure"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst debugOpenSSLFailure = false\n```\n\ndebugOpenSSLFailure can be set to true, when testNameConstraintsAgainstOpenSSL is also true, to cause intermediate files to be preserved for debugging. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hexPKCS8TestPKCS1Key",
              "documentation": {
                "identifier": "hexPKCS8TestPKCS1Key",
                "newPage": false,
                "searchKey": "x509.hexPKCS8TestPKCS1Key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hexPKCS8TestPKCS1Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hexPKCS8TestPKCS1Key = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hexPKCS8TestECKey",
              "documentation": {
                "identifier": "hexPKCS8TestECKey",
                "newPage": false,
                "searchKey": "x509.hexPKCS8TestECKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hexPKCS8TestECKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hexPKCS8TestECKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hexECTestPKCS1Key",
              "documentation": {
                "identifier": "hexECTestPKCS1Key",
                "newPage": false,
                "searchKey": "x509.hexECTestPKCS1Key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hexECTestPKCS1Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hexECTestPKCS1Key = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hexECTestPKCS8Key",
              "documentation": {
                "identifier": "hexECTestPKCS8Key",
                "newPage": false,
                "searchKey": "x509.hexECTestPKCS8Key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hexECTestPKCS8Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hexECTestPKCS8Key = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#geoTrustRoot",
              "documentation": {
                "identifier": "geoTrustRoot",
                "newPage": false,
                "searchKey": "x509.geoTrustRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const geoTrustRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst geoTrustRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#giag2Intermediate",
              "documentation": {
                "identifier": "giag2Intermediate",
                "newPage": false,
                "searchKey": "x509.giag2Intermediate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const giag2Intermediate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst giag2Intermediate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#googleLeaf",
              "documentation": {
                "identifier": "googleLeaf",
                "newPage": false,
                "searchKey": "x509.googleLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const googleLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst googleLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#googleLeafWithInvalidHash",
              "documentation": {
                "identifier": "googleLeafWithInvalidHash",
                "newPage": false,
                "searchKey": "x509.googleLeafWithInvalidHash",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const googleLeafWithInvalidHash"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst googleLeafWithInvalidHash = ...\n```\n\ngoogleLeafWithInvalidHash is the same as googleLeaf, but the signature algorithm in the certificate contains a nonsense OID. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#dnssecExpLeaf",
              "documentation": {
                "identifier": "dnssecExpLeaf",
                "newPage": false,
                "searchKey": "x509.dnssecExpLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const dnssecExpLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst dnssecExpLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#startComIntermediate",
              "documentation": {
                "identifier": "startComIntermediate",
                "newPage": false,
                "searchKey": "x509.startComIntermediate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const startComIntermediate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst startComIntermediate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#startComRoot",
              "documentation": {
                "identifier": "startComRoot",
                "newPage": false,
                "searchKey": "x509.startComRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const startComRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst startComRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#smimeLeaf",
              "documentation": {
                "identifier": "smimeLeaf",
                "newPage": false,
                "searchKey": "x509.smimeLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const smimeLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst smimeLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#smimeIntermediate",
              "documentation": {
                "identifier": "smimeIntermediate",
                "newPage": false,
                "searchKey": "x509.smimeIntermediate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const smimeIntermediate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst smimeIntermediate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#smimeRoot",
              "documentation": {
                "identifier": "smimeRoot",
                "newPage": false,
                "searchKey": "x509.smimeRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const smimeRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst smimeRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#comodoRSAAuthority",
              "documentation": {
                "identifier": "comodoRSAAuthority",
                "newPage": false,
                "searchKey": "x509.comodoRSAAuthority",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const comodoRSAAuthority"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst comodoRSAAuthority = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#addTrustRoot",
              "documentation": {
                "identifier": "addTrustRoot",
                "newPage": false,
                "searchKey": "x509.addTrustRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const addTrustRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst addTrustRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#selfSigned",
              "documentation": {
                "identifier": "selfSigned",
                "newPage": false,
                "searchKey": "x509.selfSigned",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const selfSigned"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst selfSigned = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#issuerSubjectMatchRoot",
              "documentation": {
                "identifier": "issuerSubjectMatchRoot",
                "newPage": false,
                "searchKey": "x509.issuerSubjectMatchRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const issuerSubjectMatchRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst issuerSubjectMatchRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#issuerSubjectMatchLeaf",
              "documentation": {
                "identifier": "issuerSubjectMatchLeaf",
                "newPage": false,
                "searchKey": "x509.issuerSubjectMatchLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const issuerSubjectMatchLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst issuerSubjectMatchLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#x509v1TestRoot",
              "documentation": {
                "identifier": "x509v1TestRoot",
                "newPage": false,
                "searchKey": "x509.x509v1TestRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const x509v1TestRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst x509v1TestRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#x509v1TestIntermediate",
              "documentation": {
                "identifier": "x509v1TestIntermediate",
                "newPage": false,
                "searchKey": "x509.x509v1TestIntermediate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const x509v1TestIntermediate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst x509v1TestIntermediate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#x509v1TestLeaf",
              "documentation": {
                "identifier": "x509v1TestLeaf",
                "newPage": false,
                "searchKey": "x509.x509v1TestLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const x509v1TestLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst x509v1TestLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ignoreCNWithSANRoot",
              "documentation": {
                "identifier": "ignoreCNWithSANRoot",
                "newPage": false,
                "searchKey": "x509.ignoreCNWithSANRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ignoreCNWithSANRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ignoreCNWithSANRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ignoreCNWithSANLeaf",
              "documentation": {
                "identifier": "ignoreCNWithSANLeaf",
                "newPage": false,
                "searchKey": "x509.ignoreCNWithSANLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ignoreCNWithSANLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ignoreCNWithSANLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#excludedNamesLeaf",
              "documentation": {
                "identifier": "excludedNamesLeaf",
                "newPage": false,
                "searchKey": "x509.excludedNamesLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const excludedNamesLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst excludedNamesLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#excludedNamesIntermediate",
              "documentation": {
                "identifier": "excludedNamesIntermediate",
                "newPage": false,
                "searchKey": "x509.excludedNamesIntermediate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const excludedNamesIntermediate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst excludedNamesIntermediate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#excludedNamesRoot",
              "documentation": {
                "identifier": "excludedNamesRoot",
                "newPage": false,
                "searchKey": "x509.excludedNamesRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const excludedNamesRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst excludedNamesRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#invalidCNRoot",
              "documentation": {
                "identifier": "invalidCNRoot",
                "newPage": false,
                "searchKey": "x509.invalidCNRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const invalidCNRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst invalidCNRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#validCNWithoutSAN",
              "documentation": {
                "identifier": "validCNWithoutSAN",
                "newPage": false,
                "searchKey": "x509.validCNWithoutSAN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const validCNWithoutSAN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst validCNWithoutSAN = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rootWithoutSKID",
              "documentation": {
                "identifier": "rootWithoutSKID",
                "newPage": false,
                "searchKey": "x509.rootWithoutSKID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rootWithoutSKID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rootWithoutSKID = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#leafWithAKID",
              "documentation": {
                "identifier": "leafWithAKID",
                "newPage": false,
                "searchKey": "x509.leafWithAKID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const leafWithAKID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst leafWithAKID = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rootMatchingSKIDMismatchingSubject",
              "documentation": {
                "identifier": "rootMatchingSKIDMismatchingSubject",
                "newPage": false,
                "searchKey": "x509.rootMatchingSKIDMismatchingSubject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rootMatchingSKIDMismatchingSubject"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rootMatchingSKIDMismatchingSubject = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rootMismatchingSKIDMatchingSubject",
              "documentation": {
                "identifier": "rootMismatchingSKIDMatchingSubject",
                "newPage": false,
                "searchKey": "x509.rootMismatchingSKIDMatchingSubject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const rootMismatchingSKIDMatchingSubject"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst rootMismatchingSKIDMatchingSubject = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#leafMatchingAKIDMatchingIssuer",
              "documentation": {
                "identifier": "leafMatchingAKIDMatchingIssuer",
                "newPage": false,
                "searchKey": "x509.leafMatchingAKIDMatchingIssuer",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const leafMatchingAKIDMatchingIssuer"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst leafMatchingAKIDMatchingIssuer = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#selfSignedWithCommonName",
              "documentation": {
                "identifier": "selfSignedWithCommonName",
                "newPage": false,
                "searchKey": "x509.selfSignedWithCommonName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const selfSignedWithCommonName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst selfSignedWithCommonName = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#selfSignedNoCommonNameWithOrgName",
              "documentation": {
                "identifier": "selfSignedNoCommonNameWithOrgName",
                "newPage": false,
                "searchKey": "x509.selfSignedNoCommonNameWithOrgName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const selfSignedNoCommonNameWithOrgName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst selfSignedNoCommonNameWithOrgName = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#selfSignedNoCommonNameNoOrgName",
              "documentation": {
                "identifier": "selfSignedNoCommonNameNoOrgName",
                "newPage": false,
                "searchKey": "x509.selfSignedNoCommonNameNoOrgName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const selfSignedNoCommonNameNoOrgName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst selfSignedNoCommonNameNoOrgName = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#criticalExtRoot",
              "documentation": {
                "identifier": "criticalExtRoot",
                "newPage": false,
                "searchKey": "x509.criticalExtRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const criticalExtRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst criticalExtRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#criticalExtIntermediate",
              "documentation": {
                "identifier": "criticalExtIntermediate",
                "newPage": false,
                "searchKey": "x509.criticalExtIntermediate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const criticalExtIntermediate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst criticalExtIntermediate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#criticalExtLeafWithExt",
              "documentation": {
                "identifier": "criticalExtLeafWithExt",
                "newPage": false,
                "searchKey": "x509.criticalExtLeafWithExt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const criticalExtLeafWithExt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst criticalExtLeafWithExt = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#criticalExtIntermediateWithExt",
              "documentation": {
                "identifier": "criticalExtIntermediateWithExt",
                "newPage": false,
                "searchKey": "x509.criticalExtIntermediateWithExt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const criticalExtIntermediateWithExt"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst criticalExtIntermediateWithExt = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#criticalExtLeaf",
              "documentation": {
                "identifier": "criticalExtLeaf",
                "newPage": false,
                "searchKey": "x509.criticalExtLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const criticalExtLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst criticalExtLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ed25519Certificate",
              "documentation": {
                "identifier": "ed25519Certificate",
                "newPage": false,
                "searchKey": "x509.ed25519Certificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ed25519Certificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ed25519Certificate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemCertificate",
              "documentation": {
                "identifier": "pemCertificate",
                "newPage": false,
                "searchKey": "x509.pemCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemCertificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemCertificate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ed25519CRLCertificate",
              "documentation": {
                "identifier": "ed25519CRLCertificate",
                "newPage": false,
                "searchKey": "x509.ed25519CRLCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const ed25519CRLCertificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst ed25519CRLCertificate = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#derCRLBase64",
              "documentation": {
                "identifier": "derCRLBase64",
                "newPage": false,
                "searchKey": "x509.derCRLBase64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const derCRLBase64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst derCRLBase64 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemCRLBase64",
              "documentation": {
                "identifier": "pemCRLBase64",
                "newPage": false,
                "searchKey": "x509.pemCRLBase64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const pemCRLBase64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst pemCRLBase64 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certMissingRSANULL",
              "documentation": {
                "identifier": "certMissingRSANULL",
                "newPage": false,
                "searchKey": "x509.certMissingRSANULL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const certMissingRSANULL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst certMissingRSANULL = ...\n```\n\ncertMissingRSANULL contains an RSA public key where the AlgorithmIdentifier parameters are omitted rather than being an ASN.1 NULL. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certISOOID",
              "documentation": {
                "identifier": "certISOOID",
                "newPage": false,
                "searchKey": "x509.certISOOID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const certISOOID"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst certISOOID = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certMultipleRDN",
              "documentation": {
                "identifier": "certMultipleRDN",
                "newPage": false,
                "searchKey": "x509.certMultipleRDN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const certMultipleRDN"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst certMultipleRDN = ...\n```\n\ncertMultipleRDN contains a RelativeDistinguishedName with two elements (the common name and serial number). This particular certificate was the first such certificate in the “Pilot” Certificate Transparency log. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#emptyNameConstraintsPEM",
              "documentation": {
                "identifier": "emptyNameConstraintsPEM",
                "newPage": false,
                "searchKey": "x509.emptyNameConstraintsPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const emptyNameConstraintsPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst emptyNameConstraintsPEM = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#criticalNameConstraintWithUnknownTypePEM",
              "documentation": {
                "identifier": "criticalNameConstraintWithUnknownTypePEM",
                "newPage": false,
                "searchKey": "x509.criticalNameConstraintWithUnknownTypePEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const criticalNameConstraintWithUnknownTypePEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst criticalNameConstraintWithUnknownTypePEM = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#badIPMaskPEM",
              "documentation": {
                "identifier": "badIPMaskPEM",
                "newPage": false,
                "searchKey": "x509.badIPMaskPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const badIPMaskPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst badIPMaskPEM = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#additionalGeneralSubtreePEM",
              "documentation": {
                "identifier": "additionalGeneralSubtreePEM",
                "newPage": false,
                "searchKey": "x509.additionalGeneralSubtreePEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const additionalGeneralSubtreePEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst additionalGeneralSubtreePEM = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#multipleURLsInCRLDPPEM",
              "documentation": {
                "identifier": "multipleURLsInCRLDPPEM",
                "newPage": false,
                "searchKey": "x509.multipleURLsInCRLDPPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const multipleURLsInCRLDPPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst multipleURLsInCRLDPPEM = ...\n```\n\nmultipleURLsInCRLDPPEM contains two URLs in a single CRL DistributionPoint structure. It is taken from [https://crt.sh/?id=12721534](https://crt.sh/?id=12721534). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hexPKCS1TestPKCS8Key",
              "documentation": {
                "identifier": "hexPKCS1TestPKCS8Key",
                "newPage": false,
                "searchKey": "x509.hexPKCS1TestPKCS8Key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hexPKCS1TestPKCS8Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hexPKCS1TestPKCS8Key = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hexPKCS1TestECKey",
              "documentation": {
                "identifier": "hexPKCS1TestECKey",
                "newPage": false,
                "searchKey": "x509.hexPKCS1TestECKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const hexPKCS1TestECKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst hexPKCS1TestECKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#mismatchingSigAlgIDPEM",
              "documentation": {
                "identifier": "mismatchingSigAlgIDPEM",
                "newPage": false,
                "searchKey": "x509.mismatchingSigAlgIDPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const mismatchingSigAlgIDPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mismatchingSigAlgIDPEM = ...\n```\n\nmismatchingSigAlgIDPEM contains a certificate where the Certificate signatureAlgorithm and the TBSCertificate signature contain mismatching OIDs \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#mismatchingSigAlgParamPEM",
              "documentation": {
                "identifier": "mismatchingSigAlgParamPEM",
                "newPage": false,
                "searchKey": "x509.mismatchingSigAlgParamPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const mismatchingSigAlgParamPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst mismatchingSigAlgParamPEM = ...\n```\n\nmismatchingSigAlgParamPEM contains a certificate where the Certificate signatureAlgorithm and the TBSCertificate signature contain mismatching parameters \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/x509#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/x509#rfc1423Algos",
              "documentation": {
                "identifier": "rfc1423Algos",
                "newPage": false,
                "searchKey": "x509.rfc1423Algos",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rfc1423Algos"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rfc1423Algos = ...\n```\n\nrfc1423Algos holds a slice of the possible ways to encrypt a PEM block. The ivSize numbers were taken from the OpenSSL source. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#IncorrectPasswordError",
              "documentation": {
                "identifier": "IncorrectPasswordError",
                "newPage": false,
                "searchKey": "x509.IncorrectPasswordError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var IncorrectPasswordError"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar IncorrectPasswordError = errors.New(\"x509: decryption password incorrect\")\n```\n\nIncorrectPasswordError is returned when an incorrect password is detected. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#once",
              "documentation": {
                "identifier": "once",
                "newPage": false,
                "searchKey": "x509.once",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var once"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar once sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#systemRoots",
              "documentation": {
                "identifier": "systemRoots",
                "newPage": false,
                "searchKey": "x509.systemRoots",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var systemRoots"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar systemRoots *CertPool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#systemRootsErr",
              "documentation": {
                "identifier": "systemRootsErr",
                "newPage": false,
                "searchKey": "x509.systemRootsErr",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var systemRootsErr"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar systemRootsErr error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#debugDarwinRoots",
              "documentation": {
                "identifier": "debugDarwinRoots",
                "newPage": false,
                "searchKey": "x509.debugDarwinRoots",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var debugDarwinRoots"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar debugDarwinRoots = strings.Contains(os.Getenv(\"GODEBUG\"), \"x509roots=1\")\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#errNotParsed",
              "documentation": {
                "identifier": "errNotParsed",
                "newPage": false,
                "searchKey": "x509.errNotParsed",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var errNotParsed"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar errNotParsed = errors.New(\"x509: missing ASN.1 contents; use ParseCertificate\")\n```\n\nerrNotParsed is returned when a certificate without ASN.1 contents is verified. Platform-specific verification needs the ASN.1 contents. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#publicKeyAlgoName",
              "documentation": {
                "identifier": "publicKeyAlgoName",
                "newPage": false,
                "searchKey": "x509.publicKeyAlgoName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var publicKeyAlgoName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar publicKeyAlgoName = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureMD2WithRSA",
              "documentation": {
                "identifier": "oidSignatureMD2WithRSA",
                "newPage": false,
                "searchKey": "x509.oidSignatureMD2WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureMD2WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureMD2WithRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 2}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureMD5WithRSA",
              "documentation": {
                "identifier": "oidSignatureMD5WithRSA",
                "newPage": false,
                "searchKey": "x509.oidSignatureMD5WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureMD5WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureMD5WithRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 4}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureSHA1WithRSA",
              "documentation": {
                "identifier": "oidSignatureSHA1WithRSA",
                "newPage": false,
                "searchKey": "x509.oidSignatureSHA1WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureSHA1WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureSHA1WithRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 5}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureSHA256WithRSA",
              "documentation": {
                "identifier": "oidSignatureSHA256WithRSA",
                "newPage": false,
                "searchKey": "x509.oidSignatureSHA256WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureSHA256WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureSHA256WithRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 11}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureSHA384WithRSA",
              "documentation": {
                "identifier": "oidSignatureSHA384WithRSA",
                "newPage": false,
                "searchKey": "x509.oidSignatureSHA384WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureSHA384WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureSHA384WithRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 12}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureSHA512WithRSA",
              "documentation": {
                "identifier": "oidSignatureSHA512WithRSA",
                "newPage": false,
                "searchKey": "x509.oidSignatureSHA512WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureSHA512WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureSHA512WithRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 13}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureRSAPSS",
              "documentation": {
                "identifier": "oidSignatureRSAPSS",
                "newPage": false,
                "searchKey": "x509.oidSignatureRSAPSS",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureRSAPSS"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureRSAPSS = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 10}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureDSAWithSHA1",
              "documentation": {
                "identifier": "oidSignatureDSAWithSHA1",
                "newPage": false,
                "searchKey": "x509.oidSignatureDSAWithSHA1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureDSAWithSHA1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureDSAWithSHA1 = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 3}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureDSAWithSHA256",
              "documentation": {
                "identifier": "oidSignatureDSAWithSHA256",
                "newPage": false,
                "searchKey": "x509.oidSignatureDSAWithSHA256",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureDSAWithSHA256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureDSAWithSHA256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 3, 2}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureECDSAWithSHA1",
              "documentation": {
                "identifier": "oidSignatureECDSAWithSHA1",
                "newPage": false,
                "searchKey": "x509.oidSignatureECDSAWithSHA1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureECDSAWithSHA1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureECDSAWithSHA1 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureECDSAWithSHA256",
              "documentation": {
                "identifier": "oidSignatureECDSAWithSHA256",
                "newPage": false,
                "searchKey": "x509.oidSignatureECDSAWithSHA256",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureECDSAWithSHA256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureECDSAWithSHA256 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 2}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureECDSAWithSHA384",
              "documentation": {
                "identifier": "oidSignatureECDSAWithSHA384",
                "newPage": false,
                "searchKey": "x509.oidSignatureECDSAWithSHA384",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureECDSAWithSHA384"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureECDSAWithSHA384 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 3}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureECDSAWithSHA512",
              "documentation": {
                "identifier": "oidSignatureECDSAWithSHA512",
                "newPage": false,
                "searchKey": "x509.oidSignatureECDSAWithSHA512",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureECDSAWithSHA512"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureECDSAWithSHA512 = asn1.ObjectIdentifier{1, 2, 840, 10045, 4, 3, 4}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSignatureEd25519",
              "documentation": {
                "identifier": "oidSignatureEd25519",
                "newPage": false,
                "searchKey": "x509.oidSignatureEd25519",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSignatureEd25519"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSignatureEd25519 = asn1.ObjectIdentifier{1, 3, 101, 112}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSHA256",
              "documentation": {
                "identifier": "oidSHA256",
                "newPage": false,
                "searchKey": "x509.oidSHA256",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSHA256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSHA256 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSHA384",
              "documentation": {
                "identifier": "oidSHA384",
                "newPage": false,
                "searchKey": "x509.oidSHA384",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSHA384"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSHA384 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 2}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidSHA512",
              "documentation": {
                "identifier": "oidSHA512",
                "newPage": false,
                "searchKey": "x509.oidSHA512",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidSHA512"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidSHA512 = asn1.ObjectIdentifier{2, 16, 840, 1, 101, 3, 4, 2, 3}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidMGF1",
              "documentation": {
                "identifier": "oidMGF1",
                "newPage": false,
                "searchKey": "x509.oidMGF1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidMGF1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidMGF1 = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 8}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidISOSignatureSHA1WithRSA",
              "documentation": {
                "identifier": "oidISOSignatureSHA1WithRSA",
                "newPage": false,
                "searchKey": "x509.oidISOSignatureSHA1WithRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidISOSignatureSHA1WithRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidISOSignatureSHA1WithRSA = asn1.ObjectIdentifier{1, 3, 14, 3, 2, 29}\n```\n\noidISOSignatureSHA1WithRSA means the same as oidSignatureSHA1WithRSA but it's specified by ISO. Microsoft's makecert.exe has been known to produce certificates with this OID. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#signatureAlgorithmDetails",
              "documentation": {
                "identifier": "signatureAlgorithmDetails",
                "newPage": false,
                "searchKey": "x509.signatureAlgorithmDetails",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var signatureAlgorithmDetails"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar signatureAlgorithmDetails = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#hashToPSSParameters",
              "documentation": {
                "identifier": "hashToPSSParameters",
                "newPage": false,
                "searchKey": "x509.hashToPSSParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var hashToPSSParameters"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar hashToPSSParameters = ...\n```\n\nhashToPSSParameters contains the DER encoded RSA PSS parameters for the SHA256, SHA384, and SHA512 hashes as defined in RFC 3447, Appendix A.2.3. The parameters contain the following values: \n\n```\n* hashAlgorithm contains the associated hash identifier with NULL parameters\n* maskGenAlgorithm always contains the default mgf1SHA1 identifier\n* saltLength contains the length of the associated hash\n* trailerField always contains the default trailerFieldBC value\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidPublicKeyRSA",
              "documentation": {
                "identifier": "oidPublicKeyRSA",
                "newPage": false,
                "searchKey": "x509.oidPublicKeyRSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidPublicKeyRSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidPublicKeyRSA = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 1, 1}\n```\n\nRFC 3279, 2.3 Public Key Algorithms \n\npkcs-1 OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nrsadsi(113549) pkcs(1) 1 }\n\n```\nrsaEncryption OBJECT IDENTIFIER ::== { pkcs1-1 1 } \n\nid-dsa OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nx9-57(10040) x9cm(4) 1 }\n\n```\nRFC 5480, 2.1.1 Unrestricted Algorithm Identifier and Parameters \n\nid-ecPublicKey OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidPublicKeyDSA",
              "documentation": {
                "identifier": "oidPublicKeyDSA",
                "newPage": false,
                "searchKey": "x509.oidPublicKeyDSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidPublicKeyDSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidPublicKeyDSA = asn1.ObjectIdentifier{1, 2, 840, 10040, 4, 1}\n```\n\nRFC 3279, 2.3 Public Key Algorithms \n\npkcs-1 OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nrsadsi(113549) pkcs(1) 1 }\n\n```\nrsaEncryption OBJECT IDENTIFIER ::== { pkcs1-1 1 } \n\nid-dsa OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nx9-57(10040) x9cm(4) 1 }\n\n```\nRFC 5480, 2.1.1 Unrestricted Algorithm Identifier and Parameters \n\nid-ecPublicKey OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidPublicKeyECDSA",
              "documentation": {
                "identifier": "oidPublicKeyECDSA",
                "newPage": false,
                "searchKey": "x509.oidPublicKeyECDSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidPublicKeyECDSA"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidPublicKeyECDSA = asn1.ObjectIdentifier{1, 2, 840, 10045, 2, 1}\n```\n\nRFC 3279, 2.3 Public Key Algorithms \n\npkcs-1 OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nrsadsi(113549) pkcs(1) 1 }\n\n```\nrsaEncryption OBJECT IDENTIFIER ::== { pkcs1-1 1 } \n\nid-dsa OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nx9-57(10040) x9cm(4) 1 }\n\n```\nRFC 5480, 2.1.1 Unrestricted Algorithm Identifier and Parameters \n\nid-ecPublicKey OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidPublicKeyEd25519",
              "documentation": {
                "identifier": "oidPublicKeyEd25519",
                "newPage": false,
                "searchKey": "x509.oidPublicKeyEd25519",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidPublicKeyEd25519"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidPublicKeyEd25519 = oidSignatureEd25519\n```\n\nRFC 3279, 2.3 Public Key Algorithms \n\npkcs-1 OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nrsadsi(113549) pkcs(1) 1 }\n\n```\nrsaEncryption OBJECT IDENTIFIER ::== { pkcs1-1 1 } \n\nid-dsa OBJECT IDENTIFIER ::== { iso(1) member-body(2) us(840) \n\n```\nx9-57(10040) x9cm(4) 1 }\n\n```\nRFC 5480, 2.1.1 Unrestricted Algorithm Identifier and Parameters \n\nid-ecPublicKey OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 }\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidNamedCurveP224",
              "documentation": {
                "identifier": "oidNamedCurveP224",
                "newPage": false,
                "searchKey": "x509.oidNamedCurveP224",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidNamedCurveP224"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidNamedCurveP224 = asn1.ObjectIdentifier{1, 3, 132, 0, 33}\n```\n\nRFC 5480, 2.1.1.1. Named Curve \n\nsecp224r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 33 }\n\n```\nsecp256r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3)\nprime(1) 7 }\n\n```\nsecp384r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 34 }\n\n```\nsecp521r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 35 }\n\n```\nNB: secp256r1 is equivalent to prime256v1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidNamedCurveP256",
              "documentation": {
                "identifier": "oidNamedCurveP256",
                "newPage": false,
                "searchKey": "x509.oidNamedCurveP256",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidNamedCurveP256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidNamedCurveP256 = asn1.ObjectIdentifier{1, 2, 840, 10045, 3, 1, 7}\n```\n\nRFC 5480, 2.1.1.1. Named Curve \n\nsecp224r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 33 }\n\n```\nsecp256r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3)\nprime(1) 7 }\n\n```\nsecp384r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 34 }\n\n```\nsecp521r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 35 }\n\n```\nNB: secp256r1 is equivalent to prime256v1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidNamedCurveP384",
              "documentation": {
                "identifier": "oidNamedCurveP384",
                "newPage": false,
                "searchKey": "x509.oidNamedCurveP384",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidNamedCurveP384"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidNamedCurveP384 = asn1.ObjectIdentifier{1, 3, 132, 0, 34}\n```\n\nRFC 5480, 2.1.1.1. Named Curve \n\nsecp224r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 33 }\n\n```\nsecp256r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3)\nprime(1) 7 }\n\n```\nsecp384r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 34 }\n\n```\nsecp521r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 35 }\n\n```\nNB: secp256r1 is equivalent to prime256v1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidNamedCurveP521",
              "documentation": {
                "identifier": "oidNamedCurveP521",
                "newPage": false,
                "searchKey": "x509.oidNamedCurveP521",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidNamedCurveP521"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidNamedCurveP521 = asn1.ObjectIdentifier{1, 3, 132, 0, 35}\n```\n\nRFC 5480, 2.1.1.1. Named Curve \n\nsecp224r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 33 }\n\n```\nsecp256r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3)\nprime(1) 7 }\n\n```\nsecp384r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 34 }\n\n```\nsecp521r1 OBJECT IDENTIFIER ::= { \n\n```\niso(1) identified-organization(3) certicom(132) curve(0) 35 }\n\n```\nNB: secp256r1 is equivalent to prime256v1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageAny",
              "documentation": {
                "identifier": "oidExtKeyUsageAny",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageAny",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageAny"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageAny = asn1.ObjectIdentifier{2, 5, 29, 37, 0}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageServerAuth",
              "documentation": {
                "identifier": "oidExtKeyUsageServerAuth",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageServerAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageServerAuth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageServerAuth = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 1}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageClientAuth",
              "documentation": {
                "identifier": "oidExtKeyUsageClientAuth",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageClientAuth",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageClientAuth"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageClientAuth = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 2}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageCodeSigning",
              "documentation": {
                "identifier": "oidExtKeyUsageCodeSigning",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageCodeSigning",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageCodeSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageCodeSigning = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 3}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageEmailProtection",
              "documentation": {
                "identifier": "oidExtKeyUsageEmailProtection",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageEmailProtection",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageEmailProtection"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageEmailProtection = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 4}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageIPSECEndSystem",
              "documentation": {
                "identifier": "oidExtKeyUsageIPSECEndSystem",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageIPSECEndSystem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageIPSECEndSystem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageIPSECEndSystem = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 5}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageIPSECTunnel",
              "documentation": {
                "identifier": "oidExtKeyUsageIPSECTunnel",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageIPSECTunnel",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageIPSECTunnel"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageIPSECTunnel = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 6}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageIPSECUser",
              "documentation": {
                "identifier": "oidExtKeyUsageIPSECUser",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageIPSECUser",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageIPSECUser"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageIPSECUser = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 7}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageTimeStamping",
              "documentation": {
                "identifier": "oidExtKeyUsageTimeStamping",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageTimeStamping",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageTimeStamping"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageTimeStamping = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 8}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageOCSPSigning",
              "documentation": {
                "identifier": "oidExtKeyUsageOCSPSigning",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageOCSPSigning",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageOCSPSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageOCSPSigning = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 3, 9}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageMicrosoftServerGatedCrypto",
              "documentation": {
                "identifier": "oidExtKeyUsageMicrosoftServerGatedCrypto",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageMicrosoftServerGatedCrypto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageMicrosoftServerGatedCrypto"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageMicrosoftServerGatedCrypto = ...\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageNetscapeServerGatedCrypto",
              "documentation": {
                "identifier": "oidExtKeyUsageNetscapeServerGatedCrypto",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageNetscapeServerGatedCrypto",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageNetscapeServerGatedCrypto"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageNetscapeServerGatedCrypto = asn1.ObjectIdentifier{2, 16, 840, 1, 113730, 4, 1}\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageMicrosoftCommercialCodeSigning",
              "documentation": {
                "identifier": "oidExtKeyUsageMicrosoftCommercialCodeSigning",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageMicrosoftCommercialCodeSigning",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageMicrosoftCommercialCodeSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageMicrosoftCommercialCodeSigning = ...\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtKeyUsageMicrosoftKernelCodeSigning",
              "documentation": {
                "identifier": "oidExtKeyUsageMicrosoftKernelCodeSigning",
                "newPage": false,
                "searchKey": "x509.oidExtKeyUsageMicrosoftKernelCodeSigning",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtKeyUsageMicrosoftKernelCodeSigning"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtKeyUsageMicrosoftKernelCodeSigning = ...\n```\n\nRFC 5280, 4.2.1.12  Extended Key Usage \n\nanyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 } \n\nid-kp OBJECT IDENTIFIER ::= { id-pkix 3 } \n\nid-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 } id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 } id-kp-codeSigning            OBJECT IDENTIFIER ::= { id-kp 3 } id-kp-emailProtection        OBJECT IDENTIFIER ::= { id-kp 4 } id-kp-timeStamping           OBJECT IDENTIFIER ::= { id-kp 8 } id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 } \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#extKeyUsageOIDs",
              "documentation": {
                "identifier": "extKeyUsageOIDs",
                "newPage": false,
                "searchKey": "x509.extKeyUsageOIDs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var extKeyUsageOIDs"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar extKeyUsageOIDs = ...\n```\n\nextKeyUsageOIDs contains the mapping between an ExtKeyUsage and its OID. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ErrUnsupportedAlgorithm",
              "documentation": {
                "identifier": "ErrUnsupportedAlgorithm",
                "newPage": false,
                "searchKey": "x509.ErrUnsupportedAlgorithm",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrUnsupportedAlgorithm"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrUnsupportedAlgorithm = errors.New(\"x509: cannot verify signature: algorithm unimplemented\")\n```\n\nErrUnsupportedAlgorithm results from attempting to perform an operation that involves algorithms that are not currently implemented. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionSubjectKeyId",
              "documentation": {
                "identifier": "oidExtensionSubjectKeyId",
                "newPage": false,
                "searchKey": "x509.oidExtensionSubjectKeyId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionSubjectKeyId"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionSubjectKeyId = []int{2, 5, 29, 14}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionKeyUsage",
              "documentation": {
                "identifier": "oidExtensionKeyUsage",
                "newPage": false,
                "searchKey": "x509.oidExtensionKeyUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionKeyUsage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionKeyUsage = []int{2, 5, 29, 15}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionExtendedKeyUsage",
              "documentation": {
                "identifier": "oidExtensionExtendedKeyUsage",
                "newPage": false,
                "searchKey": "x509.oidExtensionExtendedKeyUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionExtendedKeyUsage"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionExtendedKeyUsage = []int{2, 5, 29, 37}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionAuthorityKeyId",
              "documentation": {
                "identifier": "oidExtensionAuthorityKeyId",
                "newPage": false,
                "searchKey": "x509.oidExtensionAuthorityKeyId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionAuthorityKeyId"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionAuthorityKeyId = []int{2, 5, 29, 35}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionBasicConstraints",
              "documentation": {
                "identifier": "oidExtensionBasicConstraints",
                "newPage": false,
                "searchKey": "x509.oidExtensionBasicConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionBasicConstraints"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionBasicConstraints = []int{2, 5, 29, 19}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionSubjectAltName",
              "documentation": {
                "identifier": "oidExtensionSubjectAltName",
                "newPage": false,
                "searchKey": "x509.oidExtensionSubjectAltName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionSubjectAltName"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionSubjectAltName = []int{2, 5, 29, 17}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionCertificatePolicies",
              "documentation": {
                "identifier": "oidExtensionCertificatePolicies",
                "newPage": false,
                "searchKey": "x509.oidExtensionCertificatePolicies",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionCertificatePolicies"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionCertificatePolicies = []int{2, 5, 29, 32}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionNameConstraints",
              "documentation": {
                "identifier": "oidExtensionNameConstraints",
                "newPage": false,
                "searchKey": "x509.oidExtensionNameConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionNameConstraints"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionNameConstraints = []int{2, 5, 29, 30}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionCRLDistributionPoints",
              "documentation": {
                "identifier": "oidExtensionCRLDistributionPoints",
                "newPage": false,
                "searchKey": "x509.oidExtensionCRLDistributionPoints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionCRLDistributionPoints"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionCRLDistributionPoints = []int{2, 5, 29, 31}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionAuthorityInfoAccess",
              "documentation": {
                "identifier": "oidExtensionAuthorityInfoAccess",
                "newPage": false,
                "searchKey": "x509.oidExtensionAuthorityInfoAccess",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionAuthorityInfoAccess"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionAuthorityInfoAccess = []int{1, 3, 6, 1, 5, 5, 7, 1, 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionCRLNumber",
              "documentation": {
                "identifier": "oidExtensionCRLNumber",
                "newPage": false,
                "searchKey": "x509.oidExtensionCRLNumber",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionCRLNumber"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionCRLNumber = []int{2, 5, 29, 20}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidAuthorityInfoAccessOcsp",
              "documentation": {
                "identifier": "oidAuthorityInfoAccessOcsp",
                "newPage": false,
                "searchKey": "x509.oidAuthorityInfoAccessOcsp",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidAuthorityInfoAccessOcsp"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidAuthorityInfoAccessOcsp = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 48, 1}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidAuthorityInfoAccessIssuers",
              "documentation": {
                "identifier": "oidAuthorityInfoAccessIssuers",
                "newPage": false,
                "searchKey": "x509.oidAuthorityInfoAccessIssuers",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidAuthorityInfoAccessIssuers"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidAuthorityInfoAccessIssuers = asn1.ObjectIdentifier{1, 3, 6, 1, 5, 5, 7, 48, 2}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#emptyASN1Subject",
              "documentation": {
                "identifier": "emptyASN1Subject",
                "newPage": false,
                "searchKey": "x509.emptyASN1Subject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var emptyASN1Subject"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar emptyASN1Subject = []byte{0x30, 0}\n```\n\nemptyASN1Subject is the ASN.1 DER encoding of an empty Subject, which is just an empty SEQUENCE. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemCRLPrefix",
              "documentation": {
                "identifier": "pemCRLPrefix",
                "newPage": false,
                "searchKey": "x509.pemCRLPrefix",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemCRLPrefix"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemCRLPrefix = []byte(\"-----BEGIN X509 CRL\")\n```\n\npemCRLPrefix is the magic string that indicates that we have a PEM encoded CRL. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemType",
              "documentation": {
                "identifier": "pemType",
                "newPage": false,
                "searchKey": "x509.pemType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemType"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemType = \"X509 CRL\"\n```\n\npemType is the type of a PEM encoded CRL. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidExtensionRequest",
              "documentation": {
                "identifier": "oidExtensionRequest",
                "newPage": false,
                "searchKey": "x509.oidExtensionRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var oidExtensionRequest"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar oidExtensionRequest = asn1.ObjectIdentifier{1, 2, 840, 113549, 1, 9, 14}\n```\n\noidExtensionRequest is a PKCS #9 OBJECT IDENTIFIER that indicates requested extensions in a CSR. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameConstraintsTests",
              "documentation": {
                "identifier": "nameConstraintsTests",
                "newPage": false,
                "searchKey": "x509.nameConstraintsTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameConstraintsTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameConstraintsTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rfc2821Tests",
              "documentation": {
                "identifier": "rfc2821Tests",
                "newPage": false,
                "searchKey": "x509.rfc2821Tests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rfc2821Tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rfc2821Tests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testData",
              "documentation": {
                "identifier": "testData",
                "newPage": false,
                "searchKey": "x509.testData",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testData"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testData = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#incompleteBlockPEM",
              "documentation": {
                "identifier": "incompleteBlockPEM",
                "newPage": false,
                "searchKey": "x509.incompleteBlockPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var incompleteBlockPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar incompleteBlockPEM = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8RSAPrivateKeyHex",
              "documentation": {
                "identifier": "pkcs8RSAPrivateKeyHex",
                "newPage": false,
                "searchKey": "x509.pkcs8RSAPrivateKeyHex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8RSAPrivateKeyHex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8RSAPrivateKeyHex = ...\n```\n\nGenerated using: \n\n```\nopenssl genrsa 1024 | openssl pkcs8 -topk8 -nocrypt\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8P224PrivateKeyHex",
              "documentation": {
                "identifier": "pkcs8P224PrivateKeyHex",
                "newPage": false,
                "searchKey": "x509.pkcs8P224PrivateKeyHex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8P224PrivateKeyHex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8P224PrivateKeyHex = ...\n```\n\nGenerated using: \n\n```\nopenssl ecparam -genkey -name secp224r1 | openssl pkcs8 -topk8 -nocrypt\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8P256PrivateKeyHex",
              "documentation": {
                "identifier": "pkcs8P256PrivateKeyHex",
                "newPage": false,
                "searchKey": "x509.pkcs8P256PrivateKeyHex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8P256PrivateKeyHex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8P256PrivateKeyHex = ...\n```\n\nGenerated using: \n\n```\nopenssl ecparam -genkey -name secp256r1 | openssl pkcs8 -topk8 -nocrypt\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8P384PrivateKeyHex",
              "documentation": {
                "identifier": "pkcs8P384PrivateKeyHex",
                "newPage": false,
                "searchKey": "x509.pkcs8P384PrivateKeyHex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8P384PrivateKeyHex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8P384PrivateKeyHex = ...\n```\n\nGenerated using: \n\n```\nopenssl ecparam -genkey -name secp384r1 | openssl pkcs8 -topk8 -nocrypt\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8P521PrivateKeyHex",
              "documentation": {
                "identifier": "pkcs8P521PrivateKeyHex",
                "newPage": false,
                "searchKey": "x509.pkcs8P521PrivateKeyHex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8P521PrivateKeyHex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8P521PrivateKeyHex = ...\n```\n\nGenerated using: \n\n```\nopenssl ecparam -genkey -name secp521r1 | openssl pkcs8 -topk8 -nocrypt\n\n```\nNote that OpenSSL will truncate the private key if it can (i.e. it emits it like an integer, even though it's an OCTET STRING field). Thus if you regenerate this you may, randomly, find that it's a byte shorter than expected and the Go test will fail to recreate it exactly. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8Ed25519PrivateKeyHex",
              "documentation": {
                "identifier": "pkcs8Ed25519PrivateKeyHex",
                "newPage": false,
                "searchKey": "x509.pkcs8Ed25519PrivateKeyHex",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8Ed25519PrivateKeyHex"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8Ed25519PrivateKeyHex = ...\n```\n\nFrom RFC 8410, Section 7. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8MismatchKeyTests",
              "documentation": {
                "identifier": "pkcs8MismatchKeyTests",
                "newPage": false,
                "searchKey": "x509.pkcs8MismatchKeyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs8MismatchKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs8MismatchKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecKeyTests",
              "documentation": {
                "identifier": "ecKeyTests",
                "newPage": false,
                "searchKey": "x509.ecKeyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecMismatchKeyTests",
              "documentation": {
                "identifier": "ecMismatchKeyTests",
                "newPage": false,
                "searchKey": "x509.ecMismatchKeyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecMismatchKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecMismatchKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#verifyTests",
              "documentation": {
                "identifier": "verifyTests",
                "newPage": false,
                "searchKey": "x509.verifyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var verifyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar verifyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#megaLeaf",
              "documentation": {
                "identifier": "megaLeaf",
                "newPage": false,
                "searchKey": "x509.megaLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var megaLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar megaLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#comodoIntermediate1",
              "documentation": {
                "identifier": "comodoIntermediate1",
                "newPage": false,
                "searchKey": "x509.comodoIntermediate1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var comodoIntermediate1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar comodoIntermediate1 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#comodoRoot",
              "documentation": {
                "identifier": "comodoRoot",
                "newPage": false,
                "searchKey": "x509.comodoRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var comodoRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar comodoRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameConstraintsLeaf",
              "documentation": {
                "identifier": "nameConstraintsLeaf",
                "newPage": false,
                "searchKey": "x509.nameConstraintsLeaf",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameConstraintsLeaf"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameConstraintsLeaf = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameConstraintsIntermediate1",
              "documentation": {
                "identifier": "nameConstraintsIntermediate1",
                "newPage": false,
                "searchKey": "x509.nameConstraintsIntermediate1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameConstraintsIntermediate1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameConstraintsIntermediate1 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameConstraintsIntermediate2",
              "documentation": {
                "identifier": "nameConstraintsIntermediate2",
                "newPage": false,
                "searchKey": "x509.nameConstraintsIntermediate2",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameConstraintsIntermediate2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameConstraintsIntermediate2 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#globalSignRoot",
              "documentation": {
                "identifier": "globalSignRoot",
                "newPage": false,
                "searchKey": "x509.globalSignRoot",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var globalSignRoot"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar globalSignRoot = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#moipLeafCert",
              "documentation": {
                "identifier": "moipLeafCert",
                "newPage": false,
                "searchKey": "x509.moipLeafCert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var moipLeafCert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar moipLeafCert = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#comodoIntermediateSHA384",
              "documentation": {
                "identifier": "comodoIntermediateSHA384",
                "newPage": false,
                "searchKey": "x509.comodoIntermediateSHA384",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var comodoIntermediateSHA384"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar comodoIntermediateSHA384 = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#unknownAuthorityErrorTests",
              "documentation": {
                "identifier": "unknownAuthorityErrorTests",
                "newPage": false,
                "searchKey": "x509.unknownAuthorityErrorTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var unknownAuthorityErrorTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar unknownAuthorityErrorTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameConstraintTests",
              "documentation": {
                "identifier": "nameConstraintTests",
                "newPage": false,
                "searchKey": "x509.nameConstraintTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var nameConstraintTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar nameConstraintTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemPublicKey",
              "documentation": {
                "identifier": "pemPublicKey",
                "newPage": false,
                "searchKey": "x509.pemPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemPublicKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemPublicKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemPrivateKey",
              "documentation": {
                "identifier": "pemPrivateKey",
                "newPage": false,
                "searchKey": "x509.pemPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemPrivateKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemPrivateKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pemEd25519Key",
              "documentation": {
                "identifier": "pemEd25519Key",
                "newPage": false,
                "searchKey": "x509.pemEd25519Key",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pemEd25519Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pemEd25519Key = ...\n```\n\npemEd25519Key is the example from RFC 8410, Secrion 4. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testPrivateKey",
              "documentation": {
                "identifier": "testPrivateKey",
                "newPage": false,
                "searchKey": "x509.testPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var testPrivateKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar testPrivateKey *rsa.PrivateKey\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rsaPrivateKey",
              "documentation": {
                "identifier": "rsaPrivateKey",
                "newPage": false,
                "searchKey": "x509.rsaPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rsaPrivateKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rsaPrivateKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchHostnamesTests",
              "documentation": {
                "identifier": "matchHostnamesTests",
                "newPage": false,
                "searchKey": "x509.matchHostnamesTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var matchHostnamesTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar matchHostnamesTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certBytes",
              "documentation": {
                "identifier": "certBytes",
                "newPage": false,
                "searchKey": "x509.certBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var certBytes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar certBytes = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecdsaSHA1CertPem",
              "documentation": {
                "identifier": "ecdsaSHA1CertPem",
                "newPage": false,
                "searchKey": "x509.ecdsaSHA1CertPem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecdsaSHA1CertPem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecdsaSHA1CertPem = ...\n```\n\nSelf-signed certificate using ECDSA with SHA1 & secp256r1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecdsaSHA256p256CertPem",
              "documentation": {
                "identifier": "ecdsaSHA256p256CertPem",
                "newPage": false,
                "searchKey": "x509.ecdsaSHA256p256CertPem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecdsaSHA256p256CertPem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecdsaSHA256p256CertPem = ...\n```\n\nSelf-signed certificate using ECDSA with SHA256 & secp256r1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecdsaSHA256p384CertPem",
              "documentation": {
                "identifier": "ecdsaSHA256p384CertPem",
                "newPage": false,
                "searchKey": "x509.ecdsaSHA256p384CertPem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecdsaSHA256p384CertPem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecdsaSHA256p384CertPem = ...\n```\n\nSelf-signed certificate using ECDSA with SHA256 & secp384r1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecdsaSHA384p521CertPem",
              "documentation": {
                "identifier": "ecdsaSHA384p521CertPem",
                "newPage": false,
                "searchKey": "x509.ecdsaSHA384p521CertPem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecdsaSHA384p521CertPem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecdsaSHA384p521CertPem = ...\n```\n\nSelf-signed certificate using ECDSA with SHA384 & secp521r1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecdsaTests",
              "documentation": {
                "identifier": "ecdsaTests",
                "newPage": false,
                "searchKey": "x509.ecdsaTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ecdsaTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ecdsaTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#dsaCertPem",
              "documentation": {
                "identifier": "dsaCertPem",
                "newPage": false,
                "searchKey": "x509.dsaCertPem",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var dsaCertPem"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar dsaCertPem = ...\n```\n\nSelf-signed certificate using DSA with SHA1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rsaPSSSelfSignedPEM",
              "documentation": {
                "identifier": "rsaPSSSelfSignedPEM",
                "newPage": false,
                "searchKey": "x509.rsaPSSSelfSignedPEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rsaPSSSelfSignedPEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rsaPSSSelfSignedPEM = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rsaPSSSelfSignedOpenSSL110PEM",
              "documentation": {
                "identifier": "rsaPSSSelfSignedOpenSSL110PEM",
                "newPage": false,
                "searchKey": "x509.rsaPSSSelfSignedOpenSSL110PEM",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var rsaPSSSelfSignedOpenSSL110PEM"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar rsaPSSSelfSignedOpenSSL110PEM = ...\n```\n\nopenssl req -newkey rsa:2048 -keyout test.key -sha256 -sigopt \\ rsa_padding_mode:pss -sigopt rsa_pss_saltlen:32 -sigopt rsa_mgf1_md:sha256 \\ -x509 -days 3650 -nodes -subj '/C=US/ST=CA/L=SF/O=Test/CN=Test' -out \\ test.pem \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ed25519CRLKey",
              "documentation": {
                "identifier": "ed25519CRLKey",
                "newPage": false,
                "searchKey": "x509.ed25519CRLKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ed25519CRLKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ed25519CRLKey = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#csrBase64Array",
              "documentation": {
                "identifier": "csrBase64Array",
                "newPage": false,
                "searchKey": "x509.csrBase64Array",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var csrBase64Array"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar csrBase64Array = ...\n```\n\nThese CSR was generated with OpenSSL: \n\n```\nopenssl req -out CSR.csr -new -sha256 -nodes -keyout privateKey.key -config openssl.cnf\n\n```\nWith openssl.cnf containing the following sections: \n\n```\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = email:gopher@golang.org,DNS:test.example.com\n[ req_attributes ]\nchallengePassword = ignored challenge\nunstructuredName  = ignored unstructured name\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#md5cert",
              "documentation": {
                "identifier": "md5cert",
                "newPage": false,
                "searchKey": "x509.md5cert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var md5cert"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar md5cert = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs1MismatchKeyTests",
              "documentation": {
                "identifier": "pkcs1MismatchKeyTests",
                "newPage": false,
                "searchKey": "x509.pkcs1MismatchKeyTests",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var pkcs1MismatchKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar pkcs1MismatchKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/x509#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/x509#sum224",
              "documentation": {
                "identifier": "sum224",
                "newPage": false,
                "searchKey": "x509.sum224",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type sum224 [28]byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype sum224 [sha256.Size224]byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CertPool",
              "documentation": {
                "identifier": "CertPool",
                "newPage": false,
                "searchKey": "x509.CertPool",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CertPool struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CertPool struct {\n\tbyName map[string][]int // cert.RawSubject => index into lazyCerts\n\n\t// lazyCerts contains funcs that return a certificate,\n\t// lazily parsing/decompressing it as needed.\n\tlazyCerts []lazyCert\n\n\t// haveSum maps from sum224(cert.Raw) to true. It's used only\n\t// for AddCert duplicate detection, to avoid CertPool.contains\n\t// calls in the AddCert path (because the contains method can\n\t// call getCert and otherwise negate savings from lazy getCert\n\t// funcs).\n\thaveSum map[sum224]bool\n}\n```\n\nCertPool is a set of certificates. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#NewCertPool",
                    "documentation": {
                      "identifier": "NewCertPool",
                      "newPage": false,
                      "searchKey": "x509.NewCertPool",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func NewCertPool() *CertPool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc NewCertPool() *CertPool\n```\n\nNewCertPool returns a new, empty CertPool. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#SystemCertPool",
                    "documentation": {
                      "identifier": "SystemCertPool",
                      "newPage": false,
                      "searchKey": "x509.SystemCertPool",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func SystemCertPool() (*CertPool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc SystemCertPool() (*CertPool, error)\n```\n\nSystemCertPool returns a copy of the system cert pool. \n\nOn Unix systems other than macOS the environment variables SSL_CERT_FILE and SSL_CERT_DIR can be used to override the system default locations for the SSL certificate file and SSL certificate files directory, respectively. The latter can be a colon-separated list. \n\nAny mutations to the returned pool are not written to disk and do not affect any other pool returned by SystemCertPool. \n\nNew changes in the system cert pool might not be reflected in subsequent calls. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#systemRootsPool",
                    "documentation": {
                      "identifier": "systemRootsPool",
                      "newPage": false,
                      "searchKey": "x509.systemRootsPool",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func systemRootsPool() *CertPool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc systemRootsPool() *CertPool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#loadSystemRoots",
                    "documentation": {
                      "identifier": "loadSystemRoots",
                      "newPage": false,
                      "searchKey": "x509.loadSystemRoots",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func loadSystemRoots() (*CertPool, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc loadSystemRoots() (*CertPool, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.len",
                    "documentation": {
                      "identifier": "CertPool.len",
                      "newPage": false,
                      "searchKey": "x509.CertPool.len",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) len() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) len() int\n```\n\nlen returns the number of certs in the set. A nil set is a valid empty set. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.cert",
                    "documentation": {
                      "identifier": "CertPool.cert",
                      "newPage": false,
                      "searchKey": "x509.CertPool.cert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) cert(n int) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) cert(n int) (*Certificate, error)\n```\n\ncert returns cert index n in s. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.copy",
                    "documentation": {
                      "identifier": "CertPool.copy",
                      "newPage": false,
                      "searchKey": "x509.CertPool.copy",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) copy() *CertPool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) copy() *CertPool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.findPotentialParents",
                    "documentation": {
                      "identifier": "CertPool.findPotentialParents",
                      "newPage": false,
                      "searchKey": "x509.CertPool.findPotentialParents",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) findPotentialParents(cert *Certificate) []*Certificate"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) findPotentialParents(cert *Certificate) []*Certificate\n```\n\nfindPotentialParents returns the indexes of certificates in s which might have signed cert. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.contains",
                    "documentation": {
                      "identifier": "CertPool.contains",
                      "newPage": false,
                      "searchKey": "x509.CertPool.contains",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) contains(cert *Certificate) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) contains(cert *Certificate) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.AddCert",
                    "documentation": {
                      "identifier": "CertPool.AddCert",
                      "newPage": false,
                      "searchKey": "x509.CertPool.AddCert",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) AddCert(cert *Certificate)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) AddCert(cert *Certificate)\n```\n\nAddCert adds a certificate to a pool. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.addCertFunc",
                    "documentation": {
                      "identifier": "CertPool.addCertFunc",
                      "newPage": false,
                      "searchKey": "x509.CertPool.addCertFunc",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) addCertFunc(rawSum224 sum224, rawSubject string, getCert func() (*Certificate, error))"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) addCertFunc(rawSum224 sum224, rawSubject string, getCert func() (*Certificate, error))\n```\n\naddCertFunc adds metadata about a certificate to a pool, along with a func to fetch that certificate later when needed. \n\nThe rawSubject is Certificate.RawSubject and must be non-empty. The getCert func may be called 0 or more times. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.AppendCertsFromPEM",
                    "documentation": {
                      "identifier": "CertPool.AppendCertsFromPEM",
                      "newPage": false,
                      "searchKey": "x509.CertPool.AppendCertsFromPEM",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) AppendCertsFromPEM(pemCerts []byte) (ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) AppendCertsFromPEM(pemCerts []byte) (ok bool)\n```\n\nAppendCertsFromPEM attempts to parse a series of PEM encoded certificates. It appends any certificates found to s and reports whether any certificates were successfully parsed. \n\nOn many Linux systems, /etc/ssl/cert.pem will contain the system wide set of root CAs in a format suitable for this function. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.Subjects",
                    "documentation": {
                      "identifier": "CertPool.Subjects",
                      "newPage": false,
                      "searchKey": "x509.CertPool.Subjects",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) Subjects() [][]byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) Subjects() [][]byte\n```\n\nSubjects returns a list of the DER-encoded subjects of all of the certificates in the pool. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertPool.mustCert",
                    "documentation": {
                      "identifier": "CertPool.mustCert",
                      "newPage": false,
                      "searchKey": "x509.CertPool.mustCert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (s *CertPool) mustCert(t *testing.T, n int) *Certificate"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (s *CertPool) mustCert(t *testing.T, n int) *Certificate\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#lazyCert",
              "documentation": {
                "identifier": "lazyCert",
                "newPage": false,
                "searchKey": "x509.lazyCert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type lazyCert struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype lazyCert struct {\n\t// rawSubject is the Certificate.RawSubject value.\n\t// It's the same as the CertPool.byName key, but in []byte\n\t// form to make CertPool.Subjects (as used by crypto/tls) do\n\t// fewer allocations.\n\trawSubject []byte\n\n\t// getCert returns the certificate.\n\t//\n\t// It is not meant to do network operations or anything else\n\t// where a failure is likely; the func is meant to lazily\n\t// parse/decompress data that is already known to be good. The\n\t// error in the signature primarily is meant for use in the\n\t// case where a cert file existed on local disk when the program\n\t// started up is deleted later before it's read.\n\tgetCert func() (*Certificate, error)\n}\n```\n\nlazyCert is minimal metadata about a Cert and a func to retrieve it in its normal expanded *Certificate form. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PEMCipher",
              "documentation": {
                "identifier": "PEMCipher",
                "newPage": false,
                "searchKey": "x509.PEMCipher",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PEMCipher int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PEMCipher int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rfc1423Algo",
              "documentation": {
                "identifier": "rfc1423Algo",
                "newPage": false,
                "searchKey": "x509.rfc1423Algo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type rfc1423Algo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rfc1423Algo struct {\n\tcipher     PEMCipher\n\tname       string\n\tcipherFunc func(key []byte) (cipher.Block, error)\n\tkeySize    int\n\tblockSize  int\n}\n```\n\nrfc1423Algo holds a method for enciphering a PEM block. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#cipherByName",
                    "documentation": {
                      "identifier": "cipherByName",
                      "newPage": false,
                      "searchKey": "x509.cipherByName",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func cipherByName(name string) *rfc1423Algo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc cipherByName(name string) *rfc1423Algo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#cipherByKey",
                    "documentation": {
                      "identifier": "cipherByKey",
                      "newPage": false,
                      "searchKey": "x509.cipherByKey",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func cipherByKey(key PEMCipher) *rfc1423Algo"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc cipherByKey(key PEMCipher) *rfc1423Algo\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#rfc1423Algo.deriveKey",
                    "documentation": {
                      "identifier": "rfc1423Algo.deriveKey",
                      "newPage": false,
                      "searchKey": "x509.rfc1423Algo.deriveKey",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c rfc1423Algo) deriveKey(password, salt []byte) []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c rfc1423Algo) deriveKey(password, salt []byte) []byte\n```\n\nderiveKey uses a key derivation function to stretch the password into a key with the number of bits our cipher requires. This algorithm was derived from the OpenSSL source. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs1PrivateKey",
              "documentation": {
                "identifier": "pkcs1PrivateKey",
                "newPage": false,
                "searchKey": "x509.pkcs1PrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pkcs1PrivateKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pkcs1PrivateKey struct {\n\tVersion int\n\tN       *big.Int\n\tE       int\n\tD       *big.Int\n\tP       *big.Int\n\tQ       *big.Int\n\t// We ignore these values, if present, because rsa will calculate them.\n\tDp   *big.Int `asn1:\"optional\"`\n\tDq   *big.Int `asn1:\"optional\"`\n\tQinv *big.Int `asn1:\"optional\"`\n\n\tAdditionalPrimes []pkcs1AdditionalRSAPrime `asn1:\"optional,omitempty\"`\n}\n```\n\npkcs1PrivateKey is a structure which mirrors the PKCS #1 ASN.1 for an RSA private key. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs1AdditionalRSAPrime",
              "documentation": {
                "identifier": "pkcs1AdditionalRSAPrime",
                "newPage": false,
                "searchKey": "x509.pkcs1AdditionalRSAPrime",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pkcs1AdditionalRSAPrime struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pkcs1AdditionalRSAPrime struct {\n\tPrime *big.Int\n\n\t// We ignore these values because rsa will calculate them.\n\tExp   *big.Int\n\tCoeff *big.Int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs1PublicKey",
              "documentation": {
                "identifier": "pkcs1PublicKey",
                "newPage": false,
                "searchKey": "x509.pkcs1PublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pkcs1PublicKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pkcs1PublicKey struct {\n\tN *big.Int\n\tE int\n}\n```\n\npkcs1PublicKey reflects the ASN.1 structure of a PKCS #1 public key. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkcs8",
              "documentation": {
                "identifier": "pkcs8",
                "newPage": false,
                "searchKey": "x509.pkcs8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pkcs8 struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pkcs8 struct {\n\tVersion    int\n\tAlgo       pkix.AlgorithmIdentifier\n\tPrivateKey []byte\n}\n```\n\npkcs8 reflects an ASN.1, PKCS #8 PrivateKey. See [ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-8/pkcs-8v1_2.asn](ftp://ftp.rsasecurity.com/pub/pkcs/pkcs-8/pkcs-8v1_2.asn) and RFC 5208. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ecPrivateKey",
              "documentation": {
                "identifier": "ecPrivateKey",
                "newPage": false,
                "searchKey": "x509.ecPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ecPrivateKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ecPrivateKey struct {\n\tVersion       int\n\tPrivateKey    []byte\n\tNamedCurveOID asn1.ObjectIdentifier `asn1:\"optional,explicit,tag:0\"`\n\tPublicKey     asn1.BitString        `asn1:\"optional,explicit,tag:1\"`\n}\n```\n\necPrivateKey reflects an ASN.1 Elliptic Curve Private Key Structure. References: \n\n```\nRFC 5915\nSEC1 - [http://www.secg.org/sec1-v2.pdf](http://www.secg.org/sec1-v2.pdf)\n\n```\nPer RFC 5915 the NamedCurveOID is marked as ASN.1 OPTIONAL, however in most cases it is not. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#InvalidReason",
              "documentation": {
                "identifier": "InvalidReason",
                "newPage": false,
                "searchKey": "x509.InvalidReason",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InvalidReason int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InvalidReason int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CertificateInvalidError",
              "documentation": {
                "identifier": "CertificateInvalidError",
                "newPage": false,
                "searchKey": "x509.CertificateInvalidError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CertificateInvalidError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CertificateInvalidError struct {\n\tCert   *Certificate\n\tReason InvalidReason\n\tDetail string\n}\n```\n\nCertificateInvalidError results when an odd error occurs. Users of this library probably want to handle all these errors uniformly. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#CertificateInvalidError.Error",
                    "documentation": {
                      "identifier": "CertificateInvalidError.Error",
                      "newPage": false,
                      "searchKey": "x509.CertificateInvalidError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e CertificateInvalidError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e CertificateInvalidError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#HostnameError",
              "documentation": {
                "identifier": "HostnameError",
                "newPage": false,
                "searchKey": "x509.HostnameError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type HostnameError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype HostnameError struct {\n\tCertificate *Certificate\n\tHost        string\n}\n```\n\nHostnameError results when the set of authorized names doesn't match the requested name. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#HostnameError.Error",
                    "documentation": {
                      "identifier": "HostnameError.Error",
                      "newPage": false,
                      "searchKey": "x509.HostnameError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h HostnameError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h HostnameError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#UnknownAuthorityError",
              "documentation": {
                "identifier": "UnknownAuthorityError",
                "newPage": false,
                "searchKey": "x509.UnknownAuthorityError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnknownAuthorityError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnknownAuthorityError struct {\n\tCert *Certificate\n\t// hintErr contains an error that may be helpful in determining why an\n\t// authority wasn't found.\n\thintErr error\n\t// hintCert contains a possible authority certificate that was rejected\n\t// because of the error in hintErr.\n\thintCert *Certificate\n}\n```\n\nUnknownAuthorityError results when the certificate issuer is unknown \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#UnknownAuthorityError.Error",
                    "documentation": {
                      "identifier": "UnknownAuthorityError.Error",
                      "newPage": false,
                      "searchKey": "x509.UnknownAuthorityError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e UnknownAuthorityError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e UnknownAuthorityError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SystemRootsError",
              "documentation": {
                "identifier": "SystemRootsError",
                "newPage": false,
                "searchKey": "x509.SystemRootsError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SystemRootsError struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SystemRootsError struct {\n\tErr error\n}\n```\n\nSystemRootsError results when we fail to load the system root certificates. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#SystemRootsError.Error",
                    "documentation": {
                      "identifier": "SystemRootsError.Error",
                      "newPage": false,
                      "searchKey": "x509.SystemRootsError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (se SystemRootsError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (se SystemRootsError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#SystemRootsError.Unwrap",
                    "documentation": {
                      "identifier": "SystemRootsError.Unwrap",
                      "newPage": false,
                      "searchKey": "x509.SystemRootsError.Unwrap",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (se SystemRootsError) Unwrap() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (se SystemRootsError) Unwrap() error\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#VerifyOptions",
              "documentation": {
                "identifier": "VerifyOptions",
                "newPage": false,
                "searchKey": "x509.VerifyOptions",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type VerifyOptions struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype VerifyOptions struct {\n\t// DNSName, if set, is checked against the leaf certificate with\n\t// Certificate.VerifyHostname or the platform verifier.\n\tDNSName string\n\n\t// Intermediates is an optional pool of certificates that are not trust\n\t// anchors, but can be used to form a chain from the leaf certificate to a\n\t// root certificate.\n\tIntermediates *CertPool\n\t// Roots is the set of trusted root certificates the leaf certificate needs\n\t// to chain up to. If nil, the system roots or the platform verifier are used.\n\tRoots *CertPool\n\n\t// CurrentTime is used to check the validity of all certificates in the\n\t// chain. If zero, the current time is used.\n\tCurrentTime time.Time\n\n\t// KeyUsages specifies which Extended Key Usage values are acceptable. A\n\t// chain is accepted if it allows any of the listed values. An empty list\n\t// means ExtKeyUsageServerAuth. To accept any key usage, include ExtKeyUsageAny.\n\tKeyUsages []ExtKeyUsage\n\n\t// MaxConstraintComparisions is the maximum number of comparisons to\n\t// perform when checking a given certificate's name constraints. If\n\t// zero, a sensible default is used. This limit prevents pathological\n\t// certificates from consuming excessive amounts of CPU time when\n\t// validating. It does not apply to the platform verifier.\n\tMaxConstraintComparisions int\n}\n```\n\nVerifyOptions contains parameters for Certificate.Verify. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#rfc2821Mailbox",
              "documentation": {
                "identifier": "rfc2821Mailbox",
                "newPage": false,
                "searchKey": "x509.rfc2821Mailbox",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type rfc2821Mailbox struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype rfc2821Mailbox struct {\n\tlocal, domain string\n}\n```\n\nrfc2821Mailbox represents a “mailbox” (which is an email address to most people) by breaking it into the “local” (i.e. before the '@') and “domain” parts. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#parseRFC2821Mailbox",
                    "documentation": {
                      "identifier": "parseRFC2821Mailbox",
                      "newPage": false,
                      "searchKey": "x509.parseRFC2821Mailbox",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseRFC2821Mailbox(in string) (mailbox rfc2821Mailbox, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseRFC2821Mailbox(in string) (mailbox rfc2821Mailbox, ok bool)\n```\n\nparseRFC2821Mailbox parses an email address into local and domain parts, based on the ABNF for a “Mailbox” from RFC 2821. According to RFC 5280, Section 4.2.1.6 that's correct for an rfc822Name from a certificate: “The format of an rfc822Name is a \"Mailbox\" as defined in RFC 2821, Section 4.1.2”. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pkixPublicKey",
              "documentation": {
                "identifier": "pkixPublicKey",
                "newPage": false,
                "searchKey": "x509.pkixPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pkixPublicKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pkixPublicKey struct {\n\tAlgo      pkix.AlgorithmIdentifier\n\tBitString asn1.BitString\n}\n```\n\npkixPublicKey reflects a PKIX public key structure. See SubjectPublicKeyInfo in RFC 3280. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certificate",
              "documentation": {
                "identifier": "certificate",
                "newPage": false,
                "searchKey": "x509.certificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type certificate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype certificate struct {\n\tRaw                asn1.RawContent\n\tTBSCertificate     tbsCertificate\n\tSignatureAlgorithm pkix.AlgorithmIdentifier\n\tSignatureValue     asn1.BitString\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#tbsCertificate",
              "documentation": {
                "identifier": "tbsCertificate",
                "newPage": false,
                "searchKey": "x509.tbsCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tbsCertificate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tbsCertificate struct {\n\tRaw                asn1.RawContent\n\tVersion            int `asn1:\"optional,explicit,default:0,tag:0\"`\n\tSerialNumber       *big.Int\n\tSignatureAlgorithm pkix.AlgorithmIdentifier\n\tIssuer             asn1.RawValue\n\tValidity           validity\n\tSubject            asn1.RawValue\n\tPublicKey          publicKeyInfo\n\tUniqueId           asn1.BitString   `asn1:\"optional,tag:1\"`\n\tSubjectUniqueId    asn1.BitString   `asn1:\"optional,tag:2\"`\n\tExtensions         []pkix.Extension `asn1:\"optional,explicit,tag:3\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#dsaAlgorithmParameters",
              "documentation": {
                "identifier": "dsaAlgorithmParameters",
                "newPage": false,
                "searchKey": "x509.dsaAlgorithmParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type dsaAlgorithmParameters struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype dsaAlgorithmParameters struct {\n\tP, Q, G *big.Int\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#validity",
              "documentation": {
                "identifier": "validity",
                "newPage": false,
                "searchKey": "x509.validity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type validity struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype validity struct {\n\tNotBefore, NotAfter time.Time\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#publicKeyInfo",
              "documentation": {
                "identifier": "publicKeyInfo",
                "newPage": false,
                "searchKey": "x509.publicKeyInfo",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type publicKeyInfo struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype publicKeyInfo struct {\n\tRaw       asn1.RawContent\n\tAlgorithm pkix.AlgorithmIdentifier\n\tPublicKey asn1.BitString\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#authKeyId",
              "documentation": {
                "identifier": "authKeyId",
                "newPage": false,
                "searchKey": "x509.authKeyId",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type authKeyId struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authKeyId struct {\n\tId []byte `asn1:\"optional,tag:0\"`\n}\n```\n\nRFC 5280,  4.2.1.1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#SignatureAlgorithm",
              "documentation": {
                "identifier": "SignatureAlgorithm",
                "newPage": false,
                "searchKey": "x509.SignatureAlgorithm",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type SignatureAlgorithm int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype SignatureAlgorithm int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#getSignatureAlgorithmFromAI",
                    "documentation": {
                      "identifier": "getSignatureAlgorithmFromAI",
                      "newPage": false,
                      "searchKey": "x509.getSignatureAlgorithmFromAI",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getSignatureAlgorithmFromAI(ai pkix.AlgorithmIdentifier) SignatureAlgorithm"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getSignatureAlgorithmFromAI(ai pkix.AlgorithmIdentifier) SignatureAlgorithm\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#SignatureAlgorithm.isRSAPSS",
                    "documentation": {
                      "identifier": "SignatureAlgorithm.isRSAPSS",
                      "newPage": false,
                      "searchKey": "x509.SignatureAlgorithm.isRSAPSS",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (algo SignatureAlgorithm) isRSAPSS() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (algo SignatureAlgorithm) isRSAPSS() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#SignatureAlgorithm.String",
                    "documentation": {
                      "identifier": "SignatureAlgorithm.String",
                      "newPage": false,
                      "searchKey": "x509.SignatureAlgorithm.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (algo SignatureAlgorithm) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (algo SignatureAlgorithm) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#PublicKeyAlgorithm",
              "documentation": {
                "identifier": "PublicKeyAlgorithm",
                "newPage": false,
                "searchKey": "x509.PublicKeyAlgorithm",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type PublicKeyAlgorithm int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PublicKeyAlgorithm int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#getPublicKeyAlgorithmFromOID",
                    "documentation": {
                      "identifier": "getPublicKeyAlgorithmFromOID",
                      "newPage": false,
                      "searchKey": "x509.getPublicKeyAlgorithmFromOID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func getPublicKeyAlgorithmFromOID(oid asn1.ObjectIdentifier) PublicKeyAlgorithm"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc getPublicKeyAlgorithmFromOID(oid asn1.ObjectIdentifier) PublicKeyAlgorithm\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#PublicKeyAlgorithm.String",
                    "documentation": {
                      "identifier": "PublicKeyAlgorithm.String",
                      "newPage": false,
                      "searchKey": "x509.PublicKeyAlgorithm.String",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (algo PublicKeyAlgorithm) String() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (algo PublicKeyAlgorithm) String() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#pssParameters",
              "documentation": {
                "identifier": "pssParameters",
                "newPage": false,
                "searchKey": "x509.pssParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type pssParameters struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype pssParameters struct {\n\t// The following three fields are not marked as\n\t// optional because the default values specify SHA-1,\n\t// which is no longer suitable for use in signatures.\n\tHash         pkix.AlgorithmIdentifier `asn1:\"explicit,tag:0\"`\n\tMGF          pkix.AlgorithmIdentifier `asn1:\"explicit,tag:1\"`\n\tSaltLength   int                      `asn1:\"explicit,tag:2\"`\n\tTrailerField int                      `asn1:\"optional,explicit,tag:3,default:1\"`\n}\n```\n\npssParameters reflects the parameters in an AlgorithmIdentifier that specifies RSA PSS. See RFC 3447, Appendix A.2.3. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#KeyUsage",
              "documentation": {
                "identifier": "KeyUsage",
                "newPage": false,
                "searchKey": "x509.KeyUsage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type KeyUsage int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype KeyUsage int\n```\n\nKeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#parseKeyUsageExtension",
                    "documentation": {
                      "identifier": "parseKeyUsageExtension",
                      "newPage": false,
                      "searchKey": "x509.parseKeyUsageExtension",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseKeyUsageExtension(der cryptobyte.String) (KeyUsage, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseKeyUsageExtension(der cryptobyte.String) (KeyUsage, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ExtKeyUsage",
              "documentation": {
                "identifier": "ExtKeyUsage",
                "newPage": false,
                "searchKey": "x509.ExtKeyUsage",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ExtKeyUsage int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ExtKeyUsage int\n```\n\nExtKeyUsage represents an extended set of actions that are valid for a given key. Each of the ExtKeyUsage* constants define a unique action. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#extKeyUsageFromOID",
                    "documentation": {
                      "identifier": "extKeyUsageFromOID",
                      "newPage": false,
                      "searchKey": "x509.extKeyUsageFromOID",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func extKeyUsageFromOID(oid asn1.ObjectIdentifier) (eku ExtKeyUsage, ok bool)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc extKeyUsageFromOID(oid asn1.ObjectIdentifier) (eku ExtKeyUsage, ok bool)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#Certificate",
              "documentation": {
                "identifier": "Certificate",
                "newPage": false,
                "searchKey": "x509.Certificate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type Certificate struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Certificate struct {\n\tRaw                     []byte // Complete ASN.1 DER content (certificate, signature algorithm and signature).\n\tRawTBSCertificate       []byte // Certificate part of raw ASN.1 DER content.\n\tRawSubjectPublicKeyInfo []byte // DER encoded SubjectPublicKeyInfo.\n\tRawSubject              []byte // DER encoded Subject\n\tRawIssuer               []byte // DER encoded Issuer\n\n\tSignature          []byte\n\tSignatureAlgorithm SignatureAlgorithm\n\n\tPublicKeyAlgorithm PublicKeyAlgorithm\n\tPublicKey          interface{}\n\n\tVersion             int\n\tSerialNumber        *big.Int\n\tIssuer              pkix.Name\n\tSubject             pkix.Name\n\tNotBefore, NotAfter time.Time // Validity bounds.\n\tKeyUsage            KeyUsage\n\n\t// Extensions contains raw X.509 extensions. When parsing certificates,\n\t// this can be used to extract non-critical extensions that are not\n\t// parsed by this package. When marshaling certificates, the Extensions\n\t// field is ignored, see ExtraExtensions.\n\tExtensions []pkix.Extension\n\n\t// ExtraExtensions contains extensions to be copied, raw, into any\n\t// marshaled certificates. Values override any extensions that would\n\t// otherwise be produced based on the other fields. The ExtraExtensions\n\t// field is not populated when parsing certificates, see Extensions.\n\tExtraExtensions []pkix.Extension\n\n\t// UnhandledCriticalExtensions contains a list of extension IDs that\n\t// were not (fully) processed when parsing. Verify will fail if this\n\t// slice is non-empty, unless verification is delegated to an OS\n\t// library which understands all the critical extensions.\n\t//\n\t// Users can access these extensions using Extensions and can remove\n\t// elements from this slice if they believe that they have been\n\t// handled.\n\tUnhandledCriticalExtensions []asn1.ObjectIdentifier\n\n\tExtKeyUsage        []ExtKeyUsage           // Sequence of extended key usages.\n\tUnknownExtKeyUsage []asn1.ObjectIdentifier // Encountered extended key usages unknown to this package.\n\n\t// BasicConstraintsValid indicates whether IsCA, MaxPathLen,\n\t// and MaxPathLenZero are valid.\n\tBasicConstraintsValid bool\n\tIsCA                  bool\n\n\t// MaxPathLen and MaxPathLenZero indicate the presence and\n\t// value of the BasicConstraints' \"pathLenConstraint\".\n\t//\n\t// When parsing a certificate, a positive non-zero MaxPathLen\n\t// means that the field was specified, -1 means it was unset,\n\t// and MaxPathLenZero being true mean that the field was\n\t// explicitly set to zero. The case of MaxPathLen==0 with MaxPathLenZero==false\n\t// should be treated equivalent to -1 (unset).\n\t//\n\t// When generating a certificate, an unset pathLenConstraint\n\t// can be requested with either MaxPathLen == -1 or using the\n\t// zero value for both MaxPathLen and MaxPathLenZero.\n\tMaxPathLen int\n\t// MaxPathLenZero indicates that BasicConstraintsValid==true\n\t// and MaxPathLen==0 should be interpreted as an actual\n\t// maximum path length of zero. Otherwise, that combination is\n\t// interpreted as MaxPathLen not being set.\n\tMaxPathLenZero bool\n\n\tSubjectKeyId   []byte\n\tAuthorityKeyId []byte\n\n\t// RFC 5280, 4.2.2.1 (Authority Information Access)\n\tOCSPServer            []string\n\tIssuingCertificateURL []string\n\n\t// Subject Alternate Name values. (Note that these values may not be valid\n\t// if invalid values were contained within a parsed certificate. For\n\t// example, an element of DNSNames may not be a valid DNS domain name.)\n\tDNSNames       []string\n\tEmailAddresses []string\n\tIPAddresses    []net.IP\n\tURIs           []*url.URL\n\n\t// Name constraints\n\tPermittedDNSDomainsCritical bool // if true then the name constraints are marked critical.\n\tPermittedDNSDomains         []string\n\tExcludedDNSDomains          []string\n\tPermittedIPRanges           []*net.IPNet\n\tExcludedIPRanges            []*net.IPNet\n\tPermittedEmailAddresses     []string\n\tExcludedEmailAddresses      []string\n\tPermittedURIDomains         []string\n\tExcludedURIDomains          []string\n\n\t// CRL Distribution Points\n\tCRLDistributionPoints []string\n\n\tPolicyIdentifiers []asn1.ObjectIdentifier\n}\n```\n\nA Certificate represents an X.509 certificate. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#parseCertificate",
                    "documentation": {
                      "identifier": "parseCertificate",
                      "newPage": false,
                      "searchKey": "x509.parseCertificate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseCertificate(der []byte) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseCertificate(der []byte) (*Certificate, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#ParseCertificate",
                    "documentation": {
                      "identifier": "ParseCertificate",
                      "newPage": false,
                      "searchKey": "x509.ParseCertificate",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseCertificate(der []byte) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseCertificate(der []byte) (*Certificate, error)\n```\n\nParseCertificate parses a single certificate from the given ASN.1 DER data. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#exportCertificate",
                    "documentation": {
                      "identifier": "exportCertificate",
                      "newPage": false,
                      "searchKey": "x509.exportCertificate",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func exportCertificate(cert macOS.CFRef) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc exportCertificate(cert macOS.CFRef) (*Certificate, error)\n```\n\nexportCertificate returns a *Certificate for a SecCertificateRef. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#makeConstraintsCACert",
                    "documentation": {
                      "identifier": "makeConstraintsCACert",
                      "newPage": false,
                      "searchKey": "x509.makeConstraintsCACert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeConstraintsCACert(constraints constraintsSpec, name string, key *ecdsa.PrivateKey, parent *Certificate, parentKey *ecdsa.PrivateKey) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeConstraintsCACert(constraints constraintsSpec, name string, key *ecdsa.PrivateKey, parent *Certificate, parentKey *ecdsa.PrivateKey) (*Certificate, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#makeConstraintsLeafCert",
                    "documentation": {
                      "identifier": "makeConstraintsLeafCert",
                      "newPage": false,
                      "searchKey": "x509.makeConstraintsLeafCert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func makeConstraintsLeafCert(leaf leafSpec, key *ecdsa.PrivateKey, parent *Certificate, parentKey *ecdsa.PrivateKey) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc makeConstraintsLeafCert(leaf leafSpec, key *ecdsa.PrivateKey, parent *Certificate, parentKey *ecdsa.PrivateKey) (*Certificate, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#certificateFromPEM",
                    "documentation": {
                      "identifier": "certificateFromPEM",
                      "newPage": false,
                      "searchKey": "x509.certificateFromPEM",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func certificateFromPEM(pemBytes string) (*Certificate, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc certificateFromPEM(pemBytes string) (*Certificate, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#generateCert",
                    "documentation": {
                      "identifier": "generateCert",
                      "newPage": false,
                      "searchKey": "x509.generateCert",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func generateCert(cn string, isCA bool, issuer *Certificate, issuerKey crypto.PrivateKey) (*Certificate, crypto.PrivateKey, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc generateCert(cn string, isCA bool, issuer *Certificate, issuerKey crypto.PrivateKey) (*Certificate, crypto.PrivateKey, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#serialiseAndParse",
                    "documentation": {
                      "identifier": "serialiseAndParse",
                      "newPage": false,
                      "searchKey": "x509.serialiseAndParse",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func serialiseAndParse(t *testing.T, template *Certificate) *Certificate"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc serialiseAndParse(t *testing.T, template *Certificate) *Certificate\n```\n\nserialiseAndParse generates a self-signed certificate from template and returns a parsed version of it. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.systemVerify",
                    "documentation": {
                      "identifier": "Certificate.systemVerify",
                      "newPage": false,
                      "searchKey": "x509.Certificate.systemVerify",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) systemVerify(opts *VerifyOptions) (chains [][]*Certificate, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) systemVerify(opts *VerifyOptions) (chains [][]*Certificate, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.checkNameConstraints",
                    "documentation": {
                      "identifier": "Certificate.checkNameConstraints",
                      "newPage": false,
                      "searchKey": "x509.Certificate.checkNameConstraints",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) checkNameConstraints(count *int,..."
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) checkNameConstraints(count *int,\n\tmaxConstraintComparisons int,\n\tnameType string,\n\tname string,\n\tparsedName interface{},\n\tmatch func(parsedName, constraint interface{}) (match bool, err error),\n\tpermitted, excluded interface{}) error\n```\n\ncheckNameConstraints checks that c permits a child certificate to claim the given name, of type nameType. The argument parsedName contains the parsed form of name, suitable for passing to the match function. The total number of comparisons is tracked in the given count and should not exceed the given limit. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.isValid",
                    "documentation": {
                      "identifier": "Certificate.isValid",
                      "newPage": false,
                      "searchKey": "x509.Certificate.isValid",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) isValid(certType int, currentChain []*Certificate, opts *VerifyOptions) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) isValid(certType int, currentChain []*Certificate, opts *VerifyOptions) error\n```\n\nisValid performs validity checks on c given that it is a candidate to append to the chain in currentChain. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.Verify",
                    "documentation": {
                      "identifier": "Certificate.Verify",
                      "newPage": false,
                      "searchKey": "x509.Certificate.Verify",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) Verify(opts VerifyOptions) (chains [][]*Certificate, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) Verify(opts VerifyOptions) (chains [][]*Certificate, err error)\n```\n\nVerify attempts to verify c by building one or more chains from c to a certificate in opts.Roots, using certificates in opts.Intermediates if needed. If successful, it returns one or more chains where the first element of the chain is c and the last element is from opts.Roots. \n\nIf opts.Roots is nil, the platform verifier might be used, and verification details might differ from what is described below. If system roots are unavailable the returned error will be of type SystemRootsError. \n\nName constraints in the intermediates will be applied to all names claimed in the chain, not just opts.DNSName. Thus it is invalid for a leaf to claim example.com if an intermediate doesn't permit it, even if example.com is not the name being validated. Note that DirectoryName constraints are not supported. \n\nName constraint validation follows the rules from RFC 5280, with the addition that DNS name constraints may use the leading period format defined for emails and URIs. When a constraint has a leading period it indicates that at least one additional label must be prepended to the constrained name to be considered valid. \n\nExtended Key Usage values are enforced nested down a chain, so an intermediate or root that enumerates EKUs prevents a leaf from asserting an EKU not in that list. (While this is not specified, it is common practice in order to limit the types of certificates a CA can issue.) \n\nWARNING: this function doesn't do any revocation checking. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.buildChains",
                    "documentation": {
                      "identifier": "Certificate.buildChains",
                      "newPage": false,
                      "searchKey": "x509.Certificate.buildChains",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) buildChains(cache map[*Certificate][][]*Certificate, currentChain []*Certificate, sigChecks *int, opts *VerifyOptions) (chains [][]*Certificate, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) buildChains(cache map[*Certificate][][]*Certificate, currentChain []*Certificate, sigChecks *int, opts *VerifyOptions) (chains [][]*Certificate, err error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.VerifyHostname",
                    "documentation": {
                      "identifier": "Certificate.VerifyHostname",
                      "newPage": false,
                      "searchKey": "x509.Certificate.VerifyHostname",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) VerifyHostname(h string) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) VerifyHostname(h string) error\n```\n\nVerifyHostname returns nil if c is a valid certificate for the named host. Otherwise it returns an error describing the mismatch. \n\nIP addresses can be optionally enclosed in square brackets and are checked against the IPAddresses field. Other names are checked case insensitively against the DNSNames field. If the names are valid hostnames, the certificate fields can have a wildcard as the left-most label. \n\nNote that the legacy Common Name field is ignored. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.Equal",
                    "documentation": {
                      "identifier": "Certificate.Equal",
                      "newPage": false,
                      "searchKey": "x509.Certificate.Equal",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) Equal(other *Certificate) bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) Equal(other *Certificate) bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.hasSANExtension",
                    "documentation": {
                      "identifier": "Certificate.hasSANExtension",
                      "newPage": false,
                      "searchKey": "x509.Certificate.hasSANExtension",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) hasSANExtension() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) hasSANExtension() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.CheckSignatureFrom",
                    "documentation": {
                      "identifier": "Certificate.CheckSignatureFrom",
                      "newPage": false,
                      "searchKey": "x509.Certificate.CheckSignatureFrom",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) CheckSignatureFrom(parent *Certificate) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) CheckSignatureFrom(parent *Certificate) error\n```\n\nCheckSignatureFrom verifies that the signature on c is a valid signature from parent. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.CheckSignature",
                    "documentation": {
                      "identifier": "Certificate.CheckSignature",
                      "newPage": false,
                      "searchKey": "x509.Certificate.CheckSignature",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) CheckSignature(algo SignatureAlgorithm, signed, signature []byte) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) CheckSignature(algo SignatureAlgorithm, signed, signature []byte) error\n```\n\nCheckSignature verifies that signature is a valid signature over signed from c's public key. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.hasNameConstraints",
                    "documentation": {
                      "identifier": "Certificate.hasNameConstraints",
                      "newPage": false,
                      "searchKey": "x509.Certificate.hasNameConstraints",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) hasNameConstraints() bool"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) hasNameConstraints() bool\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.getSANExtension",
                    "documentation": {
                      "identifier": "Certificate.getSANExtension",
                      "newPage": false,
                      "searchKey": "x509.Certificate.getSANExtension",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) getSANExtension() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) getSANExtension() []byte\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.CheckCRLSignature",
                    "documentation": {
                      "identifier": "Certificate.CheckCRLSignature",
                      "newPage": false,
                      "searchKey": "x509.Certificate.CheckCRLSignature",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) CheckCRLSignature(crl *pkix.CertificateList) error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) CheckCRLSignature(crl *pkix.CertificateList) error\n```\n\nCheckCRLSignature checks that the signature in crl is from c. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#Certificate.CreateCRL",
                    "documentation": {
                      "identifier": "Certificate.CreateCRL",
                      "newPage": false,
                      "searchKey": "x509.Certificate.CreateCRL",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *Certificate) CreateCRL(rand io.Reader, priv interface{}, revokedCerts []pkix.RevokedCertificate, now, expiry time.Time) (crlBytes []byte, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *Certificate) CreateCRL(rand io.Reader, priv interface{}, revokedCerts []pkix.RevokedCertificate, now, expiry time.Time) (crlBytes []byte, err error)\n```\n\nCreateCRL returns a DER encoded CRL, signed by this Certificate, that contains the given list of revoked certificates. \n\nNote: this method does not generate an RFC 5280 conformant X.509 v2 CRL. To generate a standards compliant CRL, use CreateRevocationList instead. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#InsecureAlgorithmError",
              "documentation": {
                "identifier": "InsecureAlgorithmError",
                "newPage": false,
                "searchKey": "x509.InsecureAlgorithmError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type InsecureAlgorithmError x509.SignatureAlgorithm"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype InsecureAlgorithmError SignatureAlgorithm\n```\n\nAn InsecureAlgorithmError \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#InsecureAlgorithmError.Error",
                    "documentation": {
                      "identifier": "InsecureAlgorithmError.Error",
                      "newPage": false,
                      "searchKey": "x509.InsecureAlgorithmError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e InsecureAlgorithmError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e InsecureAlgorithmError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ConstraintViolationError",
              "documentation": {
                "identifier": "ConstraintViolationError",
                "newPage": false,
                "searchKey": "x509.ConstraintViolationError",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type ConstraintViolationError struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ConstraintViolationError struct{}\n```\n\nConstraintViolationError results when a requested usage is not permitted by a certificate. For example: checking a signature when the public key isn't a certificate signing key. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#ConstraintViolationError.Error",
                    "documentation": {
                      "identifier": "ConstraintViolationError.Error",
                      "newPage": false,
                      "searchKey": "x509.ConstraintViolationError.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (ConstraintViolationError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (ConstraintViolationError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#UnhandledCriticalExtension",
              "documentation": {
                "identifier": "UnhandledCriticalExtension",
                "newPage": false,
                "searchKey": "x509.UnhandledCriticalExtension",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type UnhandledCriticalExtension struct{}"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype UnhandledCriticalExtension struct{}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#UnhandledCriticalExtension.Error",
                    "documentation": {
                      "identifier": "UnhandledCriticalExtension.Error",
                      "newPage": false,
                      "searchKey": "x509.UnhandledCriticalExtension.Error",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (h UnhandledCriticalExtension) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (h UnhandledCriticalExtension) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#basicConstraints",
              "documentation": {
                "identifier": "basicConstraints",
                "newPage": false,
                "searchKey": "x509.basicConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type basicConstraints struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype basicConstraints struct {\n\tIsCA       bool `asn1:\"optional\"`\n\tMaxPathLen int  `asn1:\"optional,default:-1\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#policyInformation",
              "documentation": {
                "identifier": "policyInformation",
                "newPage": false,
                "searchKey": "x509.policyInformation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type policyInformation struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype policyInformation struct {\n\tPolicy asn1.ObjectIdentifier\n}\n```\n\nRFC 5280 4.2.1.4 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#authorityInfoAccess",
              "documentation": {
                "identifier": "authorityInfoAccess",
                "newPage": false,
                "searchKey": "x509.authorityInfoAccess",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type authorityInfoAccess struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype authorityInfoAccess struct {\n\tMethod   asn1.ObjectIdentifier\n\tLocation asn1.RawValue\n}\n```\n\nRFC 5280, 4.2.2.1 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#distributionPoint",
              "documentation": {
                "identifier": "distributionPoint",
                "newPage": false,
                "searchKey": "x509.distributionPoint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type distributionPoint struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype distributionPoint struct {\n\tDistributionPoint distributionPointName `asn1:\"optional,tag:0\"`\n\tReason            asn1.BitString        `asn1:\"optional,tag:1\"`\n\tCRLIssuer         asn1.RawValue         `asn1:\"optional,tag:2\"`\n}\n```\n\nRFC 5280, 4.2.1.14 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#distributionPointName",
              "documentation": {
                "identifier": "distributionPointName",
                "newPage": false,
                "searchKey": "x509.distributionPointName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type distributionPointName struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype distributionPointName struct {\n\tFullName     []asn1.RawValue  `asn1:\"optional,tag:0\"`\n\tRelativeName pkix.RDNSequence `asn1:\"optional,tag:1\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CertificateRequest",
              "documentation": {
                "identifier": "CertificateRequest",
                "newPage": false,
                "searchKey": "x509.CertificateRequest",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CertificateRequest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CertificateRequest struct {\n\tRaw                      []byte // Complete ASN.1 DER content (CSR, signature algorithm and signature).\n\tRawTBSCertificateRequest []byte // Certificate request info part of raw ASN.1 DER content.\n\tRawSubjectPublicKeyInfo  []byte // DER encoded SubjectPublicKeyInfo.\n\tRawSubject               []byte // DER encoded Subject.\n\n\tVersion            int\n\tSignature          []byte\n\tSignatureAlgorithm SignatureAlgorithm\n\n\tPublicKeyAlgorithm PublicKeyAlgorithm\n\tPublicKey          interface{}\n\n\tSubject pkix.Name\n\n\t// Attributes contains the CSR attributes that can parse as\n\t// pkix.AttributeTypeAndValueSET.\n\t//\n\t// Deprecated: Use Extensions and ExtraExtensions instead for parsing and\n\t// generating the requestedExtensions attribute.\n\tAttributes []pkix.AttributeTypeAndValueSET\n\n\t// Extensions contains all requested extensions, in raw form. When parsing\n\t// CSRs, this can be used to extract extensions that are not parsed by this\n\t// package.\n\tExtensions []pkix.Extension\n\n\t// ExtraExtensions contains extensions to be copied, raw, into any CSR\n\t// marshaled by CreateCertificateRequest. Values override any extensions\n\t// that would otherwise be produced based on the other fields but are\n\t// overridden by any extensions specified in Attributes.\n\t//\n\t// The ExtraExtensions field is not populated by ParseCertificateRequest,\n\t// see Extensions instead.\n\tExtraExtensions []pkix.Extension\n\n\t// Subject Alternate Name values.\n\tDNSNames       []string\n\tEmailAddresses []string\n\tIPAddresses    []net.IP\n\tURIs           []*url.URL\n}\n```\n\nCertificateRequest represents a PKCS #10, certificate signature request. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#ParseCertificateRequest",
                    "documentation": {
                      "identifier": "ParseCertificateRequest",
                      "newPage": false,
                      "searchKey": "x509.ParseCertificateRequest",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func ParseCertificateRequest(asn1Data []byte) (*CertificateRequest, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc ParseCertificateRequest(asn1Data []byte) (*CertificateRequest, error)\n```\n\nParseCertificateRequest parses a single certificate request from the given ASN.1 DER data. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#parseCertificateRequest",
                    "documentation": {
                      "identifier": "parseCertificateRequest",
                      "newPage": false,
                      "searchKey": "x509.parseCertificateRequest",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func parseCertificateRequest(in *certificateRequest) (*CertificateRequest, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc parseCertificateRequest(in *certificateRequest) (*CertificateRequest, error)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#marshalAndParseCSR",
                    "documentation": {
                      "identifier": "marshalAndParseCSR",
                      "newPage": false,
                      "searchKey": "x509.marshalAndParseCSR",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func marshalAndParseCSR(t *testing.T, template *CertificateRequest) *CertificateRequest"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc marshalAndParseCSR(t *testing.T, template *CertificateRequest) *CertificateRequest\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#CertificateRequest.CheckSignature",
                    "documentation": {
                      "identifier": "CertificateRequest.CheckSignature",
                      "newPage": false,
                      "searchKey": "x509.CertificateRequest.CheckSignature",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *CertificateRequest) CheckSignature() error"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *CertificateRequest) CheckSignature() error\n```\n\nCheckSignature reports whether the signature on c is valid. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#tbsCertificateRequest",
              "documentation": {
                "identifier": "tbsCertificateRequest",
                "newPage": false,
                "searchKey": "x509.tbsCertificateRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type tbsCertificateRequest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tbsCertificateRequest struct {\n\tRaw           asn1.RawContent\n\tVersion       int\n\tSubject       asn1.RawValue\n\tPublicKey     publicKeyInfo\n\tRawAttributes []asn1.RawValue `asn1:\"tag:0\"`\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certificateRequest",
              "documentation": {
                "identifier": "certificateRequest",
                "newPage": false,
                "searchKey": "x509.certificateRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type certificateRequest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype certificateRequest struct {\n\tRaw                asn1.RawContent\n\tTBSCSR             tbsCertificateRequest\n\tSignatureAlgorithm pkix.AlgorithmIdentifier\n\tSignatureValue     asn1.BitString\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#RevocationList",
              "documentation": {
                "identifier": "RevocationList",
                "newPage": false,
                "searchKey": "x509.RevocationList",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type RevocationList struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype RevocationList struct {\n\t// SignatureAlgorithm is used to determine the signature algorithm to be\n\t// used when signing the CRL. If 0 the default algorithm for the signing\n\t// key will be used.\n\tSignatureAlgorithm SignatureAlgorithm\n\n\t// RevokedCertificates is used to populate the revokedCertificates\n\t// sequence in the CRL, it may be empty. RevokedCertificates may be nil,\n\t// in which case an empty CRL will be created.\n\tRevokedCertificates []pkix.RevokedCertificate\n\n\t// Number is used to populate the X.509 v2 cRLNumber extension in the CRL,\n\t// which should be a monotonically increasing sequence number for a given\n\t// CRL scope and CRL issuer.\n\tNumber *big.Int\n\t// ThisUpdate is used to populate the thisUpdate field in the CRL, which\n\t// indicates the issuance date of the CRL.\n\tThisUpdate time.Time\n\t// NextUpdate is used to populate the nextUpdate field in the CRL, which\n\t// indicates the date by which the next CRL will be issued. NextUpdate\n\t// must be greater than ThisUpdate.\n\tNextUpdate time.Time\n\t// ExtraExtensions contains any additional extensions to add directly to\n\t// the CRL.\n\tExtraExtensions []pkix.Extension\n}\n```\n\nRevocationList contains the fields used to create an X.509 v2 Certificate Revocation list with CreateRevocationList. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameConstraintsTest",
              "documentation": {
                "identifier": "nameConstraintsTest",
                "newPage": false,
                "searchKey": "x509.nameConstraintsTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type nameConstraintsTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype nameConstraintsTest struct {\n\troots         []constraintsSpec\n\tintermediates [][]constraintsSpec\n\tleaf          leafSpec\n\trequestedEKUs []ExtKeyUsage\n\texpectedError string\n\tnoOpenSSL     bool\n\tignoreCN      bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#constraintsSpec",
              "documentation": {
                "identifier": "constraintsSpec",
                "newPage": false,
                "searchKey": "x509.constraintsSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type constraintsSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype constraintsSpec struct {\n\tok   []string\n\tbad  []string\n\tekus []string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#leafSpec",
              "documentation": {
                "identifier": "leafSpec",
                "newPage": false,
                "searchKey": "x509.leafSpec",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type leafSpec struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype leafSpec struct {\n\tsans []string\n\tekus []string\n\tcn   string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#verifyTest",
              "documentation": {
                "identifier": "verifyTest",
                "newPage": false,
                "searchKey": "x509.verifyTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type verifyTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype verifyTest struct {\n\tname          string\n\tleaf          string\n\tintermediates []string\n\troots         []string\n\tcurrentTime   int64\n\tdnsName       string\n\tsystemSkip    bool\n\tsystemLax     bool\n\tkeyUsages     []ExtKeyUsage\n\n\terrorCallback  func(*testing.T, error)\n\texpectedChains [][]string\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchHostnamesTest",
              "documentation": {
                "identifier": "matchHostnamesTest",
                "newPage": false,
                "searchKey": "x509.matchHostnamesTest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type matchHostnamesTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype matchHostnamesTest struct {\n\tpattern, host string\n\tok            bool\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#brokenSigner",
              "documentation": {
                "identifier": "brokenSigner",
                "newPage": false,
                "searchKey": "x509.brokenSigner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type brokenSigner struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype brokenSigner struct {\n\tpub crypto.PublicKey\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/x509#brokenSigner.Public",
                    "documentation": {
                      "identifier": "brokenSigner.Public",
                      "newPage": false,
                      "searchKey": "x509.brokenSigner.Public",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bs *brokenSigner) Public() crypto.PublicKey"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bs *brokenSigner) Public() crypto.PublicKey\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/x509#brokenSigner.Sign",
                    "documentation": {
                      "identifier": "brokenSigner.Sign",
                      "newPage": false,
                      "searchKey": "x509.brokenSigner.Sign",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (bs *brokenSigner) Sign(_ io.Reader, _ []byte, _ crypto.SignerOpts) ([]byte, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (bs *brokenSigner) Sign(_ io.Reader, _ []byte, _ crypto.SignerOpts) ([]byte, error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/x509#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "exported"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/x509#isPrintable",
              "documentation": {
                "identifier": "isPrintable",
                "newPage": false,
                "searchKey": "x509.isPrintable",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isPrintable(b byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isPrintable(b byte) bool\n```\n\nisPrintable reports whether the given b is in the ASN.1 PrintableString set. This is a simplified version of encoding/asn1.isPrintable. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseASN1String",
              "documentation": {
                "identifier": "parseASN1String",
                "newPage": false,
                "searchKey": "x509.parseASN1String",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseASN1String(tag cryptobyte_asn1.Tag, value []byte) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseASN1String(tag cryptobyte_asn1.Tag, value []byte) (string, error)\n```\n\nparseASN1String parses the ASN.1 string types T61String, PrintableString, UTF8String, BMPString, and IA5String. This is mostly copied from the respective encoding/asn1.parse... methods, rather than just increasing the API surface of that package. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseName",
              "documentation": {
                "identifier": "parseName",
                "newPage": false,
                "searchKey": "x509.parseName",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseName(raw cryptobyte.String) (*pkix.RDNSequence, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseName(raw cryptobyte.String) (*pkix.RDNSequence, error)\n```\n\nparseName parses a DER encoded Name as defined in RFC 5280. We may want to export this function in the future for use in crypto/tls. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseAI",
              "documentation": {
                "identifier": "parseAI",
                "newPage": false,
                "searchKey": "x509.parseAI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseAI(der cryptobyte.String) (pkix.AlgorithmIdentifier, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseAI(der cryptobyte.String) (pkix.AlgorithmIdentifier, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseValidity",
              "documentation": {
                "identifier": "parseValidity",
                "newPage": false,
                "searchKey": "x509.parseValidity",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseValidity(der cryptobyte.String) (time.Time, time.Time, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseValidity(der cryptobyte.String) (time.Time, time.Time, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseExtension",
              "documentation": {
                "identifier": "parseExtension",
                "newPage": false,
                "searchKey": "x509.parseExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseExtension(der cryptobyte.String) (pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseExtension(der cryptobyte.String) (pkix.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parsePublicKey",
              "documentation": {
                "identifier": "parsePublicKey",
                "newPage": false,
                "searchKey": "x509.parsePublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parsePublicKey(algo PublicKeyAlgorithm, keyData *publicKeyInfo) (interface{}, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parsePublicKey(algo PublicKeyAlgorithm, keyData *publicKeyInfo) (interface{}, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseBasicConstraintsExtension",
              "documentation": {
                "identifier": "parseBasicConstraintsExtension",
                "newPage": false,
                "searchKey": "x509.parseBasicConstraintsExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseBasicConstraintsExtension(der cryptobyte.String) (bool, int, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseBasicConstraintsExtension(der cryptobyte.String) (bool, int, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#forEachSAN",
              "documentation": {
                "identifier": "forEachSAN",
                "newPage": false,
                "searchKey": "x509.forEachSAN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func forEachSAN(der cryptobyte.String, callback func(tag int, data []byte) error) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc forEachSAN(der cryptobyte.String, callback func(tag int, data []byte) error) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseSANExtension",
              "documentation": {
                "identifier": "parseSANExtension",
                "newPage": false,
                "searchKey": "x509.parseSANExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseSANExtension(der cryptobyte.String) (dnsNames, emailAddresses []string, ipAddresses []net.IP, uris []*url.URL, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseSANExtension(der cryptobyte.String) (dnsNames, emailAddresses []string, ipAddresses []net.IP, uris []*url.URL, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseExtKeyUsageExtension",
              "documentation": {
                "identifier": "parseExtKeyUsageExtension",
                "newPage": false,
                "searchKey": "x509.parseExtKeyUsageExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseExtKeyUsageExtension(der cryptobyte.String) ([]ExtKeyUsage, []asn1.ObjectIdentifier, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseExtKeyUsageExtension(der cryptobyte.String) ([]ExtKeyUsage, []asn1.ObjectIdentifier, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseCertificatePoliciesExtension",
              "documentation": {
                "identifier": "parseCertificatePoliciesExtension",
                "newPage": false,
                "searchKey": "x509.parseCertificatePoliciesExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseCertificatePoliciesExtension(der cryptobyte.String) ([]asn1.ObjectIdentifier, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseCertificatePoliciesExtension(der cryptobyte.String) ([]asn1.ObjectIdentifier, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#isValidIPMask",
              "documentation": {
                "identifier": "isValidIPMask",
                "newPage": false,
                "searchKey": "x509.isValidIPMask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isValidIPMask(mask []byte) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isValidIPMask(mask []byte) bool\n```\n\nisValidIPMask reports whether mask consists of zero or more 1 bits, followed by zero bits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseNameConstraintsExtension",
              "documentation": {
                "identifier": "parseNameConstraintsExtension",
                "newPage": false,
                "searchKey": "x509.parseNameConstraintsExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseNameConstraintsExtension(out *Certificate, e pkix.Extension) (unhandled bool, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseNameConstraintsExtension(out *Certificate, e pkix.Extension) (unhandled bool, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#processExtensions",
              "documentation": {
                "identifier": "processExtensions",
                "newPage": false,
                "searchKey": "x509.processExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func processExtensions(out *Certificate) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc processExtensions(out *Certificate) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParseCertificates",
              "documentation": {
                "identifier": "ParseCertificates",
                "newPage": false,
                "searchKey": "x509.ParseCertificates",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseCertificates(der []byte) ([]*Certificate, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseCertificates(der []byte) ([]*Certificate, error)\n```\n\nParseCertificates parses one or more certificates from the given ASN.1 DER data. The certificates must be concatenated with no intermediate padding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#IsEncryptedPEMBlock",
              "documentation": {
                "identifier": "IsEncryptedPEMBlock",
                "newPage": false,
                "searchKey": "x509.IsEncryptedPEMBlock",
                "tags": [
                  "exported",
                  "deprecated"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func IsEncryptedPEMBlock(b *pem.Block) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc IsEncryptedPEMBlock(b *pem.Block) bool\n```\n\nIsEncryptedPEMBlock returns whether the PEM block is password encrypted according to RFC 1423. \n\nDeprecated: Legacy PEM encryption as specified in RFC 1423 is insecure by design. Since it does not authenticate the ciphertext, it is vulnerable to padding oracle attacks that can let an attacker recover the plaintext. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#DecryptPEMBlock",
              "documentation": {
                "identifier": "DecryptPEMBlock",
                "newPage": false,
                "searchKey": "x509.DecryptPEMBlock",
                "tags": [
                  "exported",
                  "deprecated"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func DecryptPEMBlock(b *pem.Block, password []byte) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc DecryptPEMBlock(b *pem.Block, password []byte) ([]byte, error)\n```\n\nDecryptPEMBlock takes a PEM block encrypted according to RFC 1423 and the password used to encrypt it and returns a slice of decrypted DER encoded bytes. It inspects the DEK-Info header to determine the algorithm used for decryption. If no DEK-Info header is present, an error is returned. If an incorrect password is detected an IncorrectPasswordError is returned. Because of deficiencies in the format, it's not always possible to detect an incorrect password. In these cases no error will be returned but the decrypted DER bytes will be random noise. \n\nDeprecated: Legacy PEM encryption as specified in RFC 1423 is insecure by design. Since it does not authenticate the ciphertext, it is vulnerable to padding oracle attacks that can let an attacker recover the plaintext. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#EncryptPEMBlock",
              "documentation": {
                "identifier": "EncryptPEMBlock",
                "newPage": false,
                "searchKey": "x509.EncryptPEMBlock",
                "tags": [
                  "exported",
                  "deprecated"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func EncryptPEMBlock(rand io.Reader, blockType string, data, password []byte, alg PEMCipher) (*pem.Block, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc EncryptPEMBlock(rand io.Reader, blockType string, data, password []byte, alg PEMCipher) (*pem.Block, error)\n```\n\nEncryptPEMBlock returns a PEM block of the specified type holding the given DER encoded data encrypted with the specified algorithm and password according to RFC 1423. \n\nDeprecated: Legacy PEM encryption as specified in RFC 1423 is insecure by design. Since it does not authenticate the ciphertext, it is vulnerable to padding oracle attacks that can let an attacker recover the plaintext. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParsePKCS1PrivateKey",
              "documentation": {
                "identifier": "ParsePKCS1PrivateKey",
                "newPage": false,
                "searchKey": "x509.ParsePKCS1PrivateKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParsePKCS1PrivateKey(der []byte) (*rsa.PrivateKey, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParsePKCS1PrivateKey(der []byte) (*rsa.PrivateKey, error)\n```\n\nParsePKCS1PrivateKey parses an RSA private key in PKCS #1, ASN.1 DER form. \n\nThis kind of key is commonly encoded in PEM blocks of type \"RSA PRIVATE KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MarshalPKCS1PrivateKey",
              "documentation": {
                "identifier": "MarshalPKCS1PrivateKey",
                "newPage": false,
                "searchKey": "x509.MarshalPKCS1PrivateKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalPKCS1PrivateKey(key *rsa.PrivateKey) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalPKCS1PrivateKey(key *rsa.PrivateKey) []byte\n```\n\nMarshalPKCS1PrivateKey converts an RSA private key to PKCS #1, ASN.1 DER form. \n\nThis kind of key is commonly encoded in PEM blocks of type \"RSA PRIVATE KEY\". For a more flexible key format which is not RSA specific, use MarshalPKCS8PrivateKey. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParsePKCS1PublicKey",
              "documentation": {
                "identifier": "ParsePKCS1PublicKey",
                "newPage": false,
                "searchKey": "x509.ParsePKCS1PublicKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParsePKCS1PublicKey(der []byte) (*rsa.PublicKey, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParsePKCS1PublicKey(der []byte) (*rsa.PublicKey, error)\n```\n\nParsePKCS1PublicKey parses an RSA public key in PKCS #1, ASN.1 DER form. \n\nThis kind of key is commonly encoded in PEM blocks of type \"RSA PUBLIC KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MarshalPKCS1PublicKey",
              "documentation": {
                "identifier": "MarshalPKCS1PublicKey",
                "newPage": false,
                "searchKey": "x509.MarshalPKCS1PublicKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalPKCS1PublicKey(key *rsa.PublicKey) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalPKCS1PublicKey(key *rsa.PublicKey) []byte\n```\n\nMarshalPKCS1PublicKey converts an RSA public key to PKCS #1, ASN.1 DER form. \n\nThis kind of key is commonly encoded in PEM blocks of type \"RSA PUBLIC KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParsePKCS8PrivateKey",
              "documentation": {
                "identifier": "ParsePKCS8PrivateKey",
                "newPage": false,
                "searchKey": "x509.ParsePKCS8PrivateKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParsePKCS8PrivateKey(der []byte) (key interface{}, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParsePKCS8PrivateKey(der []byte) (key interface{}, err error)\n```\n\nParsePKCS8PrivateKey parses an unencrypted private key in PKCS #8, ASN.1 DER form. \n\nIt returns a *rsa.PrivateKey, a *ecdsa.PrivateKey, or a ed25519.PrivateKey. More types might be supported in the future. \n\nThis kind of key is commonly encoded in PEM blocks of type \"PRIVATE KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MarshalPKCS8PrivateKey",
              "documentation": {
                "identifier": "MarshalPKCS8PrivateKey",
                "newPage": false,
                "searchKey": "x509.MarshalPKCS8PrivateKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalPKCS8PrivateKey(key interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalPKCS8PrivateKey(key interface{}) ([]byte, error)\n```\n\nMarshalPKCS8PrivateKey converts a private key to PKCS #8, ASN.1 DER form. \n\nThe following key types are currently supported: *rsa.PrivateKey, *ecdsa.PrivateKey and ed25519.PrivateKey. Unsupported key types result in an error. \n\nThis kind of key is commonly encoded in PEM blocks of type \"PRIVATE KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#initSystemRoots",
              "documentation": {
                "identifier": "initSystemRoots",
                "newPage": false,
                "searchKey": "x509.initSystemRoots",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func initSystemRoots()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc initSystemRoots()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#isRootCertificate",
              "documentation": {
                "identifier": "isRootCertificate",
                "newPage": false,
                "searchKey": "x509.isRootCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isRootCertificate(cert *Certificate) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isRootCertificate(cert *Certificate) bool\n```\n\nisRootCertificate reports whether Subject and Issuer match. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#sslTrustSettingsResult",
              "documentation": {
                "identifier": "sslTrustSettingsResult",
                "newPage": false,
                "searchKey": "x509.sslTrustSettingsResult",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func sslTrustSettingsResult(cert macOS.CFRef) (macOS.SecTrustSettingsResult, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc sslTrustSettingsResult(cert macOS.CFRef) (macOS.SecTrustSettingsResult, error)\n```\n\nsslTrustSettingsResult obtains the final kSecTrustSettingsResult value for a certificate in the user or admin domain, combining usage constraints for the SSL SecTrustSettingsPolicy, \n\nIt ignores SecTrustSettingsKeyUsage and kSecTrustSettingsAllowedError, and doesn't support kSecTrustSettingsDefaultRootCertSetting. \n\n[https://developer.apple.com/documentation/security/1400261-sectrustsettingscopytrustsetting](https://developer.apple.com/documentation/security/1400261-sectrustsettingscopytrustsetting) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParseECPrivateKey",
              "documentation": {
                "identifier": "ParseECPrivateKey",
                "newPage": false,
                "searchKey": "x509.ParseECPrivateKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseECPrivateKey(der []byte) (*ecdsa.PrivateKey, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseECPrivateKey(der []byte) (*ecdsa.PrivateKey, error)\n```\n\nParseECPrivateKey parses an EC private key in SEC 1, ASN.1 DER form. \n\nThis kind of key is commonly encoded in PEM blocks of type \"EC PRIVATE KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MarshalECPrivateKey",
              "documentation": {
                "identifier": "MarshalECPrivateKey",
                "newPage": false,
                "searchKey": "x509.MarshalECPrivateKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalECPrivateKey(key *ecdsa.PrivateKey) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalECPrivateKey(key *ecdsa.PrivateKey) ([]byte, error)\n```\n\nMarshalECPrivateKey converts an EC private key to SEC 1, ASN.1 DER form. \n\nThis kind of key is commonly encoded in PEM blocks of type \"EC PRIVATE KEY\". For a more flexible key format which is not EC specific, use MarshalPKCS8PrivateKey. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalECPrivateKeyWithOID",
              "documentation": {
                "identifier": "marshalECPrivateKeyWithOID",
                "newPage": false,
                "searchKey": "x509.marshalECPrivateKeyWithOID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalECPrivateKeyWithOID(key *ecdsa.PrivateKey, oid asn1.ObjectIdentifier) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalECPrivateKeyWithOID(key *ecdsa.PrivateKey, oid asn1.ObjectIdentifier) ([]byte, error)\n```\n\nmarshalECPrivateKey marshals an EC private key into ASN.1, DER format and sets the curve ID to the given OID, or omits it if OID is nil. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseECPrivateKey",
              "documentation": {
                "identifier": "parseECPrivateKey",
                "newPage": false,
                "searchKey": "x509.parseECPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseECPrivateKey(namedCurveOID *asn1.ObjectIdentifier, der []byte) (key *ecdsa.PrivateKey, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseECPrivateKey(namedCurveOID *asn1.ObjectIdentifier, der []byte) (key *ecdsa.PrivateKey, err error)\n```\n\nparseECPrivateKey parses an ASN.1 Elliptic Curve Private Key Structure. The OID for the named curve may be provided from another source (such as the PKCS8 container) - if it is provided then use this instead of the OID that may exist in the EC private key structure. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#domainToReverseLabels",
              "documentation": {
                "identifier": "domainToReverseLabels",
                "newPage": false,
                "searchKey": "x509.domainToReverseLabels",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func domainToReverseLabels(domain string) (reverseLabels []string, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc domainToReverseLabels(domain string) (reverseLabels []string, ok bool)\n```\n\ndomainToReverseLabels converts a textual domain name like foo.example.com to the list of labels in reverse order, e.g. [\"com\", \"example\", \"foo\"]. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchEmailConstraint",
              "documentation": {
                "identifier": "matchEmailConstraint",
                "newPage": false,
                "searchKey": "x509.matchEmailConstraint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchEmailConstraint(mailbox rfc2821Mailbox, constraint string) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchEmailConstraint(mailbox rfc2821Mailbox, constraint string) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchURIConstraint",
              "documentation": {
                "identifier": "matchURIConstraint",
                "newPage": false,
                "searchKey": "x509.matchURIConstraint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchURIConstraint(uri *url.URL, constraint string) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchURIConstraint(uri *url.URL, constraint string) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchIPConstraint",
              "documentation": {
                "identifier": "matchIPConstraint",
                "newPage": false,
                "searchKey": "x509.matchIPConstraint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchIPConstraint(ip net.IP, constraint *net.IPNet) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchIPConstraint(ip net.IP, constraint *net.IPNet) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchDomainConstraint",
              "documentation": {
                "identifier": "matchDomainConstraint",
                "newPage": false,
                "searchKey": "x509.matchDomainConstraint",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchDomainConstraint(domain, constraint string) (bool, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchDomainConstraint(domain, constraint string) (bool, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#appendToFreshChain",
              "documentation": {
                "identifier": "appendToFreshChain",
                "newPage": false,
                "searchKey": "x509.appendToFreshChain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func appendToFreshChain(chain []*Certificate, cert *Certificate) []*Certificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc appendToFreshChain(chain []*Certificate, cert *Certificate) []*Certificate\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#validHostnamePattern",
              "documentation": {
                "identifier": "validHostnamePattern",
                "newPage": false,
                "searchKey": "x509.validHostnamePattern",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validHostnamePattern(host string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validHostnamePattern(host string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#validHostnameInput",
              "documentation": {
                "identifier": "validHostnameInput",
                "newPage": false,
                "searchKey": "x509.validHostnameInput",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validHostnameInput(host string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validHostnameInput(host string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#validHostname",
              "documentation": {
                "identifier": "validHostname",
                "newPage": false,
                "searchKey": "x509.validHostname",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func validHostname(host string, isPattern bool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc validHostname(host string, isPattern bool) bool\n```\n\nvalidHostname reports whether host is a valid hostname that can be matched or matched against according to RFC 6125 2.2, with some leniency to accommodate legacy values. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchExactly",
              "documentation": {
                "identifier": "matchExactly",
                "newPage": false,
                "searchKey": "x509.matchExactly",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchExactly(hostA, hostB string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchExactly(hostA, hostB string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#matchHostnames",
              "documentation": {
                "identifier": "matchHostnames",
                "newPage": false,
                "searchKey": "x509.matchHostnames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func matchHostnames(pattern, host string) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc matchHostnames(pattern, host string) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#toLowerCaseASCII",
              "documentation": {
                "identifier": "toLowerCaseASCII",
                "newPage": false,
                "searchKey": "x509.toLowerCaseASCII",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func toLowerCaseASCII(in string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc toLowerCaseASCII(in string) string\n```\n\ntoLowerCaseASCII returns a lower-case version of in. See RFC 6125 6.4.1. We use an explicitly ASCII function to avoid any sharp corners resulting from performing Unicode operations on DNS labels. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#checkChainForKeyUsage",
              "documentation": {
                "identifier": "checkChainForKeyUsage",
                "newPage": false,
                "searchKey": "x509.checkChainForKeyUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkChainForKeyUsage(chain []*Certificate, keyUsages []ExtKeyUsage) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkChainForKeyUsage(chain []*Certificate, keyUsages []ExtKeyUsage) bool\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParsePKIXPublicKey",
              "documentation": {
                "identifier": "ParsePKIXPublicKey",
                "newPage": false,
                "searchKey": "x509.ParsePKIXPublicKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParsePKIXPublicKey(derBytes []byte) (pub interface{}, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParsePKIXPublicKey(derBytes []byte) (pub interface{}, err error)\n```\n\nParsePKIXPublicKey parses a public key in PKIX, ASN.1 DER form. The encoded public key is a SubjectPublicKeyInfo structure (see RFC 5280, Section 4.1). \n\nIt returns a *rsa.PublicKey, *dsa.PublicKey, *ecdsa.PublicKey, or ed25519.PublicKey. More types might be supported in the future. \n\nThis kind of key is commonly encoded in PEM blocks of type \"PUBLIC KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalPublicKey",
              "documentation": {
                "identifier": "marshalPublicKey",
                "newPage": false,
                "searchKey": "x509.marshalPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalPublicKey(pub interface{}) (publicKeyBytes []byte, publicKeyAlgorithm pkix.AlgorithmIdentifier, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalPublicKey(pub interface{}) (publicKeyBytes []byte, publicKeyAlgorithm pkix.AlgorithmIdentifier, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#MarshalPKIXPublicKey",
              "documentation": {
                "identifier": "MarshalPKIXPublicKey",
                "newPage": false,
                "searchKey": "x509.MarshalPKIXPublicKey",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func MarshalPKIXPublicKey(pub interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc MarshalPKIXPublicKey(pub interface{}) ([]byte, error)\n```\n\nMarshalPKIXPublicKey converts a public key to PKIX, ASN.1 DER form. The encoded public key is a SubjectPublicKeyInfo structure (see RFC 5280, Section 4.1). \n\nThe following key types are currently supported: *rsa.PublicKey, *ecdsa.PublicKey and ed25519.PublicKey. Unsupported key types result in an error. \n\nThis kind of key is commonly encoded in PEM blocks of type \"PUBLIC KEY\". \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#namedCurveFromOID",
              "documentation": {
                "identifier": "namedCurveFromOID",
                "newPage": false,
                "searchKey": "x509.namedCurveFromOID",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func namedCurveFromOID(oid asn1.ObjectIdentifier) elliptic.Curve"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc namedCurveFromOID(oid asn1.ObjectIdentifier) elliptic.Curve\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidFromNamedCurve",
              "documentation": {
                "identifier": "oidFromNamedCurve",
                "newPage": false,
                "searchKey": "x509.oidFromNamedCurve",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func oidFromNamedCurve(curve elliptic.Curve) (asn1.ObjectIdentifier, bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc oidFromNamedCurve(curve elliptic.Curve) (asn1.ObjectIdentifier, bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidFromExtKeyUsage",
              "documentation": {
                "identifier": "oidFromExtKeyUsage",
                "newPage": false,
                "searchKey": "x509.oidFromExtKeyUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func oidFromExtKeyUsage(eku ExtKeyUsage) (oid asn1.ObjectIdentifier, ok bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc oidFromExtKeyUsage(eku ExtKeyUsage) (oid asn1.ObjectIdentifier, ok bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#signaturePublicKeyAlgoMismatchError",
              "documentation": {
                "identifier": "signaturePublicKeyAlgoMismatchError",
                "newPage": false,
                "searchKey": "x509.signaturePublicKeyAlgoMismatchError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func signaturePublicKeyAlgoMismatchError(expectedPubKeyAlgo PublicKeyAlgorithm, pubKey interface{}) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc signaturePublicKeyAlgoMismatchError(expectedPubKeyAlgo PublicKeyAlgorithm, pubKey interface{}) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#checkSignature",
              "documentation": {
                "identifier": "checkSignature",
                "newPage": false,
                "searchKey": "x509.checkSignature",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func checkSignature(algo SignatureAlgorithm, signed, signature []byte, publicKey crypto.PublicKey) (err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc checkSignature(algo SignatureAlgorithm, signed, signature []byte, publicKey crypto.PublicKey) (err error)\n```\n\nCheckSignature verifies that signature is a valid signature over signed from a crypto.PublicKey. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#reverseBitsInAByte",
              "documentation": {
                "identifier": "reverseBitsInAByte",
                "newPage": false,
                "searchKey": "x509.reverseBitsInAByte",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func reverseBitsInAByte(in byte) byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc reverseBitsInAByte(in byte) byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#asn1BitLength",
              "documentation": {
                "identifier": "asn1BitLength",
                "newPage": false,
                "searchKey": "x509.asn1BitLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func asn1BitLength(bitString []byte) int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc asn1BitLength(bitString []byte) int\n```\n\nasn1BitLength returns the bit-length of bitString by considering the most-significant bit in a byte to be the \"first\" bit. This convention matches ASN.1, but differs from almost everything else. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#oidInExtensions",
              "documentation": {
                "identifier": "oidInExtensions",
                "newPage": false,
                "searchKey": "x509.oidInExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func oidInExtensions(oid asn1.ObjectIdentifier, extensions []pkix.Extension) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc oidInExtensions(oid asn1.ObjectIdentifier, extensions []pkix.Extension) bool\n```\n\noidNotInExtensions reports whether an extension with the given oid exists in extensions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalSANs",
              "documentation": {
                "identifier": "marshalSANs",
                "newPage": false,
                "searchKey": "x509.marshalSANs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalSANs(dnsNames, emailAddresses []string, ipAddresses []net.IP, uris []*url.URL) (derBytes []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalSANs(dnsNames, emailAddresses []string, ipAddresses []net.IP, uris []*url.URL) (derBytes []byte, err error)\n```\n\nmarshalSANs marshals a list of addresses into a the contents of an X.509 SubjectAlternativeName extension. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#isIA5String",
              "documentation": {
                "identifier": "isIA5String",
                "newPage": false,
                "searchKey": "x509.isIA5String",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func isIA5String(s string) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc isIA5String(s string) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#buildCertExtensions",
              "documentation": {
                "identifier": "buildCertExtensions",
                "newPage": false,
                "searchKey": "x509.buildCertExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func buildCertExtensions(template *Certificate, subjectIsEmpty bool, authorityKeyId []byte, subjectKeyId []byte) (ret []pkix.Extension, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc buildCertExtensions(template *Certificate, subjectIsEmpty bool, authorityKeyId []byte, subjectKeyId []byte) (ret []pkix.Extension, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalKeyUsage",
              "documentation": {
                "identifier": "marshalKeyUsage",
                "newPage": false,
                "searchKey": "x509.marshalKeyUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalKeyUsage(ku KeyUsage) (pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalKeyUsage(ku KeyUsage) (pkix.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalExtKeyUsage",
              "documentation": {
                "identifier": "marshalExtKeyUsage",
                "newPage": false,
                "searchKey": "x509.marshalExtKeyUsage",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalExtKeyUsage(extUsages []ExtKeyUsage, unknownUsages []asn1.ObjectIdentifier) (pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalExtKeyUsage(extUsages []ExtKeyUsage, unknownUsages []asn1.ObjectIdentifier) (pkix.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalBasicConstraints",
              "documentation": {
                "identifier": "marshalBasicConstraints",
                "newPage": false,
                "searchKey": "x509.marshalBasicConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalBasicConstraints(isCA bool, maxPathLen int, maxPathLenZero bool) (pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalBasicConstraints(isCA bool, maxPathLen int, maxPathLenZero bool) (pkix.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#marshalCertificatePolicies",
              "documentation": {
                "identifier": "marshalCertificatePolicies",
                "newPage": false,
                "searchKey": "x509.marshalCertificatePolicies",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func marshalCertificatePolicies(policyIdentifiers []asn1.ObjectIdentifier) (pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc marshalCertificatePolicies(policyIdentifiers []asn1.ObjectIdentifier) (pkix.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#buildCSRExtensions",
              "documentation": {
                "identifier": "buildCSRExtensions",
                "newPage": false,
                "searchKey": "x509.buildCSRExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func buildCSRExtensions(template *CertificateRequest) ([]pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc buildCSRExtensions(template *CertificateRequest) ([]pkix.Extension, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#subjectBytes",
              "documentation": {
                "identifier": "subjectBytes",
                "newPage": false,
                "searchKey": "x509.subjectBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func subjectBytes(cert *Certificate) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc subjectBytes(cert *Certificate) ([]byte, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#signingParamsForPublicKey",
              "documentation": {
                "identifier": "signingParamsForPublicKey",
                "newPage": false,
                "searchKey": "x509.signingParamsForPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func signingParamsForPublicKey(pub interface{}, requestedSigAlgo SignatureAlgorithm) (hashFunc crypto.Hash, sigAlgo pkix.AlgorithmIdentifier, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc signingParamsForPublicKey(pub interface{}, requestedSigAlgo SignatureAlgorithm) (hashFunc crypto.Hash, sigAlgo pkix.AlgorithmIdentifier, err error)\n```\n\nsigningParamsForPublicKey returns the parameters to use for signing with priv. If requestedSigAlgo is not zero then it overrides the default signature algorithm. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CreateCertificate",
              "documentation": {
                "identifier": "CreateCertificate",
                "newPage": false,
                "searchKey": "x509.CreateCertificate",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CreateCertificate(rand io.Reader, template, parent *Certificate, pub, priv interface{}) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CreateCertificate(rand io.Reader, template, parent *Certificate, pub, priv interface{}) ([]byte, error)\n```\n\nCreateCertificate creates a new X.509 v3 certificate based on a template. The following members of template are currently used: \n\n```\n- AuthorityKeyId\n- BasicConstraintsValid\n- CRLDistributionPoints\n- DNSNames\n- EmailAddresses\n- ExcludedDNSDomains\n- ExcludedEmailAddresses\n- ExcludedIPRanges\n- ExcludedURIDomains\n- ExtKeyUsage\n- ExtraExtensions\n- IPAddresses\n- IsCA\n- IssuingCertificateURL\n- KeyUsage\n- MaxPathLen\n- MaxPathLenZero\n- NotAfter\n- NotBefore\n- OCSPServer\n- PermittedDNSDomains\n- PermittedDNSDomainsCritical\n- PermittedEmailAddresses\n- PermittedIPRanges\n- PermittedURIDomains\n- PolicyIdentifiers\n- SerialNumber\n- SignatureAlgorithm\n- Subject\n- SubjectKeyId\n- URIs\n- UnknownExtKeyUsage\n\n```\nThe certificate is signed by parent. If parent is equal to template then the certificate is self-signed. The parameter pub is the public key of the certificate to be generated and priv is the private key of the signer. \n\nThe returned slice is the certificate in DER encoding. \n\nThe currently supported key types are *rsa.PublicKey, *ecdsa.PublicKey and ed25519.PublicKey. pub must be a supported key type, and priv must be a crypto.Signer with a supported public key. \n\nThe AuthorityKeyId will be taken from the SubjectKeyId of parent, if any, unless the resulting certificate is self-signed. Otherwise the value from template will be used. \n\nIf SubjectKeyId from template is empty and the template is a CA, SubjectKeyId will be generated from the hash of the public key. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParseCRL",
              "documentation": {
                "identifier": "ParseCRL",
                "newPage": false,
                "searchKey": "x509.ParseCRL",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseCRL(crlBytes []byte) (*pkix.CertificateList, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseCRL(crlBytes []byte) (*pkix.CertificateList, error)\n```\n\nParseCRL parses a CRL from the given bytes. It's often the case that PEM encoded CRLs will appear where they should be DER encoded, so this function will transparently handle PEM encoding as long as there isn't any leading garbage. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#ParseDERCRL",
              "documentation": {
                "identifier": "ParseDERCRL",
                "newPage": false,
                "searchKey": "x509.ParseDERCRL",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ParseDERCRL(derBytes []byte) (*pkix.CertificateList, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ParseDERCRL(derBytes []byte) (*pkix.CertificateList, error)\n```\n\nParseDERCRL parses a DER encoded CRL from the given bytes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#newRawAttributes",
              "documentation": {
                "identifier": "newRawAttributes",
                "newPage": false,
                "searchKey": "x509.newRawAttributes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func newRawAttributes(attributes []pkix.AttributeTypeAndValueSET) ([]asn1.RawValue, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc newRawAttributes(attributes []pkix.AttributeTypeAndValueSET) ([]asn1.RawValue, error)\n```\n\nnewRawAttributes converts AttributeTypeAndValueSETs from a template CertificateRequest's Attributes into tbsCertificateRequest RawAttributes. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseRawAttributes",
              "documentation": {
                "identifier": "parseRawAttributes",
                "newPage": false,
                "searchKey": "x509.parseRawAttributes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseRawAttributes(rawAttributes []asn1.RawValue) []pkix.AttributeTypeAndValueSET"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseRawAttributes(rawAttributes []asn1.RawValue) []pkix.AttributeTypeAndValueSET\n```\n\nparseRawAttributes Unmarshals RawAttributes into AttributeTypeAndValueSETs. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseCSRExtensions",
              "documentation": {
                "identifier": "parseCSRExtensions",
                "newPage": false,
                "searchKey": "x509.parseCSRExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseCSRExtensions(rawAttributes []asn1.RawValue) ([]pkix.Extension, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseCSRExtensions(rawAttributes []asn1.RawValue) ([]pkix.Extension, error)\n```\n\nparseCSRExtensions parses the attributes from a CSR and extracts any requested extensions. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CreateCertificateRequest",
              "documentation": {
                "identifier": "CreateCertificateRequest",
                "newPage": false,
                "searchKey": "x509.CreateCertificateRequest",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CreateCertificateRequest(rand io.Reader, template *CertificateRequest, priv interface{}) (csr []byte, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CreateCertificateRequest(rand io.Reader, template *CertificateRequest, priv interface{}) (csr []byte, err error)\n```\n\nCreateCertificateRequest creates a new certificate request based on a template. The following members of template are used: \n\n```\n- SignatureAlgorithm\n- Subject\n- DNSNames\n- EmailAddresses\n- IPAddresses\n- URIs\n- ExtraExtensions\n- Attributes (deprecated)\n\n```\npriv is the private key to sign the CSR with, and the corresponding public key will be included in the CSR. It must implement crypto.Signer and its Public() method must return a *rsa.PublicKey or a *ecdsa.PublicKey or a ed25519.PublicKey. (A *rsa.PrivateKey, *ecdsa.PrivateKey or ed25519.PrivateKey satisfies this.) \n\nThe returned slice is the certificate request in DER encoding. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#CreateRevocationList",
              "documentation": {
                "identifier": "CreateRevocationList",
                "newPage": false,
                "searchKey": "x509.CreateRevocationList",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func CreateRevocationList(rand io.Reader, template *RevocationList, issuer *Certificate, priv crypto.Signer) ([]byte, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc CreateRevocationList(rand io.Reader, template *RevocationList, issuer *Certificate, priv crypto.Signer) ([]byte, error)\n```\n\nCreateRevocationList creates a new X.509 v2 Certificate Revocation List, according to RFC 5280, based on template. \n\nThe CRL is signed by priv which should be the private key associated with the public key in the issuer certificate. \n\nThe issuer may not be nil, and the crlSign bit must be set in KeyUsage in order to use it as a CRL issuer. \n\nThe issuer distinguished name CRL field and authority key identifier extension are populated using the issuer certificate. issuer must have SubjectKeyId set. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#customConstraintsExtension",
              "documentation": {
                "identifier": "customConstraintsExtension",
                "newPage": false,
                "searchKey": "x509.customConstraintsExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func customConstraintsExtension(typeNum int, constraint []byte, isExcluded bool) pkix.Extension"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc customConstraintsExtension(typeNum int, constraint []byte, isExcluded bool) pkix.Extension\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#addConstraintsToTemplate",
              "documentation": {
                "identifier": "addConstraintsToTemplate",
                "newPage": false,
                "searchKey": "x509.addConstraintsToTemplate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func addConstraintsToTemplate(constraints constraintsSpec, template *Certificate) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc addConstraintsToTemplate(constraints constraintsSpec, template *Certificate) error\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseEKUs",
              "documentation": {
                "identifier": "parseEKUs",
                "newPage": false,
                "searchKey": "x509.parseEKUs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseEKUs(ekuStrs []string) (ekus []ExtKeyUsage, unknowns []asn1.ObjectIdentifier, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseEKUs(ekuStrs []string) (ekus []ExtKeyUsage, unknowns []asn1.ObjectIdentifier, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestConstraintCases",
              "documentation": {
                "identifier": "TestConstraintCases",
                "newPage": false,
                "searchKey": "x509.TestConstraintCases",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestConstraintCases(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestConstraintCases(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#writePEMsToTempFile",
              "documentation": {
                "identifier": "writePEMsToTempFile",
                "newPage": false,
                "searchKey": "x509.writePEMsToTempFile",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func writePEMsToTempFile(certs []*Certificate) *os.File"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc writePEMsToTempFile(certs []*Certificate) *os.File\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testChainAgainstOpenSSL",
              "documentation": {
                "identifier": "testChainAgainstOpenSSL",
                "newPage": false,
                "searchKey": "x509.testChainAgainstOpenSSL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testChainAgainstOpenSSL(t *testing.T, leaf *Certificate, intermediates, roots *CertPool) (string, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testChainAgainstOpenSSL(t *testing.T, leaf *Certificate, intermediates, roots *CertPool) (string, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestRFC2821Parsing",
              "documentation": {
                "identifier": "TestRFC2821Parsing",
                "newPage": false,
                "searchKey": "x509.TestRFC2821Parsing",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRFC2821Parsing(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRFC2821Parsing(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestBadNamesInConstraints",
              "documentation": {
                "identifier": "TestBadNamesInConstraints",
                "newPage": false,
                "searchKey": "x509.TestBadNamesInConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadNamesInConstraints(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadNamesInConstraints(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestBadNamesInSANs",
              "documentation": {
                "identifier": "TestBadNamesInSANs",
                "newPage": false,
                "searchKey": "x509.TestBadNamesInSANs",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadNamesInSANs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadNamesInSANs(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestDecrypt",
              "documentation": {
                "identifier": "TestDecrypt",
                "newPage": false,
                "searchKey": "x509.TestDecrypt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecrypt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestEncrypt",
              "documentation": {
                "identifier": "TestEncrypt",
                "newPage": false,
                "searchKey": "x509.TestEncrypt",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncrypt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestIncompleteBlock",
              "documentation": {
                "identifier": "TestIncompleteBlock",
                "newPage": false,
                "searchKey": "x509.TestIncompleteBlock",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIncompleteBlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIncompleteBlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testingKey",
              "documentation": {
                "identifier": "testingKey",
                "newPage": false,
                "searchKey": "x509.testingKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testingKey(s string) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testingKey(s string) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPKCS8",
              "documentation": {
                "identifier": "TestPKCS8",
                "newPage": false,
                "searchKey": "x509.TestPKCS8",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPKCS8(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPKCS8(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPKCS8MismatchKeyFormat",
              "documentation": {
                "identifier": "TestPKCS8MismatchKeyFormat",
                "newPage": false,
                "searchKey": "x509.TestPKCS8MismatchKeyFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPKCS8MismatchKeyFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPKCS8MismatchKeyFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestSystemRoots",
              "documentation": {
                "identifier": "TestSystemRoots",
                "newPage": false,
                "searchKey": "x509.TestSystemRoots",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSystemRoots(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSystemRoots(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParseECPrivateKey",
              "documentation": {
                "identifier": "TestParseECPrivateKey",
                "newPage": false,
                "searchKey": "x509.TestParseECPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseECPrivateKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseECPrivateKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestECMismatchKeyFormat",
              "documentation": {
                "identifier": "TestECMismatchKeyFormat",
                "newPage": false,
                "searchKey": "x509.TestECMismatchKeyFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestECMismatchKeyFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestECMismatchKeyFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectHostnameError",
              "documentation": {
                "identifier": "expectHostnameError",
                "newPage": false,
                "searchKey": "x509.expectHostnameError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectHostnameError(msg string) func(*testing.T, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectHostnameError(msg string) func(*testing.T, error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectExpired",
              "documentation": {
                "identifier": "expectExpired",
                "newPage": false,
                "searchKey": "x509.expectExpired",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectExpired(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectExpired(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectUsageError",
              "documentation": {
                "identifier": "expectUsageError",
                "newPage": false,
                "searchKey": "x509.expectUsageError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectUsageError(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectUsageError(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectAuthorityUnknown",
              "documentation": {
                "identifier": "expectAuthorityUnknown",
                "newPage": false,
                "searchKey": "x509.expectAuthorityUnknown",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectAuthorityUnknown(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectAuthorityUnknown(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectHashError",
              "documentation": {
                "identifier": "expectHashError",
                "newPage": false,
                "searchKey": "x509.expectHashError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectHashError(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectHashError(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectNameConstraintsError",
              "documentation": {
                "identifier": "expectNameConstraintsError",
                "newPage": false,
                "searchKey": "x509.expectNameConstraintsError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectNameConstraintsError(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectNameConstraintsError(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectNotAuthorizedError",
              "documentation": {
                "identifier": "expectNotAuthorizedError",
                "newPage": false,
                "searchKey": "x509.expectNotAuthorizedError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectNotAuthorizedError(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectNotAuthorizedError(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#expectUnhandledCriticalExtension",
              "documentation": {
                "identifier": "expectUnhandledCriticalExtension",
                "newPage": false,
                "searchKey": "x509.expectUnhandledCriticalExtension",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func expectUnhandledCriticalExtension(t *testing.T, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc expectUnhandledCriticalExtension(t *testing.T, err error)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testVerify",
              "documentation": {
                "identifier": "testVerify",
                "newPage": false,
                "searchKey": "x509.testVerify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testVerify(t *testing.T, test verifyTest, useSystemRoots bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testVerify(t *testing.T, test verifyTest, useSystemRoots bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestGoVerify",
              "documentation": {
                "identifier": "TestGoVerify",
                "newPage": false,
                "searchKey": "x509.TestGoVerify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestGoVerify(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestGoVerify(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestSystemVerify",
              "documentation": {
                "identifier": "TestSystemVerify",
                "newPage": false,
                "searchKey": "x509.TestSystemVerify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSystemVerify(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSystemVerify(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#chainToDebugString",
              "documentation": {
                "identifier": "chainToDebugString",
                "newPage": false,
                "searchKey": "x509.chainToDebugString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func chainToDebugString(chain []*Certificate) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc chainToDebugString(chain []*Certificate) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#nameToKey",
              "documentation": {
                "identifier": "nameToKey",
                "newPage": false,
                "searchKey": "x509.nameToKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func nameToKey(name *pkix.Name) string"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc nameToKey(name *pkix.Name) string\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestUnknownAuthorityError",
              "documentation": {
                "identifier": "TestUnknownAuthorityError",
                "newPage": false,
                "searchKey": "x509.TestUnknownAuthorityError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnknownAuthorityError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnknownAuthorityError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestNameConstraints",
              "documentation": {
                "identifier": "TestNameConstraints",
                "newPage": false,
                "searchKey": "x509.TestNameConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNameConstraints(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNameConstraints(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestValidHostname",
              "documentation": {
                "identifier": "TestValidHostname",
                "newPage": false,
                "searchKey": "x509.TestValidHostname",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestValidHostname(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestValidHostname(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPathologicalChain",
              "documentation": {
                "identifier": "TestPathologicalChain",
                "newPage": false,
                "searchKey": "x509.TestPathologicalChain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPathologicalChain(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPathologicalChain(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestLongChain",
              "documentation": {
                "identifier": "TestLongChain",
                "newPage": false,
                "searchKey": "x509.TestLongChain",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestLongChain(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestLongChain(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestSystemRootsError",
              "documentation": {
                "identifier": "TestSystemRootsError",
                "newPage": false,
                "searchKey": "x509.TestSystemRootsError",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSystemRootsError(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSystemRootsError(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestSystemRootsErrorUnwrap",
              "documentation": {
                "identifier": "TestSystemRootsErrorUnwrap",
                "newPage": false,
                "searchKey": "x509.TestSystemRootsErrorUnwrap",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSystemRootsErrorUnwrap(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSystemRootsErrorUnwrap(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParsePKCS1PrivateKey",
              "documentation": {
                "identifier": "TestParsePKCS1PrivateKey",
                "newPage": false,
                "searchKey": "x509.TestParsePKCS1PrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParsePKCS1PrivateKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParsePKCS1PrivateKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPKCS1MismatchPublicKeyFormat",
              "documentation": {
                "identifier": "TestPKCS1MismatchPublicKeyFormat",
                "newPage": false,
                "searchKey": "x509.TestPKCS1MismatchPublicKeyFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPKCS1MismatchPublicKeyFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPKCS1MismatchPublicKeyFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#testParsePKIXPublicKey",
              "documentation": {
                "identifier": "testParsePKIXPublicKey",
                "newPage": false,
                "searchKey": "x509.testParsePKIXPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func testParsePKIXPublicKey(t *testing.T, pemBytes string) (pub interface{})"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testParsePKIXPublicKey(t *testing.T, pemBytes string) (pub interface{})\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParsePKIXPublicKey",
              "documentation": {
                "identifier": "TestParsePKIXPublicKey",
                "newPage": false,
                "searchKey": "x509.TestParsePKIXPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParsePKIXPublicKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParsePKIXPublicKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPKIXMismatchPublicKeyFormat",
              "documentation": {
                "identifier": "TestPKIXMismatchPublicKeyFormat",
                "newPage": false,
                "searchKey": "x509.TestPKIXMismatchPublicKeyFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPKIXMismatchPublicKeyFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPKIXMismatchPublicKeyFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#init",
              "documentation": {
                "identifier": "init",
                "newPage": false,
                "searchKey": "x509.init",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func init()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc init()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#bigFromString",
              "documentation": {
                "identifier": "bigFromString",
                "newPage": false,
                "searchKey": "x509.bigFromString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func bigFromString(s string) *big.Int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bigFromString(s string) *big.Int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#fromBase10",
              "documentation": {
                "identifier": "fromBase10",
                "newPage": false,
                "searchKey": "x509.fromBase10",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fromBase10(base10 string) *big.Int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fromBase10(base10 string) *big.Int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#bigFromHexString",
              "documentation": {
                "identifier": "bigFromHexString",
                "newPage": false,
                "searchKey": "x509.bigFromHexString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func bigFromHexString(s string) *big.Int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc bigFromHexString(s string) *big.Int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMarshalRSAPrivateKey",
              "documentation": {
                "identifier": "TestMarshalRSAPrivateKey",
                "newPage": false,
                "searchKey": "x509.TestMarshalRSAPrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalRSAPrivateKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalRSAPrivateKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMarshalRSAPublicKey",
              "documentation": {
                "identifier": "TestMarshalRSAPublicKey",
                "newPage": false,
                "searchKey": "x509.TestMarshalRSAPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMarshalRSAPublicKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMarshalRSAPublicKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMatchHostnames",
              "documentation": {
                "identifier": "TestMatchHostnames",
                "newPage": false,
                "searchKey": "x509.TestMatchHostnames",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMatchHostnames(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMatchHostnames(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMatchIP",
              "documentation": {
                "identifier": "TestMatchIP",
                "newPage": false,
                "searchKey": "x509.TestMatchIP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMatchIP(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMatchIP(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCertificateParse",
              "documentation": {
                "identifier": "TestCertificateParse",
                "newPage": false,
                "searchKey": "x509.TestCertificateParse",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCertificateParse(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCertificateParse(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCertificateEqualOnNil",
              "documentation": {
                "identifier": "TestCertificateEqualOnNil",
                "newPage": false,
                "searchKey": "x509.TestCertificateEqualOnNil",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCertificateEqualOnNil(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCertificateEqualOnNil(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMismatchedSignatureAlgorithm",
              "documentation": {
                "identifier": "TestMismatchedSignatureAlgorithm",
                "newPage": false,
                "searchKey": "x509.TestMismatchedSignatureAlgorithm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMismatchedSignatureAlgorithm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMismatchedSignatureAlgorithm(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseCIDR",
              "documentation": {
                "identifier": "parseCIDR",
                "newPage": false,
                "searchKey": "x509.parseCIDR",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseCIDR(s string) *net.IPNet"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseCIDR(s string) *net.IPNet\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#parseURI",
              "documentation": {
                "identifier": "parseURI",
                "newPage": false,
                "searchKey": "x509.parseURI",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func parseURI(s string) *url.URL"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc parseURI(s string) *url.URL\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCreateSelfSignedCertificate",
              "documentation": {
                "identifier": "TestCreateSelfSignedCertificate",
                "newPage": false,
                "searchKey": "x509.TestCreateSelfSignedCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateSelfSignedCertificate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateSelfSignedCertificate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestECDSA",
              "documentation": {
                "identifier": "TestECDSA",
                "newPage": false,
                "searchKey": "x509.TestECDSA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestECDSA(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestECDSA(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParseCertificateWithDsaPublicKey",
              "documentation": {
                "identifier": "TestParseCertificateWithDsaPublicKey",
                "newPage": false,
                "searchKey": "x509.TestParseCertificateWithDsaPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseCertificateWithDsaPublicKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseCertificateWithDsaPublicKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParseCertificateWithDSASignatureAlgorithm",
              "documentation": {
                "identifier": "TestParseCertificateWithDSASignatureAlgorithm",
                "newPage": false,
                "searchKey": "x509.TestParseCertificateWithDSASignatureAlgorithm",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseCertificateWithDSASignatureAlgorithm(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseCertificateWithDSASignatureAlgorithm(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestVerifyCertificateWithDSASignature",
              "documentation": {
                "identifier": "TestVerifyCertificateWithDSASignature",
                "newPage": false,
                "searchKey": "x509.TestVerifyCertificateWithDSASignature",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVerifyCertificateWithDSASignature(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVerifyCertificateWithDSASignature(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestRSAPSSSelfSigned",
              "documentation": {
                "identifier": "TestRSAPSSSelfSigned",
                "newPage": false,
                "searchKey": "x509.TestRSAPSSSelfSigned",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRSAPSSSelfSigned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRSAPSSSelfSigned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestEd25519SelfSigned",
              "documentation": {
                "identifier": "TestEd25519SelfSigned",
                "newPage": false,
                "searchKey": "x509.TestEd25519SelfSigned",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEd25519SelfSigned(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEd25519SelfSigned(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCRLCreation",
              "documentation": {
                "identifier": "TestCRLCreation",
                "newPage": false,
                "searchKey": "x509.TestCRLCreation",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCRLCreation(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCRLCreation(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#fromBase64",
              "documentation": {
                "identifier": "fromBase64",
                "newPage": false,
                "searchKey": "x509.fromBase64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func fromBase64(in string) []byte"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fromBase64(in string) []byte\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParseDERCRL",
              "documentation": {
                "identifier": "TestParseDERCRL",
                "newPage": false,
                "searchKey": "x509.TestParseDERCRL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseDERCRL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseDERCRL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCRLWithoutExpiry",
              "documentation": {
                "identifier": "TestCRLWithoutExpiry",
                "newPage": false,
                "searchKey": "x509.TestCRLWithoutExpiry",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCRLWithoutExpiry(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCRLWithoutExpiry(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParsePEMCRL",
              "documentation": {
                "identifier": "TestParsePEMCRL",
                "newPage": false,
                "searchKey": "x509.TestParsePEMCRL",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParsePEMCRL(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParsePEMCRL(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestImports",
              "documentation": {
                "identifier": "TestImports",
                "newPage": false,
                "searchKey": "x509.TestImports",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestImports(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestImports(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCreateCertificateRequest",
              "documentation": {
                "identifier": "TestCreateCertificateRequest",
                "newPage": false,
                "searchKey": "x509.TestCreateCertificateRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateCertificateRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateCertificateRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCertificateRequestOverrides",
              "documentation": {
                "identifier": "TestCertificateRequestOverrides",
                "newPage": false,
                "searchKey": "x509.TestCertificateRequestOverrides",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCertificateRequestOverrides(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCertificateRequestOverrides(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParseCertificateRequest",
              "documentation": {
                "identifier": "TestParseCertificateRequest",
                "newPage": false,
                "searchKey": "x509.TestParseCertificateRequest",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseCertificateRequest(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseCertificateRequest(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCriticalFlagInCSRRequestedExtensions",
              "documentation": {
                "identifier": "TestCriticalFlagInCSRRequestedExtensions",
                "newPage": false,
                "searchKey": "x509.TestCriticalFlagInCSRRequestedExtensions",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCriticalFlagInCSRRequestedExtensions(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCriticalFlagInCSRRequestedExtensions(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMaxPathLenNotCA",
              "documentation": {
                "identifier": "TestMaxPathLenNotCA",
                "newPage": false,
                "searchKey": "x509.TestMaxPathLenNotCA",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxPathLenNotCA(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxPathLenNotCA(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMaxPathLen",
              "documentation": {
                "identifier": "TestMaxPathLen",
                "newPage": false,
                "searchKey": "x509.TestMaxPathLen",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMaxPathLen(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMaxPathLen(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestNoAuthorityKeyIdInSelfSignedCert",
              "documentation": {
                "identifier": "TestNoAuthorityKeyIdInSelfSignedCert",
                "newPage": false,
                "searchKey": "x509.TestNoAuthorityKeyIdInSelfSignedCert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoAuthorityKeyIdInSelfSignedCert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoAuthorityKeyIdInSelfSignedCert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestNoSubjectKeyIdInCert",
              "documentation": {
                "identifier": "TestNoSubjectKeyIdInCert",
                "newPage": false,
                "searchKey": "x509.TestNoSubjectKeyIdInCert",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestNoSubjectKeyIdInCert(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestNoSubjectKeyIdInCert(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestASN1BitLength",
              "documentation": {
                "identifier": "TestASN1BitLength",
                "newPage": false,
                "searchKey": "x509.TestASN1BitLength",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestASN1BitLength(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestASN1BitLength(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestVerifyEmptyCertificate",
              "documentation": {
                "identifier": "TestVerifyEmptyCertificate",
                "newPage": false,
                "searchKey": "x509.TestVerifyEmptyCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVerifyEmptyCertificate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVerifyEmptyCertificate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestInsecureAlgorithmErrorString",
              "documentation": {
                "identifier": "TestInsecureAlgorithmErrorString",
                "newPage": false,
                "searchKey": "x509.TestInsecureAlgorithmErrorString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInsecureAlgorithmErrorString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInsecureAlgorithmErrorString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMD5",
              "documentation": {
                "identifier": "TestMD5",
                "newPage": false,
                "searchKey": "x509.TestMD5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMD5(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMD5(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestRSAMissingNULLParameters",
              "documentation": {
                "identifier": "TestRSAMissingNULLParameters",
                "newPage": false,
                "searchKey": "x509.TestRSAMissingNULLParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRSAMissingNULLParameters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRSAMissingNULLParameters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestISOOIDInCertificate",
              "documentation": {
                "identifier": "TestISOOIDInCertificate",
                "newPage": false,
                "searchKey": "x509.TestISOOIDInCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestISOOIDInCertificate(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestISOOIDInCertificate(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMultipleRDN",
              "documentation": {
                "identifier": "TestMultipleRDN",
                "newPage": false,
                "searchKey": "x509.TestMultipleRDN",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipleRDN(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipleRDN(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestSystemCertPool",
              "documentation": {
                "identifier": "TestSystemCertPool",
                "newPage": false,
                "searchKey": "x509.TestSystemCertPool",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSystemCertPool(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSystemCertPool(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestEmptyNameConstraints",
              "documentation": {
                "identifier": "TestEmptyNameConstraints",
                "newPage": false,
                "searchKey": "x509.TestEmptyNameConstraints",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptyNameConstraints(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptyNameConstraints(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPKIXNameString",
              "documentation": {
                "identifier": "TestPKIXNameString",
                "newPage": false,
                "searchKey": "x509.TestPKIXNameString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPKIXNameString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPKIXNameString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestRDNSequenceString",
              "documentation": {
                "identifier": "TestRDNSequenceString",
                "newPage": false,
                "searchKey": "x509.TestRDNSequenceString",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRDNSequenceString(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRDNSequenceString(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCriticalNameConstraintWithUnknownType",
              "documentation": {
                "identifier": "TestCriticalNameConstraintWithUnknownType",
                "newPage": false,
                "searchKey": "x509.TestCriticalNameConstraintWithUnknownType",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCriticalNameConstraintWithUnknownType(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCriticalNameConstraintWithUnknownType(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestBadIPMask",
              "documentation": {
                "identifier": "TestBadIPMask",
                "newPage": false,
                "searchKey": "x509.TestBadIPMask",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestBadIPMask(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestBadIPMask(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestAdditionFieldsInGeneralSubtree",
              "documentation": {
                "identifier": "TestAdditionFieldsInGeneralSubtree",
                "newPage": false,
                "searchKey": "x509.TestAdditionFieldsInGeneralSubtree",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestAdditionFieldsInGeneralSubtree(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestAdditionFieldsInGeneralSubtree(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestEmptySubject",
              "documentation": {
                "identifier": "TestEmptySubject",
                "newPage": false,
                "searchKey": "x509.TestEmptySubject",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEmptySubject(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEmptySubject(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestMultipleURLsInCRLDP",
              "documentation": {
                "identifier": "TestMultipleURLsInCRLDP",
                "newPage": false,
                "searchKey": "x509.TestMultipleURLsInCRLDP",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestMultipleURLsInCRLDP(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestMultipleURLsInCRLDP(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestPKCS1MismatchKeyFormat",
              "documentation": {
                "identifier": "TestPKCS1MismatchKeyFormat",
                "newPage": false,
                "searchKey": "x509.TestPKCS1MismatchKeyFormat",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPKCS1MismatchKeyFormat(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPKCS1MismatchKeyFormat(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCreateRevocationList",
              "documentation": {
                "identifier": "TestCreateRevocationList",
                "newPage": false,
                "searchKey": "x509.TestCreateRevocationList",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateRevocationList(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateRevocationList(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestRSAPSAParameters",
              "documentation": {
                "identifier": "TestRSAPSAParameters",
                "newPage": false,
                "searchKey": "x509.TestRSAPSAParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestRSAPSAParameters(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestRSAPSAParameters(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestUnknownExtKey",
              "documentation": {
                "identifier": "TestUnknownExtKey",
                "newPage": false,
                "searchKey": "x509.TestUnknownExtKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestUnknownExtKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestUnknownExtKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestIA5SANEnforcement",
              "documentation": {
                "identifier": "TestIA5SANEnforcement",
                "newPage": false,
                "searchKey": "x509.TestIA5SANEnforcement",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIA5SANEnforcement(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIA5SANEnforcement(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#BenchmarkCreateCertificate",
              "documentation": {
                "identifier": "BenchmarkCreateCertificate",
                "newPage": false,
                "searchKey": "x509.BenchmarkCreateCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkCreateCertificate(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkCreateCertificate(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCreateCertificateBrokenSigner",
              "documentation": {
                "identifier": "TestCreateCertificateBrokenSigner",
                "newPage": false,
                "searchKey": "x509.TestCreateCertificateBrokenSigner",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateCertificateBrokenSigner(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateCertificateBrokenSigner(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCreateCertificateMD5",
              "documentation": {
                "identifier": "TestCreateCertificateMD5",
                "newPage": false,
                "searchKey": "x509.TestCreateCertificateMD5",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCreateCertificateMD5(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCreateCertificateMD5(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#allCerts",
              "documentation": {
                "identifier": "allCerts",
                "newPage": false,
                "searchKey": "x509.allCerts",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func allCerts(t *testing.T, p *CertPool) []*Certificate"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc allCerts(t *testing.T, p *CertPool) []*Certificate\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#certPoolEqual",
              "documentation": {
                "identifier": "certPoolEqual",
                "newPage": false,
                "searchKey": "x509.certPoolEqual",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func certPoolEqual(a, b *CertPool) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc certPoolEqual(a, b *CertPool) bool\n```\n\ncertPoolEqual reports whether a and b are equal, except for the function pointers. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestCertificateRequestRoundtripFields",
              "documentation": {
                "identifier": "TestCertificateRequestRoundtripFields",
                "newPage": false,
                "searchKey": "x509.TestCertificateRequestRoundtripFields",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestCertificateRequestRoundtripFields(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestCertificateRequestRoundtripFields(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#BenchmarkParseCertificate",
              "documentation": {
                "identifier": "BenchmarkParseCertificate",
                "newPage": false,
                "searchKey": "x509.BenchmarkParseCertificate",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkParseCertificate(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkParseCertificate(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestParseCertificateRawEquals",
              "documentation": {
                "identifier": "TestParseCertificateRawEquals",
                "newPage": false,
                "searchKey": "x509.TestParseCertificateRawEquals",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParseCertificateRawEquals(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParseCertificateRawEquals(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/x509#TestSigAlgMismatch",
              "documentation": {
                "identifier": "TestSigAlgMismatch",
                "newPage": false,
                "searchKey": "x509.TestSigAlgMismatch",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSigAlgMismatch(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSigAlgMismatch(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "pathID": "/crypto/x509/pkix"
    }
  ]
}
