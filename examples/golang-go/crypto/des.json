{
  "pathID": "/crypto/des",
  "documentation": {
    "identifier": "des",
    "newPage": true,
    "searchKey": "crypto/des",
    "tags": [
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package des"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package des implements the Data Encryption Standard (DES) and the Triple Data Encryption Algorithm (TDEA) as defined in U.S. Federal Information Processing Standards Publication 46-3. \n\nDES is cryptographically broken and should not be used for secure applications. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/crypto/des#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/des#BlockSize",
              "documentation": {
                "identifier": "BlockSize",
                "newPage": false,
                "searchKey": "des.BlockSize",
                "tags": [
                  "constant",
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const BlockSize"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst BlockSize = 8\n```\n\nThe DES block size in bytes. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/des#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/des#encryptDESTests",
              "documentation": {
                "identifier": "encryptDESTests",
                "newPage": false,
                "searchKey": "des.encryptDESTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var encryptDESTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encryptDESTests = ...\n```\n\nsome custom tests for DES \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#encryptTripleDESTests",
              "documentation": {
                "identifier": "encryptTripleDESTests",
                "newPage": false,
                "searchKey": "des.encryptTripleDESTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var encryptTripleDESTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar encryptTripleDESTests = ...\n```\n\nsome custom tests for TripleDES \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#expansionFunction",
              "documentation": {
                "identifier": "expansionFunction",
                "newPage": false,
                "searchKey": "des.expansionFunction",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var expansionFunction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar expansionFunction = ...\n```\n\nUsed to expand an input block of 32 bits, producing an output block of 48 bits. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#feistelBox",
              "documentation": {
                "identifier": "feistelBox",
                "newPage": false,
                "searchKey": "des.feistelBox",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var feistelBox"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar feistelBox [8][64]uint32\n```\n\nfeistelBox[s][16*i+j] contains the output of permutationFunction for sBoxes[s][i][j] << 4*(7-s) \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#feistelBoxOnce",
              "documentation": {
                "identifier": "feistelBoxOnce",
                "newPage": false,
                "searchKey": "des.feistelBoxOnce",
                "tags": [
                  "variable",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var feistelBoxOnce"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar feistelBoxOnce sync.Once\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#finalPermutation",
              "documentation": {
                "identifier": "finalPermutation",
                "newPage": false,
                "searchKey": "des.finalPermutation",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var finalPermutation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar finalPermutation = ...\n```\n\nUsed to perform a final permutation of a 4-bit preoutput block. This is the inverse of initialPermutation \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#initialPermutation",
              "documentation": {
                "identifier": "initialPermutation",
                "newPage": false,
                "searchKey": "des.initialPermutation",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var initialPermutation"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar initialPermutation = ...\n```\n\nUsed to perform an initial permutation of a 64-bit input block. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#ksRotations",
              "documentation": {
                "identifier": "ksRotations",
                "newPage": false,
                "searchKey": "des.ksRotations",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var ksRotations"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ksRotations = [16]uint8{1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1}\n```\n\nSize of left rotation per round in each half of the key schedule \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#permutationFunction",
              "documentation": {
                "identifier": "permutationFunction",
                "newPage": false,
                "searchKey": "des.permutationFunction",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var permutationFunction"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar permutationFunction = ...\n```\n\nYields a 32-bit output from a 32-bit input \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#permutedChoice1",
              "documentation": {
                "identifier": "permutedChoice1",
                "newPage": false,
                "searchKey": "des.permutedChoice1",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var permutedChoice1"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar permutedChoice1 = ...\n```\n\nUsed in the key schedule to select 56 bits from a 64-bit input. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#permutedChoice2",
              "documentation": {
                "identifier": "permutedChoice2",
                "newPage": false,
                "searchKey": "des.permutedChoice2",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var permutedChoice2"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar permutedChoice2 = ...\n```\n\nUsed in the key schedule to produce each subkey by selecting 48 bits from the 56-bit input \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#sBoxes",
              "documentation": {
                "identifier": "sBoxes",
                "newPage": false,
                "searchKey": "des.sBoxes",
                "tags": [
                  "variable",
                  "array",
                  "array",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var sBoxes"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar sBoxes = ...\n```\n\n8 S-boxes composed of 4 rows and 16 columns Used in the DES cipher function \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#semiWeakKeyTests",
              "documentation": {
                "identifier": "semiWeakKeyTests",
                "newPage": false,
                "searchKey": "des.semiWeakKeyTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var semiWeakKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar semiWeakKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA1Key",
              "documentation": {
                "identifier": "tableA1Key",
                "newPage": false,
                "searchKey": "des.tableA1Key",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA1Key"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA1Key = ...\n```\n\nNIST Special Publication 800-20, Appendix A Key for use with Table A.1 tests \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA1Tests",
              "documentation": {
                "identifier": "tableA1Tests",
                "newPage": false,
                "searchKey": "des.tableA1Tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA1Tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA1Tests = ...\n```\n\nTable A.1 Resulting Ciphertext from the Variable Plaintext Known Answer Test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA2Plaintext",
              "documentation": {
                "identifier": "tableA2Plaintext",
                "newPage": false,
                "searchKey": "des.tableA2Plaintext",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA2Plaintext"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA2Plaintext = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\n```\n\nPlaintext for use with Table A.2 tests \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA2Tests",
              "documentation": {
                "identifier": "tableA2Tests",
                "newPage": false,
                "searchKey": "des.tableA2Tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA2Tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA2Tests = ...\n```\n\nTable A.2 Resulting Ciphertext from the Variable Key Known Answer Test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA3Plaintext",
              "documentation": {
                "identifier": "tableA3Plaintext",
                "newPage": false,
                "searchKey": "des.tableA3Plaintext",
                "tags": [
                  "variable",
                  "array",
                  "number",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA3Plaintext"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA3Plaintext = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\n```\n\nPlaintext for use with Table A.3 tests \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA3Tests",
              "documentation": {
                "identifier": "tableA3Tests",
                "newPage": false,
                "searchKey": "des.tableA3Tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA3Tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA3Tests = ...\n```\n\nTable A.3 Values To Be Used for the Permutation Operation Known Answer Test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tableA4Tests",
              "documentation": {
                "identifier": "tableA4Tests",
                "newPage": false,
                "searchKey": "des.tableA4Tests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var tableA4Tests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar tableA4Tests = ...\n```\n\nTable A.4 Values To Be Used for the Substitution Table Known Answer Test \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#weakKeyTests",
              "documentation": {
                "identifier": "weakKeyTests",
                "newPage": false,
                "searchKey": "des.weakKeyTests",
                "tags": [
                  "variable",
                  "array",
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "var weakKeyTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar weakKeyTests = ...\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/des#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/des#CryptTest",
              "documentation": {
                "identifier": "CryptTest",
                "newPage": false,
                "searchKey": "des.CryptTest",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type CryptTest struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype CryptTest struct {\n\tkey []byte\n\tin  []byte\n\tout []byte\n}\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#KeySizeError",
              "documentation": {
                "identifier": "KeySizeError",
                "newPage": false,
                "searchKey": "des.KeySizeError",
                "tags": [
                  "number"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type KeySizeError int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype KeySizeError int\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/des#KeySizeError.Error",
                    "documentation": {
                      "identifier": "KeySizeError.Error",
                      "newPage": false,
                      "searchKey": "des.KeySizeError.Error",
                      "tags": [
                        "method"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (k KeySizeError) Error() string"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (k KeySizeError) Error() string\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#desCipher",
              "documentation": {
                "identifier": "desCipher",
                "newPage": false,
                "searchKey": "des.desCipher",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type desCipher struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype desCipher struct {\n\tsubkeys [16]uint64\n}\n```\n\ndesCipher is an instance of DES encryption. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/des#newCipher",
                    "documentation": {
                      "identifier": "newCipher",
                      "newPage": false,
                      "searchKey": "des.newCipher",
                      "tags": [
                        "function",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func newCipher(key []byte) *desCipher"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc newCipher(key []byte) *desCipher\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/des#desCipher.BlockSize",
                    "documentation": {
                      "identifier": "desCipher.BlockSize",
                      "newPage": false,
                      "searchKey": "des.desCipher.BlockSize",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *desCipher) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *desCipher) BlockSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/des#desCipher.Decrypt",
                    "documentation": {
                      "identifier": "desCipher.Decrypt",
                      "newPage": false,
                      "searchKey": "des.desCipher.Decrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *desCipher) Decrypt(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *desCipher) Decrypt(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/des#desCipher.Encrypt",
                    "documentation": {
                      "identifier": "desCipher.Encrypt",
                      "newPage": false,
                      "searchKey": "des.desCipher.Encrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *desCipher) Encrypt(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *desCipher) Encrypt(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/des#desCipher.generateSubkeys",
                    "documentation": {
                      "identifier": "desCipher.generateSubkeys",
                      "newPage": false,
                      "searchKey": "des.desCipher.generateSubkeys",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *desCipher) generateSubkeys(keyBytes []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *desCipher) generateSubkeys(keyBytes []byte)\n```\n\ncreates 16 56-bit subkeys from the original key \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#tripleDESCipher",
              "documentation": {
                "identifier": "tripleDESCipher",
                "newPage": false,
                "searchKey": "des.tripleDESCipher",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type tripleDESCipher struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype tripleDESCipher struct {\n\tcipher1, cipher2, cipher3 desCipher\n}\n```\n\nA tripleDESCipher is an instance of TripleDES encryption. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/des#tripleDESCipher.BlockSize",
                    "documentation": {
                      "identifier": "tripleDESCipher.BlockSize",
                      "newPage": false,
                      "searchKey": "des.tripleDESCipher.BlockSize",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *tripleDESCipher) BlockSize() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *tripleDESCipher) BlockSize() int\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/des#tripleDESCipher.Decrypt",
                    "documentation": {
                      "identifier": "tripleDESCipher.Decrypt",
                      "newPage": false,
                      "searchKey": "des.tripleDESCipher.Decrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *tripleDESCipher) Decrypt(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *tripleDESCipher) Decrypt(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/des#tripleDESCipher.Encrypt",
                    "documentation": {
                      "identifier": "tripleDESCipher.Encrypt",
                      "newPage": false,
                      "searchKey": "des.tripleDESCipher.Encrypt",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (c *tripleDESCipher) Encrypt(dst, src []byte)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (c *tripleDESCipher) Encrypt(dst, src []byte)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/des#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/des#BenchmarkDecrypt",
              "documentation": {
                "identifier": "BenchmarkDecrypt",
                "newPage": false,
                "searchKey": "des.BenchmarkDecrypt",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkDecrypt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkDecrypt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#BenchmarkEncrypt",
              "documentation": {
                "identifier": "BenchmarkEncrypt",
                "newPage": false,
                "searchKey": "des.BenchmarkEncrypt",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkEncrypt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkEncrypt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#BenchmarkTDESDecrypt",
              "documentation": {
                "identifier": "BenchmarkTDESDecrypt",
                "newPage": false,
                "searchKey": "des.BenchmarkTDESDecrypt",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTDESDecrypt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTDESDecrypt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#BenchmarkTDESEncrypt",
              "documentation": {
                "identifier": "BenchmarkTDESEncrypt",
                "newPage": false,
                "searchKey": "des.BenchmarkTDESEncrypt",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkTDESEncrypt(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkTDESEncrypt(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#NewCipher",
              "documentation": {
                "identifier": "NewCipher",
                "newPage": false,
                "searchKey": "des.NewCipher",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewCipher(key []byte) (cipher.Block, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewCipher(key []byte) (cipher.Block, error)\n```\n\nNewCipher creates and returns a new cipher.Block. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#NewTripleDESCipher",
              "documentation": {
                "identifier": "NewTripleDESCipher",
                "newPage": false,
                "searchKey": "des.NewTripleDESCipher",
                "tags": [
                  "function"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func NewTripleDESCipher(key []byte) (cipher.Block, error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc NewTripleDESCipher(key []byte) (cipher.Block, error)\n```\n\nNewTripleDESCipher creates and returns a new cipher.Block. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestDESDecryptBlock",
              "documentation": {
                "identifier": "TestDESDecryptBlock",
                "newPage": false,
                "searchKey": "des.TestDESDecryptBlock",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDESDecryptBlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDESDecryptBlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestDESEncryptBlock",
              "documentation": {
                "identifier": "TestDESEncryptBlock",
                "newPage": false,
                "searchKey": "des.TestDESEncryptBlock",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDESEncryptBlock(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDESEncryptBlock(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestDecryptTripleDES",
              "documentation": {
                "identifier": "TestDecryptTripleDES",
                "newPage": false,
                "searchKey": "des.TestDecryptTripleDES",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestDecryptTripleDES(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestDecryptTripleDES(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestEncryptTripleDES",
              "documentation": {
                "identifier": "TestEncryptTripleDES",
                "newPage": false,
                "searchKey": "des.TestEncryptTripleDES",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestEncryptTripleDES(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestEncryptTripleDES(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestFinalPermute",
              "documentation": {
                "identifier": "TestFinalPermute",
                "newPage": false,
                "searchKey": "des.TestFinalPermute",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestFinalPermute(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestFinalPermute(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestInitialPermutationKnownAnswer",
              "documentation": {
                "identifier": "TestInitialPermutationKnownAnswer",
                "newPage": false,
                "searchKey": "des.TestInitialPermutationKnownAnswer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInitialPermutationKnownAnswer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInitialPermutationKnownAnswer(t *testing.T)\n```\n\nDefined in Pub 800-20 Decrypting the Table A.1 plaintext with the 0x01... key produces the corresponding ciphertext \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestInitialPermute",
              "documentation": {
                "identifier": "TestInitialPermute",
                "newPage": false,
                "searchKey": "des.TestInitialPermute",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInitialPermute(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInitialPermute(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestInversePermutationKnownAnswer",
              "documentation": {
                "identifier": "TestInversePermutationKnownAnswer",
                "newPage": false,
                "searchKey": "des.TestInversePermutationKnownAnswer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInversePermutationKnownAnswer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInversePermutationKnownAnswer(t *testing.T)\n```\n\nDefined in Pub 800-20 Encrypting the Table A.1 ciphertext with the 0x01... key produces the original plaintext \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestPermutationOperationKnownAnswerDecrypt",
              "documentation": {
                "identifier": "TestPermutationOperationKnownAnswerDecrypt",
                "newPage": false,
                "searchKey": "des.TestPermutationOperationKnownAnswerDecrypt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermutationOperationKnownAnswerDecrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermutationOperationKnownAnswerDecrypt(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestPermutationOperationKnownAnswerEncrypt",
              "documentation": {
                "identifier": "TestPermutationOperationKnownAnswerEncrypt",
                "newPage": false,
                "searchKey": "des.TestPermutationOperationKnownAnswerEncrypt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPermutationOperationKnownAnswerEncrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPermutationOperationKnownAnswerEncrypt(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestSemiWeakKeyPairs",
              "documentation": {
                "identifier": "TestSemiWeakKeyPairs",
                "newPage": false,
                "searchKey": "des.TestSemiWeakKeyPairs",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSemiWeakKeyPairs(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSemiWeakKeyPairs(t *testing.T)\n```\n\nUse the known semi-weak key pairs to test DES implementation \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestSubstitutionTableKnownAnswerDecrypt",
              "documentation": {
                "identifier": "TestSubstitutionTableKnownAnswerDecrypt",
                "newPage": false,
                "searchKey": "des.TestSubstitutionTableKnownAnswerDecrypt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubstitutionTableKnownAnswerDecrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubstitutionTableKnownAnswerDecrypt(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestSubstitutionTableKnownAnswerEncrypt",
              "documentation": {
                "identifier": "TestSubstitutionTableKnownAnswerEncrypt",
                "newPage": false,
                "searchKey": "des.TestSubstitutionTableKnownAnswerEncrypt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSubstitutionTableKnownAnswerEncrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSubstitutionTableKnownAnswerEncrypt(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestVariableCiphertextKnownAnswer",
              "documentation": {
                "identifier": "TestVariableCiphertextKnownAnswer",
                "newPage": false,
                "searchKey": "des.TestVariableCiphertextKnownAnswer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariableCiphertextKnownAnswer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariableCiphertextKnownAnswer(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestVariableKeyKnownAnswerDecrypt",
              "documentation": {
                "identifier": "TestVariableKeyKnownAnswerDecrypt",
                "newPage": false,
                "searchKey": "des.TestVariableKeyKnownAnswerDecrypt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariableKeyKnownAnswerDecrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariableKeyKnownAnswerDecrypt(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestVariableKeyKnownAnswerEncrypt",
              "documentation": {
                "identifier": "TestVariableKeyKnownAnswerEncrypt",
                "newPage": false,
                "searchKey": "des.TestVariableKeyKnownAnswerEncrypt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariableKeyKnownAnswerEncrypt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariableKeyKnownAnswerEncrypt(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestVariablePlaintextKnownAnswer",
              "documentation": {
                "identifier": "TestVariablePlaintextKnownAnswer",
                "newPage": false,
                "searchKey": "des.TestVariablePlaintextKnownAnswer",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestVariablePlaintextKnownAnswer(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestVariablePlaintextKnownAnswer(t *testing.T)\n```\n\nDefined in Pub 800-20 \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#TestWeakKeys",
              "documentation": {
                "identifier": "TestWeakKeys",
                "newPage": false,
                "searchKey": "des.TestWeakKeys",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestWeakKeys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestWeakKeys(t *testing.T)\n```\n\nUse the known weak keys to test DES implementation \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#cryptBlock",
              "documentation": {
                "identifier": "cryptBlock",
                "newPage": false,
                "searchKey": "des.cryptBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func cryptBlock(subkeys []uint64, dst, src []byte, decrypt bool)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc cryptBlock(subkeys []uint64, dst, src []byte, decrypt bool)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#decryptBlock",
              "documentation": {
                "identifier": "decryptBlock",
                "newPage": false,
                "searchKey": "des.decryptBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func decryptBlock(subkeys []uint64, dst, src []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc decryptBlock(subkeys []uint64, dst, src []byte)\n```\n\nDecrypt one block from src into dst, using the subkeys. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#encryptBlock",
              "documentation": {
                "identifier": "encryptBlock",
                "newPage": false,
                "searchKey": "des.encryptBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func encryptBlock(subkeys []uint64, dst, src []byte)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc encryptBlock(subkeys []uint64, dst, src []byte)\n```\n\nEncrypt one block from src into dst, using the subkeys. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#feistel",
              "documentation": {
                "identifier": "feistel",
                "newPage": false,
                "searchKey": "des.feistel",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func feistel(l, r uint32, k0, k1 uint64) (lout, rout uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc feistel(l, r uint32, k0, k1 uint64) (lout, rout uint32)\n```\n\nDES Feistel function. feistelBox must be initialized via feistelBoxOnce.Do(initFeistelBox) first. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#initFeistelBox",
              "documentation": {
                "identifier": "initFeistelBox",
                "newPage": false,
                "searchKey": "des.initFeistelBox",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func initFeistelBox()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc initFeistelBox()\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#ksRotate",
              "documentation": {
                "identifier": "ksRotate",
                "newPage": false,
                "searchKey": "des.ksRotate",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ksRotate(in uint32) (out []uint32)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ksRotate(in uint32) (out []uint32)\n```\n\ncreates 16 28-bit blocks rotated according to the rotation schedule \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#permuteBlock",
              "documentation": {
                "identifier": "permuteBlock",
                "newPage": false,
                "searchKey": "des.permuteBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func permuteBlock(src uint64, permutation []uint8) (block uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc permuteBlock(src uint64, permutation []uint8) (block uint64)\n```\n\ngeneral purpose function to perform DES block permutations \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#permuteFinalBlock",
              "documentation": {
                "identifier": "permuteFinalBlock",
                "newPage": false,
                "searchKey": "des.permuteFinalBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func permuteFinalBlock(block uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc permuteFinalBlock(block uint64) uint64\n```\n\npermuteInitialBlock is equivalent to the permutation defined by finalPermutation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#permuteInitialBlock",
              "documentation": {
                "identifier": "permuteInitialBlock",
                "newPage": false,
                "searchKey": "des.permuteInitialBlock",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func permuteInitialBlock(block uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc permuteInitialBlock(block uint64) uint64\n```\n\npermuteInitialBlock is equivalent to the permutation defined by initialPermutation. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/des#unpack",
              "documentation": {
                "identifier": "unpack",
                "newPage": false,
                "searchKey": "des.unpack",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func unpack(x uint64) uint64"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc unpack(x uint64) uint64\n```\n\nExpand 48-bit input to 64-bit, with each 6-bit block padded by extra two bits at the top. By doing so, we can have the input blocks (four bits each), and the key blocks (six bits each) well-aligned without extra shifts/rotations for alignments. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
