{
  "pathID": "/crypto/elliptic/internal/fiat",
  "documentation": {
    "identifier": "fiat",
    "newPage": true,
    "searchKey": "crypto/elliptic/internal/fiat",
    "tags": []
  },
  "label": {
    "kind": "plaintext",
    "value": "Package fiat"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package fiat implements prime order fields using formally verified algorithms from the Fiat Cryptography project. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/crypto/elliptic/internal/fiat#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521ZeroEncoding",
              "documentation": {
                "identifier": "p521ZeroEncoding",
                "newPage": false,
                "searchKey": "fiat.p521ZeroEncoding",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var p521ZeroEncoding"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar p521ZeroEncoding = new(P521Element).Bytes()\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/elliptic/internal/fiat#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#P521Element",
              "documentation": {
                "identifier": "P521Element",
                "newPage": false,
                "searchKey": "fiat.P521Element",
                "tags": [
                  "exported"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type P521Element struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype P521Element struct {\n\t// This element has the following bounds, which are tighter than\n\t// the output bounds of some operations. Those operations must be\n\t// followed by a carry.\n\t//\n\t// [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000],\n\t// [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000],\n\t// [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]\n\tx [9]uint64\n}\n```\n\nP521Element is an integer modulo 2^521 - 1. \n\nThe zero value is a valid zero element. \n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.One",
                    "documentation": {
                      "identifier": "P521Element.One",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.One",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) One() *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) One() *P521Element\n```\n\nOne sets e = 1, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Equal",
                    "documentation": {
                      "identifier": "P521Element.Equal",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Equal",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Equal(t *P521Element) int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Equal(t *P521Element) int\n```\n\nEqual returns 1 if e == t, and zero otherwise. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.IsZero",
                    "documentation": {
                      "identifier": "P521Element.IsZero",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.IsZero",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) IsZero() int"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) IsZero() int\n```\n\nIsZero returns 1 if e == 0, and zero otherwise. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Set",
                    "documentation": {
                      "identifier": "P521Element.Set",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Set",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Set(t *P521Element) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Set(t *P521Element) *P521Element\n```\n\nSet sets e = t, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Bytes",
                    "documentation": {
                      "identifier": "P521Element.Bytes",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Bytes",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Bytes() []byte"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Bytes() []byte\n```\n\nBytes returns the 66-byte little-endian encoding of e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.SetBytes",
                    "documentation": {
                      "identifier": "P521Element.SetBytes",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.SetBytes",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) SetBytes(v []byte) (*P521Element, error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) SetBytes(v []byte) (*P521Element, error)\n```\n\nSetBytes sets e = v, where v is a little-endian 66-byte encoding, and returns e. If v is not 66 bytes or it encodes a value higher than 2^521 - 1, SetBytes returns nil and an error, and e is unchanged. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Add",
                    "documentation": {
                      "identifier": "P521Element.Add",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Add",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Add(t1, t2 *P521Element) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Add(t1, t2 *P521Element) *P521Element\n```\n\nAdd sets e = t1 + t2, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Sub",
                    "documentation": {
                      "identifier": "P521Element.Sub",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Sub",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Sub(t1, t2 *P521Element) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Sub(t1, t2 *P521Element) *P521Element\n```\n\nSub sets e = t1 - t2, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Mul",
                    "documentation": {
                      "identifier": "P521Element.Mul",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Mul",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Mul(t1, t2 *P521Element) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Mul(t1, t2 *P521Element) *P521Element\n```\n\nMul sets e = t1 * t2, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Square",
                    "documentation": {
                      "identifier": "P521Element.Square",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Square",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Square(t *P521Element) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Square(t *P521Element) *P521Element\n```\n\nSquare sets e = t * t, and returns e. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Select",
                    "documentation": {
                      "identifier": "P521Element.Select",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Select",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (v *P521Element) Select(a, b *P521Element, cond int) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (v *P521Element) Select(a, b *P521Element, cond int) *P521Element\n```\n\nSelect sets e to a if cond == 1, and to b if cond == 0. \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#P521Element.Invert",
                    "documentation": {
                      "identifier": "P521Element.Invert",
                      "newPage": false,
                      "searchKey": "fiat.P521Element.Invert",
                      "tags": [
                        "exported"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (e *P521Element) Invert(t *P521Element) *P521Element"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (e *P521Element) Invert(t *P521Element) *P521Element\n```\n\nInvert sets e = 1/t, and returns e. \n\nIf t == 0, Invert returns e = 0. \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521Uint1",
              "documentation": {
                "identifier": "p521Uint1",
                "newPage": false,
                "searchKey": "fiat.p521Uint1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type p521Uint1 uint8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype p521Uint1 uint8\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#p521AddcarryxU64",
                    "documentation": {
                      "identifier": "p521AddcarryxU64",
                      "newPage": false,
                      "searchKey": "fiat.p521AddcarryxU64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func p521AddcarryxU64(x uint64, y uint64, carry p521Uint1) (uint64, p521Uint1)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc p521AddcarryxU64(x uint64, y uint64, carry p521Uint1) (uint64, p521Uint1)\n```\n\np521AddcarryxU64 is a thin wrapper around bits.Add64 that uses p521Uint1 rather than uint64 \n\n"
                    },
                    "children": null
                  }
                },
                {
                  "node": {
                    "pathID": "/crypto/elliptic/internal/fiat#p521SubborrowxU64",
                    "documentation": {
                      "identifier": "p521SubborrowxU64",
                      "newPage": false,
                      "searchKey": "fiat.p521SubborrowxU64",
                      "tags": null
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func p521SubborrowxU64(x uint64, y uint64, carry p521Uint1) (uint64, p521Uint1)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc p521SubborrowxU64(x uint64, y uint64, carry p521Uint1) (uint64, p521Uint1)\n```\n\np521SubborrowxU64 is a thin wrapper around bits.Sub64 that uses p521Uint1 rather than uint64 \n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521Int1",
              "documentation": {
                "identifier": "p521Int1",
                "newPage": false,
                "searchKey": "fiat.p521Int1",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type p521Int1 int8"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype p521Int1 int8\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/elliptic/internal/fiat#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": []
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521AddcarryxU58",
              "documentation": {
                "identifier": "p521AddcarryxU58",
                "newPage": false,
                "searchKey": "fiat.p521AddcarryxU58",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521AddcarryxU58(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521AddcarryxU58(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)\n```\n\np521AddcarryxU58 is an addition with carry. \n\nPostconditions: \n\n```\nout1 = (arg1 + arg2 + arg3) mod 2^58\nout2 = ⌊(arg1 + arg2 + arg3) / 2^58⌋\n\n```\nInput Bounds: \n\n```\narg1: [0x0 ~> 0x1]\narg2: [0x0 ~> 0x3ffffffffffffff]\narg3: [0x0 ~> 0x3ffffffffffffff]\n\n```\nOutput Bounds: \n\n```\nout1: [0x0 ~> 0x3ffffffffffffff]\nout2: [0x0 ~> 0x1]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521SubborrowxU58",
              "documentation": {
                "identifier": "p521SubborrowxU58",
                "newPage": false,
                "searchKey": "fiat.p521SubborrowxU58",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521SubborrowxU58(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521SubborrowxU58(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)\n```\n\np521SubborrowxU58 is a subtraction with borrow. \n\nPostconditions: \n\n```\nout1 = (-arg1 + arg2 + -arg3) mod 2^58\nout2 = -⌊(-arg1 + arg2 + -arg3) / 2^58⌋\n\n```\nInput Bounds: \n\n```\narg1: [0x0 ~> 0x1]\narg2: [0x0 ~> 0x3ffffffffffffff]\narg3: [0x0 ~> 0x3ffffffffffffff]\n\n```\nOutput Bounds: \n\n```\nout1: [0x0 ~> 0x3ffffffffffffff]\nout2: [0x0 ~> 0x1]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521AddcarryxU57",
              "documentation": {
                "identifier": "p521AddcarryxU57",
                "newPage": false,
                "searchKey": "fiat.p521AddcarryxU57",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521AddcarryxU57(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521AddcarryxU57(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)\n```\n\np521AddcarryxU57 is an addition with carry. \n\nPostconditions: \n\n```\nout1 = (arg1 + arg2 + arg3) mod 2^57\nout2 = ⌊(arg1 + arg2 + arg3) / 2^57⌋\n\n```\nInput Bounds: \n\n```\narg1: [0x0 ~> 0x1]\narg2: [0x0 ~> 0x1ffffffffffffff]\narg3: [0x0 ~> 0x1ffffffffffffff]\n\n```\nOutput Bounds: \n\n```\nout1: [0x0 ~> 0x1ffffffffffffff]\nout2: [0x0 ~> 0x1]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521SubborrowxU57",
              "documentation": {
                "identifier": "p521SubborrowxU57",
                "newPage": false,
                "searchKey": "fiat.p521SubborrowxU57",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521SubborrowxU57(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521SubborrowxU57(out1 *uint64, out2 *p521Uint1, arg1 p521Uint1, arg2 uint64, arg3 uint64)\n```\n\np521SubborrowxU57 is a subtraction with borrow. \n\nPostconditions: \n\n```\nout1 = (-arg1 + arg2 + -arg3) mod 2^57\nout2 = -⌊(-arg1 + arg2 + -arg3) / 2^57⌋\n\n```\nInput Bounds: \n\n```\narg1: [0x0 ~> 0x1]\narg2: [0x0 ~> 0x1ffffffffffffff]\narg3: [0x0 ~> 0x1ffffffffffffff]\n\n```\nOutput Bounds: \n\n```\nout1: [0x0 ~> 0x1ffffffffffffff]\nout2: [0x0 ~> 0x1]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521CmovznzU64",
              "documentation": {
                "identifier": "p521CmovznzU64",
                "newPage": false,
                "searchKey": "fiat.p521CmovznzU64",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521CmovznzU64(out1 *uint64, arg1 p521Uint1, arg2 uint64, arg3 uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521CmovznzU64(out1 *uint64, arg1 p521Uint1, arg2 uint64, arg3 uint64)\n```\n\np521CmovznzU64 is a single-word conditional move. \n\nPostconditions: \n\n```\nout1 = (if arg1 = 0 then arg2 else arg3)\n\n```\nInput Bounds: \n\n```\narg1: [0x0 ~> 0x1]\narg2: [0x0 ~> 0xffffffffffffffff]\narg3: [0x0 ~> 0xffffffffffffffff]\n\n```\nOutput Bounds: \n\n```\nout1: [0x0 ~> 0xffffffffffffffff]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521CarryMul",
              "documentation": {
                "identifier": "p521CarryMul",
                "newPage": false,
                "searchKey": "fiat.p521CarryMul",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521CarryMul(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521CarryMul(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64)\n```\n\np521CarryMul multiplies two field elements and reduces the result. \n\nPostconditions: \n\n```\neval out1 mod m = (eval arg1 * eval arg2) mod m\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]\narg2: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521CarrySquare",
              "documentation": {
                "identifier": "p521CarrySquare",
                "newPage": false,
                "searchKey": "fiat.p521CarrySquare",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521CarrySquare(out1 *[9]uint64, arg1 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521CarrySquare(out1 *[9]uint64, arg1 *[9]uint64)\n```\n\np521CarrySquare squares a field element and reduces the result. \n\nPostconditions: \n\n```\neval out1 mod m = (eval arg1 * eval arg1) mod m\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521Carry",
              "documentation": {
                "identifier": "p521Carry",
                "newPage": false,
                "searchKey": "fiat.p521Carry",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521Carry(out1 *[9]uint64, arg1 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521Carry(out1 *[9]uint64, arg1 *[9]uint64)\n```\n\np521Carry reduces a field element. \n\nPostconditions: \n\n```\neval out1 mod m = eval arg1 mod m\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521Add",
              "documentation": {
                "identifier": "p521Add",
                "newPage": false,
                "searchKey": "fiat.p521Add",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521Add(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521Add(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64)\n```\n\np521Add adds two field elements. \n\nPostconditions: \n\n```\neval out1 mod m = (eval arg1 + eval arg2) mod m\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\narg2: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521Sub",
              "documentation": {
                "identifier": "p521Sub",
                "newPage": false,
                "searchKey": "fiat.p521Sub",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521Sub(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521Sub(out1 *[9]uint64, arg1 *[9]uint64, arg2 *[9]uint64)\n```\n\np521Sub subtracts two field elements. \n\nPostconditions: \n\n```\neval out1 mod m = (eval arg1 - eval arg2) mod m\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\narg2: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0xc00000000000000], [0x0 ~> 0x600000000000000]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521ToBytes",
              "documentation": {
                "identifier": "p521ToBytes",
                "newPage": false,
                "searchKey": "fiat.p521ToBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521ToBytes(out1 *[66]uint8, arg1 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521ToBytes(out1 *[66]uint8, arg1 *[9]uint64)\n```\n\np521ToBytes serializes a field element to bytes in little-endian order. \n\nPostconditions: \n\n```\nout1 = map (λ x, ⌊((eval arg1 mod m) mod 2^(8 * (x + 1))) / 2^(8 * x)⌋) [0..65]\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521FromBytes",
              "documentation": {
                "identifier": "p521FromBytes",
                "newPage": false,
                "searchKey": "fiat.p521FromBytes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521FromBytes(out1 *[9]uint64, arg1 *[66]uint8)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521FromBytes(out1 *[9]uint64, arg1 *[66]uint8)\n```\n\np521FromBytes deserializes a field element from bytes in little-endian order. \n\nPostconditions: \n\n```\neval out1 mod m = bytes_eval arg1 mod m\n\n```\nInput Bounds: \n\n```\narg1: [[0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0xff], [0x0 ~> 0x1]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x400000000000000], [0x0 ~> 0x200000000000000]]\n\n```\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/elliptic/internal/fiat#p521Selectznz",
              "documentation": {
                "identifier": "p521Selectznz",
                "newPage": false,
                "searchKey": "fiat.p521Selectznz",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func p521Selectznz(out1 *[9]uint64, arg1 p521Uint1, arg2 *[9]uint64, arg3 *[9]uint64)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc p521Selectznz(out1 *[9]uint64, arg1 p521Uint1, arg2 *[9]uint64, arg3 *[9]uint64)\n```\n\np521Selectznz is a multi-limb conditional select. \n\nPostconditions: \n\n```\neval out1 = (if arg1 = 0 then eval arg2 else eval arg3)\n\n```\nInput Bounds: \n\n```\narg1: [0x0 ~> 0x1]\narg2: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]\narg3: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]\n\n```\nOutput Bounds: \n\n```\nout1: [[0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff], [0x0 ~> 0xffffffffffffffff]]\n\n```\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
