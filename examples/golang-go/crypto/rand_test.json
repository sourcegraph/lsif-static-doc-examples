{
  "pathID": "/crypto/rand_test",
  "documentation": {
    "identifier": "rand_test",
    "newPage": true,
    "searchKey": "crypto/rand_test",
    "tags": [
      "private",
      "package"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package rand_test"
  },
  "detail": {
    "kind": "markdown",
    "value": ""
  },
  "children": [
    {
      "node": {
        "pathID": "/crypto/rand_test#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/rand_test#countingReader",
              "documentation": {
                "identifier": "countingReader",
                "newPage": false,
                "searchKey": "rand_test.countingReader",
                "tags": [
                  "struct",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "type countingReader struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype countingReader struct {\n\tr io.Reader\n\tn int\n}\n```\n\n"
              },
              "children": [
                {
                  "node": {
                    "pathID": "/crypto/rand_test#countingReader.Read",
                    "documentation": {
                      "identifier": "countingReader.Read",
                      "newPage": false,
                      "searchKey": "rand_test.countingReader.Read",
                      "tags": [
                        "method",
                        "private"
                      ]
                    },
                    "label": {
                      "kind": "plaintext",
                      "value": "func (r *countingReader) Read(p []byte) (n int, err error)"
                    },
                    "detail": {
                      "kind": "markdown",
                      "value": "```Go\nfunc (r *countingReader) Read(p []byte) (n int, err error)\n```\n\n"
                    },
                    "children": null
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/rand_test#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "private"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/rand_test#BenchmarkPrime",
              "documentation": {
                "identifier": "BenchmarkPrime",
                "newPage": false,
                "searchKey": "rand_test.BenchmarkPrime",
                "tags": [
                  "function",
                  "private",
                  "benchmark"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func BenchmarkPrime(b *testing.B)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc BenchmarkPrime(b *testing.B)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#ExampleRead",
              "documentation": {
                "identifier": "ExampleRead",
                "newPage": false,
                "searchKey": "rand_test.ExampleRead",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func ExampleRead()"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc ExampleRead()\n```\n\nThis example reads 10 cryptographically secure pseudorandom numbers from rand.Reader and writes them to a byte slice. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestInt",
              "documentation": {
                "identifier": "TestInt",
                "newPage": false,
                "searchKey": "rand_test.TestInt",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestInt(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestInt(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestIntEmptyMaxPanics",
              "documentation": {
                "identifier": "TestIntEmptyMaxPanics",
                "newPage": false,
                "searchKey": "rand_test.TestIntEmptyMaxPanics",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntEmptyMaxPanics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntEmptyMaxPanics(t *testing.T)\n```\n\nTest that passing a new big.Int as max causes Int to panic \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestIntMask",
              "documentation": {
                "identifier": "TestIntMask",
                "newPage": false,
                "searchKey": "rand_test.TestIntMask",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntMask(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntMask(t *testing.T)\n```\n\nTest that Int does not mask out valid return values \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestIntNegativeMaxPanics",
              "documentation": {
                "identifier": "TestIntNegativeMaxPanics",
                "newPage": false,
                "searchKey": "rand_test.TestIntNegativeMaxPanics",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntNegativeMaxPanics(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntNegativeMaxPanics(t *testing.T)\n```\n\nTest that passing a negative value as max causes Int to panic \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestIntReads",
              "documentation": {
                "identifier": "TestIntReads",
                "newPage": false,
                "searchKey": "rand_test.TestIntReads",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestIntReads(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestIntReads(t *testing.T)\n```\n\nTest that Int reads only the necessary number of bytes from the reader for max at each bit length \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestPrimeBitsLt2",
              "documentation": {
                "identifier": "TestPrimeBitsLt2",
                "newPage": false,
                "searchKey": "rand_test.TestPrimeBitsLt2",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrimeBitsLt2(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrimeBitsLt2(t *testing.T)\n```\n\nTest that passing bits < 2 causes Prime to return nil, error \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#TestPrimeSmall",
              "documentation": {
                "identifier": "TestPrimeSmall",
                "newPage": false,
                "searchKey": "rand_test.TestPrimeSmall",
                "tags": [
                  "function",
                  "private",
                  "test"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestPrimeSmall(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestPrimeSmall(t *testing.T)\n```\n\n[https://golang.org/issue/6849](https://golang.org/issue/6849). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/rand_test#testIntPanics",
              "documentation": {
                "identifier": "testIntPanics",
                "newPage": false,
                "searchKey": "rand_test.testIntPanics",
                "tags": [
                  "function",
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testIntPanics(t *testing.T, b *big.Int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testIntPanics(t *testing.T, b *big.Int)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
