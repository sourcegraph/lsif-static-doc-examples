{
  "pathID": "/crypto/dsa",
  "documentation": {
    "identifier": "dsa",
    "newPage": true,
    "searchKey": "crypto/dsa",
    "tags": [
      "deprecated"
    ]
  },
  "label": {
    "kind": "plaintext",
    "value": "Package dsa"
  },
  "detail": {
    "kind": "markdown",
    "value": "Package dsa implements the Digital Signature Algorithm, as defined in FIPS 186-3. \n\nThe DSA operations in this package are not implemented using constant-time algorithms. \n\nDeprecated: DSA is a legacy algorithm, and modern alternatives such as Ed25519 (implemented by package crypto/ed25519) should be used instead. Keys with 1024-bit moduli (L1024N160 parameters) are cryptographically weak, while bigger keys are not widely supported. Note that FIPS 186-5 no longer approves DSA for signature generation. \n\n"
  },
  "children": [
    {
      "node": {
        "pathID": "/crypto/dsa#const",
        "documentation": {
          "identifier": "const",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "deprecated"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Constants"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/dsa#L1024N160",
              "documentation": {
                "identifier": "L1024N160",
                "newPage": false,
                "searchKey": "dsa.L1024N160",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const L1024N160"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst L1024N160 ParameterSizes = iota\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#L2048N224",
              "documentation": {
                "identifier": "L2048N224",
                "newPage": false,
                "searchKey": "dsa.L2048N224",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const L2048N224"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst L2048N224\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#L2048N256",
              "documentation": {
                "identifier": "L2048N256",
                "newPage": false,
                "searchKey": "dsa.L2048N256",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const L2048N256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst L2048N256\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#L3072N256",
              "documentation": {
                "identifier": "L3072N256",
                "newPage": false,
                "searchKey": "dsa.L3072N256",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "const L3072N256"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst L3072N256\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#numMRTests",
              "documentation": {
                "identifier": "numMRTests",
                "newPage": false,
                "searchKey": "dsa.numMRTests",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "const numMRTests"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nconst numMRTests = 64\n```\n\nnumMRTests is the number of Miller-Rabin primality tests that we perform. We pick the largest recommended number from table C.1 of FIPS 186-3. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/dsa#var",
        "documentation": {
          "identifier": "var",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "deprecated"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Variables"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/dsa#ErrInvalidPublicKey",
              "documentation": {
                "identifier": "ErrInvalidPublicKey",
                "newPage": false,
                "searchKey": "dsa.ErrInvalidPublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "var ErrInvalidPublicKey"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nvar ErrInvalidPublicKey = errors.New(\"crypto/dsa: invalid public key\")\n```\n\nErrInvalidPublicKey results when a public key is not usable by this code. FIPS is quite strict about the format of DSA keys, but other code may be less so. Thus, when using keys which may have been generated by other code, this error must be handled. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/dsa#type",
        "documentation": {
          "identifier": "type",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "deprecated"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Types"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/dsa#Parameters",
              "documentation": {
                "identifier": "Parameters",
                "newPage": false,
                "searchKey": "dsa.Parameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type Parameters struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype Parameters struct {\n\tP, Q, G *big.Int\n}\n```\n\nParameters represents the domain parameters for a key. These parameters can be shared across many keys. The bit length of Q must be a multiple of 8. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#PublicKey",
              "documentation": {
                "identifier": "PublicKey",
                "newPage": false,
                "searchKey": "dsa.PublicKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PublicKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PublicKey struct {\n\tParameters\n\tY *big.Int\n}\n```\n\nPublicKey represents a DSA public key. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#PrivateKey",
              "documentation": {
                "identifier": "PrivateKey",
                "newPage": false,
                "searchKey": "dsa.PrivateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type PrivateKey struct"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype PrivateKey struct {\n\tPublicKey\n\tX *big.Int\n}\n```\n\nPrivateKey represents a DSA private key. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#ParameterSizes",
              "documentation": {
                "identifier": "ParameterSizes",
                "newPage": false,
                "searchKey": "dsa.ParameterSizes",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "type ParameterSizes int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\ntype ParameterSizes int\n```\n\nParameterSizes is an enumeration of the acceptable bit lengths of the primes in a set of DSA parameters. See FIPS 186-3, section 4.2. \n\n"
              },
              "children": null
            }
          }
        ]
      }
    },
    {
      "node": {
        "pathID": "/crypto/dsa#func",
        "documentation": {
          "identifier": "func",
          "newPage": false,
          "searchKey": "",
          "tags": [
            "deprecated"
          ]
        },
        "label": {
          "kind": "plaintext",
          "value": "Functions"
        },
        "detail": {
          "kind": "plaintext",
          "value": ""
        },
        "children": [
          {
            "node": {
              "pathID": "/crypto/dsa#GenerateParameters",
              "documentation": {
                "identifier": "GenerateParameters",
                "newPage": false,
                "searchKey": "dsa.GenerateParameters",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GenerateParameters(params *Parameters, rand io.Reader, sizes ParameterSizes) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GenerateParameters(params *Parameters, rand io.Reader, sizes ParameterSizes) error\n```\n\nGenerateParameters puts a random, valid set of DSA parameters into params. This function can take many seconds, even on fast machines. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#GenerateKey",
              "documentation": {
                "identifier": "GenerateKey",
                "newPage": false,
                "searchKey": "dsa.GenerateKey",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func GenerateKey(priv *PrivateKey, rand io.Reader) error"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc GenerateKey(priv *PrivateKey, rand io.Reader) error\n```\n\nGenerateKey generates a public&private key pair. The Parameters of the PrivateKey must already be valid (see GenerateParameters). \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#fermatInverse",
              "documentation": {
                "identifier": "fermatInverse",
                "newPage": false,
                "searchKey": "dsa.fermatInverse",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fermatInverse(k, P *big.Int) *big.Int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fermatInverse(k, P *big.Int) *big.Int\n```\n\nfermatInverse calculates the inverse of k in GF(P) using Fermat's method. This has better constant-time properties than Euclid's method (implemented in math/big.Int.ModInverse) although math/big itself isn't strictly constant-time so it's not perfect. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#Sign",
              "documentation": {
                "identifier": "Sign",
                "newPage": false,
                "searchKey": "dsa.Sign",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Sign(rand io.Reader, priv *PrivateKey, hash []byte) (r, s *big.Int, err error)\n```\n\nSign signs an arbitrary length hash (which should be the result of hashing a larger message) using the private key, priv. It returns the signature as a pair of integers. The security of the private key depends on the entropy of rand. \n\nNote that FIPS 186-3 section 4.6 specifies that the hash should be truncated to the byte-length of the subgroup. This function does not perform that truncation itself. \n\nBe aware that calling Sign with an attacker-controlled PrivateKey may require an arbitrary amount of CPU. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#Verify",
              "documentation": {
                "identifier": "Verify",
                "newPage": false,
                "searchKey": "dsa.Verify",
                "tags": null
              },
              "label": {
                "kind": "plaintext",
                "value": "func Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc Verify(pub *PublicKey, hash []byte, r, s *big.Int) bool\n```\n\nVerify verifies the signature in r, s of hash using the public key, pub. It reports whether the signature is valid. \n\nNote that FIPS 186-3 section 4.6 specifies that the hash should be truncated to the byte-length of the subgroup. This function does not perform that truncation itself. \n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#testSignAndVerify",
              "documentation": {
                "identifier": "testSignAndVerify",
                "newPage": false,
                "searchKey": "dsa.testSignAndVerify",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testSignAndVerify(t *testing.T, i int, priv *PrivateKey)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testSignAndVerify(t *testing.T, i int, priv *PrivateKey)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#testParameterGeneration",
              "documentation": {
                "identifier": "testParameterGeneration",
                "newPage": false,
                "searchKey": "dsa.testParameterGeneration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func testParameterGeneration(t *testing.T, sizes ParameterSizes, L, N int)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc testParameterGeneration(t *testing.T, sizes ParameterSizes, L, N int)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#TestParameterGeneration",
              "documentation": {
                "identifier": "TestParameterGeneration",
                "newPage": false,
                "searchKey": "dsa.TestParameterGeneration",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestParameterGeneration(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestParameterGeneration(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#fromHex",
              "documentation": {
                "identifier": "fromHex",
                "newPage": false,
                "searchKey": "dsa.fromHex",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func fromHex(s string) *big.Int"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc fromHex(s string) *big.Int\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#TestSignAndVerify",
              "documentation": {
                "identifier": "TestSignAndVerify",
                "newPage": false,
                "searchKey": "dsa.TestSignAndVerify",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignAndVerify(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignAndVerify(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#TestSignAndVerifyWithBadPublicKey",
              "documentation": {
                "identifier": "TestSignAndVerifyWithBadPublicKey",
                "newPage": false,
                "searchKey": "dsa.TestSignAndVerifyWithBadPublicKey",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSignAndVerifyWithBadPublicKey(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSignAndVerifyWithBadPublicKey(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          },
          {
            "node": {
              "pathID": "/crypto/dsa#TestSigningWithDegenerateKeys",
              "documentation": {
                "identifier": "TestSigningWithDegenerateKeys",
                "newPage": false,
                "searchKey": "dsa.TestSigningWithDegenerateKeys",
                "tags": [
                  "private"
                ]
              },
              "label": {
                "kind": "plaintext",
                "value": "func TestSigningWithDegenerateKeys(t *testing.T)"
              },
              "detail": {
                "kind": "markdown",
                "value": "```Go\nfunc TestSigningWithDegenerateKeys(t *testing.T)\n```\n\n"
              },
              "children": null
            }
          }
        ]
      }
    }
  ]
}
